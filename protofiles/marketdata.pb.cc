// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: marketdata.proto

#include "marketdata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
PROTOBUF_CONSTEXPR MarketDataRequest::MarketDataRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MarketDataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDataRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDataRequestDefaultTypeInternal() {}
  union {
    MarketDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDataRequestDefaultTypeInternal _MarketDataRequest_default_instance_;
PROTOBUF_CONSTEXPR MarketDataServerSideStreamRequest::MarketDataServerSideStreamRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subscribe_candles_request_)*/nullptr
  , /*decltype(_impl_.subscribe_order_book_request_)*/nullptr
  , /*decltype(_impl_.subscribe_trades_request_)*/nullptr
  , /*decltype(_impl_.subscribe_info_request_)*/nullptr
  , /*decltype(_impl_.subscribe_last_price_request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketDataServerSideStreamRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDataServerSideStreamRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDataServerSideStreamRequestDefaultTypeInternal() {}
  union {
    MarketDataServerSideStreamRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDataServerSideStreamRequestDefaultTypeInternal _MarketDataServerSideStreamRequest_default_instance_;
PROTOBUF_CONSTEXPR MarketDataResponse::MarketDataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MarketDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDataResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDataResponseDefaultTypeInternal() {}
  union {
    MarketDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDataResponseDefaultTypeInternal _MarketDataResponse_default_instance_;
PROTOBUF_CONSTEXPR SubscribeCandlesRequest::SubscribeCandlesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instruments_)*/{}
  , /*decltype(_impl_.subscription_action_)*/0
  , /*decltype(_impl_.waiting_close_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeCandlesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeCandlesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeCandlesRequestDefaultTypeInternal() {}
  union {
    SubscribeCandlesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeCandlesRequestDefaultTypeInternal _SubscribeCandlesRequest_default_instance_;
PROTOBUF_CONSTEXPR CandleInstrument::CandleInstrument(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.interval_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CandleInstrumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CandleInstrumentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CandleInstrumentDefaultTypeInternal() {}
  union {
    CandleInstrument _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CandleInstrumentDefaultTypeInternal _CandleInstrument_default_instance_;
PROTOBUF_CONSTEXPR SubscribeCandlesResponse::SubscribeCandlesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.candles_subscriptions_)*/{}
  , /*decltype(_impl_.tracking_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeCandlesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeCandlesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeCandlesResponseDefaultTypeInternal() {}
  union {
    SubscribeCandlesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeCandlesResponseDefaultTypeInternal _SubscribeCandlesResponse_default_instance_;
PROTOBUF_CONSTEXPR CandleSubscription::CandleSubscription(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subscription_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.interval_)*/0
  , /*decltype(_impl_.subscription_status_)*/0
  , /*decltype(_impl_.waiting_close_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CandleSubscriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CandleSubscriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CandleSubscriptionDefaultTypeInternal() {}
  union {
    CandleSubscription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CandleSubscriptionDefaultTypeInternal _CandleSubscription_default_instance_;
PROTOBUF_CONSTEXPR SubscribeOrderBookRequest::SubscribeOrderBookRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instruments_)*/{}
  , /*decltype(_impl_.subscription_action_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeOrderBookRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeOrderBookRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeOrderBookRequestDefaultTypeInternal() {}
  union {
    SubscribeOrderBookRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeOrderBookRequestDefaultTypeInternal _SubscribeOrderBookRequest_default_instance_;
PROTOBUF_CONSTEXPR OrderBookInstrument::OrderBookInstrument(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.depth_)*/0
  , /*decltype(_impl_.order_book_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderBookInstrumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderBookInstrumentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderBookInstrumentDefaultTypeInternal() {}
  union {
    OrderBookInstrument _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderBookInstrumentDefaultTypeInternal _OrderBookInstrument_default_instance_;
PROTOBUF_CONSTEXPR SubscribeOrderBookResponse::SubscribeOrderBookResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_book_subscriptions_)*/{}
  , /*decltype(_impl_.tracking_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeOrderBookResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeOrderBookResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeOrderBookResponseDefaultTypeInternal() {}
  union {
    SubscribeOrderBookResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeOrderBookResponseDefaultTypeInternal _SubscribeOrderBookResponse_default_instance_;
PROTOBUF_CONSTEXPR OrderBookSubscription::OrderBookSubscription(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subscription_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.depth_)*/0
  , /*decltype(_impl_.subscription_status_)*/0
  , /*decltype(_impl_.order_book_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderBookSubscriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderBookSubscriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderBookSubscriptionDefaultTypeInternal() {}
  union {
    OrderBookSubscription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderBookSubscriptionDefaultTypeInternal _OrderBookSubscription_default_instance_;
PROTOBUF_CONSTEXPR SubscribeTradesRequest::SubscribeTradesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instruments_)*/{}
  , /*decltype(_impl_.subscription_action_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeTradesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeTradesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeTradesRequestDefaultTypeInternal() {}
  union {
    SubscribeTradesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeTradesRequestDefaultTypeInternal _SubscribeTradesRequest_default_instance_;
PROTOBUF_CONSTEXPR TradeInstrument::TradeInstrument(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TradeInstrumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradeInstrumentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradeInstrumentDefaultTypeInternal() {}
  union {
    TradeInstrument _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradeInstrumentDefaultTypeInternal _TradeInstrument_default_instance_;
PROTOBUF_CONSTEXPR SubscribeTradesResponse::SubscribeTradesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trade_subscriptions_)*/{}
  , /*decltype(_impl_.tracking_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeTradesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeTradesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeTradesResponseDefaultTypeInternal() {}
  union {
    SubscribeTradesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeTradesResponseDefaultTypeInternal _SubscribeTradesResponse_default_instance_;
PROTOBUF_CONSTEXPR TradeSubscription::TradeSubscription(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subscription_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subscription_status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TradeSubscriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradeSubscriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradeSubscriptionDefaultTypeInternal() {}
  union {
    TradeSubscription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradeSubscriptionDefaultTypeInternal _TradeSubscription_default_instance_;
PROTOBUF_CONSTEXPR SubscribeInfoRequest::SubscribeInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instruments_)*/{}
  , /*decltype(_impl_.subscription_action_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeInfoRequestDefaultTypeInternal() {}
  union {
    SubscribeInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeInfoRequestDefaultTypeInternal _SubscribeInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR InfoInstrument::InfoInstrument(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InfoInstrumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoInstrumentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoInstrumentDefaultTypeInternal() {}
  union {
    InfoInstrument _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoInstrumentDefaultTypeInternal _InfoInstrument_default_instance_;
PROTOBUF_CONSTEXPR SubscribeInfoResponse::SubscribeInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_subscriptions_)*/{}
  , /*decltype(_impl_.tracking_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeInfoResponseDefaultTypeInternal() {}
  union {
    SubscribeInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeInfoResponseDefaultTypeInternal _SubscribeInfoResponse_default_instance_;
PROTOBUF_CONSTEXPR InfoSubscription::InfoSubscription(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subscription_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subscription_status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InfoSubscriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoSubscriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoSubscriptionDefaultTypeInternal() {}
  union {
    InfoSubscription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoSubscriptionDefaultTypeInternal _InfoSubscription_default_instance_;
PROTOBUF_CONSTEXPR SubscribeLastPriceRequest::SubscribeLastPriceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instruments_)*/{}
  , /*decltype(_impl_.subscription_action_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeLastPriceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeLastPriceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeLastPriceRequestDefaultTypeInternal() {}
  union {
    SubscribeLastPriceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeLastPriceRequestDefaultTypeInternal _SubscribeLastPriceRequest_default_instance_;
PROTOBUF_CONSTEXPR LastPriceInstrument::LastPriceInstrument(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LastPriceInstrumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LastPriceInstrumentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LastPriceInstrumentDefaultTypeInternal() {}
  union {
    LastPriceInstrument _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LastPriceInstrumentDefaultTypeInternal _LastPriceInstrument_default_instance_;
PROTOBUF_CONSTEXPR SubscribeLastPriceResponse::SubscribeLastPriceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.last_price_subscriptions_)*/{}
  , /*decltype(_impl_.tracking_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeLastPriceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeLastPriceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeLastPriceResponseDefaultTypeInternal() {}
  union {
    SubscribeLastPriceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeLastPriceResponseDefaultTypeInternal _SubscribeLastPriceResponse_default_instance_;
PROTOBUF_CONSTEXPR LastPriceSubscription::LastPriceSubscription(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subscription_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subscription_status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LastPriceSubscriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LastPriceSubscriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LastPriceSubscriptionDefaultTypeInternal() {}
  union {
    LastPriceSubscription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LastPriceSubscriptionDefaultTypeInternal _LastPriceSubscription_default_instance_;
PROTOBUF_CONSTEXPR Candle::Candle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.open_)*/nullptr
  , /*decltype(_impl_.high_)*/nullptr
  , /*decltype(_impl_.low_)*/nullptr
  , /*decltype(_impl_.close_)*/nullptr
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.last_trade_ts_)*/nullptr
  , /*decltype(_impl_.volume_)*/int64_t{0}
  , /*decltype(_impl_.interval_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CandleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CandleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CandleDefaultTypeInternal() {}
  union {
    Candle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CandleDefaultTypeInternal _Candle_default_instance_;
PROTOBUF_CONSTEXPR OrderBook::OrderBook(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bids_)*/{}
  , /*decltype(_impl_.asks_)*/{}
  , /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.limit_up_)*/nullptr
  , /*decltype(_impl_.limit_down_)*/nullptr
  , /*decltype(_impl_.depth_)*/0
  , /*decltype(_impl_.is_consistent_)*/false
  , /*decltype(_impl_.order_book_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderBookDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderBookDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderBookDefaultTypeInternal() {}
  union {
    OrderBook _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderBookDefaultTypeInternal _OrderBook_default_instance_;
PROTOBUF_CONSTEXPR Order::Order(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.quantity_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderDefaultTypeInternal() {}
  union {
    Order _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderDefaultTypeInternal _Order_default_instance_;
PROTOBUF_CONSTEXPR Trade::Trade(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.quantity_)*/int64_t{0}
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TradeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradeDefaultTypeInternal() {}
  union {
    Trade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradeDefaultTypeInternal _Trade_default_instance_;
PROTOBUF_CONSTEXPR TradingStatus::TradingStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.trading_status_)*/0
  , /*decltype(_impl_.limit_order_available_flag_)*/false
  , /*decltype(_impl_.market_order_available_flag_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TradingStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradingStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradingStatusDefaultTypeInternal() {}
  union {
    TradingStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradingStatusDefaultTypeInternal _TradingStatus_default_instance_;
PROTOBUF_CONSTEXPR GetCandlesRequest::GetCandlesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_)*/nullptr
  , /*decltype(_impl_.to_)*/nullptr
  , /*decltype(_impl_.interval_)*/0
  , /*decltype(_impl_.candle_source_type_)*/0} {}
struct GetCandlesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCandlesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCandlesRequestDefaultTypeInternal() {}
  union {
    GetCandlesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCandlesRequestDefaultTypeInternal _GetCandlesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetCandlesResponse::GetCandlesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.candles_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetCandlesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCandlesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCandlesResponseDefaultTypeInternal() {}
  union {
    GetCandlesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCandlesResponseDefaultTypeInternal _GetCandlesResponse_default_instance_;
PROTOBUF_CONSTEXPR HistoricCandle::HistoricCandle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.open_)*/nullptr
  , /*decltype(_impl_.high_)*/nullptr
  , /*decltype(_impl_.low_)*/nullptr
  , /*decltype(_impl_.close_)*/nullptr
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.volume_)*/int64_t{0}
  , /*decltype(_impl_.is_complete_)*/false
  , /*decltype(_impl_.candle_source_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HistoricCandleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HistoricCandleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HistoricCandleDefaultTypeInternal() {}
  union {
    HistoricCandle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HistoricCandleDefaultTypeInternal _HistoricCandle_default_instance_;
PROTOBUF_CONSTEXPR GetLastPricesRequest::GetLastPricesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{}
  , /*decltype(_impl_.instrument_id_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetLastPricesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLastPricesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLastPricesRequestDefaultTypeInternal() {}
  union {
    GetLastPricesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLastPricesRequestDefaultTypeInternal _GetLastPricesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetLastPricesResponse::GetLastPricesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.last_prices_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetLastPricesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLastPricesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLastPricesResponseDefaultTypeInternal() {}
  union {
    GetLastPricesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLastPricesResponseDefaultTypeInternal _GetLastPricesResponse_default_instance_;
PROTOBUF_CONSTEXPR LastPrice::LastPrice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LastPriceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LastPriceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LastPriceDefaultTypeInternal() {}
  union {
    LastPrice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LastPriceDefaultTypeInternal _LastPrice_default_instance_;
PROTOBUF_CONSTEXPR GetOrderBookRequest::GetOrderBookRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.depth_)*/0} {}
struct GetOrderBookRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetOrderBookRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetOrderBookRequestDefaultTypeInternal() {}
  union {
    GetOrderBookRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetOrderBookRequestDefaultTypeInternal _GetOrderBookRequest_default_instance_;
PROTOBUF_CONSTEXPR GetOrderBookResponse::GetOrderBookResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bids_)*/{}
  , /*decltype(_impl_.asks_)*/{}
  , /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_price_)*/nullptr
  , /*decltype(_impl_.close_price_)*/nullptr
  , /*decltype(_impl_.limit_up_)*/nullptr
  , /*decltype(_impl_.limit_down_)*/nullptr
  , /*decltype(_impl_.last_price_ts_)*/nullptr
  , /*decltype(_impl_.close_price_ts_)*/nullptr
  , /*decltype(_impl_.orderbook_ts_)*/nullptr
  , /*decltype(_impl_.depth_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetOrderBookResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetOrderBookResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetOrderBookResponseDefaultTypeInternal() {}
  union {
    GetOrderBookResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetOrderBookResponseDefaultTypeInternal _GetOrderBookResponse_default_instance_;
PROTOBUF_CONSTEXPR GetTradingStatusRequest::GetTradingStatusRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct GetTradingStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTradingStatusRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTradingStatusRequestDefaultTypeInternal() {}
  union {
    GetTradingStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTradingStatusRequestDefaultTypeInternal _GetTradingStatusRequest_default_instance_;
PROTOBUF_CONSTEXPR GetTradingStatusesRequest::GetTradingStatusesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instrument_id_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTradingStatusesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTradingStatusesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTradingStatusesRequestDefaultTypeInternal() {}
  union {
    GetTradingStatusesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTradingStatusesRequestDefaultTypeInternal _GetTradingStatusesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetTradingStatusesResponse::GetTradingStatusesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trading_statuses_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTradingStatusesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTradingStatusesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTradingStatusesResponseDefaultTypeInternal() {}
  union {
    GetTradingStatusesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTradingStatusesResponseDefaultTypeInternal _GetTradingStatusesResponse_default_instance_;
PROTOBUF_CONSTEXPR GetTradingStatusResponse::GetTradingStatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trading_status_)*/0
  , /*decltype(_impl_.limit_order_available_flag_)*/false
  , /*decltype(_impl_.market_order_available_flag_)*/false
  , /*decltype(_impl_.api_trade_available_flag_)*/false
  , /*decltype(_impl_.bestprice_order_available_flag_)*/false
  , /*decltype(_impl_.only_best_price_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTradingStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTradingStatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTradingStatusResponseDefaultTypeInternal() {}
  union {
    GetTradingStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTradingStatusResponseDefaultTypeInternal _GetTradingStatusResponse_default_instance_;
PROTOBUF_CONSTEXPR GetLastTradesRequest::GetLastTradesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_)*/nullptr
  , /*decltype(_impl_.to_)*/nullptr} {}
struct GetLastTradesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLastTradesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLastTradesRequestDefaultTypeInternal() {}
  union {
    GetLastTradesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLastTradesRequestDefaultTypeInternal _GetLastTradesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetLastTradesResponse::GetLastTradesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trades_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetLastTradesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLastTradesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLastTradesResponseDefaultTypeInternal() {}
  union {
    GetLastTradesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLastTradesResponseDefaultTypeInternal _GetLastTradesResponse_default_instance_;
PROTOBUF_CONSTEXPR GetMySubscriptions::GetMySubscriptions(
    ::_pbi::ConstantInitialized) {}
struct GetMySubscriptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMySubscriptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMySubscriptionsDefaultTypeInternal() {}
  union {
    GetMySubscriptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMySubscriptionsDefaultTypeInternal _GetMySubscriptions_default_instance_;
PROTOBUF_CONSTEXPR GetClosePricesRequest::GetClosePricesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instruments_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetClosePricesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetClosePricesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetClosePricesRequestDefaultTypeInternal() {}
  union {
    GetClosePricesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetClosePricesRequestDefaultTypeInternal _GetClosePricesRequest_default_instance_;
PROTOBUF_CONSTEXPR InstrumentClosePriceRequest::InstrumentClosePriceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instrument_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InstrumentClosePriceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentClosePriceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentClosePriceRequestDefaultTypeInternal() {}
  union {
    InstrumentClosePriceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentClosePriceRequestDefaultTypeInternal _InstrumentClosePriceRequest_default_instance_;
PROTOBUF_CONSTEXPR GetClosePricesResponse::GetClosePricesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.close_prices_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetClosePricesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetClosePricesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetClosePricesResponseDefaultTypeInternal() {}
  union {
    GetClosePricesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetClosePricesResponseDefaultTypeInternal _GetClosePricesResponse_default_instance_;
PROTOBUF_CONSTEXPR InstrumentClosePriceResponse::InstrumentClosePriceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.figi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.evening_session_price_)*/nullptr
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InstrumentClosePriceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentClosePriceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentClosePriceResponseDefaultTypeInternal() {}
  union {
    InstrumentClosePriceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentClosePriceResponseDefaultTypeInternal _InstrumentClosePriceResponse_default_instance_;
PROTOBUF_CONSTEXPR GetTechAnalysisRequest_Smoothing::GetTechAnalysisRequest_Smoothing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fast_length_)*/0
  , /*decltype(_impl_.slow_length_)*/0
  , /*decltype(_impl_.signal_smoothing_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTechAnalysisRequest_SmoothingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTechAnalysisRequest_SmoothingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTechAnalysisRequest_SmoothingDefaultTypeInternal() {}
  union {
    GetTechAnalysisRequest_Smoothing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTechAnalysisRequest_SmoothingDefaultTypeInternal _GetTechAnalysisRequest_Smoothing_default_instance_;
PROTOBUF_CONSTEXPR GetTechAnalysisRequest_Deviation::GetTechAnalysisRequest_Deviation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.deviation_multiplier_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTechAnalysisRequest_DeviationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTechAnalysisRequest_DeviationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTechAnalysisRequest_DeviationDefaultTypeInternal() {}
  union {
    GetTechAnalysisRequest_Deviation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTechAnalysisRequest_DeviationDefaultTypeInternal _GetTechAnalysisRequest_Deviation_default_instance_;
PROTOBUF_CONSTEXPR GetTechAnalysisRequest::GetTechAnalysisRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instrument_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_)*/nullptr
  , /*decltype(_impl_.to_)*/nullptr
  , /*decltype(_impl_.deviation_)*/nullptr
  , /*decltype(_impl_.smoothing_)*/nullptr
  , /*decltype(_impl_.indicator_type_)*/0
  , /*decltype(_impl_.interval_)*/0
  , /*decltype(_impl_.type_of_price_)*/0
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTechAnalysisRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTechAnalysisRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTechAnalysisRequestDefaultTypeInternal() {}
  union {
    GetTechAnalysisRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTechAnalysisRequestDefaultTypeInternal _GetTechAnalysisRequest_default_instance_;
PROTOBUF_CONSTEXPR GetTechAnalysisResponse_TechAnalysisItem::GetTechAnalysisResponse_TechAnalysisItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.middle_band_)*/nullptr
  , /*decltype(_impl_.upper_band_)*/nullptr
  , /*decltype(_impl_.lower_band_)*/nullptr
  , /*decltype(_impl_.signal_)*/nullptr
  , /*decltype(_impl_.macd_)*/nullptr} {}
struct GetTechAnalysisResponse_TechAnalysisItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTechAnalysisResponse_TechAnalysisItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTechAnalysisResponse_TechAnalysisItemDefaultTypeInternal() {}
  union {
    GetTechAnalysisResponse_TechAnalysisItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTechAnalysisResponse_TechAnalysisItemDefaultTypeInternal _GetTechAnalysisResponse_TechAnalysisItem_default_instance_;
PROTOBUF_CONSTEXPR GetTechAnalysisResponse::GetTechAnalysisResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.technical_indicators_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTechAnalysisResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTechAnalysisResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTechAnalysisResponseDefaultTypeInternal() {}
  union {
    GetTechAnalysisResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTechAnalysisResponseDefaultTypeInternal _GetTechAnalysisResponse_default_instance_;
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
static ::_pb::Metadata file_level_metadata_marketdata_2eproto[52];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_marketdata_2eproto[11];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_marketdata_2eproto = nullptr;

const uint32_t TableStruct_marketdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest, _impl_.subscribe_candles_request_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest, _impl_.subscribe_order_book_request_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest, _impl_.subscribe_trades_request_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest, _impl_.subscribe_info_request_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest, _impl_.subscribe_last_price_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataResponse, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest, _impl_.subscription_action_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest, _impl_.instruments_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest, _impl_.waiting_close_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CandleInstrument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CandleInstrument, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CandleInstrument, _impl_.interval_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CandleInstrument, _impl_.instrument_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesResponse, _impl_.tracking_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesResponse, _impl_.candles_subscriptions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CandleSubscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CandleSubscription, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CandleSubscription, _impl_.interval_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CandleSubscription, _impl_.subscription_status_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CandleSubscription, _impl_.instrument_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CandleSubscription, _impl_.waiting_close_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CandleSubscription, _impl_.stream_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CandleSubscription, _impl_.subscription_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest, _impl_.subscription_action_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest, _impl_.instruments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookInstrument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookInstrument, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookInstrument, _impl_.depth_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookInstrument, _impl_.instrument_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookInstrument, _impl_.order_book_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookResponse, _impl_.tracking_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookResponse, _impl_.order_book_subscriptions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookSubscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookSubscription, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookSubscription, _impl_.depth_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookSubscription, _impl_.subscription_status_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookSubscription, _impl_.instrument_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookSubscription, _impl_.stream_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookSubscription, _impl_.subscription_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookSubscription, _impl_.order_book_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest, _impl_.subscription_action_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest, _impl_.instruments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradeInstrument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradeInstrument, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradeInstrument, _impl_.instrument_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeTradesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeTradesResponse, _impl_.tracking_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeTradesResponse, _impl_.trade_subscriptions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradeSubscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradeSubscription, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradeSubscription, _impl_.subscription_status_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradeSubscription, _impl_.instrument_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradeSubscription, _impl_.stream_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradeSubscription, _impl_.subscription_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest, _impl_.subscription_action_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest, _impl_.instruments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InfoInstrument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InfoInstrument, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InfoInstrument, _impl_.instrument_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeInfoResponse, _impl_.tracking_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeInfoResponse, _impl_.info_subscriptions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InfoSubscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InfoSubscription, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InfoSubscription, _impl_.subscription_status_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InfoSubscription, _impl_.instrument_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InfoSubscription, _impl_.stream_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InfoSubscription, _impl_.subscription_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest, _impl_.subscription_action_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest, _impl_.instruments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPriceInstrument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPriceInstrument, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPriceInstrument, _impl_.instrument_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceResponse, _impl_.tracking_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceResponse, _impl_.last_price_subscriptions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPriceSubscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPriceSubscription, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPriceSubscription, _impl_.subscription_status_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPriceSubscription, _impl_.instrument_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPriceSubscription, _impl_.stream_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPriceSubscription, _impl_.subscription_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Candle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Candle, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Candle, _impl_.interval_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Candle, _impl_.open_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Candle, _impl_.high_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Candle, _impl_.low_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Candle, _impl_.close_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Candle, _impl_.volume_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Candle, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Candle, _impl_.last_trade_ts_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Candle, _impl_.instrument_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBook, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBook, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBook, _impl_.depth_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBook, _impl_.is_consistent_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBook, _impl_.bids_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBook, _impl_.asks_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBook, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBook, _impl_.limit_up_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBook, _impl_.limit_down_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBook, _impl_.instrument_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBook, _impl_.order_book_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Order, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Order, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Order, _impl_.quantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Trade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Trade, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Trade, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Trade, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Trade, _impl_.quantity_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Trade, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Trade, _impl_.instrument_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingStatus, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingStatus, _impl_.trading_status_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingStatus, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingStatus, _impl_.limit_order_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingStatus, _impl_.market_order_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingStatus, _impl_.instrument_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest, _impl_.interval_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest, _impl_.instrument_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest, _impl_.candle_source_type_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse, _impl_.candles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::HistoricCandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::HistoricCandle, _impl_.open_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::HistoricCandle, _impl_.high_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::HistoricCandle, _impl_.low_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::HistoricCandle, _impl_.close_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::HistoricCandle, _impl_.volume_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::HistoricCandle, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::HistoricCandle, _impl_.is_complete_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::HistoricCandle, _impl_.candle_source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest, _impl_.instrument_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse, _impl_.last_prices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPrice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPrice, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPrice, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPrice, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPrice, _impl_.instrument_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest, _impl_.depth_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest, _impl_.instrument_id_),
  0,
  ~0u,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _impl_.depth_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _impl_.bids_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _impl_.asks_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _impl_.last_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _impl_.close_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _impl_.limit_up_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _impl_.limit_down_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _impl_.last_price_ts_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _impl_.close_price_ts_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _impl_.orderbook_ts_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _impl_.instrument_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest, _impl_.instrument_id_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest, _impl_.instrument_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse, _impl_.trading_statuses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse, _impl_.trading_status_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse, _impl_.limit_order_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse, _impl_.market_order_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse, _impl_.api_trade_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse, _impl_.instrument_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse, _impl_.bestprice_order_available_flag_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse, _impl_.only_best_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest, _impl_.instrument_id_),
  0,
  ~0u,
  ~0u,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse, _impl_.trades_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMySubscriptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest, _impl_.instruments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceRequest, _impl_.instrument_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse, _impl_.close_prices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceResponse, _impl_.figi_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceResponse, _impl_.instrument_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceResponse, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceResponse, _impl_.evening_session_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceResponse, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing, _impl_.fast_length_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing, _impl_.slow_length_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing, _impl_.signal_smoothing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Deviation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Deviation, _impl_.deviation_multiplier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest, _impl_.indicator_type_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest, _impl_.instrument_uid_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest, _impl_.interval_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest, _impl_.type_of_price_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest, _impl_.deviation_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest, _impl_.smoothing_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem, _impl_.middle_band_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem, _impl_.upper_band_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem, _impl_.lower_band_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem, _impl_.signal_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem, _impl_.macd_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse, _impl_.technical_indicators_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::MarketDataRequest)},
  { 13, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest)},
  { 24, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::MarketDataResponse)},
  { 42, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest)},
  { 51, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::CandleInstrument)},
  { 60, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesResponse)},
  { 68, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::CandleSubscription)},
  { 81, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest)},
  { 89, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::OrderBookInstrument)},
  { 99, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookResponse)},
  { 107, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::OrderBookSubscription)},
  { 120, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest)},
  { 128, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradeInstrument)},
  { 136, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::SubscribeTradesResponse)},
  { 144, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradeSubscription)},
  { 155, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest)},
  { 163, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::InfoInstrument)},
  { 171, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::SubscribeInfoResponse)},
  { 179, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::InfoSubscription)},
  { 190, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest)},
  { 198, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::LastPriceInstrument)},
  { 206, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceResponse)},
  { 214, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::LastPriceSubscription)},
  { 225, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Candle)},
  { 241, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::OrderBook)},
  { 257, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Order)},
  { 265, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Trade)},
  { 277, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradingStatus)},
  { 289, 301, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest)},
  { 307, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse)},
  { 314, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::HistoricCandle)},
  { 328, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest)},
  { 336, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse)},
  { 343, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::LastPrice)},
  { 353, 362, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest)},
  { 365, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse)},
  { 383, 391, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest)},
  { 393, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest)},
  { 400, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse)},
  { 407, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse)},
  { 421, 431, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest)},
  { 435, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse)},
  { 442, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetMySubscriptions)},
  { 448, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest)},
  { 455, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceRequest)},
  { 462, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse)},
  { 469, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceResponse)},
  { 480, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing)},
  { 489, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Deviation)},
  { 496, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest)},
  { 511, 523, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem)},
  { 529, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tinkoff::public_::invest::api::contract::v1::_MarketDataRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_MarketDataServerSideStreamRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_MarketDataResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_SubscribeCandlesRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_CandleInstrument_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_SubscribeCandlesResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_CandleSubscription_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_SubscribeOrderBookRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_OrderBookInstrument_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_SubscribeOrderBookResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_OrderBookSubscription_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_SubscribeTradesRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_TradeInstrument_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_SubscribeTradesResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_TradeSubscription_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_SubscribeInfoRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_InfoInstrument_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_SubscribeInfoResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_InfoSubscription_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_SubscribeLastPriceRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_LastPriceInstrument_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_SubscribeLastPriceResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_LastPriceSubscription_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_Candle_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_OrderBook_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_Order_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_Trade_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_TradingStatus_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetCandlesRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetCandlesResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_HistoricCandle_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetLastPricesRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetLastPricesResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_LastPrice_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetOrderBookRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetOrderBookResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetTradingStatusRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetTradingStatusesRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetTradingStatusesResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetTradingStatusResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetLastTradesRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetLastTradesResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetMySubscriptions_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetClosePricesRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_InstrumentClosePriceRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetClosePricesResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_InstrumentClosePriceResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetTechAnalysisRequest_Smoothing_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetTechAnalysisRequest_Deviation_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetTechAnalysisRequest_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetTechAnalysisResponse_TechAnalysisItem_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_GetTechAnalysisResponse_default_instance_._instance,
};

const char descriptor_table_protodef_marketdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020marketdata.proto\022&tinkoff.public_.inve"
  "st.api.contract.v1\032\037google/protobuf/time"
  "stamp.proto\032\014common.proto\032\037google/api/fi"
  "eld_behavior.proto\"\372\004\n\021MarketDataRequest"
  "\022d\n\031subscribe_candles_request\030\001 \001(\0132\?.ti"
  "nkoff.public_.invest.api.contract.v1.Sub"
  "scribeCandlesRequestH\000\022i\n\034subscribe_orde"
  "r_book_request\030\002 \001(\0132A.tinkoff.public_.i"
  "nvest.api.contract.v1.SubscribeOrderBook"
  "RequestH\000\022b\n\030subscribe_trades_request\030\003 "
  "\001(\0132>.tinkoff.public_.invest.api.contrac"
  "t.v1.SubscribeTradesRequestH\000\022^\n\026subscri"
  "be_info_request\030\004 \001(\0132<.tinkoff.public_."
  "invest.api.contract.v1.SubscribeInfoRequ"
  "estH\000\022i\n\034subscribe_last_price_request\030\005 "
  "\001(\0132A.tinkoff.public_.invest.api.contrac"
  "t.v1.SubscribeLastPriceRequestH\000\022Z\n\024get_"
  "my_subscriptions\030\006 \001(\0132:.tinkoff.public_"
  ".invest.api.contract.v1.GetMySubscriptio"
  "nsH\000B\t\n\007payload\"\231\004\n!MarketDataServerSide"
  "StreamRequest\022b\n\031subscribe_candles_reque"
  "st\030\001 \001(\0132\?.tinkoff.public_.invest.api.co"
  "ntract.v1.SubscribeCandlesRequest\022g\n\034sub"
  "scribe_order_book_request\030\002 \001(\0132A.tinkof"
  "f.public_.invest.api.contract.v1.Subscri"
  "beOrderBookRequest\022`\n\030subscribe_trades_r"
  "equest\030\003 \001(\0132>.tinkoff.public_.invest.ap"
  "i.contract.v1.SubscribeTradesRequest\022\\\n\026"
  "subscribe_info_request\030\004 \001(\0132<.tinkoff.p"
  "ublic_.invest.api.contract.v1.SubscribeI"
  "nfoRequest\022g\n\034subscribe_last_price_reque"
  "st\030\005 \001(\0132A.tinkoff.public_.invest.api.co"
  "ntract.v1.SubscribeLastPriceRequest\"\313\007\n\022"
  "MarketDataResponse\022f\n\032subscribe_candles_"
  "response\030\001 \001(\0132@.tinkoff.public_.invest."
  "api.contract.v1.SubscribeCandlesResponse"
  "H\000\022k\n\035subscribe_order_book_response\030\002 \001("
  "\0132B.tinkoff.public_.invest.api.contract."
  "v1.SubscribeOrderBookResponseH\000\022d\n\031subsc"
  "ribe_trades_response\030\003 \001(\0132\?.tinkoff.pub"
  "lic_.invest.api.contract.v1.SubscribeTra"
  "desResponseH\000\022`\n\027subscribe_info_response"
  "\030\004 \001(\0132=.tinkoff.public_.invest.api.cont"
  "ract.v1.SubscribeInfoResponseH\000\022@\n\006candl"
  "e\030\005 \001(\0132..tinkoff.public_.invest.api.con"
  "tract.v1.CandleH\000\022>\n\005trade\030\006 \001(\0132-.tinko"
  "ff.public_.invest.api.contract.v1.TradeH"
  "\000\022F\n\torderbook\030\007 \001(\01321.tinkoff.public_.i"
  "nvest.api.contract.v1.OrderBookH\000\022O\n\016tra"
  "ding_status\030\010 \001(\01325.tinkoff.public_.inve"
  "st.api.contract.v1.TradingStatusH\000\022<\n\004pi"
  "ng\030\t \001(\0132,.tinkoff.public_.invest.api.co"
  "ntract.v1.PingH\000\022k\n\035subscribe_last_price"
  "_response\030\n \001(\0132B.tinkoff.public_.invest"
  ".api.contract.v1.SubscribeLastPriceRespo"
  "nseH\000\022G\n\nlast_price\030\013 \001(\01321.tinkoff.publ"
  "ic_.invest.api.contract.v1.LastPriceH\000B\t"
  "\n\007payload\"\330\001\n\027SubscribeCandlesRequest\022W\n"
  "\023subscription_action\030\001 \001(\0162:.tinkoff.pub"
  "lic_.invest.api.contract.v1.Subscription"
  "Action\022M\n\013instruments\030\002 \003(\01328.tinkoff.pu"
  "blic_.invest.api.contract.v1.CandleInstr"
  "ument\022\025\n\rwaiting_close\030\003 \001(\010\"\213\001\n\020CandleI"
  "nstrument\022\020\n\004figi\030\001 \001(\tB\002\030\001\022N\n\010interval\030"
  "\002 \001(\0162<.tinkoff.public_.invest.api.contr"
  "act.v1.SubscriptionInterval\022\025\n\rinstrumen"
  "t_id\030\003 \001(\t\"\212\001\n\030SubscribeCandlesResponse\022"
  "\023\n\013tracking_id\030\001 \001(\t\022Y\n\025candles_subscrip"
  "tions\030\002 \003(\0132:.tinkoff.public_.invest.api"
  ".contract.v1.CandleSubscription\"\246\002\n\022Cand"
  "leSubscription\022\014\n\004figi\030\001 \001(\t\022N\n\010interval"
  "\030\002 \001(\0162<.tinkoff.public_.invest.api.cont"
  "ract.v1.SubscriptionInterval\022W\n\023subscrip"
  "tion_status\030\003 \001(\0162:.tinkoff.public_.inve"
  "st.api.contract.v1.SubscriptionStatus\022\026\n"
  "\016instrument_uid\030\004 \001(\t\022\025\n\rwaiting_close\030\005"
  " \001(\010\022\021\n\tstream_id\030\006 \001(\t\022\027\n\017subscription_"
  "id\030\007 \001(\t\"\306\001\n\031SubscribeOrderBookRequest\022W"
  "\n\023subscription_action\030\001 \001(\0162:.tinkoff.pu"
  "blic_.invest.api.contract.v1.Subscriptio"
  "nAction\022P\n\013instruments\030\002 \003(\0132;.tinkoff.p"
  "ublic_.invest.api.contract.v1.OrderBookI"
  "nstrument\"\235\001\n\023OrderBookInstrument\022\020\n\004fig"
  "i\030\001 \001(\tB\002\030\001\022\r\n\005depth\030\002 \001(\005\022\025\n\rinstrument"
  "_id\030\003 \001(\t\022N\n\017order_book_type\030\004 \001(\01625.tin"
  "koff.public_.invest.api.contract.v1.Orde"
  "rBookType\"\222\001\n\032SubscribeOrderBookResponse"
  "\022\023\n\013tracking_id\030\001 \001(\t\022_\n\030order_book_subs"
  "criptions\030\002 \003(\0132=.tinkoff.public_.invest"
  ".api.contract.v1.OrderBookSubscription\"\241"
  "\002\n\025OrderBookSubscription\022\014\n\004figi\030\001 \001(\t\022\r"
  "\n\005depth\030\002 \001(\005\022W\n\023subscription_status\030\003 \001"
  "(\0162:.tinkoff.public_.invest.api.contract"
  ".v1.SubscriptionStatus\022\026\n\016instrument_uid"
  "\030\004 \001(\t\022\021\n\tstream_id\030\005 \001(\t\022\027\n\017subscriptio"
  "n_id\030\006 \001(\t\022N\n\017order_book_type\030\007 \001(\01625.ti"
  "nkoff.public_.invest.api.contract.v1.Ord"
  "erBookType\"\277\001\n\026SubscribeTradesRequest\022W\n"
  "\023subscription_action\030\001 \001(\0162:.tinkoff.pub"
  "lic_.invest.api.contract.v1.Subscription"
  "Action\022L\n\013instruments\030\002 \003(\01327.tinkoff.pu"
  "blic_.invest.api.contract.v1.TradeInstru"
  "ment\":\n\017TradeInstrument\022\020\n\004figi\030\001 \001(\tB\002\030"
  "\001\022\025\n\rinstrument_id\030\002 \001(\t\"\206\001\n\027SubscribeTr"
  "adesResponse\022\023\n\013tracking_id\030\001 \001(\t\022V\n\023tra"
  "de_subscriptions\030\002 \003(\01329.tinkoff.public_"
  ".invest.api.contract.v1.TradeSubscriptio"
  "n\"\276\001\n\021TradeSubscription\022\014\n\004figi\030\001 \001(\t\022W\n"
  "\023subscription_status\030\002 \001(\0162:.tinkoff.pub"
  "lic_.invest.api.contract.v1.Subscription"
  "Status\022\026\n\016instrument_uid\030\003 \001(\t\022\021\n\tstream"
  "_id\030\004 \001(\t\022\027\n\017subscription_id\030\005 \001(\t\"\274\001\n\024S"
  "ubscribeInfoRequest\022W\n\023subscription_acti"
  "on\030\001 \001(\0162:.tinkoff.public_.invest.api.co"
  "ntract.v1.SubscriptionAction\022K\n\013instrume"
  "nts\030\002 \003(\01326.tinkoff.public_.invest.api.c"
  "ontract.v1.InfoInstrument\"9\n\016InfoInstrum"
  "ent\022\020\n\004figi\030\001 \001(\tB\002\030\001\022\025\n\rinstrument_id\030\002"
  " \001(\t\"\202\001\n\025SubscribeInfoResponse\022\023\n\013tracki"
  "ng_id\030\001 \001(\t\022T\n\022info_subscriptions\030\002 \003(\0132"
  "8.tinkoff.public_.invest.api.contract.v1"
  ".InfoSubscription\"\275\001\n\020InfoSubscription\022\014"
  "\n\004figi\030\001 \001(\t\022W\n\023subscription_status\030\002 \001("
  "\0162:.tinkoff.public_.invest.api.contract."
  "v1.SubscriptionStatus\022\026\n\016instrument_uid\030"
  "\003 \001(\t\022\021\n\tstream_id\030\004 \001(\t\022\027\n\017subscription"
  "_id\030\005 \001(\t\"\306\001\n\031SubscribeLastPriceRequest\022"
  "W\n\023subscription_action\030\001 \001(\0162:.tinkoff.p"
  "ublic_.invest.api.contract.v1.Subscripti"
  "onAction\022P\n\013instruments\030\002 \003(\0132;.tinkoff."
  "public_.invest.api.contract.v1.LastPrice"
  "Instrument\">\n\023LastPriceInstrument\022\020\n\004fig"
  "i\030\001 \001(\tB\002\030\001\022\025\n\rinstrument_id\030\002 \001(\t\"\222\001\n\032S"
  "ubscribeLastPriceResponse\022\023\n\013tracking_id"
  "\030\001 \001(\t\022_\n\030last_price_subscriptions\030\002 \003(\013"
  "2=.tinkoff.public_.invest.api.contract.v"
  "1.LastPriceSubscription\"\302\001\n\025LastPriceSub"
  "scription\022\014\n\004figi\030\001 \001(\t\022W\n\023subscription_"
  "status\030\002 \001(\0162:.tinkoff.public_.invest.ap"
  "i.contract.v1.SubscriptionStatus\022\026\n\016inst"
  "rument_uid\030\003 \001(\t\022\021\n\tstream_id\030\004 \001(\t\022\027\n\017s"
  "ubscription_id\030\005 \001(\t\"\357\003\n\006Candle\022\014\n\004figi\030"
  "\001 \001(\t\022N\n\010interval\030\002 \001(\0162<.tinkoff.public"
  "_.invest.api.contract.v1.SubscriptionInt"
  "erval\022\?\n\004open\030\003 \001(\01321.tinkoff.public_.in"
  "vest.api.contract.v1.Quotation\022\?\n\004high\030\004"
  " \001(\01321.tinkoff.public_.invest.api.contra"
  "ct.v1.Quotation\022>\n\003low\030\005 \001(\01321.tinkoff.p"
  "ublic_.invest.api.contract.v1.Quotation\022"
  "@\n\005close\030\006 \001(\01321.tinkoff.public_.invest."
  "api.contract.v1.Quotation\022\016\n\006volume\030\007 \001("
  "\003\022(\n\004time\030\010 \001(\0132\032.google.protobuf.Timest"
  "amp\0221\n\rlast_trade_ts\030\t \001(\0132\032.google.prot"
  "obuf.Timestamp\022\026\n\016instrument_uid\030\n \001(\t\"\327"
  "\003\n\tOrderBook\022\014\n\004figi\030\001 \001(\t\022\r\n\005depth\030\002 \001("
  "\005\022\025\n\ris_consistent\030\003 \001(\010\022;\n\004bids\030\004 \003(\0132-"
  ".tinkoff.public_.invest.api.contract.v1."
  "Order\022;\n\004asks\030\005 \003(\0132-.tinkoff.public_.in"
  "vest.api.contract.v1.Order\022(\n\004time\030\006 \001(\013"
  "2\032.google.protobuf.Timestamp\022C\n\010limit_up"
  "\030\007 \001(\01321.tinkoff.public_.invest.api.cont"
  "ract.v1.Quotation\022E\n\nlimit_down\030\010 \001(\01321."
  "tinkoff.public_.invest.api.contract.v1.Q"
  "uotation\022\026\n\016instrument_uid\030\t \001(\t\022N\n\017orde"
  "r_book_type\030\n \001(\01625.tinkoff.public_.inve"
  "st.api.contract.v1.OrderBookType\"[\n\005Orde"
  "r\022@\n\005price\030\001 \001(\01321.tinkoff.public_.inves"
  "t.api.contract.v1.Quotation\022\020\n\010quantity\030"
  "\002 \001(\003\"\366\001\n\005Trade\022\014\n\004figi\030\001 \001(\t\022I\n\tdirecti"
  "on\030\002 \001(\01626.tinkoff.public_.invest.api.co"
  "ntract.v1.TradeDirection\022@\n\005price\030\003 \001(\0132"
  "1.tinkoff.public_.invest.api.contract.v1"
  ".Quotation\022\020\n\010quantity\030\004 \001(\003\022(\n\004time\030\005 \001"
  "(\0132\032.google.protobuf.Timestamp\022\026\n\016instru"
  "ment_uid\030\006 \001(\t\"\377\001\n\rTradingStatus\022\014\n\004figi"
  "\030\001 \001(\t\022U\n\016trading_status\030\002 \001(\0162=.tinkoff"
  ".public_.invest.api.contract.v1.Security"
  "TradingStatus\022(\n\004time\030\003 \001(\0132\032.google.pro"
  "tobuf.Timestamp\022\"\n\032limit_order_available"
  "_flag\030\004 \001(\010\022#\n\033market_order_available_fl"
  "ag\030\005 \001(\010\022\026\n\016instrument_uid\030\006 \001(\t\"\327\003\n\021Get"
  "CandlesRequest\022\025\n\004figi\030\001 \001(\tB\002\030\001H\000\210\001\001\022-\n"
  "\004from\030\002 \001(\0132\032.google.protobuf.TimestampB"
  "\003\340A\002\022+\n\002to\030\003 \001(\0132\032.google.protobuf.Times"
  "tampB\003\340A\002\022M\n\010interval\030\004 \001(\01626.tinkoff.pu"
  "blic_.invest.api.contract.v1.CandleInter"
  "valB\003\340A\002\022\032\n\rinstrument_id\030\005 \001(\tH\001\210\001\001\022g\n\022"
  "candle_source_type\030\007 \001(\0162F.tinkoff.publi"
  "c_.invest.api.contract.v1.GetCandlesRequ"
  "est.CandleSourceH\002\210\001\001\"I\n\014CandleSource\022\035\n"
  "\031CANDLE_SOURCE_UNSPECIFIED\020\000\022\032\n\026CANDLE_S"
  "OURCE_EXCHANGE\020\001B\007\n\005_figiB\020\n\016_instrument"
  "_idB\025\n\023_candle_source_type\"]\n\022GetCandles"
  "Response\022G\n\007candles\030\001 \003(\01326.tinkoff.publ"
  "ic_.invest.api.contract.v1.HistoricCandl"
  "e\"\260\003\n\016HistoricCandle\022\?\n\004open\030\001 \001(\01321.tin"
  "koff.public_.invest.api.contract.v1.Quot"
  "ation\022\?\n\004high\030\002 \001(\01321.tinkoff.public_.in"
  "vest.api.contract.v1.Quotation\022>\n\003low\030\003 "
  "\001(\01321.tinkoff.public_.invest.api.contrac"
  "t.v1.Quotation\022@\n\005close\030\004 \001(\01321.tinkoff."
  "public_.invest.api.contract.v1.Quotation"
  "\022\016\n\006volume\030\005 \001(\003\022(\n\004time\030\006 \001(\0132\032.google."
  "protobuf.Timestamp\022\023\n\013is_complete\030\007 \001(\010\022"
  "K\n\rcandle_source\030\t \001(\01624.tinkoff.public_"
  ".invest.api.contract.v1.CandleSource\"\?\n\024"
  "GetLastPricesRequest\022\020\n\004figi\030\001 \003(\tB\002\030\001\022\025"
  "\n\rinstrument_id\030\002 \003(\t\"_\n\025GetLastPricesRe"
  "sponse\022F\n\013last_prices\030\001 \003(\01321.tinkoff.pu"
  "blic_.invest.api.contract.v1.LastPrice\"\235"
  "\001\n\tLastPrice\022\014\n\004figi\030\001 \001(\t\022@\n\005price\030\002 \001("
  "\01321.tinkoff.public_.invest.api.contract."
  "v1.Quotation\022(\n\004time\030\003 \001(\0132\032.google.prot"
  "obuf.Timestamp\022\026\n\016instrument_uid\030\013 \001(\t\"w"
  "\n\023GetOrderBookRequest\022\025\n\004figi\030\001 \001(\tB\002\030\001H"
  "\000\210\001\001\022\022\n\005depth\030\002 \001(\005B\003\340A\002\022\032\n\rinstrument_i"
  "d\030\003 \001(\tH\001\210\001\001B\007\n\005_figiB\020\n\016_instrument_id\""
  "\371\004\n\024GetOrderBookResponse\022\014\n\004figi\030\001 \001(\t\022\r"
  "\n\005depth\030\002 \001(\005\022;\n\004bids\030\003 \003(\0132-.tinkoff.pu"
  "blic_.invest.api.contract.v1.Order\022;\n\004as"
  "ks\030\004 \003(\0132-.tinkoff.public_.invest.api.co"
  "ntract.v1.Order\022E\n\nlast_price\030\005 \001(\01321.ti"
  "nkoff.public_.invest.api.contract.v1.Quo"
  "tation\022F\n\013close_price\030\006 \001(\01321.tinkoff.pu"
  "blic_.invest.api.contract.v1.Quotation\022C"
  "\n\010limit_up\030\007 \001(\01321.tinkoff.public_.inves"
  "t.api.contract.v1.Quotation\022E\n\nlimit_dow"
  "n\030\010 \001(\01321.tinkoff.public_.invest.api.con"
  "tract.v1.Quotation\0221\n\rlast_price_ts\030\025 \001("
  "\0132\032.google.protobuf.Timestamp\0222\n\016close_p"
  "rice_ts\030\026 \001(\0132\032.google.protobuf.Timestam"
  "p\0220\n\014orderbook_ts\030\027 \001(\0132\032.google.protobu"
  "f.Timestamp\022\026\n\016instrument_uid\030\t \001(\t\"g\n\027G"
  "etTradingStatusRequest\022\025\n\004figi\030\001 \001(\tB\002\030\001"
  "H\000\210\001\001\022\032\n\rinstrument_id\030\002 \001(\tH\001\210\001\001B\007\n\005_fi"
  "giB\020\n\016_instrument_id\"2\n\031GetTradingStatus"
  "esRequest\022\025\n\rinstrument_id\030\001 \003(\t\"x\n\032GetT"
  "radingStatusesResponse\022Z\n\020trading_status"
  "es\030\001 \003(\0132@.tinkoff.public_.invest.api.co"
  "ntract.v1.GetTradingStatusResponse\"\303\002\n\030G"
  "etTradingStatusResponse\022\014\n\004figi\030\001 \001(\t\022U\n"
  "\016trading_status\030\002 \001(\0162=.tinkoff.public_."
  "invest.api.contract.v1.SecurityTradingSt"
  "atus\022\"\n\032limit_order_available_flag\030\003 \001(\010"
  "\022#\n\033market_order_available_flag\030\004 \001(\010\022 \n"
  "\030api_trade_available_flag\030\005 \001(\010\022\026\n\016instr"
  "ument_uid\030\006 \001(\t\022&\n\036bestprice_order_avail"
  "able_flag\030\010 \001(\010\022\027\n\017only_best_price\030\t \001(\010"
  "\"\300\001\n\024GetLastTradesRequest\022\025\n\004figi\030\001 \001(\tB"
  "\002\030\001H\000\210\001\001\022-\n\004from\030\002 \001(\0132\032.google.protobuf"
  ".TimestampB\003\340A\002\022+\n\002to\030\003 \001(\0132\032.google.pro"
  "tobuf.TimestampB\003\340A\002\022\032\n\rinstrument_id\030\004 "
  "\001(\tH\001\210\001\001B\007\n\005_figiB\020\n\016_instrument_id\"V\n\025G"
  "etLastTradesResponse\022=\n\006trades\030\001 \003(\0132-.t"
  "inkoff.public_.invest.api.contract.v1.Tr"
  "ade\"\024\n\022GetMySubscriptions\"v\n\025GetClosePri"
  "cesRequest\022]\n\013instruments\030\001 \003(\0132C.tinkof"
  "f.public_.invest.api.contract.v1.Instrum"
  "entClosePriceRequestB\003\340A\002\"4\n\033InstrumentC"
  "losePriceRequest\022\025\n\rinstrument_id\030\001 \001(\t\""
  "t\n\026GetClosePricesResponse\022Z\n\014close_price"
  "s\030\001 \003(\0132D.tinkoff.public_.invest.api.con"
  "tract.v1.InstrumentClosePriceResponse\"\202\002"
  "\n\034InstrumentClosePriceResponse\022\014\n\004figi\030\001"
  " \001(\t\022\026\n\016instrument_uid\030\002 \001(\t\022@\n\005price\030\013 "
  "\001(\01321.tinkoff.public_.invest.api.contrac"
  "t.v1.Quotation\022P\n\025evening_session_price\030"
  "\014 \001(\01321.tinkoff.public_.invest.api.contr"
  "act.v1.Quotation\022(\n\004time\030\025 \001(\0132\032.google."
  "protobuf.Timestamp\"\364\014\n\026GetTechAnalysisRe"
  "quest\022i\n\016indicator_type\030\001 \001(\0162L.tinkoff."
  "public_.invest.api.contract.v1.GetTechAn"
  "alysisRequest.IndicatorTypeB\003\340A\002\022\033\n\016inst"
  "rument_uid\030\002 \001(\tB\003\340A\002\022-\n\004from\030\003 \001(\0132\032.go"
  "ogle.protobuf.TimestampB\003\340A\002\022+\n\002to\030\004 \001(\013"
  "2\032.google.protobuf.TimestampB\003\340A\002\022g\n\010int"
  "erval\030\005 \001(\0162P.tinkoff.public_.invest.api"
  ".contract.v1.GetTechAnalysisRequest.Indi"
  "catorIntervalB\003\340A\002\022f\n\rtype_of_price\030\006 \001("
  "\0162J.tinkoff.public_.invest.api.contract."
  "v1.GetTechAnalysisRequest.TypeOfPriceB\003\340"
  "A\002\022\016\n\006length\030\007 \001(\005\022[\n\tdeviation\030\010 \001(\0132H."
  "tinkoff.public_.invest.api.contract.v1.G"
  "etTechAnalysisRequest.Deviation\022[\n\tsmoot"
  "hing\030\t \001(\0132H.tinkoff.public_.invest.api."
  "contract.v1.GetTechAnalysisRequest.Smoot"
  "hing\032O\n\tSmoothing\022\023\n\013fast_length\030\001 \001(\005\022\023"
  "\n\013slow_length\030\002 \001(\005\022\030\n\020signal_smoothing\030"
  "\003 \001(\005\032\\\n\tDeviation\022O\n\024deviation_multipli"
  "er\030\001 \001(\01321.tinkoff.public_.invest.api.co"
  "ntract.v1.Quotation\"\333\003\n\021IndicatorInterva"
  "l\022\"\n\036INDICATOR_INTERVAL_UNSPECIFIED\020\000\022!\n"
  "\035INDICATOR_INTERVAL_ONE_MINUTE\020\001\022#\n\037INDI"
  "CATOR_INTERVAL_FIVE_MINUTES\020\002\022&\n\"INDICAT"
  "OR_INTERVAL_FIFTEEN_MINUTES\020\003\022\037\n\033INDICAT"
  "OR_INTERVAL_ONE_HOUR\020\004\022\036\n\032INDICATOR_INTE"
  "RVAL_ONE_DAY\020\005\022\034\n\030INDICATOR_INTERVAL_2_M"
  "IN\020\006\022\034\n\030INDICATOR_INTERVAL_3_MIN\020\007\022\035\n\031IN"
  "DICATOR_INTERVAL_10_MIN\020\010\022\035\n\031INDICATOR_I"
  "NTERVAL_30_MIN\020\t\022\035\n\031INDICATOR_INTERVAL_2"
  "_HOUR\020\n\022\035\n\031INDICATOR_INTERVAL_4_HOUR\020\013\022\033"
  "\n\027INDICATOR_INTERVAL_WEEK\020\014\022\034\n\030INDICATOR"
  "_INTERVAL_MONTH\020\r\"\243\001\n\013TypeOfPrice\022\035\n\031TYP"
  "E_OF_PRICE_UNSPECIFIED\020\000\022\027\n\023TYPE_OF_PRIC"
  "E_CLOSE\020\001\022\026\n\022TYPE_OF_PRICE_OPEN\020\002\022\026\n\022TYP"
  "E_OF_PRICE_HIGH\020\003\022\025\n\021TYPE_OF_PRICE_LOW\020\004"
  "\022\025\n\021TYPE_OF_PRICE_AVG\020\005\"\247\001\n\rIndicatorTyp"
  "e\022\036\n\032INDICATOR_TYPE_UNSPECIFIED\020\000\022\025\n\021IND"
  "ICATOR_TYPE_BB\020\001\022\026\n\022INDICATOR_TYPE_EMA\020\002"
  "\022\026\n\022INDICATOR_TYPE_RSI\020\003\022\027\n\023INDICATOR_TY"
  "PE_MACD\020\004\022\026\n\022INDICATOR_TYPE_SMA\020\005\"\202\005\n\027Ge"
  "tTechAnalysisResponse\022n\n\024technical_indic"
  "ators\030\001 \003(\0132P.tinkoff.public_.invest.api"
  ".contract.v1.GetTechAnalysisResponse.Tec"
  "hAnalysisItem\032\366\003\n\020TechAnalysisItem\022-\n\tti"
  "mestamp\030\001 \001(\0132\032.google.protobuf.Timestam"
  "p\022K\n\013middle_band\030\002 \001(\01321.tinkoff.public_"
  ".invest.api.contract.v1.QuotationH\000\210\001\001\022J"
  "\n\nupper_band\030\003 \001(\01321.tinkoff.public_.inv"
  "est.api.contract.v1.QuotationH\001\210\001\001\022J\n\nlo"
  "wer_band\030\004 \001(\01321.tinkoff.public_.invest."
  "api.contract.v1.QuotationH\002\210\001\001\022F\n\006signal"
  "\030\005 \001(\01321.tinkoff.public_.invest.api.cont"
  "ract.v1.QuotationH\003\210\001\001\022D\n\004macd\030\006 \001(\01321.t"
  "inkoff.public_.invest.api.contract.v1.Qu"
  "otationH\004\210\001\001B\016\n\014_middle_bandB\r\n\013_upper_b"
  "andB\r\n\013_lower_bandB\t\n\007_signalB\007\n\005_macd*\201"
  "\001\n\022SubscriptionAction\022#\n\037SUBSCRIPTION_AC"
  "TION_UNSPECIFIED\020\000\022!\n\035SUBSCRIPTION_ACTIO"
  "N_SUBSCRIBE\020\001\022#\n\037SUBSCRIPTION_ACTION_UNS"
  "UBSCRIBE\020\002*\210\004\n\024SubscriptionInterval\022%\n!S"
  "UBSCRIPTION_INTERVAL_UNSPECIFIED\020\000\022$\n SU"
  "BSCRIPTION_INTERVAL_ONE_MINUTE\020\001\022&\n\"SUBS"
  "CRIPTION_INTERVAL_FIVE_MINUTES\020\002\022)\n%SUBS"
  "CRIPTION_INTERVAL_FIFTEEN_MINUTES\020\003\022\"\n\036S"
  "UBSCRIPTION_INTERVAL_ONE_HOUR\020\004\022!\n\035SUBSC"
  "RIPTION_INTERVAL_ONE_DAY\020\005\022\037\n\033SUBSCRIPTI"
  "ON_INTERVAL_2_MIN\020\006\022\037\n\033SUBSCRIPTION_INTE"
  "RVAL_3_MIN\020\007\022 \n\034SUBSCRIPTION_INTERVAL_10"
  "_MIN\020\010\022 \n\034SUBSCRIPTION_INTERVAL_30_MIN\020\t"
  "\022 \n\034SUBSCRIPTION_INTERVAL_2_HOUR\020\n\022 \n\034SU"
  "BSCRIPTION_INTERVAL_4_HOUR\020\013\022\036\n\032SUBSCRIP"
  "TION_INTERVAL_WEEK\020\014\022\037\n\033SUBSCRIPTION_INT"
  "ERVAL_MONTH\020\r*\305\003\n\022SubscriptionStatus\022#\n\037"
  "SUBSCRIPTION_STATUS_UNSPECIFIED\020\000\022\037\n\033SUB"
  "SCRIPTION_STATUS_SUCCESS\020\001\022,\n(SUBSCRIPTI"
  "ON_STATUS_INSTRUMENT_NOT_FOUND\020\002\0226\n2SUBS"
  "CRIPTION_STATUS_SUBSCRIPTION_ACTION_IS_I"
  "NVALID\020\003\022(\n$SUBSCRIPTION_STATUS_DEPTH_IS"
  "_INVALID\020\004\022+\n\'SUBSCRIPTION_STATUS_INTERV"
  "AL_IS_INVALID\020\005\022)\n%SUBSCRIPTION_STATUS_L"
  "IMIT_IS_EXCEEDED\020\006\022&\n\"SUBSCRIPTION_STATU"
  "S_INTERNAL_ERROR\020\007\022)\n%SUBSCRIPTION_STATU"
  "S_TOO_MANY_REQUESTS\020\010\022.\n*SUBSCRIPTION_ST"
  "ATUS_SUBSCRIPTION_NOT_FOUND\020\t*d\n\016TradeDi"
  "rection\022\037\n\033TRADE_DIRECTION_UNSPECIFIED\020\000"
  "\022\027\n\023TRADE_DIRECTION_BUY\020\001\022\030\n\024TRADE_DIREC"
  "TION_SELL\020\002*\221\003\n\016CandleInterval\022\037\n\033CANDLE"
  "_INTERVAL_UNSPECIFIED\020\000\022\031\n\025CANDLE_INTERV"
  "AL_1_MIN\020\001\022\031\n\025CANDLE_INTERVAL_5_MIN\020\002\022\032\n"
  "\026CANDLE_INTERVAL_15_MIN\020\003\022\030\n\024CANDLE_INTE"
  "RVAL_HOUR\020\004\022\027\n\023CANDLE_INTERVAL_DAY\020\005\022\031\n\025"
  "CANDLE_INTERVAL_2_MIN\020\006\022\031\n\025CANDLE_INTERV"
  "AL_3_MIN\020\007\022\032\n\026CANDLE_INTERVAL_10_MIN\020\010\022\032"
  "\n\026CANDLE_INTERVAL_30_MIN\020\t\022\032\n\026CANDLE_INT"
  "ERVAL_2_HOUR\020\n\022\032\n\026CANDLE_INTERVAL_4_HOUR"
  "\020\013\022\030\n\024CANDLE_INTERVAL_WEEK\020\014\022\031\n\025CANDLE_I"
  "NTERVAL_MONTH\020\r*k\n\014CandleSource\022\035\n\031CANDL"
  "E_SOURCE_UNSPECIFIED\020\000\022\032\n\026CANDLE_SOURCE_"
  "EXCHANGE\020\001\022 \n\034CANDLE_SOURCE_DEALER_WEEKE"
  "ND\020\002*g\n\rOrderBookType\022\036\n\032ORDERBOOK_TYPE_"
  "UNSPECIFIED\020\000\022\033\n\027ORDERBOOK_TYPE_EXCHANGE"
  "\020\001\022\031\n\025ORDERBOOK_TYPE_DEALER\020\0022\240\t\n\021Market"
  "DataService\022\203\001\n\nGetCandles\0229.tinkoff.pub"
  "lic_.invest.api.contract.v1.GetCandlesRe"
  "quest\032:.tinkoff.public_.invest.api.contr"
  "act.v1.GetCandlesResponse\022\214\001\n\rGetLastPri"
  "ces\022<.tinkoff.public_.invest.api.contrac"
  "t.v1.GetLastPricesRequest\032=.tinkoff.publ"
  "ic_.invest.api.contract.v1.GetLastPrices"
  "Response\022\211\001\n\014GetOrderBook\022;.tinkoff.publ"
  "ic_.invest.api.contract.v1.GetOrderBookR"
  "equest\032<.tinkoff.public_.invest.api.cont"
  "ract.v1.GetOrderBookResponse\022\225\001\n\020GetTrad"
  "ingStatus\022\?.tinkoff.public_.invest.api.c"
  "ontract.v1.GetTradingStatusRequest\032@.tin"
  "koff.public_.invest.api.contract.v1.GetT"
  "radingStatusResponse\022\233\001\n\022GetTradingStatu"
  "ses\022A.tinkoff.public_.invest.api.contrac"
  "t.v1.GetTradingStatusesRequest\032B.tinkoff"
  ".public_.invest.api.contract.v1.GetTradi"
  "ngStatusesResponse\022\214\001\n\rGetLastTrades\022<.t"
  "inkoff.public_.invest.api.contract.v1.Ge"
  "tLastTradesRequest\032=.tinkoff.public_.inv"
  "est.api.contract.v1.GetLastTradesRespons"
  "e\022\217\001\n\016GetClosePrices\022=.tinkoff.public_.i"
  "nvest.api.contract.v1.GetClosePricesRequ"
  "est\032>.tinkoff.public_.invest.api.contrac"
  "t.v1.GetClosePricesResponse\022\222\001\n\017GetTechA"
  "nalysis\022>.tinkoff.public_.invest.api.con"
  "tract.v1.GetTechAnalysisRequest\032\?.tinkof"
  "f.public_.invest.api.contract.v1.GetTech"
  "AnalysisResponse2\321\002\n\027MarketDataStreamSer"
  "vice\022\215\001\n\020MarketDataStream\0229.tinkoff.publ"
  "ic_.invest.api.contract.v1.MarketDataReq"
  "uest\032:.tinkoff.public_.invest.api.contra"
  "ct.v1.MarketDataResponse(\0010\001\022\245\001\n\032MarketD"
  "ataServerSideStream\022I.tinkoff.public_.in"
  "vest.api.contract.v1.MarketDataServerSid"
  "eStreamRequest\032:.tinkoff.public_.invest."
  "api.contract.v1.MarketDataResponse0\001Ba\n\034"
  "ru.tinkoff.piapi.contract.v1P\001Z\014./;inves"
  "tapi\242\002\005TIAPI\252\002\024Tinkoff.InvestApi.V1\312\002\021Ti"
  "nkoff\\Invest\\V1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_marketdata_2eproto_deps[3] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_marketdata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_marketdata_2eproto = {
    false, false, 16543, descriptor_table_protodef_marketdata_2eproto,
    "marketdata.proto",
    &descriptor_table_marketdata_2eproto_once, descriptor_table_marketdata_2eproto_deps, 3, 52,
    schemas, file_default_instances, TableStruct_marketdata_2eproto::offsets,
    file_level_metadata_marketdata_2eproto, file_level_enum_descriptors_marketdata_2eproto,
    file_level_service_descriptors_marketdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_marketdata_2eproto_getter() {
  return &descriptor_table_marketdata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_marketdata_2eproto(&descriptor_table_marketdata_2eproto);
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetCandlesRequest_CandleSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_marketdata_2eproto);
  return file_level_enum_descriptors_marketdata_2eproto[0];
}
bool GetCandlesRequest_CandleSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GetCandlesRequest_CandleSource GetCandlesRequest::CANDLE_SOURCE_UNSPECIFIED;
constexpr GetCandlesRequest_CandleSource GetCandlesRequest::CANDLE_SOURCE_EXCHANGE;
constexpr GetCandlesRequest_CandleSource GetCandlesRequest::CandleSource_MIN;
constexpr GetCandlesRequest_CandleSource GetCandlesRequest::CandleSource_MAX;
constexpr int GetCandlesRequest::CandleSource_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetTechAnalysisRequest_IndicatorInterval_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_marketdata_2eproto);
  return file_level_enum_descriptors_marketdata_2eproto[1];
}
bool GetTechAnalysisRequest_IndicatorInterval_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_UNSPECIFIED;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_ONE_MINUTE;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_FIVE_MINUTES;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_FIFTEEN_MINUTES;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_ONE_HOUR;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_ONE_DAY;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_2_MIN;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_3_MIN;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_10_MIN;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_30_MIN;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_2_HOUR;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_4_HOUR;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_WEEK;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_MONTH;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::IndicatorInterval_MIN;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::IndicatorInterval_MAX;
constexpr int GetTechAnalysisRequest::IndicatorInterval_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetTechAnalysisRequest_TypeOfPrice_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_marketdata_2eproto);
  return file_level_enum_descriptors_marketdata_2eproto[2];
}
bool GetTechAnalysisRequest_TypeOfPrice_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GetTechAnalysisRequest_TypeOfPrice GetTechAnalysisRequest::TYPE_OF_PRICE_UNSPECIFIED;
constexpr GetTechAnalysisRequest_TypeOfPrice GetTechAnalysisRequest::TYPE_OF_PRICE_CLOSE;
constexpr GetTechAnalysisRequest_TypeOfPrice GetTechAnalysisRequest::TYPE_OF_PRICE_OPEN;
constexpr GetTechAnalysisRequest_TypeOfPrice GetTechAnalysisRequest::TYPE_OF_PRICE_HIGH;
constexpr GetTechAnalysisRequest_TypeOfPrice GetTechAnalysisRequest::TYPE_OF_PRICE_LOW;
constexpr GetTechAnalysisRequest_TypeOfPrice GetTechAnalysisRequest::TYPE_OF_PRICE_AVG;
constexpr GetTechAnalysisRequest_TypeOfPrice GetTechAnalysisRequest::TypeOfPrice_MIN;
constexpr GetTechAnalysisRequest_TypeOfPrice GetTechAnalysisRequest::TypeOfPrice_MAX;
constexpr int GetTechAnalysisRequest::TypeOfPrice_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetTechAnalysisRequest_IndicatorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_marketdata_2eproto);
  return file_level_enum_descriptors_marketdata_2eproto[3];
}
bool GetTechAnalysisRequest_IndicatorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GetTechAnalysisRequest_IndicatorType GetTechAnalysisRequest::INDICATOR_TYPE_UNSPECIFIED;
constexpr GetTechAnalysisRequest_IndicatorType GetTechAnalysisRequest::INDICATOR_TYPE_BB;
constexpr GetTechAnalysisRequest_IndicatorType GetTechAnalysisRequest::INDICATOR_TYPE_EMA;
constexpr GetTechAnalysisRequest_IndicatorType GetTechAnalysisRequest::INDICATOR_TYPE_RSI;
constexpr GetTechAnalysisRequest_IndicatorType GetTechAnalysisRequest::INDICATOR_TYPE_MACD;
constexpr GetTechAnalysisRequest_IndicatorType GetTechAnalysisRequest::INDICATOR_TYPE_SMA;
constexpr GetTechAnalysisRequest_IndicatorType GetTechAnalysisRequest::IndicatorType_MIN;
constexpr GetTechAnalysisRequest_IndicatorType GetTechAnalysisRequest::IndicatorType_MAX;
constexpr int GetTechAnalysisRequest::IndicatorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubscriptionAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_marketdata_2eproto);
  return file_level_enum_descriptors_marketdata_2eproto[4];
}
bool SubscriptionAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubscriptionInterval_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_marketdata_2eproto);
  return file_level_enum_descriptors_marketdata_2eproto[5];
}
bool SubscriptionInterval_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubscriptionStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_marketdata_2eproto);
  return file_level_enum_descriptors_marketdata_2eproto[6];
}
bool SubscriptionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TradeDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_marketdata_2eproto);
  return file_level_enum_descriptors_marketdata_2eproto[7];
}
bool TradeDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CandleInterval_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_marketdata_2eproto);
  return file_level_enum_descriptors_marketdata_2eproto[8];
}
bool CandleInterval_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CandleSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_marketdata_2eproto);
  return file_level_enum_descriptors_marketdata_2eproto[9];
}
bool CandleSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderBookType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_marketdata_2eproto);
  return file_level_enum_descriptors_marketdata_2eproto[10];
}
bool OrderBookType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MarketDataRequest::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest& subscribe_candles_request(const MarketDataRequest* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest& subscribe_order_book_request(const MarketDataRequest* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest& subscribe_trades_request(const MarketDataRequest* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest& subscribe_info_request(const MarketDataRequest* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest& subscribe_last_price_request(const MarketDataRequest* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::GetMySubscriptions& get_my_subscriptions(const MarketDataRequest* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest&
MarketDataRequest::_Internal::subscribe_candles_request(const MarketDataRequest* msg) {
  return *msg->_impl_.payload_.subscribe_candles_request_;
}
const ::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest&
MarketDataRequest::_Internal::subscribe_order_book_request(const MarketDataRequest* msg) {
  return *msg->_impl_.payload_.subscribe_order_book_request_;
}
const ::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest&
MarketDataRequest::_Internal::subscribe_trades_request(const MarketDataRequest* msg) {
  return *msg->_impl_.payload_.subscribe_trades_request_;
}
const ::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest&
MarketDataRequest::_Internal::subscribe_info_request(const MarketDataRequest* msg) {
  return *msg->_impl_.payload_.subscribe_info_request_;
}
const ::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest&
MarketDataRequest::_Internal::subscribe_last_price_request(const MarketDataRequest* msg) {
  return *msg->_impl_.payload_.subscribe_last_price_request_;
}
const ::tinkoff::public_::invest::api::contract::v1::GetMySubscriptions&
MarketDataRequest::_Internal::get_my_subscriptions(const MarketDataRequest* msg) {
  return *msg->_impl_.payload_.get_my_subscriptions_;
}
void MarketDataRequest::set_allocated_subscribe_candles_request(::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest* subscribe_candles_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (subscribe_candles_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscribe_candles_request);
    if (message_arena != submessage_arena) {
      subscribe_candles_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribe_candles_request, submessage_arena);
    }
    set_has_subscribe_candles_request();
    _impl_.payload_.subscribe_candles_request_ = subscribe_candles_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataRequest.subscribe_candles_request)
}
void MarketDataRequest::set_allocated_subscribe_order_book_request(::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest* subscribe_order_book_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (subscribe_order_book_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscribe_order_book_request);
    if (message_arena != submessage_arena) {
      subscribe_order_book_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribe_order_book_request, submessage_arena);
    }
    set_has_subscribe_order_book_request();
    _impl_.payload_.subscribe_order_book_request_ = subscribe_order_book_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataRequest.subscribe_order_book_request)
}
void MarketDataRequest::set_allocated_subscribe_trades_request(::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest* subscribe_trades_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (subscribe_trades_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscribe_trades_request);
    if (message_arena != submessage_arena) {
      subscribe_trades_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribe_trades_request, submessage_arena);
    }
    set_has_subscribe_trades_request();
    _impl_.payload_.subscribe_trades_request_ = subscribe_trades_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataRequest.subscribe_trades_request)
}
void MarketDataRequest::set_allocated_subscribe_info_request(::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest* subscribe_info_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (subscribe_info_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscribe_info_request);
    if (message_arena != submessage_arena) {
      subscribe_info_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribe_info_request, submessage_arena);
    }
    set_has_subscribe_info_request();
    _impl_.payload_.subscribe_info_request_ = subscribe_info_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataRequest.subscribe_info_request)
}
void MarketDataRequest::set_allocated_subscribe_last_price_request(::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest* subscribe_last_price_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (subscribe_last_price_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscribe_last_price_request);
    if (message_arena != submessage_arena) {
      subscribe_last_price_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribe_last_price_request, submessage_arena);
    }
    set_has_subscribe_last_price_request();
    _impl_.payload_.subscribe_last_price_request_ = subscribe_last_price_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataRequest.subscribe_last_price_request)
}
void MarketDataRequest::set_allocated_get_my_subscriptions(::tinkoff::public_::invest::api::contract::v1::GetMySubscriptions* get_my_subscriptions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (get_my_subscriptions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_my_subscriptions);
    if (message_arena != submessage_arena) {
      get_my_subscriptions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_my_subscriptions, submessage_arena);
    }
    set_has_get_my_subscriptions();
    _impl_.payload_.get_my_subscriptions_ = get_my_subscriptions;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataRequest.get_my_subscriptions)
}
MarketDataRequest::MarketDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.MarketDataRequest)
}
MarketDataRequest::MarketDataRequest(const MarketDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketDataRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kSubscribeCandlesRequest: {
      _this->_internal_mutable_subscribe_candles_request()->::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest::MergeFrom(
          from._internal_subscribe_candles_request());
      break;
    }
    case kSubscribeOrderBookRequest: {
      _this->_internal_mutable_subscribe_order_book_request()->::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest::MergeFrom(
          from._internal_subscribe_order_book_request());
      break;
    }
    case kSubscribeTradesRequest: {
      _this->_internal_mutable_subscribe_trades_request()->::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest::MergeFrom(
          from._internal_subscribe_trades_request());
      break;
    }
    case kSubscribeInfoRequest: {
      _this->_internal_mutable_subscribe_info_request()->::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest::MergeFrom(
          from._internal_subscribe_info_request());
      break;
    }
    case kSubscribeLastPriceRequest: {
      _this->_internal_mutable_subscribe_last_price_request()->::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest::MergeFrom(
          from._internal_subscribe_last_price_request());
      break;
    }
    case kGetMySubscriptions: {
      _this->_internal_mutable_get_my_subscriptions()->::tinkoff::public_::invest::api::contract::v1::GetMySubscriptions::MergeFrom(
          from._internal_get_my_subscriptions());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.MarketDataRequest)
}

inline void MarketDataRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

MarketDataRequest::~MarketDataRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.MarketDataRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void MarketDataRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketDataRequest::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:tinkoff.public_.invest.api.contract.v1.MarketDataRequest)
  switch (payload_case()) {
    case kSubscribeCandlesRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.subscribe_candles_request_;
      }
      break;
    }
    case kSubscribeOrderBookRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.subscribe_order_book_request_;
      }
      break;
    }
    case kSubscribeTradesRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.subscribe_trades_request_;
      }
      break;
    }
    case kSubscribeInfoRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.subscribe_info_request_;
      }
      break;
    }
    case kSubscribeLastPriceRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.subscribe_last_price_request_;
      }
      break;
    }
    case kGetMySubscriptions: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.get_my_subscriptions_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void MarketDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.MarketDataRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDataRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest subscribe_candles_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribe_candles_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest subscribe_order_book_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribe_order_book_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest subscribe_trades_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribe_trades_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest subscribe_info_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribe_info_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest subscribe_last_price_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribe_last_price_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.GetMySubscriptions get_my_subscriptions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_my_subscriptions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MarketDataRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.MarketDataRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest subscribe_candles_request = 1;
  if (_internal_has_subscribe_candles_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::subscribe_candles_request(this),
        _Internal::subscribe_candles_request(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest subscribe_order_book_request = 2;
  if (_internal_has_subscribe_order_book_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::subscribe_order_book_request(this),
        _Internal::subscribe_order_book_request(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest subscribe_trades_request = 3;
  if (_internal_has_subscribe_trades_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::subscribe_trades_request(this),
        _Internal::subscribe_trades_request(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest subscribe_info_request = 4;
  if (_internal_has_subscribe_info_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::subscribe_info_request(this),
        _Internal::subscribe_info_request(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest subscribe_last_price_request = 5;
  if (_internal_has_subscribe_last_price_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::subscribe_last_price_request(this),
        _Internal::subscribe_last_price_request(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetMySubscriptions get_my_subscriptions = 6;
  if (_internal_has_get_my_subscriptions()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::get_my_subscriptions(this),
        _Internal::get_my_subscriptions(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.MarketDataRequest)
  return target;
}

size_t MarketDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.MarketDataRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest subscribe_candles_request = 1;
    case kSubscribeCandlesRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.subscribe_candles_request_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest subscribe_order_book_request = 2;
    case kSubscribeOrderBookRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.subscribe_order_book_request_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest subscribe_trades_request = 3;
    case kSubscribeTradesRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.subscribe_trades_request_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest subscribe_info_request = 4;
    case kSubscribeInfoRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.subscribe_info_request_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest subscribe_last_price_request = 5;
    case kSubscribeLastPriceRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.subscribe_last_price_request_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.GetMySubscriptions get_my_subscriptions = 6;
    case kGetMySubscriptions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.get_my_subscriptions_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketDataRequest::GetClassData() const { return &_class_data_; }


void MarketDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketDataRequest*>(&to_msg);
  auto& from = static_cast<const MarketDataRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.MarketDataRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kSubscribeCandlesRequest: {
      _this->_internal_mutable_subscribe_candles_request()->::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest::MergeFrom(
          from._internal_subscribe_candles_request());
      break;
    }
    case kSubscribeOrderBookRequest: {
      _this->_internal_mutable_subscribe_order_book_request()->::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest::MergeFrom(
          from._internal_subscribe_order_book_request());
      break;
    }
    case kSubscribeTradesRequest: {
      _this->_internal_mutable_subscribe_trades_request()->::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest::MergeFrom(
          from._internal_subscribe_trades_request());
      break;
    }
    case kSubscribeInfoRequest: {
      _this->_internal_mutable_subscribe_info_request()->::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest::MergeFrom(
          from._internal_subscribe_info_request());
      break;
    }
    case kSubscribeLastPriceRequest: {
      _this->_internal_mutable_subscribe_last_price_request()->::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest::MergeFrom(
          from._internal_subscribe_last_price_request());
      break;
    }
    case kGetMySubscriptions: {
      _this->_internal_mutable_get_my_subscriptions()->::tinkoff::public_::invest::api::contract::v1::GetMySubscriptions::MergeFrom(
          from._internal_get_my_subscriptions());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDataRequest::CopyFrom(const MarketDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.MarketDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataRequest::IsInitialized() const {
  return true;
}

void MarketDataRequest::InternalSwap(MarketDataRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[0]);
}

// ===================================================================

class MarketDataServerSideStreamRequest::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest& subscribe_candles_request(const MarketDataServerSideStreamRequest* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest& subscribe_order_book_request(const MarketDataServerSideStreamRequest* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest& subscribe_trades_request(const MarketDataServerSideStreamRequest* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest& subscribe_info_request(const MarketDataServerSideStreamRequest* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest& subscribe_last_price_request(const MarketDataServerSideStreamRequest* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest&
MarketDataServerSideStreamRequest::_Internal::subscribe_candles_request(const MarketDataServerSideStreamRequest* msg) {
  return *msg->_impl_.subscribe_candles_request_;
}
const ::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest&
MarketDataServerSideStreamRequest::_Internal::subscribe_order_book_request(const MarketDataServerSideStreamRequest* msg) {
  return *msg->_impl_.subscribe_order_book_request_;
}
const ::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest&
MarketDataServerSideStreamRequest::_Internal::subscribe_trades_request(const MarketDataServerSideStreamRequest* msg) {
  return *msg->_impl_.subscribe_trades_request_;
}
const ::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest&
MarketDataServerSideStreamRequest::_Internal::subscribe_info_request(const MarketDataServerSideStreamRequest* msg) {
  return *msg->_impl_.subscribe_info_request_;
}
const ::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest&
MarketDataServerSideStreamRequest::_Internal::subscribe_last_price_request(const MarketDataServerSideStreamRequest* msg) {
  return *msg->_impl_.subscribe_last_price_request_;
}
MarketDataServerSideStreamRequest::MarketDataServerSideStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.MarketDataServerSideStreamRequest)
}
MarketDataServerSideStreamRequest::MarketDataServerSideStreamRequest(const MarketDataServerSideStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketDataServerSideStreamRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subscribe_candles_request_){nullptr}
    , decltype(_impl_.subscribe_order_book_request_){nullptr}
    , decltype(_impl_.subscribe_trades_request_){nullptr}
    , decltype(_impl_.subscribe_info_request_){nullptr}
    , decltype(_impl_.subscribe_last_price_request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_subscribe_candles_request()) {
    _this->_impl_.subscribe_candles_request_ = new ::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest(*from._impl_.subscribe_candles_request_);
  }
  if (from._internal_has_subscribe_order_book_request()) {
    _this->_impl_.subscribe_order_book_request_ = new ::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest(*from._impl_.subscribe_order_book_request_);
  }
  if (from._internal_has_subscribe_trades_request()) {
    _this->_impl_.subscribe_trades_request_ = new ::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest(*from._impl_.subscribe_trades_request_);
  }
  if (from._internal_has_subscribe_info_request()) {
    _this->_impl_.subscribe_info_request_ = new ::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest(*from._impl_.subscribe_info_request_);
  }
  if (from._internal_has_subscribe_last_price_request()) {
    _this->_impl_.subscribe_last_price_request_ = new ::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest(*from._impl_.subscribe_last_price_request_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.MarketDataServerSideStreamRequest)
}

inline void MarketDataServerSideStreamRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subscribe_candles_request_){nullptr}
    , decltype(_impl_.subscribe_order_book_request_){nullptr}
    , decltype(_impl_.subscribe_trades_request_){nullptr}
    , decltype(_impl_.subscribe_info_request_){nullptr}
    , decltype(_impl_.subscribe_last_price_request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MarketDataServerSideStreamRequest::~MarketDataServerSideStreamRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.MarketDataServerSideStreamRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketDataServerSideStreamRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.subscribe_candles_request_;
  if (this != internal_default_instance()) delete _impl_.subscribe_order_book_request_;
  if (this != internal_default_instance()) delete _impl_.subscribe_trades_request_;
  if (this != internal_default_instance()) delete _impl_.subscribe_info_request_;
  if (this != internal_default_instance()) delete _impl_.subscribe_last_price_request_;
}

void MarketDataServerSideStreamRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketDataServerSideStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.MarketDataServerSideStreamRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.subscribe_candles_request_ != nullptr) {
    delete _impl_.subscribe_candles_request_;
  }
  _impl_.subscribe_candles_request_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.subscribe_order_book_request_ != nullptr) {
    delete _impl_.subscribe_order_book_request_;
  }
  _impl_.subscribe_order_book_request_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.subscribe_trades_request_ != nullptr) {
    delete _impl_.subscribe_trades_request_;
  }
  _impl_.subscribe_trades_request_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.subscribe_info_request_ != nullptr) {
    delete _impl_.subscribe_info_request_;
  }
  _impl_.subscribe_info_request_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.subscribe_last_price_request_ != nullptr) {
    delete _impl_.subscribe_last_price_request_;
  }
  _impl_.subscribe_last_price_request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDataServerSideStreamRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest subscribe_candles_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribe_candles_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest subscribe_order_book_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribe_order_book_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest subscribe_trades_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribe_trades_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest subscribe_info_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribe_info_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest subscribe_last_price_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribe_last_price_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MarketDataServerSideStreamRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.MarketDataServerSideStreamRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest subscribe_candles_request = 1;
  if (this->_internal_has_subscribe_candles_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::subscribe_candles_request(this),
        _Internal::subscribe_candles_request(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest subscribe_order_book_request = 2;
  if (this->_internal_has_subscribe_order_book_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::subscribe_order_book_request(this),
        _Internal::subscribe_order_book_request(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest subscribe_trades_request = 3;
  if (this->_internal_has_subscribe_trades_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::subscribe_trades_request(this),
        _Internal::subscribe_trades_request(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest subscribe_info_request = 4;
  if (this->_internal_has_subscribe_info_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::subscribe_info_request(this),
        _Internal::subscribe_info_request(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest subscribe_last_price_request = 5;
  if (this->_internal_has_subscribe_last_price_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::subscribe_last_price_request(this),
        _Internal::subscribe_last_price_request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.MarketDataServerSideStreamRequest)
  return target;
}

size_t MarketDataServerSideStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.MarketDataServerSideStreamRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest subscribe_candles_request = 1;
  if (this->_internal_has_subscribe_candles_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subscribe_candles_request_);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest subscribe_order_book_request = 2;
  if (this->_internal_has_subscribe_order_book_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subscribe_order_book_request_);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest subscribe_trades_request = 3;
  if (this->_internal_has_subscribe_trades_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subscribe_trades_request_);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest subscribe_info_request = 4;
  if (this->_internal_has_subscribe_info_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subscribe_info_request_);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest subscribe_last_price_request = 5;
  if (this->_internal_has_subscribe_last_price_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subscribe_last_price_request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketDataServerSideStreamRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketDataServerSideStreamRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketDataServerSideStreamRequest::GetClassData() const { return &_class_data_; }


void MarketDataServerSideStreamRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketDataServerSideStreamRequest*>(&to_msg);
  auto& from = static_cast<const MarketDataServerSideStreamRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.MarketDataServerSideStreamRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_subscribe_candles_request()) {
    _this->_internal_mutable_subscribe_candles_request()->::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest::MergeFrom(
        from._internal_subscribe_candles_request());
  }
  if (from._internal_has_subscribe_order_book_request()) {
    _this->_internal_mutable_subscribe_order_book_request()->::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest::MergeFrom(
        from._internal_subscribe_order_book_request());
  }
  if (from._internal_has_subscribe_trades_request()) {
    _this->_internal_mutable_subscribe_trades_request()->::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest::MergeFrom(
        from._internal_subscribe_trades_request());
  }
  if (from._internal_has_subscribe_info_request()) {
    _this->_internal_mutable_subscribe_info_request()->::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest::MergeFrom(
        from._internal_subscribe_info_request());
  }
  if (from._internal_has_subscribe_last_price_request()) {
    _this->_internal_mutable_subscribe_last_price_request()->::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest::MergeFrom(
        from._internal_subscribe_last_price_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDataServerSideStreamRequest::CopyFrom(const MarketDataServerSideStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.MarketDataServerSideStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataServerSideStreamRequest::IsInitialized() const {
  return true;
}

void MarketDataServerSideStreamRequest::InternalSwap(MarketDataServerSideStreamRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketDataServerSideStreamRequest, _impl_.subscribe_last_price_request_)
      + sizeof(MarketDataServerSideStreamRequest::_impl_.subscribe_last_price_request_)
      - PROTOBUF_FIELD_OFFSET(MarketDataServerSideStreamRequest, _impl_.subscribe_candles_request_)>(
          reinterpret_cast<char*>(&_impl_.subscribe_candles_request_),
          reinterpret_cast<char*>(&other->_impl_.subscribe_candles_request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDataServerSideStreamRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[1]);
}

// ===================================================================

class MarketDataResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesResponse& subscribe_candles_response(const MarketDataResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookResponse& subscribe_order_book_response(const MarketDataResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeTradesResponse& subscribe_trades_response(const MarketDataResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeInfoResponse& subscribe_info_response(const MarketDataResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Candle& candle(const MarketDataResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Trade& trade(const MarketDataResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::OrderBook& orderbook(const MarketDataResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::TradingStatus& trading_status(const MarketDataResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Ping& ping(const MarketDataResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceResponse& subscribe_last_price_response(const MarketDataResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::LastPrice& last_price(const MarketDataResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesResponse&
MarketDataResponse::_Internal::subscribe_candles_response(const MarketDataResponse* msg) {
  return *msg->_impl_.payload_.subscribe_candles_response_;
}
const ::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookResponse&
MarketDataResponse::_Internal::subscribe_order_book_response(const MarketDataResponse* msg) {
  return *msg->_impl_.payload_.subscribe_order_book_response_;
}
const ::tinkoff::public_::invest::api::contract::v1::SubscribeTradesResponse&
MarketDataResponse::_Internal::subscribe_trades_response(const MarketDataResponse* msg) {
  return *msg->_impl_.payload_.subscribe_trades_response_;
}
const ::tinkoff::public_::invest::api::contract::v1::SubscribeInfoResponse&
MarketDataResponse::_Internal::subscribe_info_response(const MarketDataResponse* msg) {
  return *msg->_impl_.payload_.subscribe_info_response_;
}
const ::tinkoff::public_::invest::api::contract::v1::Candle&
MarketDataResponse::_Internal::candle(const MarketDataResponse* msg) {
  return *msg->_impl_.payload_.candle_;
}
const ::tinkoff::public_::invest::api::contract::v1::Trade&
MarketDataResponse::_Internal::trade(const MarketDataResponse* msg) {
  return *msg->_impl_.payload_.trade_;
}
const ::tinkoff::public_::invest::api::contract::v1::OrderBook&
MarketDataResponse::_Internal::orderbook(const MarketDataResponse* msg) {
  return *msg->_impl_.payload_.orderbook_;
}
const ::tinkoff::public_::invest::api::contract::v1::TradingStatus&
MarketDataResponse::_Internal::trading_status(const MarketDataResponse* msg) {
  return *msg->_impl_.payload_.trading_status_;
}
const ::tinkoff::public_::invest::api::contract::v1::Ping&
MarketDataResponse::_Internal::ping(const MarketDataResponse* msg) {
  return *msg->_impl_.payload_.ping_;
}
const ::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceResponse&
MarketDataResponse::_Internal::subscribe_last_price_response(const MarketDataResponse* msg) {
  return *msg->_impl_.payload_.subscribe_last_price_response_;
}
const ::tinkoff::public_::invest::api::contract::v1::LastPrice&
MarketDataResponse::_Internal::last_price(const MarketDataResponse* msg) {
  return *msg->_impl_.payload_.last_price_;
}
void MarketDataResponse::set_allocated_subscribe_candles_response(::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesResponse* subscribe_candles_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (subscribe_candles_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscribe_candles_response);
    if (message_arena != submessage_arena) {
      subscribe_candles_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribe_candles_response, submessage_arena);
    }
    set_has_subscribe_candles_response();
    _impl_.payload_.subscribe_candles_response_ = subscribe_candles_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataResponse.subscribe_candles_response)
}
void MarketDataResponse::set_allocated_subscribe_order_book_response(::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookResponse* subscribe_order_book_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (subscribe_order_book_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscribe_order_book_response);
    if (message_arena != submessage_arena) {
      subscribe_order_book_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribe_order_book_response, submessage_arena);
    }
    set_has_subscribe_order_book_response();
    _impl_.payload_.subscribe_order_book_response_ = subscribe_order_book_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataResponse.subscribe_order_book_response)
}
void MarketDataResponse::set_allocated_subscribe_trades_response(::tinkoff::public_::invest::api::contract::v1::SubscribeTradesResponse* subscribe_trades_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (subscribe_trades_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscribe_trades_response);
    if (message_arena != submessage_arena) {
      subscribe_trades_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribe_trades_response, submessage_arena);
    }
    set_has_subscribe_trades_response();
    _impl_.payload_.subscribe_trades_response_ = subscribe_trades_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataResponse.subscribe_trades_response)
}
void MarketDataResponse::set_allocated_subscribe_info_response(::tinkoff::public_::invest::api::contract::v1::SubscribeInfoResponse* subscribe_info_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (subscribe_info_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscribe_info_response);
    if (message_arena != submessage_arena) {
      subscribe_info_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribe_info_response, submessage_arena);
    }
    set_has_subscribe_info_response();
    _impl_.payload_.subscribe_info_response_ = subscribe_info_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataResponse.subscribe_info_response)
}
void MarketDataResponse::set_allocated_candle(::tinkoff::public_::invest::api::contract::v1::Candle* candle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (candle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(candle);
    if (message_arena != submessage_arena) {
      candle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candle, submessage_arena);
    }
    set_has_candle();
    _impl_.payload_.candle_ = candle;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataResponse.candle)
}
void MarketDataResponse::set_allocated_trade(::tinkoff::public_::invest::api::contract::v1::Trade* trade) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (trade) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trade);
    if (message_arena != submessage_arena) {
      trade = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trade, submessage_arena);
    }
    set_has_trade();
    _impl_.payload_.trade_ = trade;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataResponse.trade)
}
void MarketDataResponse::set_allocated_orderbook(::tinkoff::public_::invest::api::contract::v1::OrderBook* orderbook) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (orderbook) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(orderbook);
    if (message_arena != submessage_arena) {
      orderbook = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orderbook, submessage_arena);
    }
    set_has_orderbook();
    _impl_.payload_.orderbook_ = orderbook;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataResponse.orderbook)
}
void MarketDataResponse::set_allocated_trading_status(::tinkoff::public_::invest::api::contract::v1::TradingStatus* trading_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (trading_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trading_status);
    if (message_arena != submessage_arena) {
      trading_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trading_status, submessage_arena);
    }
    set_has_trading_status();
    _impl_.payload_.trading_status_ = trading_status;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataResponse.trading_status)
}
void MarketDataResponse::set_allocated_ping(::tinkoff::public_::invest::api::contract::v1::Ping* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping));
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    set_has_ping();
    _impl_.payload_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataResponse.ping)
}
void MarketDataResponse::clear_ping() {
  if (_internal_has_ping()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.ping_;
    }
    clear_has_payload();
  }
}
void MarketDataResponse::set_allocated_subscribe_last_price_response(::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceResponse* subscribe_last_price_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (subscribe_last_price_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscribe_last_price_response);
    if (message_arena != submessage_arena) {
      subscribe_last_price_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribe_last_price_response, submessage_arena);
    }
    set_has_subscribe_last_price_response();
    _impl_.payload_.subscribe_last_price_response_ = subscribe_last_price_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataResponse.subscribe_last_price_response)
}
void MarketDataResponse::set_allocated_last_price(::tinkoff::public_::invest::api::contract::v1::LastPrice* last_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (last_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(last_price);
    if (message_arena != submessage_arena) {
      last_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_price, submessage_arena);
    }
    set_has_last_price();
    _impl_.payload_.last_price_ = last_price;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataResponse.last_price)
}
MarketDataResponse::MarketDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.MarketDataResponse)
}
MarketDataResponse::MarketDataResponse(const MarketDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketDataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kSubscribeCandlesResponse: {
      _this->_internal_mutable_subscribe_candles_response()->::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesResponse::MergeFrom(
          from._internal_subscribe_candles_response());
      break;
    }
    case kSubscribeOrderBookResponse: {
      _this->_internal_mutable_subscribe_order_book_response()->::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookResponse::MergeFrom(
          from._internal_subscribe_order_book_response());
      break;
    }
    case kSubscribeTradesResponse: {
      _this->_internal_mutable_subscribe_trades_response()->::tinkoff::public_::invest::api::contract::v1::SubscribeTradesResponse::MergeFrom(
          from._internal_subscribe_trades_response());
      break;
    }
    case kSubscribeInfoResponse: {
      _this->_internal_mutable_subscribe_info_response()->::tinkoff::public_::invest::api::contract::v1::SubscribeInfoResponse::MergeFrom(
          from._internal_subscribe_info_response());
      break;
    }
    case kCandle: {
      _this->_internal_mutable_candle()->::tinkoff::public_::invest::api::contract::v1::Candle::MergeFrom(
          from._internal_candle());
      break;
    }
    case kTrade: {
      _this->_internal_mutable_trade()->::tinkoff::public_::invest::api::contract::v1::Trade::MergeFrom(
          from._internal_trade());
      break;
    }
    case kOrderbook: {
      _this->_internal_mutable_orderbook()->::tinkoff::public_::invest::api::contract::v1::OrderBook::MergeFrom(
          from._internal_orderbook());
      break;
    }
    case kTradingStatus: {
      _this->_internal_mutable_trading_status()->::tinkoff::public_::invest::api::contract::v1::TradingStatus::MergeFrom(
          from._internal_trading_status());
      break;
    }
    case kPing: {
      _this->_internal_mutable_ping()->::tinkoff::public_::invest::api::contract::v1::Ping::MergeFrom(
          from._internal_ping());
      break;
    }
    case kSubscribeLastPriceResponse: {
      _this->_internal_mutable_subscribe_last_price_response()->::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceResponse::MergeFrom(
          from._internal_subscribe_last_price_response());
      break;
    }
    case kLastPrice: {
      _this->_internal_mutable_last_price()->::tinkoff::public_::invest::api::contract::v1::LastPrice::MergeFrom(
          from._internal_last_price());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.MarketDataResponse)
}

inline void MarketDataResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

MarketDataResponse::~MarketDataResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.MarketDataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void MarketDataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketDataResponse::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:tinkoff.public_.invest.api.contract.v1.MarketDataResponse)
  switch (payload_case()) {
    case kSubscribeCandlesResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.subscribe_candles_response_;
      }
      break;
    }
    case kSubscribeOrderBookResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.subscribe_order_book_response_;
      }
      break;
    }
    case kSubscribeTradesResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.subscribe_trades_response_;
      }
      break;
    }
    case kSubscribeInfoResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.subscribe_info_response_;
      }
      break;
    }
    case kCandle: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.candle_;
      }
      break;
    }
    case kTrade: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.trade_;
      }
      break;
    }
    case kOrderbook: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.orderbook_;
      }
      break;
    }
    case kTradingStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.trading_status_;
      }
      break;
    }
    case kPing: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.ping_;
      }
      break;
    }
    case kSubscribeLastPriceResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.subscribe_last_price_response_;
      }
      break;
    }
    case kLastPrice: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.last_price_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void MarketDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.MarketDataResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse subscribe_candles_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribe_candles_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse subscribe_order_book_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribe_order_book_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse subscribe_trades_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribe_trades_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse subscribe_info_response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribe_info_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Candle candle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_candle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Trade trade = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_trade(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.OrderBook orderbook = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_orderbook(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.TradingStatus trading_status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_trading_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Ping ping = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse subscribe_last_price_response = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribe_last_price_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.LastPrice last_price = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MarketDataResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.MarketDataResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse subscribe_candles_response = 1;
  if (_internal_has_subscribe_candles_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::subscribe_candles_response(this),
        _Internal::subscribe_candles_response(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse subscribe_order_book_response = 2;
  if (_internal_has_subscribe_order_book_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::subscribe_order_book_response(this),
        _Internal::subscribe_order_book_response(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse subscribe_trades_response = 3;
  if (_internal_has_subscribe_trades_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::subscribe_trades_response(this),
        _Internal::subscribe_trades_response(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse subscribe_info_response = 4;
  if (_internal_has_subscribe_info_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::subscribe_info_response(this),
        _Internal::subscribe_info_response(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Candle candle = 5;
  if (_internal_has_candle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::candle(this),
        _Internal::candle(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Trade trade = 6;
  if (_internal_has_trade()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::trade(this),
        _Internal::trade(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderBook orderbook = 7;
  if (_internal_has_orderbook()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::orderbook(this),
        _Internal::orderbook(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.TradingStatus trading_status = 8;
  if (_internal_has_trading_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::trading_status(this),
        _Internal::trading_status(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Ping ping = 9;
  if (_internal_has_ping()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::ping(this),
        _Internal::ping(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse subscribe_last_price_response = 10;
  if (_internal_has_subscribe_last_price_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::subscribe_last_price_response(this),
        _Internal::subscribe_last_price_response(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.LastPrice last_price = 11;
  if (_internal_has_last_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::last_price(this),
        _Internal::last_price(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.MarketDataResponse)
  return target;
}

size_t MarketDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.MarketDataResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse subscribe_candles_response = 1;
    case kSubscribeCandlesResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.subscribe_candles_response_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse subscribe_order_book_response = 2;
    case kSubscribeOrderBookResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.subscribe_order_book_response_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse subscribe_trades_response = 3;
    case kSubscribeTradesResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.subscribe_trades_response_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse subscribe_info_response = 4;
    case kSubscribeInfoResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.subscribe_info_response_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.Candle candle = 5;
    case kCandle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.candle_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.Trade trade = 6;
    case kTrade: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.trade_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.OrderBook orderbook = 7;
    case kOrderbook: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.orderbook_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.TradingStatus trading_status = 8;
    case kTradingStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.trading_status_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.Ping ping = 9;
    case kPing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.ping_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse subscribe_last_price_response = 10;
    case kSubscribeLastPriceResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.subscribe_last_price_response_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.LastPrice last_price = 11;
    case kLastPrice: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.last_price_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketDataResponse::GetClassData() const { return &_class_data_; }


void MarketDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketDataResponse*>(&to_msg);
  auto& from = static_cast<const MarketDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.MarketDataResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kSubscribeCandlesResponse: {
      _this->_internal_mutable_subscribe_candles_response()->::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesResponse::MergeFrom(
          from._internal_subscribe_candles_response());
      break;
    }
    case kSubscribeOrderBookResponse: {
      _this->_internal_mutable_subscribe_order_book_response()->::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookResponse::MergeFrom(
          from._internal_subscribe_order_book_response());
      break;
    }
    case kSubscribeTradesResponse: {
      _this->_internal_mutable_subscribe_trades_response()->::tinkoff::public_::invest::api::contract::v1::SubscribeTradesResponse::MergeFrom(
          from._internal_subscribe_trades_response());
      break;
    }
    case kSubscribeInfoResponse: {
      _this->_internal_mutable_subscribe_info_response()->::tinkoff::public_::invest::api::contract::v1::SubscribeInfoResponse::MergeFrom(
          from._internal_subscribe_info_response());
      break;
    }
    case kCandle: {
      _this->_internal_mutable_candle()->::tinkoff::public_::invest::api::contract::v1::Candle::MergeFrom(
          from._internal_candle());
      break;
    }
    case kTrade: {
      _this->_internal_mutable_trade()->::tinkoff::public_::invest::api::contract::v1::Trade::MergeFrom(
          from._internal_trade());
      break;
    }
    case kOrderbook: {
      _this->_internal_mutable_orderbook()->::tinkoff::public_::invest::api::contract::v1::OrderBook::MergeFrom(
          from._internal_orderbook());
      break;
    }
    case kTradingStatus: {
      _this->_internal_mutable_trading_status()->::tinkoff::public_::invest::api::contract::v1::TradingStatus::MergeFrom(
          from._internal_trading_status());
      break;
    }
    case kPing: {
      _this->_internal_mutable_ping()->::tinkoff::public_::invest::api::contract::v1::Ping::MergeFrom(
          from._internal_ping());
      break;
    }
    case kSubscribeLastPriceResponse: {
      _this->_internal_mutable_subscribe_last_price_response()->::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceResponse::MergeFrom(
          from._internal_subscribe_last_price_response());
      break;
    }
    case kLastPrice: {
      _this->_internal_mutable_last_price()->::tinkoff::public_::invest::api::contract::v1::LastPrice::MergeFrom(
          from._internal_last_price());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDataResponse::CopyFrom(const MarketDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.MarketDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataResponse::IsInitialized() const {
  return true;
}

void MarketDataResponse::InternalSwap(MarketDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[2]);
}

// ===================================================================

class SubscribeCandlesRequest::_Internal {
 public:
};

SubscribeCandlesRequest::SubscribeCandlesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest)
}
SubscribeCandlesRequest::SubscribeCandlesRequest(const SubscribeCandlesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeCandlesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){from._impl_.instruments_}
    , decltype(_impl_.subscription_action_){}
    , decltype(_impl_.waiting_close_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.subscription_action_, &from._impl_.subscription_action_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.waiting_close_) -
    reinterpret_cast<char*>(&_impl_.subscription_action_)) + sizeof(_impl_.waiting_close_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest)
}

inline void SubscribeCandlesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){arena}
    , decltype(_impl_.subscription_action_){0}
    , decltype(_impl_.waiting_close_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubscribeCandlesRequest::~SubscribeCandlesRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeCandlesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instruments_.~RepeatedPtrField();
}

void SubscribeCandlesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeCandlesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  ::memset(&_impl_.subscription_action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.waiting_close_) -
      reinterpret_cast<char*>(&_impl_.subscription_action_)) + sizeof(_impl_.waiting_close_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeCandlesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_subscription_action(static_cast<::tinkoff::public_::invest::api::contract::v1::SubscriptionAction>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.CandleInstrument instruments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool waiting_close = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.waiting_close_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeCandlesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
  if (this->_internal_subscription_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_subscription_action(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.CandleInstrument instruments = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool waiting_close = 3;
  if (this->_internal_waiting_close() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_waiting_close(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest)
  return target;
}

size_t SubscribeCandlesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.CandleInstrument instruments = 2;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_impl_.instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
  if (this->_internal_subscription_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_subscription_action());
  }

  // bool waiting_close = 3;
  if (this->_internal_waiting_close() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeCandlesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeCandlesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeCandlesRequest::GetClassData() const { return &_class_data_; }


void SubscribeCandlesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeCandlesRequest*>(&to_msg);
  auto& from = static_cast<const SubscribeCandlesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instruments_.MergeFrom(from._impl_.instruments_);
  if (from._internal_subscription_action() != 0) {
    _this->_internal_set_subscription_action(from._internal_subscription_action());
  }
  if (from._internal_waiting_close() != 0) {
    _this->_internal_set_waiting_close(from._internal_waiting_close());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeCandlesRequest::CopyFrom(const SubscribeCandlesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeCandlesRequest::IsInitialized() const {
  return true;
}

void SubscribeCandlesRequest::InternalSwap(SubscribeCandlesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscribeCandlesRequest, _impl_.waiting_close_)
      + sizeof(SubscribeCandlesRequest::_impl_.waiting_close_)
      - PROTOBUF_FIELD_OFFSET(SubscribeCandlesRequest, _impl_.subscription_action_)>(
          reinterpret_cast<char*>(&_impl_.subscription_action_),
          reinterpret_cast<char*>(&other->_impl_.subscription_action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeCandlesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[3]);
}

// ===================================================================

class CandleInstrument::_Internal {
 public:
};

CandleInstrument::CandleInstrument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.CandleInstrument)
}
CandleInstrument::CandleInstrument(const CandleInstrument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CandleInstrument* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.interval_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_id().empty()) {
    _this->_impl_.instrument_id_.Set(from._internal_instrument_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.interval_ = from._impl_.interval_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.CandleInstrument)
}

inline void CandleInstrument::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.interval_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CandleInstrument::~CandleInstrument() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.CandleInstrument)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CandleInstrument::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
}

void CandleInstrument::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CandleInstrument::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.CandleInstrument)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  _impl_.interval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CandleInstrument::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.CandleInstrument.figi"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SubscriptionInterval interval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interval(static_cast<::tinkoff::public_::invest::api::contract::v1::SubscriptionInterval>(val));
        } else
          goto handle_unusual;
        continue;
      // string instrument_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.CandleInstrument.instrument_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CandleInstrument::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.CandleInstrument)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.CandleInstrument.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionInterval interval = 2;
  if (this->_internal_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_interval(), target);
  }

  // string instrument_id = 3;
  if (!this->_internal_instrument_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.CandleInstrument.instrument_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_instrument_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.CandleInstrument)
  return target;
}

size_t CandleInstrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.CandleInstrument)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_id = 3;
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionInterval interval = 2;
  if (this->_internal_interval() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_interval());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CandleInstrument::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CandleInstrument::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CandleInstrument::GetClassData() const { return &_class_data_; }


void CandleInstrument::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CandleInstrument*>(&to_msg);
  auto& from = static_cast<const CandleInstrument&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.CandleInstrument)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  if (from._internal_interval() != 0) {
    _this->_internal_set_interval(from._internal_interval());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CandleInstrument::CopyFrom(const CandleInstrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.CandleInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandleInstrument::IsInitialized() const {
  return true;
}

void CandleInstrument::InternalSwap(CandleInstrument* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_id_, lhs_arena,
      &other->_impl_.instrument_id_, rhs_arena
  );
  swap(_impl_.interval_, other->_impl_.interval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CandleInstrument::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[4]);
}

// ===================================================================

class SubscribeCandlesResponse::_Internal {
 public:
};

SubscribeCandlesResponse::SubscribeCandlesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse)
}
SubscribeCandlesResponse::SubscribeCandlesResponse(const SubscribeCandlesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeCandlesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.candles_subscriptions_){from._impl_.candles_subscriptions_}
    , decltype(_impl_.tracking_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tracking_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tracking_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tracking_id().empty()) {
    _this->_impl_.tracking_id_.Set(from._internal_tracking_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse)
}

inline void SubscribeCandlesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.candles_subscriptions_){arena}
    , decltype(_impl_.tracking_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tracking_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tracking_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscribeCandlesResponse::~SubscribeCandlesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeCandlesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.candles_subscriptions_.~RepeatedPtrField();
  _impl_.tracking_id_.Destroy();
}

void SubscribeCandlesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeCandlesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.candles_subscriptions_.Clear();
  _impl_.tracking_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeCandlesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tracking_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tracking_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse.tracking_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.CandleSubscription candles_subscriptions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candles_subscriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeCandlesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tracking_id = 1;
  if (!this->_internal_tracking_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tracking_id().data(), static_cast<int>(this->_internal_tracking_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse.tracking_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tracking_id(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.CandleSubscription candles_subscriptions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_candles_subscriptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_candles_subscriptions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse)
  return target;
}

size_t SubscribeCandlesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.CandleSubscription candles_subscriptions = 2;
  total_size += 1UL * this->_internal_candles_subscriptions_size();
  for (const auto& msg : this->_impl_.candles_subscriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string tracking_id = 1;
  if (!this->_internal_tracking_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tracking_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeCandlesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeCandlesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeCandlesResponse::GetClassData() const { return &_class_data_; }


void SubscribeCandlesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeCandlesResponse*>(&to_msg);
  auto& from = static_cast<const SubscribeCandlesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.candles_subscriptions_.MergeFrom(from._impl_.candles_subscriptions_);
  if (!from._internal_tracking_id().empty()) {
    _this->_internal_set_tracking_id(from._internal_tracking_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeCandlesResponse::CopyFrom(const SubscribeCandlesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeCandlesResponse::IsInitialized() const {
  return true;
}

void SubscribeCandlesResponse::InternalSwap(SubscribeCandlesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.candles_subscriptions_.InternalSwap(&other->_impl_.candles_subscriptions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tracking_id_, lhs_arena,
      &other->_impl_.tracking_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeCandlesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[5]);
}

// ===================================================================

class CandleSubscription::_Internal {
 public:
};

CandleSubscription::CandleSubscription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.CandleSubscription)
}
CandleSubscription::CandleSubscription(const CandleSubscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CandleSubscription* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.subscription_id_){}
    , decltype(_impl_.interval_){}
    , decltype(_impl_.subscription_status_){}
    , decltype(_impl_.waiting_close_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stream_id().empty()) {
    _this->_impl_.stream_id_.Set(from._internal_stream_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subscription_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscription_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subscription_id().empty()) {
    _this->_impl_.subscription_id_.Set(from._internal_subscription_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.interval_, &from._impl_.interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.waiting_close_) -
    reinterpret_cast<char*>(&_impl_.interval_)) + sizeof(_impl_.waiting_close_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.CandleSubscription)
}

inline void CandleSubscription::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.subscription_id_){}
    , decltype(_impl_.interval_){0}
    , decltype(_impl_.subscription_status_){0}
    , decltype(_impl_.waiting_close_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subscription_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscription_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CandleSubscription::~CandleSubscription() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.CandleSubscription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CandleSubscription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
  _impl_.stream_id_.Destroy();
  _impl_.subscription_id_.Destroy();
}

void CandleSubscription::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CandleSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.CandleSubscription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  _impl_.stream_id_.ClearToEmpty();
  _impl_.subscription_id_.ClearToEmpty();
  ::memset(&_impl_.interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.waiting_close_) -
      reinterpret_cast<char*>(&_impl_.interval_)) + sizeof(_impl_.waiting_close_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CandleSubscription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.CandleSubscription.figi"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SubscriptionInterval interval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interval(static_cast<::tinkoff::public_::invest::api::contract::v1::SubscriptionInterval>(val));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_subscription_status(static_cast<::tinkoff::public_::invest::api::contract::v1::SubscriptionStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.CandleSubscription.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      // bool waiting_close = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.waiting_close_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string stream_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_stream_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.CandleSubscription.stream_id"));
        } else
          goto handle_unusual;
        continue;
      // string subscription_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_subscription_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.CandleSubscription.subscription_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CandleSubscription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.CandleSubscription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.CandleSubscription.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionInterval interval = 2;
  if (this->_internal_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_interval(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 3;
  if (this->_internal_subscription_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_subscription_status(), target);
  }

  // string instrument_uid = 4;
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.CandleSubscription.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_instrument_uid(), target);
  }

  // bool waiting_close = 5;
  if (this->_internal_waiting_close() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_waiting_close(), target);
  }

  // string stream_id = 6;
  if (!this->_internal_stream_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stream_id().data(), static_cast<int>(this->_internal_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.CandleSubscription.stream_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_stream_id(), target);
  }

  // string subscription_id = 7;
  if (!this->_internal_subscription_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscription_id().data(), static_cast<int>(this->_internal_subscription_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.CandleSubscription.subscription_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_subscription_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.CandleSubscription)
  return target;
}

size_t CandleSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.CandleSubscription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_uid = 4;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  // string stream_id = 6;
  if (!this->_internal_stream_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_id());
  }

  // string subscription_id = 7;
  if (!this->_internal_subscription_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscription_id());
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionInterval interval = 2;
  if (this->_internal_interval() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_interval());
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 3;
  if (this->_internal_subscription_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_subscription_status());
  }

  // bool waiting_close = 5;
  if (this->_internal_waiting_close() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CandleSubscription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CandleSubscription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CandleSubscription::GetClassData() const { return &_class_data_; }


void CandleSubscription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CandleSubscription*>(&to_msg);
  auto& from = static_cast<const CandleSubscription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.CandleSubscription)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (!from._internal_stream_id().empty()) {
    _this->_internal_set_stream_id(from._internal_stream_id());
  }
  if (!from._internal_subscription_id().empty()) {
    _this->_internal_set_subscription_id(from._internal_subscription_id());
  }
  if (from._internal_interval() != 0) {
    _this->_internal_set_interval(from._internal_interval());
  }
  if (from._internal_subscription_status() != 0) {
    _this->_internal_set_subscription_status(from._internal_subscription_status());
  }
  if (from._internal_waiting_close() != 0) {
    _this->_internal_set_waiting_close(from._internal_waiting_close());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CandleSubscription::CopyFrom(const CandleSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.CandleSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandleSubscription::IsInitialized() const {
  return true;
}

void CandleSubscription::InternalSwap(CandleSubscription* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stream_id_, lhs_arena,
      &other->_impl_.stream_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subscription_id_, lhs_arena,
      &other->_impl_.subscription_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CandleSubscription, _impl_.waiting_close_)
      + sizeof(CandleSubscription::_impl_.waiting_close_)
      - PROTOBUF_FIELD_OFFSET(CandleSubscription, _impl_.interval_)>(
          reinterpret_cast<char*>(&_impl_.interval_),
          reinterpret_cast<char*>(&other->_impl_.interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CandleSubscription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[6]);
}

// ===================================================================

class SubscribeOrderBookRequest::_Internal {
 public:
};

SubscribeOrderBookRequest::SubscribeOrderBookRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest)
}
SubscribeOrderBookRequest::SubscribeOrderBookRequest(const SubscribeOrderBookRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeOrderBookRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){from._impl_.instruments_}
    , decltype(_impl_.subscription_action_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.subscription_action_ = from._impl_.subscription_action_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest)
}

inline void SubscribeOrderBookRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){arena}
    , decltype(_impl_.subscription_action_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubscribeOrderBookRequest::~SubscribeOrderBookRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeOrderBookRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instruments_.~RepeatedPtrField();
}

void SubscribeOrderBookRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeOrderBookRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _impl_.subscription_action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeOrderBookRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_subscription_action(static_cast<::tinkoff::public_::invest::api::contract::v1::SubscriptionAction>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.OrderBookInstrument instruments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeOrderBookRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
  if (this->_internal_subscription_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_subscription_action(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.OrderBookInstrument instruments = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest)
  return target;
}

size_t SubscribeOrderBookRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.OrderBookInstrument instruments = 2;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_impl_.instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
  if (this->_internal_subscription_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_subscription_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeOrderBookRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeOrderBookRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeOrderBookRequest::GetClassData() const { return &_class_data_; }


void SubscribeOrderBookRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeOrderBookRequest*>(&to_msg);
  auto& from = static_cast<const SubscribeOrderBookRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instruments_.MergeFrom(from._impl_.instruments_);
  if (from._internal_subscription_action() != 0) {
    _this->_internal_set_subscription_action(from._internal_subscription_action());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeOrderBookRequest::CopyFrom(const SubscribeOrderBookRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeOrderBookRequest::IsInitialized() const {
  return true;
}

void SubscribeOrderBookRequest::InternalSwap(SubscribeOrderBookRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
  swap(_impl_.subscription_action_, other->_impl_.subscription_action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeOrderBookRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[7]);
}

// ===================================================================

class OrderBookInstrument::_Internal {
 public:
};

OrderBookInstrument::OrderBookInstrument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.OrderBookInstrument)
}
OrderBookInstrument::OrderBookInstrument(const OrderBookInstrument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderBookInstrument* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.depth_){}
    , decltype(_impl_.order_book_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_id().empty()) {
    _this->_impl_.instrument_id_.Set(from._internal_instrument_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.depth_, &from._impl_.depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.order_book_type_) -
    reinterpret_cast<char*>(&_impl_.depth_)) + sizeof(_impl_.order_book_type_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.OrderBookInstrument)
}

inline void OrderBookInstrument::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.depth_){0}
    , decltype(_impl_.order_book_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderBookInstrument::~OrderBookInstrument() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.OrderBookInstrument)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderBookInstrument::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
}

void OrderBookInstrument::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderBookInstrument::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.OrderBookInstrument)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  ::memset(&_impl_.depth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.order_book_type_) -
      reinterpret_cast<char*>(&_impl_.depth_)) + sizeof(_impl_.order_book_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderBookInstrument::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OrderBookInstrument.figi"));
        } else
          goto handle_unusual;
        continue;
      // int32 depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instrument_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OrderBookInstrument.instrument_id"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.OrderBookType order_book_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_order_book_type(static_cast<::tinkoff::public_::invest::api::contract::v1::OrderBookType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrderBookInstrument::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.OrderBookInstrument)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OrderBookInstrument.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // int32 depth = 2;
  if (this->_internal_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_depth(), target);
  }

  // string instrument_id = 3;
  if (!this->_internal_instrument_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OrderBookInstrument.instrument_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_instrument_id(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderBookType order_book_type = 4;
  if (this->_internal_order_book_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_order_book_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.OrderBookInstrument)
  return target;
}

size_t OrderBookInstrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.OrderBookInstrument)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_id = 3;
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  // int32 depth = 2;
  if (this->_internal_depth() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_depth());
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderBookType order_book_type = 4;
  if (this->_internal_order_book_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_order_book_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderBookInstrument::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderBookInstrument::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderBookInstrument::GetClassData() const { return &_class_data_; }


void OrderBookInstrument::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderBookInstrument*>(&to_msg);
  auto& from = static_cast<const OrderBookInstrument&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.OrderBookInstrument)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  if (from._internal_depth() != 0) {
    _this->_internal_set_depth(from._internal_depth());
  }
  if (from._internal_order_book_type() != 0) {
    _this->_internal_set_order_book_type(from._internal_order_book_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderBookInstrument::CopyFrom(const OrderBookInstrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.OrderBookInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderBookInstrument::IsInitialized() const {
  return true;
}

void OrderBookInstrument::InternalSwap(OrderBookInstrument* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_id_, lhs_arena,
      &other->_impl_.instrument_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderBookInstrument, _impl_.order_book_type_)
      + sizeof(OrderBookInstrument::_impl_.order_book_type_)
      - PROTOBUF_FIELD_OFFSET(OrderBookInstrument, _impl_.depth_)>(
          reinterpret_cast<char*>(&_impl_.depth_),
          reinterpret_cast<char*>(&other->_impl_.depth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderBookInstrument::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[8]);
}

// ===================================================================

class SubscribeOrderBookResponse::_Internal {
 public:
};

SubscribeOrderBookResponse::SubscribeOrderBookResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse)
}
SubscribeOrderBookResponse::SubscribeOrderBookResponse(const SubscribeOrderBookResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeOrderBookResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_book_subscriptions_){from._impl_.order_book_subscriptions_}
    , decltype(_impl_.tracking_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tracking_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tracking_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tracking_id().empty()) {
    _this->_impl_.tracking_id_.Set(from._internal_tracking_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse)
}

inline void SubscribeOrderBookResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.order_book_subscriptions_){arena}
    , decltype(_impl_.tracking_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tracking_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tracking_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscribeOrderBookResponse::~SubscribeOrderBookResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeOrderBookResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.order_book_subscriptions_.~RepeatedPtrField();
  _impl_.tracking_id_.Destroy();
}

void SubscribeOrderBookResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeOrderBookResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.order_book_subscriptions_.Clear();
  _impl_.tracking_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeOrderBookResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tracking_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tracking_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse.tracking_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.OrderBookSubscription order_book_subscriptions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_order_book_subscriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeOrderBookResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tracking_id = 1;
  if (!this->_internal_tracking_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tracking_id().data(), static_cast<int>(this->_internal_tracking_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse.tracking_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tracking_id(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.OrderBookSubscription order_book_subscriptions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_order_book_subscriptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_order_book_subscriptions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse)
  return target;
}

size_t SubscribeOrderBookResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.OrderBookSubscription order_book_subscriptions = 2;
  total_size += 1UL * this->_internal_order_book_subscriptions_size();
  for (const auto& msg : this->_impl_.order_book_subscriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string tracking_id = 1;
  if (!this->_internal_tracking_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tracking_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeOrderBookResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeOrderBookResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeOrderBookResponse::GetClassData() const { return &_class_data_; }


void SubscribeOrderBookResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeOrderBookResponse*>(&to_msg);
  auto& from = static_cast<const SubscribeOrderBookResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.order_book_subscriptions_.MergeFrom(from._impl_.order_book_subscriptions_);
  if (!from._internal_tracking_id().empty()) {
    _this->_internal_set_tracking_id(from._internal_tracking_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeOrderBookResponse::CopyFrom(const SubscribeOrderBookResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeOrderBookResponse::IsInitialized() const {
  return true;
}

void SubscribeOrderBookResponse::InternalSwap(SubscribeOrderBookResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.order_book_subscriptions_.InternalSwap(&other->_impl_.order_book_subscriptions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tracking_id_, lhs_arena,
      &other->_impl_.tracking_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeOrderBookResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[9]);
}

// ===================================================================

class OrderBookSubscription::_Internal {
 public:
};

OrderBookSubscription::OrderBookSubscription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.OrderBookSubscription)
}
OrderBookSubscription::OrderBookSubscription(const OrderBookSubscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderBookSubscription* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.subscription_id_){}
    , decltype(_impl_.depth_){}
    , decltype(_impl_.subscription_status_){}
    , decltype(_impl_.order_book_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stream_id().empty()) {
    _this->_impl_.stream_id_.Set(from._internal_stream_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subscription_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscription_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subscription_id().empty()) {
    _this->_impl_.subscription_id_.Set(from._internal_subscription_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.depth_, &from._impl_.depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.order_book_type_) -
    reinterpret_cast<char*>(&_impl_.depth_)) + sizeof(_impl_.order_book_type_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.OrderBookSubscription)
}

inline void OrderBookSubscription::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.subscription_id_){}
    , decltype(_impl_.depth_){0}
    , decltype(_impl_.subscription_status_){0}
    , decltype(_impl_.order_book_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subscription_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscription_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderBookSubscription::~OrderBookSubscription() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.OrderBookSubscription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderBookSubscription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
  _impl_.stream_id_.Destroy();
  _impl_.subscription_id_.Destroy();
}

void OrderBookSubscription::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderBookSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.OrderBookSubscription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  _impl_.stream_id_.ClearToEmpty();
  _impl_.subscription_id_.ClearToEmpty();
  ::memset(&_impl_.depth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.order_book_type_) -
      reinterpret_cast<char*>(&_impl_.depth_)) + sizeof(_impl_.order_book_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderBookSubscription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OrderBookSubscription.figi"));
        } else
          goto handle_unusual;
        continue;
      // int32 depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_subscription_status(static_cast<::tinkoff::public_::invest::api::contract::v1::SubscriptionStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OrderBookSubscription.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      // string stream_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_stream_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OrderBookSubscription.stream_id"));
        } else
          goto handle_unusual;
        continue;
      // string subscription_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_subscription_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OrderBookSubscription.subscription_id"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.OrderBookType order_book_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_order_book_type(static_cast<::tinkoff::public_::invest::api::contract::v1::OrderBookType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrderBookSubscription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.OrderBookSubscription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OrderBookSubscription.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // int32 depth = 2;
  if (this->_internal_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_depth(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 3;
  if (this->_internal_subscription_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_subscription_status(), target);
  }

  // string instrument_uid = 4;
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OrderBookSubscription.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_instrument_uid(), target);
  }

  // string stream_id = 5;
  if (!this->_internal_stream_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stream_id().data(), static_cast<int>(this->_internal_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OrderBookSubscription.stream_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_stream_id(), target);
  }

  // string subscription_id = 6;
  if (!this->_internal_subscription_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscription_id().data(), static_cast<int>(this->_internal_subscription_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OrderBookSubscription.subscription_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_subscription_id(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderBookType order_book_type = 7;
  if (this->_internal_order_book_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_order_book_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.OrderBookSubscription)
  return target;
}

size_t OrderBookSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.OrderBookSubscription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_uid = 4;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  // string stream_id = 5;
  if (!this->_internal_stream_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_id());
  }

  // string subscription_id = 6;
  if (!this->_internal_subscription_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscription_id());
  }

  // int32 depth = 2;
  if (this->_internal_depth() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_depth());
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 3;
  if (this->_internal_subscription_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_subscription_status());
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderBookType order_book_type = 7;
  if (this->_internal_order_book_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_order_book_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderBookSubscription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderBookSubscription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderBookSubscription::GetClassData() const { return &_class_data_; }


void OrderBookSubscription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderBookSubscription*>(&to_msg);
  auto& from = static_cast<const OrderBookSubscription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.OrderBookSubscription)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (!from._internal_stream_id().empty()) {
    _this->_internal_set_stream_id(from._internal_stream_id());
  }
  if (!from._internal_subscription_id().empty()) {
    _this->_internal_set_subscription_id(from._internal_subscription_id());
  }
  if (from._internal_depth() != 0) {
    _this->_internal_set_depth(from._internal_depth());
  }
  if (from._internal_subscription_status() != 0) {
    _this->_internal_set_subscription_status(from._internal_subscription_status());
  }
  if (from._internal_order_book_type() != 0) {
    _this->_internal_set_order_book_type(from._internal_order_book_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderBookSubscription::CopyFrom(const OrderBookSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.OrderBookSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderBookSubscription::IsInitialized() const {
  return true;
}

void OrderBookSubscription::InternalSwap(OrderBookSubscription* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stream_id_, lhs_arena,
      &other->_impl_.stream_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subscription_id_, lhs_arena,
      &other->_impl_.subscription_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderBookSubscription, _impl_.order_book_type_)
      + sizeof(OrderBookSubscription::_impl_.order_book_type_)
      - PROTOBUF_FIELD_OFFSET(OrderBookSubscription, _impl_.depth_)>(
          reinterpret_cast<char*>(&_impl_.depth_),
          reinterpret_cast<char*>(&other->_impl_.depth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderBookSubscription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[10]);
}

// ===================================================================

class SubscribeTradesRequest::_Internal {
 public:
};

SubscribeTradesRequest::SubscribeTradesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest)
}
SubscribeTradesRequest::SubscribeTradesRequest(const SubscribeTradesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeTradesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){from._impl_.instruments_}
    , decltype(_impl_.subscription_action_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.subscription_action_ = from._impl_.subscription_action_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest)
}

inline void SubscribeTradesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){arena}
    , decltype(_impl_.subscription_action_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubscribeTradesRequest::~SubscribeTradesRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeTradesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instruments_.~RepeatedPtrField();
}

void SubscribeTradesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeTradesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _impl_.subscription_action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeTradesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_subscription_action(static_cast<::tinkoff::public_::invest::api::contract::v1::SubscriptionAction>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.TradeInstrument instruments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeTradesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
  if (this->_internal_subscription_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_subscription_action(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.TradeInstrument instruments = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest)
  return target;
}

size_t SubscribeTradesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.TradeInstrument instruments = 2;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_impl_.instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
  if (this->_internal_subscription_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_subscription_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeTradesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeTradesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeTradesRequest::GetClassData() const { return &_class_data_; }


void SubscribeTradesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeTradesRequest*>(&to_msg);
  auto& from = static_cast<const SubscribeTradesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instruments_.MergeFrom(from._impl_.instruments_);
  if (from._internal_subscription_action() != 0) {
    _this->_internal_set_subscription_action(from._internal_subscription_action());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeTradesRequest::CopyFrom(const SubscribeTradesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeTradesRequest::IsInitialized() const {
  return true;
}

void SubscribeTradesRequest::InternalSwap(SubscribeTradesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
  swap(_impl_.subscription_action_, other->_impl_.subscription_action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeTradesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[11]);
}

// ===================================================================

class TradeInstrument::_Internal {
 public:
};

TradeInstrument::TradeInstrument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.TradeInstrument)
}
TradeInstrument::TradeInstrument(const TradeInstrument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TradeInstrument* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_id().empty()) {
    _this->_impl_.instrument_id_.Set(from._internal_instrument_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.TradeInstrument)
}

inline void TradeInstrument::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TradeInstrument::~TradeInstrument() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.TradeInstrument)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TradeInstrument::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
}

void TradeInstrument::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TradeInstrument::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.TradeInstrument)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradeInstrument::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.TradeInstrument.figi"));
        } else
          goto handle_unusual;
        continue;
      // string instrument_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.TradeInstrument.instrument_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TradeInstrument::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.TradeInstrument)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.TradeInstrument.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // string instrument_id = 2;
  if (!this->_internal_instrument_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.TradeInstrument.instrument_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instrument_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.TradeInstrument)
  return target;
}

size_t TradeInstrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.TradeInstrument)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_id = 2;
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TradeInstrument::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TradeInstrument::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TradeInstrument::GetClassData() const { return &_class_data_; }


void TradeInstrument::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TradeInstrument*>(&to_msg);
  auto& from = static_cast<const TradeInstrument&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.TradeInstrument)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TradeInstrument::CopyFrom(const TradeInstrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.TradeInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeInstrument::IsInitialized() const {
  return true;
}

void TradeInstrument::InternalSwap(TradeInstrument* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_id_, lhs_arena,
      &other->_impl_.instrument_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeInstrument::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[12]);
}

// ===================================================================

class SubscribeTradesResponse::_Internal {
 public:
};

SubscribeTradesResponse::SubscribeTradesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse)
}
SubscribeTradesResponse::SubscribeTradesResponse(const SubscribeTradesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeTradesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trade_subscriptions_){from._impl_.trade_subscriptions_}
    , decltype(_impl_.tracking_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tracking_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tracking_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tracking_id().empty()) {
    _this->_impl_.tracking_id_.Set(from._internal_tracking_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse)
}

inline void SubscribeTradesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trade_subscriptions_){arena}
    , decltype(_impl_.tracking_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tracking_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tracking_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscribeTradesResponse::~SubscribeTradesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeTradesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trade_subscriptions_.~RepeatedPtrField();
  _impl_.tracking_id_.Destroy();
}

void SubscribeTradesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeTradesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trade_subscriptions_.Clear();
  _impl_.tracking_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeTradesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tracking_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tracking_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse.tracking_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.TradeSubscription trade_subscriptions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trade_subscriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeTradesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tracking_id = 1;
  if (!this->_internal_tracking_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tracking_id().data(), static_cast<int>(this->_internal_tracking_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse.tracking_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tracking_id(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.TradeSubscription trade_subscriptions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trade_subscriptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_trade_subscriptions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse)
  return target;
}

size_t SubscribeTradesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.TradeSubscription trade_subscriptions = 2;
  total_size += 1UL * this->_internal_trade_subscriptions_size();
  for (const auto& msg : this->_impl_.trade_subscriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string tracking_id = 1;
  if (!this->_internal_tracking_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tracking_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeTradesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeTradesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeTradesResponse::GetClassData() const { return &_class_data_; }


void SubscribeTradesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeTradesResponse*>(&to_msg);
  auto& from = static_cast<const SubscribeTradesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.trade_subscriptions_.MergeFrom(from._impl_.trade_subscriptions_);
  if (!from._internal_tracking_id().empty()) {
    _this->_internal_set_tracking_id(from._internal_tracking_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeTradesResponse::CopyFrom(const SubscribeTradesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeTradesResponse::IsInitialized() const {
  return true;
}

void SubscribeTradesResponse::InternalSwap(SubscribeTradesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.trade_subscriptions_.InternalSwap(&other->_impl_.trade_subscriptions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tracking_id_, lhs_arena,
      &other->_impl_.tracking_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeTradesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[13]);
}

// ===================================================================

class TradeSubscription::_Internal {
 public:
};

TradeSubscription::TradeSubscription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.TradeSubscription)
}
TradeSubscription::TradeSubscription(const TradeSubscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TradeSubscription* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.subscription_id_){}
    , decltype(_impl_.subscription_status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stream_id().empty()) {
    _this->_impl_.stream_id_.Set(from._internal_stream_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subscription_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscription_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subscription_id().empty()) {
    _this->_impl_.subscription_id_.Set(from._internal_subscription_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.subscription_status_ = from._impl_.subscription_status_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.TradeSubscription)
}

inline void TradeSubscription::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.subscription_id_){}
    , decltype(_impl_.subscription_status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subscription_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscription_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TradeSubscription::~TradeSubscription() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.TradeSubscription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TradeSubscription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
  _impl_.stream_id_.Destroy();
  _impl_.subscription_id_.Destroy();
}

void TradeSubscription::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TradeSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.TradeSubscription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  _impl_.stream_id_.ClearToEmpty();
  _impl_.subscription_id_.ClearToEmpty();
  _impl_.subscription_status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradeSubscription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.TradeSubscription.figi"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_subscription_status(static_cast<::tinkoff::public_::invest::api::contract::v1::SubscriptionStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.TradeSubscription.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      // string stream_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_stream_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.TradeSubscription.stream_id"));
        } else
          goto handle_unusual;
        continue;
      // string subscription_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_subscription_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.TradeSubscription.subscription_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TradeSubscription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.TradeSubscription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.TradeSubscription.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
  if (this->_internal_subscription_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_subscription_status(), target);
  }

  // string instrument_uid = 3;
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.TradeSubscription.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_instrument_uid(), target);
  }

  // string stream_id = 4;
  if (!this->_internal_stream_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stream_id().data(), static_cast<int>(this->_internal_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.TradeSubscription.stream_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_stream_id(), target);
  }

  // string subscription_id = 5;
  if (!this->_internal_subscription_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscription_id().data(), static_cast<int>(this->_internal_subscription_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.TradeSubscription.subscription_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_subscription_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.TradeSubscription)
  return target;
}

size_t TradeSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.TradeSubscription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_uid = 3;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  // string stream_id = 4;
  if (!this->_internal_stream_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_id());
  }

  // string subscription_id = 5;
  if (!this->_internal_subscription_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscription_id());
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
  if (this->_internal_subscription_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_subscription_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TradeSubscription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TradeSubscription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TradeSubscription::GetClassData() const { return &_class_data_; }


void TradeSubscription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TradeSubscription*>(&to_msg);
  auto& from = static_cast<const TradeSubscription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.TradeSubscription)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (!from._internal_stream_id().empty()) {
    _this->_internal_set_stream_id(from._internal_stream_id());
  }
  if (!from._internal_subscription_id().empty()) {
    _this->_internal_set_subscription_id(from._internal_subscription_id());
  }
  if (from._internal_subscription_status() != 0) {
    _this->_internal_set_subscription_status(from._internal_subscription_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TradeSubscription::CopyFrom(const TradeSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.TradeSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeSubscription::IsInitialized() const {
  return true;
}

void TradeSubscription::InternalSwap(TradeSubscription* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stream_id_, lhs_arena,
      &other->_impl_.stream_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subscription_id_, lhs_arena,
      &other->_impl_.subscription_id_, rhs_arena
  );
  swap(_impl_.subscription_status_, other->_impl_.subscription_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeSubscription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[14]);
}

// ===================================================================

class SubscribeInfoRequest::_Internal {
 public:
};

SubscribeInfoRequest::SubscribeInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest)
}
SubscribeInfoRequest::SubscribeInfoRequest(const SubscribeInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){from._impl_.instruments_}
    , decltype(_impl_.subscription_action_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.subscription_action_ = from._impl_.subscription_action_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest)
}

inline void SubscribeInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){arena}
    , decltype(_impl_.subscription_action_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubscribeInfoRequest::~SubscribeInfoRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instruments_.~RepeatedPtrField();
}

void SubscribeInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _impl_.subscription_action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_subscription_action(static_cast<::tinkoff::public_::invest::api::contract::v1::SubscriptionAction>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.InfoInstrument instruments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
  if (this->_internal_subscription_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_subscription_action(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.InfoInstrument instruments = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest)
  return target;
}

size_t SubscribeInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.InfoInstrument instruments = 2;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_impl_.instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
  if (this->_internal_subscription_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_subscription_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeInfoRequest::GetClassData() const { return &_class_data_; }


void SubscribeInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeInfoRequest*>(&to_msg);
  auto& from = static_cast<const SubscribeInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instruments_.MergeFrom(from._impl_.instruments_);
  if (from._internal_subscription_action() != 0) {
    _this->_internal_set_subscription_action(from._internal_subscription_action());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeInfoRequest::CopyFrom(const SubscribeInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeInfoRequest::IsInitialized() const {
  return true;
}

void SubscribeInfoRequest::InternalSwap(SubscribeInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
  swap(_impl_.subscription_action_, other->_impl_.subscription_action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[15]);
}

// ===================================================================

class InfoInstrument::_Internal {
 public:
};

InfoInstrument::InfoInstrument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.InfoInstrument)
}
InfoInstrument::InfoInstrument(const InfoInstrument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InfoInstrument* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_id().empty()) {
    _this->_impl_.instrument_id_.Set(from._internal_instrument_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.InfoInstrument)
}

inline void InfoInstrument::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InfoInstrument::~InfoInstrument() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.InfoInstrument)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InfoInstrument::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
}

void InfoInstrument::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InfoInstrument::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.InfoInstrument)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoInstrument::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.InfoInstrument.figi"));
        } else
          goto handle_unusual;
        continue;
      // string instrument_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.InfoInstrument.instrument_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InfoInstrument::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.InfoInstrument)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.InfoInstrument.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // string instrument_id = 2;
  if (!this->_internal_instrument_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.InfoInstrument.instrument_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instrument_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.InfoInstrument)
  return target;
}

size_t InfoInstrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.InfoInstrument)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_id = 2;
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InfoInstrument::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InfoInstrument::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InfoInstrument::GetClassData() const { return &_class_data_; }


void InfoInstrument::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InfoInstrument*>(&to_msg);
  auto& from = static_cast<const InfoInstrument&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.InfoInstrument)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InfoInstrument::CopyFrom(const InfoInstrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.InfoInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoInstrument::IsInitialized() const {
  return true;
}

void InfoInstrument::InternalSwap(InfoInstrument* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_id_, lhs_arena,
      &other->_impl_.instrument_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoInstrument::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[16]);
}

// ===================================================================

class SubscribeInfoResponse::_Internal {
 public:
};

SubscribeInfoResponse::SubscribeInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse)
}
SubscribeInfoResponse::SubscribeInfoResponse(const SubscribeInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_subscriptions_){from._impl_.info_subscriptions_}
    , decltype(_impl_.tracking_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tracking_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tracking_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tracking_id().empty()) {
    _this->_impl_.tracking_id_.Set(from._internal_tracking_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse)
}

inline void SubscribeInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_subscriptions_){arena}
    , decltype(_impl_.tracking_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tracking_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tracking_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscribeInfoResponse::~SubscribeInfoResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.info_subscriptions_.~RepeatedPtrField();
  _impl_.tracking_id_.Destroy();
}

void SubscribeInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.info_subscriptions_.Clear();
  _impl_.tracking_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tracking_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tracking_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse.tracking_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.InfoSubscription info_subscriptions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info_subscriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tracking_id = 1;
  if (!this->_internal_tracking_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tracking_id().data(), static_cast<int>(this->_internal_tracking_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse.tracking_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tracking_id(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.InfoSubscription info_subscriptions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_info_subscriptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_info_subscriptions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse)
  return target;
}

size_t SubscribeInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.InfoSubscription info_subscriptions = 2;
  total_size += 1UL * this->_internal_info_subscriptions_size();
  for (const auto& msg : this->_impl_.info_subscriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string tracking_id = 1;
  if (!this->_internal_tracking_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tracking_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeInfoResponse::GetClassData() const { return &_class_data_; }


void SubscribeInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeInfoResponse*>(&to_msg);
  auto& from = static_cast<const SubscribeInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.info_subscriptions_.MergeFrom(from._impl_.info_subscriptions_);
  if (!from._internal_tracking_id().empty()) {
    _this->_internal_set_tracking_id(from._internal_tracking_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeInfoResponse::CopyFrom(const SubscribeInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeInfoResponse::IsInitialized() const {
  return true;
}

void SubscribeInfoResponse::InternalSwap(SubscribeInfoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.info_subscriptions_.InternalSwap(&other->_impl_.info_subscriptions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tracking_id_, lhs_arena,
      &other->_impl_.tracking_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[17]);
}

// ===================================================================

class InfoSubscription::_Internal {
 public:
};

InfoSubscription::InfoSubscription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.InfoSubscription)
}
InfoSubscription::InfoSubscription(const InfoSubscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InfoSubscription* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.subscription_id_){}
    , decltype(_impl_.subscription_status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stream_id().empty()) {
    _this->_impl_.stream_id_.Set(from._internal_stream_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subscription_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscription_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subscription_id().empty()) {
    _this->_impl_.subscription_id_.Set(from._internal_subscription_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.subscription_status_ = from._impl_.subscription_status_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.InfoSubscription)
}

inline void InfoSubscription::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.subscription_id_){}
    , decltype(_impl_.subscription_status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subscription_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscription_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InfoSubscription::~InfoSubscription() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.InfoSubscription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InfoSubscription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
  _impl_.stream_id_.Destroy();
  _impl_.subscription_id_.Destroy();
}

void InfoSubscription::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InfoSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.InfoSubscription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  _impl_.stream_id_.ClearToEmpty();
  _impl_.subscription_id_.ClearToEmpty();
  _impl_.subscription_status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoSubscription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.InfoSubscription.figi"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_subscription_status(static_cast<::tinkoff::public_::invest::api::contract::v1::SubscriptionStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.InfoSubscription.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      // string stream_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_stream_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.InfoSubscription.stream_id"));
        } else
          goto handle_unusual;
        continue;
      // string subscription_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_subscription_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.InfoSubscription.subscription_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InfoSubscription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.InfoSubscription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.InfoSubscription.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
  if (this->_internal_subscription_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_subscription_status(), target);
  }

  // string instrument_uid = 3;
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.InfoSubscription.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_instrument_uid(), target);
  }

  // string stream_id = 4;
  if (!this->_internal_stream_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stream_id().data(), static_cast<int>(this->_internal_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.InfoSubscription.stream_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_stream_id(), target);
  }

  // string subscription_id = 5;
  if (!this->_internal_subscription_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscription_id().data(), static_cast<int>(this->_internal_subscription_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.InfoSubscription.subscription_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_subscription_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.InfoSubscription)
  return target;
}

size_t InfoSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.InfoSubscription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_uid = 3;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  // string stream_id = 4;
  if (!this->_internal_stream_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_id());
  }

  // string subscription_id = 5;
  if (!this->_internal_subscription_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscription_id());
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
  if (this->_internal_subscription_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_subscription_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InfoSubscription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InfoSubscription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InfoSubscription::GetClassData() const { return &_class_data_; }


void InfoSubscription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InfoSubscription*>(&to_msg);
  auto& from = static_cast<const InfoSubscription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.InfoSubscription)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (!from._internal_stream_id().empty()) {
    _this->_internal_set_stream_id(from._internal_stream_id());
  }
  if (!from._internal_subscription_id().empty()) {
    _this->_internal_set_subscription_id(from._internal_subscription_id());
  }
  if (from._internal_subscription_status() != 0) {
    _this->_internal_set_subscription_status(from._internal_subscription_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InfoSubscription::CopyFrom(const InfoSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.InfoSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoSubscription::IsInitialized() const {
  return true;
}

void InfoSubscription::InternalSwap(InfoSubscription* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stream_id_, lhs_arena,
      &other->_impl_.stream_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subscription_id_, lhs_arena,
      &other->_impl_.subscription_id_, rhs_arena
  );
  swap(_impl_.subscription_status_, other->_impl_.subscription_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoSubscription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[18]);
}

// ===================================================================

class SubscribeLastPriceRequest::_Internal {
 public:
};

SubscribeLastPriceRequest::SubscribeLastPriceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest)
}
SubscribeLastPriceRequest::SubscribeLastPriceRequest(const SubscribeLastPriceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeLastPriceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){from._impl_.instruments_}
    , decltype(_impl_.subscription_action_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.subscription_action_ = from._impl_.subscription_action_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest)
}

inline void SubscribeLastPriceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){arena}
    , decltype(_impl_.subscription_action_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubscribeLastPriceRequest::~SubscribeLastPriceRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeLastPriceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instruments_.~RepeatedPtrField();
}

void SubscribeLastPriceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeLastPriceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _impl_.subscription_action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeLastPriceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_subscription_action(static_cast<::tinkoff::public_::invest::api::contract::v1::SubscriptionAction>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.LastPriceInstrument instruments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeLastPriceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
  if (this->_internal_subscription_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_subscription_action(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.LastPriceInstrument instruments = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest)
  return target;
}

size_t SubscribeLastPriceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.LastPriceInstrument instruments = 2;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_impl_.instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
  if (this->_internal_subscription_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_subscription_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeLastPriceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeLastPriceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeLastPriceRequest::GetClassData() const { return &_class_data_; }


void SubscribeLastPriceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeLastPriceRequest*>(&to_msg);
  auto& from = static_cast<const SubscribeLastPriceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instruments_.MergeFrom(from._impl_.instruments_);
  if (from._internal_subscription_action() != 0) {
    _this->_internal_set_subscription_action(from._internal_subscription_action());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeLastPriceRequest::CopyFrom(const SubscribeLastPriceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeLastPriceRequest::IsInitialized() const {
  return true;
}

void SubscribeLastPriceRequest::InternalSwap(SubscribeLastPriceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
  swap(_impl_.subscription_action_, other->_impl_.subscription_action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeLastPriceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[19]);
}

// ===================================================================

class LastPriceInstrument::_Internal {
 public:
};

LastPriceInstrument::LastPriceInstrument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.LastPriceInstrument)
}
LastPriceInstrument::LastPriceInstrument(const LastPriceInstrument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LastPriceInstrument* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_id().empty()) {
    _this->_impl_.instrument_id_.Set(from._internal_instrument_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.LastPriceInstrument)
}

inline void LastPriceInstrument::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LastPriceInstrument::~LastPriceInstrument() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.LastPriceInstrument)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LastPriceInstrument::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
}

void LastPriceInstrument::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LastPriceInstrument::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.LastPriceInstrument)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LastPriceInstrument::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.LastPriceInstrument.figi"));
        } else
          goto handle_unusual;
        continue;
      // string instrument_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.LastPriceInstrument.instrument_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LastPriceInstrument::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.LastPriceInstrument)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.LastPriceInstrument.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // string instrument_id = 2;
  if (!this->_internal_instrument_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.LastPriceInstrument.instrument_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instrument_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.LastPriceInstrument)
  return target;
}

size_t LastPriceInstrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.LastPriceInstrument)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_id = 2;
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LastPriceInstrument::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LastPriceInstrument::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LastPriceInstrument::GetClassData() const { return &_class_data_; }


void LastPriceInstrument::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LastPriceInstrument*>(&to_msg);
  auto& from = static_cast<const LastPriceInstrument&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.LastPriceInstrument)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LastPriceInstrument::CopyFrom(const LastPriceInstrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.LastPriceInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastPriceInstrument::IsInitialized() const {
  return true;
}

void LastPriceInstrument::InternalSwap(LastPriceInstrument* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_id_, lhs_arena,
      &other->_impl_.instrument_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LastPriceInstrument::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[20]);
}

// ===================================================================

class SubscribeLastPriceResponse::_Internal {
 public:
};

SubscribeLastPriceResponse::SubscribeLastPriceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse)
}
SubscribeLastPriceResponse::SubscribeLastPriceResponse(const SubscribeLastPriceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeLastPriceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.last_price_subscriptions_){from._impl_.last_price_subscriptions_}
    , decltype(_impl_.tracking_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tracking_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tracking_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tracking_id().empty()) {
    _this->_impl_.tracking_id_.Set(from._internal_tracking_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse)
}

inline void SubscribeLastPriceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.last_price_subscriptions_){arena}
    , decltype(_impl_.tracking_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tracking_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tracking_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscribeLastPriceResponse::~SubscribeLastPriceResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeLastPriceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.last_price_subscriptions_.~RepeatedPtrField();
  _impl_.tracking_id_.Destroy();
}

void SubscribeLastPriceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeLastPriceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.last_price_subscriptions_.Clear();
  _impl_.tracking_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeLastPriceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tracking_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tracking_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse.tracking_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.LastPriceSubscription last_price_subscriptions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_last_price_subscriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeLastPriceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tracking_id = 1;
  if (!this->_internal_tracking_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tracking_id().data(), static_cast<int>(this->_internal_tracking_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse.tracking_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tracking_id(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.LastPriceSubscription last_price_subscriptions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_last_price_subscriptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_last_price_subscriptions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse)
  return target;
}

size_t SubscribeLastPriceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.LastPriceSubscription last_price_subscriptions = 2;
  total_size += 1UL * this->_internal_last_price_subscriptions_size();
  for (const auto& msg : this->_impl_.last_price_subscriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string tracking_id = 1;
  if (!this->_internal_tracking_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tracking_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeLastPriceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeLastPriceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeLastPriceResponse::GetClassData() const { return &_class_data_; }


void SubscribeLastPriceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeLastPriceResponse*>(&to_msg);
  auto& from = static_cast<const SubscribeLastPriceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.last_price_subscriptions_.MergeFrom(from._impl_.last_price_subscriptions_);
  if (!from._internal_tracking_id().empty()) {
    _this->_internal_set_tracking_id(from._internal_tracking_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeLastPriceResponse::CopyFrom(const SubscribeLastPriceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeLastPriceResponse::IsInitialized() const {
  return true;
}

void SubscribeLastPriceResponse::InternalSwap(SubscribeLastPriceResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.last_price_subscriptions_.InternalSwap(&other->_impl_.last_price_subscriptions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tracking_id_, lhs_arena,
      &other->_impl_.tracking_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeLastPriceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[21]);
}

// ===================================================================

class LastPriceSubscription::_Internal {
 public:
};

LastPriceSubscription::LastPriceSubscription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.LastPriceSubscription)
}
LastPriceSubscription::LastPriceSubscription(const LastPriceSubscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LastPriceSubscription* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.subscription_id_){}
    , decltype(_impl_.subscription_status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stream_id().empty()) {
    _this->_impl_.stream_id_.Set(from._internal_stream_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subscription_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscription_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subscription_id().empty()) {
    _this->_impl_.subscription_id_.Set(from._internal_subscription_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.subscription_status_ = from._impl_.subscription_status_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.LastPriceSubscription)
}

inline void LastPriceSubscription::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.subscription_id_){}
    , decltype(_impl_.subscription_status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subscription_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscription_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LastPriceSubscription::~LastPriceSubscription() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.LastPriceSubscription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LastPriceSubscription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
  _impl_.stream_id_.Destroy();
  _impl_.subscription_id_.Destroy();
}

void LastPriceSubscription::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LastPriceSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.LastPriceSubscription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  _impl_.stream_id_.ClearToEmpty();
  _impl_.subscription_id_.ClearToEmpty();
  _impl_.subscription_status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LastPriceSubscription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.LastPriceSubscription.figi"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_subscription_status(static_cast<::tinkoff::public_::invest::api::contract::v1::SubscriptionStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.LastPriceSubscription.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      // string stream_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_stream_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.LastPriceSubscription.stream_id"));
        } else
          goto handle_unusual;
        continue;
      // string subscription_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_subscription_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.LastPriceSubscription.subscription_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LastPriceSubscription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.LastPriceSubscription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.LastPriceSubscription.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
  if (this->_internal_subscription_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_subscription_status(), target);
  }

  // string instrument_uid = 3;
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.LastPriceSubscription.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_instrument_uid(), target);
  }

  // string stream_id = 4;
  if (!this->_internal_stream_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stream_id().data(), static_cast<int>(this->_internal_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.LastPriceSubscription.stream_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_stream_id(), target);
  }

  // string subscription_id = 5;
  if (!this->_internal_subscription_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscription_id().data(), static_cast<int>(this->_internal_subscription_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.LastPriceSubscription.subscription_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_subscription_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.LastPriceSubscription)
  return target;
}

size_t LastPriceSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.LastPriceSubscription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_uid = 3;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  // string stream_id = 4;
  if (!this->_internal_stream_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_id());
  }

  // string subscription_id = 5;
  if (!this->_internal_subscription_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscription_id());
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
  if (this->_internal_subscription_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_subscription_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LastPriceSubscription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LastPriceSubscription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LastPriceSubscription::GetClassData() const { return &_class_data_; }


void LastPriceSubscription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LastPriceSubscription*>(&to_msg);
  auto& from = static_cast<const LastPriceSubscription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.LastPriceSubscription)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (!from._internal_stream_id().empty()) {
    _this->_internal_set_stream_id(from._internal_stream_id());
  }
  if (!from._internal_subscription_id().empty()) {
    _this->_internal_set_subscription_id(from._internal_subscription_id());
  }
  if (from._internal_subscription_status() != 0) {
    _this->_internal_set_subscription_status(from._internal_subscription_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LastPriceSubscription::CopyFrom(const LastPriceSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.LastPriceSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastPriceSubscription::IsInitialized() const {
  return true;
}

void LastPriceSubscription::InternalSwap(LastPriceSubscription* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stream_id_, lhs_arena,
      &other->_impl_.stream_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subscription_id_, lhs_arena,
      &other->_impl_.subscription_id_, rhs_arena
  );
  swap(_impl_.subscription_status_, other->_impl_.subscription_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LastPriceSubscription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[22]);
}

// ===================================================================

class Candle::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& open(const Candle* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& high(const Candle* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& low(const Candle* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& close(const Candle* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const Candle* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_trade_ts(const Candle* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Candle::_Internal::open(const Candle* msg) {
  return *msg->_impl_.open_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Candle::_Internal::high(const Candle* msg) {
  return *msg->_impl_.high_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Candle::_Internal::low(const Candle* msg) {
  return *msg->_impl_.low_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Candle::_Internal::close(const Candle* msg) {
  return *msg->_impl_.close_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Candle::_Internal::time(const Candle* msg) {
  return *msg->_impl_.time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Candle::_Internal::last_trade_ts(const Candle* msg) {
  return *msg->_impl_.last_trade_ts_;
}
void Candle::clear_open() {
  if (GetArenaForAllocation() == nullptr && _impl_.open_ != nullptr) {
    delete _impl_.open_;
  }
  _impl_.open_ = nullptr;
}
void Candle::clear_high() {
  if (GetArenaForAllocation() == nullptr && _impl_.high_ != nullptr) {
    delete _impl_.high_;
  }
  _impl_.high_ = nullptr;
}
void Candle::clear_low() {
  if (GetArenaForAllocation() == nullptr && _impl_.low_ != nullptr) {
    delete _impl_.low_;
  }
  _impl_.low_ = nullptr;
}
void Candle::clear_close() {
  if (GetArenaForAllocation() == nullptr && _impl_.close_ != nullptr) {
    delete _impl_.close_;
  }
  _impl_.close_ = nullptr;
}
void Candle::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
void Candle::clear_last_trade_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_trade_ts_ != nullptr) {
    delete _impl_.last_trade_ts_;
  }
  _impl_.last_trade_ts_ = nullptr;
}
Candle::Candle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Candle)
}
Candle::Candle(const Candle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Candle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.open_){nullptr}
    , decltype(_impl_.high_){nullptr}
    , decltype(_impl_.low_){nullptr}
    , decltype(_impl_.close_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.last_trade_ts_){nullptr}
    , decltype(_impl_.volume_){}
    , decltype(_impl_.interval_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_open()) {
    _this->_impl_.open_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.open_);
  }
  if (from._internal_has_high()) {
    _this->_impl_.high_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.high_);
  }
  if (from._internal_has_low()) {
    _this->_impl_.low_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.low_);
  }
  if (from._internal_has_close()) {
    _this->_impl_.close_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.close_);
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  if (from._internal_has_last_trade_ts()) {
    _this->_impl_.last_trade_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_trade_ts_);
  }
  ::memcpy(&_impl_.volume_, &from._impl_.volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.interval_) -
    reinterpret_cast<char*>(&_impl_.volume_)) + sizeof(_impl_.interval_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Candle)
}

inline void Candle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.open_){nullptr}
    , decltype(_impl_.high_){nullptr}
    , decltype(_impl_.low_){nullptr}
    , decltype(_impl_.close_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.last_trade_ts_){nullptr}
    , decltype(_impl_.volume_){int64_t{0}}
    , decltype(_impl_.interval_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Candle::~Candle() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Candle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Candle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.open_;
  if (this != internal_default_instance()) delete _impl_.high_;
  if (this != internal_default_instance()) delete _impl_.low_;
  if (this != internal_default_instance()) delete _impl_.close_;
  if (this != internal_default_instance()) delete _impl_.time_;
  if (this != internal_default_instance()) delete _impl_.last_trade_ts_;
}

void Candle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Candle::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Candle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.open_ != nullptr) {
    delete _impl_.open_;
  }
  _impl_.open_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.high_ != nullptr) {
    delete _impl_.high_;
  }
  _impl_.high_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.low_ != nullptr) {
    delete _impl_.low_;
  }
  _impl_.low_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.close_ != nullptr) {
    delete _impl_.close_;
  }
  _impl_.close_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_trade_ts_ != nullptr) {
    delete _impl_.last_trade_ts_;
  }
  _impl_.last_trade_ts_ = nullptr;
  ::memset(&_impl_.volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.interval_) -
      reinterpret_cast<char*>(&_impl_.volume_)) + sizeof(_impl_.interval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Candle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Candle.figi"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SubscriptionInterval interval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interval(static_cast<::tinkoff::public_::invest::api::contract::v1::SubscriptionInterval>(val));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation open = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_open(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation high = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_high(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation low = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_low(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation close = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_close(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 volume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_trade_ts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_trade_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Candle.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Candle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Candle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Candle.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionInterval interval = 2;
  if (this->_internal_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_interval(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation open = 3;
  if (this->_internal_has_open()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::open(this),
        _Internal::open(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation high = 4;
  if (this->_internal_has_high()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::high(this),
        _Internal::high(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation low = 5;
  if (this->_internal_has_low()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::low(this),
        _Internal::low(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation close = 6;
  if (this->_internal_has_close()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::close(this),
        _Internal::close(this).GetCachedSize(), target, stream);
  }

  // int64 volume = 7;
  if (this->_internal_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_volume(), target);
  }

  // .google.protobuf.Timestamp time = 8;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_trade_ts = 9;
  if (this->_internal_has_last_trade_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::last_trade_ts(this),
        _Internal::last_trade_ts(this).GetCachedSize(), target, stream);
  }

  // string instrument_uid = 10;
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Candle.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_instrument_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Candle)
  return target;
}

size_t Candle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Candle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_uid = 10;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation open = 3;
  if (this->_internal_has_open()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.open_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation high = 4;
  if (this->_internal_has_high()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.high_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation low = 5;
  if (this->_internal_has_low()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.low_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation close = 6;
  if (this->_internal_has_close()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.close_);
  }

  // .google.protobuf.Timestamp time = 8;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // .google.protobuf.Timestamp last_trade_ts = 9;
  if (this->_internal_has_last_trade_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_trade_ts_);
  }

  // int64 volume = 7;
  if (this->_internal_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_volume());
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionInterval interval = 2;
  if (this->_internal_interval() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_interval());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Candle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Candle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Candle::GetClassData() const { return &_class_data_; }


void Candle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Candle*>(&to_msg);
  auto& from = static_cast<const Candle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Candle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (from._internal_has_open()) {
    _this->_internal_mutable_open()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_open());
  }
  if (from._internal_has_high()) {
    _this->_internal_mutable_high()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_high());
  }
  if (from._internal_has_low()) {
    _this->_internal_mutable_low()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_low());
  }
  if (from._internal_has_close()) {
    _this->_internal_mutable_close()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_close());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_has_last_trade_ts()) {
    _this->_internal_mutable_last_trade_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_trade_ts());
  }
  if (from._internal_volume() != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  if (from._internal_interval() != 0) {
    _this->_internal_set_interval(from._internal_interval());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Candle::CopyFrom(const Candle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Candle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Candle::IsInitialized() const {
  return true;
}

void Candle::InternalSwap(Candle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Candle, _impl_.interval_)
      + sizeof(Candle::_impl_.interval_)
      - PROTOBUF_FIELD_OFFSET(Candle, _impl_.open_)>(
          reinterpret_cast<char*>(&_impl_.open_),
          reinterpret_cast<char*>(&other->_impl_.open_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Candle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[23]);
}

// ===================================================================

class OrderBook::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const OrderBook* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& limit_up(const OrderBook* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& limit_down(const OrderBook* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OrderBook::_Internal::time(const OrderBook* msg) {
  return *msg->_impl_.time_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
OrderBook::_Internal::limit_up(const OrderBook* msg) {
  return *msg->_impl_.limit_up_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
OrderBook::_Internal::limit_down(const OrderBook* msg) {
  return *msg->_impl_.limit_down_;
}
void OrderBook::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
void OrderBook::clear_limit_up() {
  if (GetArenaForAllocation() == nullptr && _impl_.limit_up_ != nullptr) {
    delete _impl_.limit_up_;
  }
  _impl_.limit_up_ = nullptr;
}
void OrderBook::clear_limit_down() {
  if (GetArenaForAllocation() == nullptr && _impl_.limit_down_ != nullptr) {
    delete _impl_.limit_down_;
  }
  _impl_.limit_down_ = nullptr;
}
OrderBook::OrderBook(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.OrderBook)
}
OrderBook::OrderBook(const OrderBook& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderBook* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bids_){from._impl_.bids_}
    , decltype(_impl_.asks_){from._impl_.asks_}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.limit_up_){nullptr}
    , decltype(_impl_.limit_down_){nullptr}
    , decltype(_impl_.depth_){}
    , decltype(_impl_.is_consistent_){}
    , decltype(_impl_.order_book_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  if (from._internal_has_limit_up()) {
    _this->_impl_.limit_up_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.limit_up_);
  }
  if (from._internal_has_limit_down()) {
    _this->_impl_.limit_down_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.limit_down_);
  }
  ::memcpy(&_impl_.depth_, &from._impl_.depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.order_book_type_) -
    reinterpret_cast<char*>(&_impl_.depth_)) + sizeof(_impl_.order_book_type_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.OrderBook)
}

inline void OrderBook::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bids_){arena}
    , decltype(_impl_.asks_){arena}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.limit_up_){nullptr}
    , decltype(_impl_.limit_down_){nullptr}
    , decltype(_impl_.depth_){0}
    , decltype(_impl_.is_consistent_){false}
    , decltype(_impl_.order_book_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderBook::~OrderBook() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.OrderBook)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderBook::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bids_.~RepeatedPtrField();
  _impl_.asks_.~RepeatedPtrField();
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_;
  if (this != internal_default_instance()) delete _impl_.limit_up_;
  if (this != internal_default_instance()) delete _impl_.limit_down_;
}

void OrderBook::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderBook::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.OrderBook)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bids_.Clear();
  _impl_.asks_.Clear();
  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.limit_up_ != nullptr) {
    delete _impl_.limit_up_;
  }
  _impl_.limit_up_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.limit_down_ != nullptr) {
    delete _impl_.limit_down_;
  }
  _impl_.limit_down_ = nullptr;
  ::memset(&_impl_.depth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.order_book_type_) -
      reinterpret_cast<char*>(&_impl_.depth_)) + sizeof(_impl_.order_book_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderBook::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OrderBook.figi"));
        } else
          goto handle_unusual;
        continue;
      // int32 depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_consistent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_consistent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.Order bids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.Order asks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_asks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation limit_up = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit_up(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation limit_down = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit_down(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.OrderBook.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.OrderBookType order_book_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_order_book_type(static_cast<::tinkoff::public_::invest::api::contract::v1::OrderBookType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrderBook::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.OrderBook)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OrderBook.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // int32 depth = 2;
  if (this->_internal_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_depth(), target);
  }

  // bool is_consistent = 3;
  if (this->_internal_is_consistent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_consistent(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.Order bids = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bids_size()); i < n; i++) {
    const auto& repfield = this->_internal_bids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.Order asks = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_asks_size()); i < n; i++) {
    const auto& repfield = this->_internal_asks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time = 6;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation limit_up = 7;
  if (this->_internal_has_limit_up()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::limit_up(this),
        _Internal::limit_up(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation limit_down = 8;
  if (this->_internal_has_limit_down()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::limit_down(this),
        _Internal::limit_down(this).GetCachedSize(), target, stream);
  }

  // string instrument_uid = 9;
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.OrderBook.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_instrument_uid(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderBookType order_book_type = 10;
  if (this->_internal_order_book_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_order_book_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.OrderBook)
  return target;
}

size_t OrderBook::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.OrderBook)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Order bids = 4;
  total_size += 1UL * this->_internal_bids_size();
  for (const auto& msg : this->_impl_.bids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.Order asks = 5;
  total_size += 1UL * this->_internal_asks_size();
  for (const auto& msg : this->_impl_.asks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_uid = 9;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  // .google.protobuf.Timestamp time = 6;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation limit_up = 7;
  if (this->_internal_has_limit_up()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.limit_up_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation limit_down = 8;
  if (this->_internal_has_limit_down()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.limit_down_);
  }

  // int32 depth = 2;
  if (this->_internal_depth() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_depth());
  }

  // bool is_consistent = 3;
  if (this->_internal_is_consistent() != 0) {
    total_size += 1 + 1;
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderBookType order_book_type = 10;
  if (this->_internal_order_book_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_order_book_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderBook::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderBook::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderBook::GetClassData() const { return &_class_data_; }


void OrderBook::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderBook*>(&to_msg);
  auto& from = static_cast<const OrderBook&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.OrderBook)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bids_.MergeFrom(from._impl_.bids_);
  _this->_impl_.asks_.MergeFrom(from._impl_.asks_);
  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_has_limit_up()) {
    _this->_internal_mutable_limit_up()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_limit_up());
  }
  if (from._internal_has_limit_down()) {
    _this->_internal_mutable_limit_down()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_limit_down());
  }
  if (from._internal_depth() != 0) {
    _this->_internal_set_depth(from._internal_depth());
  }
  if (from._internal_is_consistent() != 0) {
    _this->_internal_set_is_consistent(from._internal_is_consistent());
  }
  if (from._internal_order_book_type() != 0) {
    _this->_internal_set_order_book_type(from._internal_order_book_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderBook::CopyFrom(const OrderBook& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.OrderBook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderBook::IsInitialized() const {
  return true;
}

void OrderBook::InternalSwap(OrderBook* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bids_.InternalSwap(&other->_impl_.bids_);
  _impl_.asks_.InternalSwap(&other->_impl_.asks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderBook, _impl_.order_book_type_)
      + sizeof(OrderBook::_impl_.order_book_type_)
      - PROTOBUF_FIELD_OFFSET(OrderBook, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderBook::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[24]);
}

// ===================================================================

class Order::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& price(const Order* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Order::_Internal::price(const Order* msg) {
  return *msg->_impl_.price_;
}
void Order::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
Order::Order(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Order)
}
Order::Order(const Order& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Order* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_){nullptr}
    , decltype(_impl_.quantity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.price_);
  }
  _this->_impl_.quantity_ = from._impl_.quantity_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Order)
}

inline void Order::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.price_){nullptr}
    , decltype(_impl_.quantity_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Order::~Order() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Order)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Order::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.price_;
}

void Order::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Order::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Order)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  _impl_.quantity_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Order::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.Quotation price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Order::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Order)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Quotation price = 1;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // int64 quantity = 2;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Order)
  return target;
}

size_t Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Order)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Quotation price = 1;
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // int64 quantity = 2;
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_quantity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Order::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Order::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Order::GetClassData() const { return &_class_data_; }


void Order::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Order*>(&to_msg);
  auto& from = static_cast<const Order&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Order)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_price());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Order::CopyFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {
  return true;
}

void Order::InternalSwap(Order* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Order, _impl_.quantity_)
      + sizeof(Order::_impl_.quantity_)
      - PROTOBUF_FIELD_OFFSET(Order, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Order::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[25]);
}

// ===================================================================

class Trade::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& price(const Trade* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const Trade* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
Trade::_Internal::price(const Trade* msg) {
  return *msg->_impl_.price_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Trade::_Internal::time(const Trade* msg) {
  return *msg->_impl_.time_;
}
void Trade::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
void Trade::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
Trade::Trade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Trade)
}
Trade::Trade(const Trade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Trade* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.quantity_){}
    , decltype(_impl_.direction_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.price_);
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  ::memcpy(&_impl_.quantity_, &from._impl_.quantity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.direction_) -
    reinterpret_cast<char*>(&_impl_.quantity_)) + sizeof(_impl_.direction_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Trade)
}

inline void Trade::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.quantity_){int64_t{0}}
    , decltype(_impl_.direction_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Trade::~Trade() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Trade)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Trade::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.price_;
  if (this != internal_default_instance()) delete _impl_.time_;
}

void Trade::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Trade::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Trade)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  ::memset(&_impl_.quantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.direction_) -
      reinterpret_cast<char*>(&_impl_.quantity_)) + sizeof(_impl_.direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trade::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Trade.figi"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.TradeDirection direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::tinkoff::public_::invest::api::contract::v1::TradeDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 quantity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Trade.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Trade::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Trade)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Trade.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.TradeDirection direction = 2;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // int64 quantity = 4;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_quantity(), target);
  }

  // .google.protobuf.Timestamp time = 5;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // string instrument_uid = 6;
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Trade.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_instrument_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Trade)
  return target;
}

size_t Trade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Trade)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_uid = 6;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // .google.protobuf.Timestamp time = 5;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // int64 quantity = 4;
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_quantity());
  }

  // .tinkoff.public_.invest.api.contract.v1.TradeDirection direction = 2;
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Trade::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Trade::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Trade::GetClassData() const { return &_class_data_; }


void Trade::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Trade*>(&to_msg);
  auto& from = static_cast<const Trade&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Trade)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_price());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  if (from._internal_direction() != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Trade::CopyFrom(const Trade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trade::IsInitialized() const {
  return true;
}

void Trade::InternalSwap(Trade* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trade, _impl_.direction_)
      + sizeof(Trade::_impl_.direction_)
      - PROTOBUF_FIELD_OFFSET(Trade, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trade::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[26]);
}

// ===================================================================

class TradingStatus::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const TradingStatus* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TradingStatus::_Internal::time(const TradingStatus* msg) {
  return *msg->_impl_.time_;
}
void TradingStatus::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
TradingStatus::TradingStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.TradingStatus)
}
TradingStatus::TradingStatus(const TradingStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TradingStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.trading_status_){}
    , decltype(_impl_.limit_order_available_flag_){}
    , decltype(_impl_.market_order_available_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  ::memcpy(&_impl_.trading_status_, &from._impl_.trading_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.market_order_available_flag_) -
    reinterpret_cast<char*>(&_impl_.trading_status_)) + sizeof(_impl_.market_order_available_flag_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.TradingStatus)
}

inline void TradingStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.trading_status_){0}
    , decltype(_impl_.limit_order_available_flag_){false}
    , decltype(_impl_.market_order_available_flag_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TradingStatus::~TradingStatus() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.TradingStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TradingStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_;
}

void TradingStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TradingStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.TradingStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  ::memset(&_impl_.trading_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.market_order_available_flag_) -
      reinterpret_cast<char*>(&_impl_.trading_status_)) + sizeof(_impl_.market_order_available_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradingStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.TradingStatus.figi"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trading_status(static_cast<::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool limit_order_available_flag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.limit_order_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool market_order_available_flag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.market_order_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.TradingStatus.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TradingStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.TradingStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.TradingStatus.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 2;
  if (this->_internal_trading_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_trading_status(), target);
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // bool limit_order_available_flag = 4;
  if (this->_internal_limit_order_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_limit_order_available_flag(), target);
  }

  // bool market_order_available_flag = 5;
  if (this->_internal_market_order_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_market_order_available_flag(), target);
  }

  // string instrument_uid = 6;
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.TradingStatus.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_instrument_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.TradingStatus)
  return target;
}

size_t TradingStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.TradingStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_uid = 6;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 2;
  if (this->_internal_trading_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_trading_status());
  }

  // bool limit_order_available_flag = 4;
  if (this->_internal_limit_order_available_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool market_order_available_flag = 5;
  if (this->_internal_market_order_available_flag() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TradingStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TradingStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TradingStatus::GetClassData() const { return &_class_data_; }


void TradingStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TradingStatus*>(&to_msg);
  auto& from = static_cast<const TradingStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.TradingStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_trading_status() != 0) {
    _this->_internal_set_trading_status(from._internal_trading_status());
  }
  if (from._internal_limit_order_available_flag() != 0) {
    _this->_internal_set_limit_order_available_flag(from._internal_limit_order_available_flag());
  }
  if (from._internal_market_order_available_flag() != 0) {
    _this->_internal_set_market_order_available_flag(from._internal_market_order_available_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TradingStatus::CopyFrom(const TradingStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.TradingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradingStatus::IsInitialized() const {
  return true;
}

void TradingStatus::InternalSwap(TradingStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradingStatus, _impl_.market_order_available_flag_)
      + sizeof(TradingStatus::_impl_.market_order_available_flag_)
      - PROTOBUF_FIELD_OFFSET(TradingStatus, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TradingStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[27]);
}

// ===================================================================

class GetCandlesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetCandlesRequest>()._impl_._has_bits_);
  static void set_has_figi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& from(const GetCandlesRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& to(const GetCandlesRequest* msg);
  static void set_has_instrument_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_candle_source_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetCandlesRequest::_Internal::from(const GetCandlesRequest* msg) {
  return *msg->_impl_.from_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetCandlesRequest::_Internal::to(const GetCandlesRequest* msg) {
  return *msg->_impl_.to_;
}
void GetCandlesRequest::clear_from() {
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
}
void GetCandlesRequest::clear_to() {
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
}
GetCandlesRequest::GetCandlesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetCandlesRequest)
}
GetCandlesRequest::GetCandlesRequest(const GetCandlesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetCandlesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
    , decltype(_impl_.interval_){}
    , decltype(_impl_.candle_source_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_figi()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_instrument_id()) {
    _this->_impl_.instrument_id_.Set(from._internal_instrument_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_from()) {
    _this->_impl_.from_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.from_);
  }
  if (from._internal_has_to()) {
    _this->_impl_.to_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.to_);
  }
  ::memcpy(&_impl_.interval_, &from._impl_.interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.candle_source_type_) -
    reinterpret_cast<char*>(&_impl_.interval_)) + sizeof(_impl_.candle_source_type_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetCandlesRequest)
}

inline void GetCandlesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
    , decltype(_impl_.interval_){0}
    , decltype(_impl_.candle_source_type_){0}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetCandlesRequest::~GetCandlesRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetCandlesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCandlesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.from_;
  if (this != internal_default_instance()) delete _impl_.to_;
}

void GetCandlesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetCandlesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetCandlesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.figi_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.instrument_id_.ClearNonDefaultToEmpty();
    }
  }
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
  _impl_.interval_ = 0;
  _impl_.candle_source_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCandlesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string figi = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetCandlesRequest.figi"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.CandleInterval interval = 4 [(.google.api.field_behavior) = REQUIRED];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interval(static_cast<::tinkoff::public_::invest::api::contract::v1::CandleInterval>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string instrument_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetCandlesRequest.instrument_id"));
        } else
          goto handle_unusual;
        continue;
      // optional .tinkoff.public_.invest.api.contract.v1.GetCandlesRequest.CandleSource candle_source_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_candle_source_type(static_cast<::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest_CandleSource>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCandlesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetCandlesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string figi = 1 [deprecated = true];
  if (_internal_has_figi()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetCandlesRequest.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_from()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_to()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.CandleInterval interval = 4 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_interval(), target);
  }

  // optional string instrument_id = 5;
  if (_internal_has_instrument_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetCandlesRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_instrument_id(), target);
  }

  // optional .tinkoff.public_.invest.api.contract.v1.GetCandlesRequest.CandleSource candle_source_type = 7;
  if (_internal_has_candle_source_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_candle_source_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetCandlesRequest)
  return target;
}

size_t GetCandlesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetCandlesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string figi = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_figi());
    }

    // optional string instrument_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_instrument_id());
    }

  }
  // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.from_);
  }

  // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.to_);
  }

  // .tinkoff.public_.invest.api.contract.v1.CandleInterval interval = 4 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_interval() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_interval());
  }

  // optional .tinkoff.public_.invest.api.contract.v1.GetCandlesRequest.CandleSource candle_source_type = 7;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_candle_source_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCandlesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetCandlesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCandlesRequest::GetClassData() const { return &_class_data_; }


void GetCandlesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetCandlesRequest*>(&to_msg);
  auto& from = static_cast<const GetCandlesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetCandlesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_figi(from._internal_figi());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_instrument_id(from._internal_instrument_id());
    }
  }
  if (from._internal_has_from()) {
    _this->_internal_mutable_from()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_from());
  }
  if (from._internal_has_to()) {
    _this->_internal_mutable_to()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_to());
  }
  if (from._internal_interval() != 0) {
    _this->_internal_set_interval(from._internal_interval());
  }
  if (cached_has_bits & 0x00000004u) {
    _this->_internal_set_candle_source_type(from._internal_candle_source_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCandlesRequest::CopyFrom(const GetCandlesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetCandlesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCandlesRequest::IsInitialized() const {
  return true;
}

void GetCandlesRequest::InternalSwap(GetCandlesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_id_, lhs_arena,
      &other->_impl_.instrument_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCandlesRequest, _impl_.candle_source_type_)
      + sizeof(GetCandlesRequest::_impl_.candle_source_type_)
      - PROTOBUF_FIELD_OFFSET(GetCandlesRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCandlesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[28]);
}

// ===================================================================

class GetCandlesResponse::_Internal {
 public:
};

GetCandlesResponse::GetCandlesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetCandlesResponse)
}
GetCandlesResponse::GetCandlesResponse(const GetCandlesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetCandlesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.candles_){from._impl_.candles_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetCandlesResponse)
}

inline void GetCandlesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.candles_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetCandlesResponse::~GetCandlesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetCandlesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCandlesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.candles_.~RepeatedPtrField();
}

void GetCandlesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetCandlesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetCandlesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.candles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCandlesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.HistoricCandle candles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCandlesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetCandlesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.HistoricCandle candles = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_candles_size()); i < n; i++) {
    const auto& repfield = this->_internal_candles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetCandlesResponse)
  return target;
}

size_t GetCandlesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetCandlesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.HistoricCandle candles = 1;
  total_size += 1UL * this->_internal_candles_size();
  for (const auto& msg : this->_impl_.candles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCandlesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetCandlesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCandlesResponse::GetClassData() const { return &_class_data_; }


void GetCandlesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetCandlesResponse*>(&to_msg);
  auto& from = static_cast<const GetCandlesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetCandlesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.candles_.MergeFrom(from._impl_.candles_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCandlesResponse::CopyFrom(const GetCandlesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetCandlesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCandlesResponse::IsInitialized() const {
  return true;
}

void GetCandlesResponse::InternalSwap(GetCandlesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.candles_.InternalSwap(&other->_impl_.candles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCandlesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[29]);
}

// ===================================================================

class HistoricCandle::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& open(const HistoricCandle* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& high(const HistoricCandle* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& low(const HistoricCandle* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& close(const HistoricCandle* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const HistoricCandle* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
HistoricCandle::_Internal::open(const HistoricCandle* msg) {
  return *msg->_impl_.open_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
HistoricCandle::_Internal::high(const HistoricCandle* msg) {
  return *msg->_impl_.high_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
HistoricCandle::_Internal::low(const HistoricCandle* msg) {
  return *msg->_impl_.low_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
HistoricCandle::_Internal::close(const HistoricCandle* msg) {
  return *msg->_impl_.close_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
HistoricCandle::_Internal::time(const HistoricCandle* msg) {
  return *msg->_impl_.time_;
}
void HistoricCandle::clear_open() {
  if (GetArenaForAllocation() == nullptr && _impl_.open_ != nullptr) {
    delete _impl_.open_;
  }
  _impl_.open_ = nullptr;
}
void HistoricCandle::clear_high() {
  if (GetArenaForAllocation() == nullptr && _impl_.high_ != nullptr) {
    delete _impl_.high_;
  }
  _impl_.high_ = nullptr;
}
void HistoricCandle::clear_low() {
  if (GetArenaForAllocation() == nullptr && _impl_.low_ != nullptr) {
    delete _impl_.low_;
  }
  _impl_.low_ = nullptr;
}
void HistoricCandle::clear_close() {
  if (GetArenaForAllocation() == nullptr && _impl_.close_ != nullptr) {
    delete _impl_.close_;
  }
  _impl_.close_ = nullptr;
}
void HistoricCandle::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
HistoricCandle::HistoricCandle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.HistoricCandle)
}
HistoricCandle::HistoricCandle(const HistoricCandle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HistoricCandle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.open_){nullptr}
    , decltype(_impl_.high_){nullptr}
    , decltype(_impl_.low_){nullptr}
    , decltype(_impl_.close_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.volume_){}
    , decltype(_impl_.is_complete_){}
    , decltype(_impl_.candle_source_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_open()) {
    _this->_impl_.open_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.open_);
  }
  if (from._internal_has_high()) {
    _this->_impl_.high_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.high_);
  }
  if (from._internal_has_low()) {
    _this->_impl_.low_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.low_);
  }
  if (from._internal_has_close()) {
    _this->_impl_.close_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.close_);
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  ::memcpy(&_impl_.volume_, &from._impl_.volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.candle_source_) -
    reinterpret_cast<char*>(&_impl_.volume_)) + sizeof(_impl_.candle_source_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.HistoricCandle)
}

inline void HistoricCandle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.open_){nullptr}
    , decltype(_impl_.high_){nullptr}
    , decltype(_impl_.low_){nullptr}
    , decltype(_impl_.close_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.volume_){int64_t{0}}
    , decltype(_impl_.is_complete_){false}
    , decltype(_impl_.candle_source_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HistoricCandle::~HistoricCandle() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.HistoricCandle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HistoricCandle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.open_;
  if (this != internal_default_instance()) delete _impl_.high_;
  if (this != internal_default_instance()) delete _impl_.low_;
  if (this != internal_default_instance()) delete _impl_.close_;
  if (this != internal_default_instance()) delete _impl_.time_;
}

void HistoricCandle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HistoricCandle::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.HistoricCandle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.open_ != nullptr) {
    delete _impl_.open_;
  }
  _impl_.open_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.high_ != nullptr) {
    delete _impl_.high_;
  }
  _impl_.high_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.low_ != nullptr) {
    delete _impl_.low_;
  }
  _impl_.low_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.close_ != nullptr) {
    delete _impl_.close_;
  }
  _impl_.close_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  ::memset(&_impl_.volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.candle_source_) -
      reinterpret_cast<char*>(&_impl_.volume_)) + sizeof(_impl_.candle_source_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistoricCandle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.Quotation open = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_open(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation high = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_high(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation low = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_low(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation close = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_close(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 volume = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_complete = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.is_complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.CandleSource candle_source = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_candle_source(static_cast<::tinkoff::public_::invest::api::contract::v1::CandleSource>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HistoricCandle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.HistoricCandle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Quotation open = 1;
  if (this->_internal_has_open()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::open(this),
        _Internal::open(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation high = 2;
  if (this->_internal_has_high()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::high(this),
        _Internal::high(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation low = 3;
  if (this->_internal_has_low()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::low(this),
        _Internal::low(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation close = 4;
  if (this->_internal_has_close()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::close(this),
        _Internal::close(this).GetCachedSize(), target, stream);
  }

  // int64 volume = 5;
  if (this->_internal_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_volume(), target);
  }

  // .google.protobuf.Timestamp time = 6;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // bool is_complete = 7;
  if (this->_internal_is_complete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_complete(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.CandleSource candle_source = 9;
  if (this->_internal_candle_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_candle_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.HistoricCandle)
  return target;
}

size_t HistoricCandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.HistoricCandle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Quotation open = 1;
  if (this->_internal_has_open()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.open_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation high = 2;
  if (this->_internal_has_high()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.high_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation low = 3;
  if (this->_internal_has_low()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.low_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation close = 4;
  if (this->_internal_has_close()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.close_);
  }

  // .google.protobuf.Timestamp time = 6;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // int64 volume = 5;
  if (this->_internal_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_volume());
  }

  // bool is_complete = 7;
  if (this->_internal_is_complete() != 0) {
    total_size += 1 + 1;
  }

  // .tinkoff.public_.invest.api.contract.v1.CandleSource candle_source = 9;
  if (this->_internal_candle_source() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_candle_source());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HistoricCandle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HistoricCandle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HistoricCandle::GetClassData() const { return &_class_data_; }


void HistoricCandle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HistoricCandle*>(&to_msg);
  auto& from = static_cast<const HistoricCandle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.HistoricCandle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_open()) {
    _this->_internal_mutable_open()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_open());
  }
  if (from._internal_has_high()) {
    _this->_internal_mutable_high()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_high());
  }
  if (from._internal_has_low()) {
    _this->_internal_mutable_low()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_low());
  }
  if (from._internal_has_close()) {
    _this->_internal_mutable_close()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_close());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_volume() != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  if (from._internal_is_complete() != 0) {
    _this->_internal_set_is_complete(from._internal_is_complete());
  }
  if (from._internal_candle_source() != 0) {
    _this->_internal_set_candle_source(from._internal_candle_source());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HistoricCandle::CopyFrom(const HistoricCandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.HistoricCandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricCandle::IsInitialized() const {
  return true;
}

void HistoricCandle::InternalSwap(HistoricCandle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistoricCandle, _impl_.candle_source_)
      + sizeof(HistoricCandle::_impl_.candle_source_)
      - PROTOBUF_FIELD_OFFSET(HistoricCandle, _impl_.open_)>(
          reinterpret_cast<char*>(&_impl_.open_),
          reinterpret_cast<char*>(&other->_impl_.open_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistoricCandle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[30]);
}

// ===================================================================

class GetLastPricesRequest::_Internal {
 public:
};

GetLastPricesRequest::GetLastPricesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetLastPricesRequest)
}
GetLastPricesRequest::GetLastPricesRequest(const GetLastPricesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetLastPricesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){from._impl_.figi_}
    , decltype(_impl_.instrument_id_){from._impl_.instrument_id_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetLastPricesRequest)
}

inline void GetLastPricesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){arena}
    , decltype(_impl_.instrument_id_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetLastPricesRequest::~GetLastPricesRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetLastPricesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetLastPricesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.~RepeatedPtrField();
  _impl_.instrument_id_.~RepeatedPtrField();
}

void GetLastPricesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetLastPricesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetLastPricesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.Clear();
  _impl_.instrument_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLastPricesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string figi = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_figi();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetLastPricesRequest.figi"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string instrument_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_instrument_id();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetLastPricesRequest.instrument_id"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLastPricesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetLastPricesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string figi = 1 [deprecated = true];
  for (int i = 0, n = this->_internal_figi_size(); i < n; i++) {
    const auto& s = this->_internal_figi(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetLastPricesRequest.figi");
    target = stream->WriteString(1, s, target);
  }

  // repeated string instrument_id = 2;
  for (int i = 0, n = this->_internal_instrument_id_size(); i < n; i++) {
    const auto& s = this->_internal_instrument_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetLastPricesRequest.instrument_id");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetLastPricesRequest)
  return target;
}

size_t GetLastPricesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetLastPricesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string figi = 1 [deprecated = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.figi_.size());
  for (int i = 0, n = _impl_.figi_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.figi_.Get(i));
  }

  // repeated string instrument_id = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.instrument_id_.size());
  for (int i = 0, n = _impl_.instrument_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.instrument_id_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLastPricesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetLastPricesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLastPricesRequest::GetClassData() const { return &_class_data_; }


void GetLastPricesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetLastPricesRequest*>(&to_msg);
  auto& from = static_cast<const GetLastPricesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetLastPricesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.figi_.MergeFrom(from._impl_.figi_);
  _this->_impl_.instrument_id_.MergeFrom(from._impl_.instrument_id_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLastPricesRequest::CopyFrom(const GetLastPricesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetLastPricesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastPricesRequest::IsInitialized() const {
  return true;
}

void GetLastPricesRequest::InternalSwap(GetLastPricesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.figi_.InternalSwap(&other->_impl_.figi_);
  _impl_.instrument_id_.InternalSwap(&other->_impl_.instrument_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLastPricesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[31]);
}

// ===================================================================

class GetLastPricesResponse::_Internal {
 public:
};

GetLastPricesResponse::GetLastPricesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetLastPricesResponse)
}
GetLastPricesResponse::GetLastPricesResponse(const GetLastPricesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetLastPricesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.last_prices_){from._impl_.last_prices_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetLastPricesResponse)
}

inline void GetLastPricesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.last_prices_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetLastPricesResponse::~GetLastPricesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetLastPricesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetLastPricesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.last_prices_.~RepeatedPtrField();
}

void GetLastPricesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetLastPricesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetLastPricesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.last_prices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLastPricesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.LastPrice last_prices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_last_prices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLastPricesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetLastPricesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.LastPrice last_prices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_last_prices_size()); i < n; i++) {
    const auto& repfield = this->_internal_last_prices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetLastPricesResponse)
  return target;
}

size_t GetLastPricesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetLastPricesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.LastPrice last_prices = 1;
  total_size += 1UL * this->_internal_last_prices_size();
  for (const auto& msg : this->_impl_.last_prices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLastPricesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetLastPricesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLastPricesResponse::GetClassData() const { return &_class_data_; }


void GetLastPricesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetLastPricesResponse*>(&to_msg);
  auto& from = static_cast<const GetLastPricesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetLastPricesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.last_prices_.MergeFrom(from._impl_.last_prices_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLastPricesResponse::CopyFrom(const GetLastPricesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetLastPricesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastPricesResponse::IsInitialized() const {
  return true;
}

void GetLastPricesResponse::InternalSwap(GetLastPricesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.last_prices_.InternalSwap(&other->_impl_.last_prices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLastPricesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[32]);
}

// ===================================================================

class LastPrice::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& price(const LastPrice* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const LastPrice* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
LastPrice::_Internal::price(const LastPrice* msg) {
  return *msg->_impl_.price_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LastPrice::_Internal::time(const LastPrice* msg) {
  return *msg->_impl_.time_;
}
void LastPrice::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
void LastPrice::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
LastPrice::LastPrice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.LastPrice)
}
LastPrice::LastPrice(const LastPrice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LastPrice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.price_);
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.LastPrice)
}

inline void LastPrice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LastPrice::~LastPrice() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.LastPrice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LastPrice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.price_;
  if (this != internal_default_instance()) delete _impl_.time_;
}

void LastPrice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LastPrice::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.LastPrice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LastPrice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.LastPrice.figi"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.LastPrice.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LastPrice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.LastPrice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.LastPrice.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation price = 2;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // string instrument_uid = 11;
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.LastPrice.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_instrument_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.LastPrice)
  return target;
}

size_t LastPrice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.LastPrice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_uid = 11;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation price = 2;
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LastPrice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LastPrice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LastPrice::GetClassData() const { return &_class_data_; }


void LastPrice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LastPrice*>(&to_msg);
  auto& from = static_cast<const LastPrice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.LastPrice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_price());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LastPrice::CopyFrom(const LastPrice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.LastPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastPrice::IsInitialized() const {
  return true;
}

void LastPrice::InternalSwap(LastPrice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LastPrice, _impl_.time_)
      + sizeof(LastPrice::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(LastPrice, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LastPrice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[33]);
}

// ===================================================================

class GetOrderBookRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetOrderBookRequest>()._impl_._has_bits_);
  static void set_has_figi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_instrument_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetOrderBookRequest::GetOrderBookRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetOrderBookRequest)
}
GetOrderBookRequest::GetOrderBookRequest(const GetOrderBookRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetOrderBookRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.depth_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_figi()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_instrument_id()) {
    _this->_impl_.instrument_id_.Set(from._internal_instrument_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.depth_ = from._impl_.depth_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetOrderBookRequest)
}

inline void GetOrderBookRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.depth_){0}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetOrderBookRequest::~GetOrderBookRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetOrderBookRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetOrderBookRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
}

void GetOrderBookRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetOrderBookRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetOrderBookRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.figi_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.instrument_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.depth_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOrderBookRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string figi = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetOrderBookRequest.figi"));
        } else
          goto handle_unusual;
        continue;
      // int32 depth = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string instrument_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetOrderBookRequest.instrument_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetOrderBookRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetOrderBookRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string figi = 1 [deprecated = true];
  if (_internal_has_figi()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetOrderBookRequest.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // int32 depth = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_depth(), target);
  }

  // optional string instrument_id = 3;
  if (_internal_has_instrument_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetOrderBookRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_instrument_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetOrderBookRequest)
  return target;
}

size_t GetOrderBookRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetOrderBookRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string figi = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_figi());
    }

    // optional string instrument_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_instrument_id());
    }

  }
  // int32 depth = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_depth() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_depth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOrderBookRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetOrderBookRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOrderBookRequest::GetClassData() const { return &_class_data_; }


void GetOrderBookRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetOrderBookRequest*>(&to_msg);
  auto& from = static_cast<const GetOrderBookRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetOrderBookRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_figi(from._internal_figi());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_instrument_id(from._internal_instrument_id());
    }
  }
  if (from._internal_depth() != 0) {
    _this->_internal_set_depth(from._internal_depth());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOrderBookRequest::CopyFrom(const GetOrderBookRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetOrderBookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrderBookRequest::IsInitialized() const {
  return true;
}

void GetOrderBookRequest::InternalSwap(GetOrderBookRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_id_, lhs_arena,
      &other->_impl_.instrument_id_, rhs_arena
  );
  swap(_impl_.depth_, other->_impl_.depth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOrderBookRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[34]);
}

// ===================================================================

class GetOrderBookResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& last_price(const GetOrderBookResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& close_price(const GetOrderBookResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& limit_up(const GetOrderBookResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& limit_down(const GetOrderBookResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_price_ts(const GetOrderBookResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& close_price_ts(const GetOrderBookResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& orderbook_ts(const GetOrderBookResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetOrderBookResponse::_Internal::last_price(const GetOrderBookResponse* msg) {
  return *msg->_impl_.last_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetOrderBookResponse::_Internal::close_price(const GetOrderBookResponse* msg) {
  return *msg->_impl_.close_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetOrderBookResponse::_Internal::limit_up(const GetOrderBookResponse* msg) {
  return *msg->_impl_.limit_up_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetOrderBookResponse::_Internal::limit_down(const GetOrderBookResponse* msg) {
  return *msg->_impl_.limit_down_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetOrderBookResponse::_Internal::last_price_ts(const GetOrderBookResponse* msg) {
  return *msg->_impl_.last_price_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetOrderBookResponse::_Internal::close_price_ts(const GetOrderBookResponse* msg) {
  return *msg->_impl_.close_price_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetOrderBookResponse::_Internal::orderbook_ts(const GetOrderBookResponse* msg) {
  return *msg->_impl_.orderbook_ts_;
}
void GetOrderBookResponse::clear_last_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_price_ != nullptr) {
    delete _impl_.last_price_;
  }
  _impl_.last_price_ = nullptr;
}
void GetOrderBookResponse::clear_close_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.close_price_ != nullptr) {
    delete _impl_.close_price_;
  }
  _impl_.close_price_ = nullptr;
}
void GetOrderBookResponse::clear_limit_up() {
  if (GetArenaForAllocation() == nullptr && _impl_.limit_up_ != nullptr) {
    delete _impl_.limit_up_;
  }
  _impl_.limit_up_ = nullptr;
}
void GetOrderBookResponse::clear_limit_down() {
  if (GetArenaForAllocation() == nullptr && _impl_.limit_down_ != nullptr) {
    delete _impl_.limit_down_;
  }
  _impl_.limit_down_ = nullptr;
}
void GetOrderBookResponse::clear_last_price_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_price_ts_ != nullptr) {
    delete _impl_.last_price_ts_;
  }
  _impl_.last_price_ts_ = nullptr;
}
void GetOrderBookResponse::clear_close_price_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.close_price_ts_ != nullptr) {
    delete _impl_.close_price_ts_;
  }
  _impl_.close_price_ts_ = nullptr;
}
void GetOrderBookResponse::clear_orderbook_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.orderbook_ts_ != nullptr) {
    delete _impl_.orderbook_ts_;
  }
  _impl_.orderbook_ts_ = nullptr;
}
GetOrderBookResponse::GetOrderBookResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetOrderBookResponse)
}
GetOrderBookResponse::GetOrderBookResponse(const GetOrderBookResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetOrderBookResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bids_){from._impl_.bids_}
    , decltype(_impl_.asks_){from._impl_.asks_}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.last_price_){nullptr}
    , decltype(_impl_.close_price_){nullptr}
    , decltype(_impl_.limit_up_){nullptr}
    , decltype(_impl_.limit_down_){nullptr}
    , decltype(_impl_.last_price_ts_){nullptr}
    , decltype(_impl_.close_price_ts_){nullptr}
    , decltype(_impl_.orderbook_ts_){nullptr}
    , decltype(_impl_.depth_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_last_price()) {
    _this->_impl_.last_price_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.last_price_);
  }
  if (from._internal_has_close_price()) {
    _this->_impl_.close_price_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.close_price_);
  }
  if (from._internal_has_limit_up()) {
    _this->_impl_.limit_up_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.limit_up_);
  }
  if (from._internal_has_limit_down()) {
    _this->_impl_.limit_down_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.limit_down_);
  }
  if (from._internal_has_last_price_ts()) {
    _this->_impl_.last_price_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_price_ts_);
  }
  if (from._internal_has_close_price_ts()) {
    _this->_impl_.close_price_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.close_price_ts_);
  }
  if (from._internal_has_orderbook_ts()) {
    _this->_impl_.orderbook_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.orderbook_ts_);
  }
  _this->_impl_.depth_ = from._impl_.depth_;
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetOrderBookResponse)
}

inline void GetOrderBookResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bids_){arena}
    , decltype(_impl_.asks_){arena}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.last_price_){nullptr}
    , decltype(_impl_.close_price_){nullptr}
    , decltype(_impl_.limit_up_){nullptr}
    , decltype(_impl_.limit_down_){nullptr}
    , decltype(_impl_.last_price_ts_){nullptr}
    , decltype(_impl_.close_price_ts_){nullptr}
    , decltype(_impl_.orderbook_ts_){nullptr}
    , decltype(_impl_.depth_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetOrderBookResponse::~GetOrderBookResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetOrderBookResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetOrderBookResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bids_.~RepeatedPtrField();
  _impl_.asks_.~RepeatedPtrField();
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.last_price_;
  if (this != internal_default_instance()) delete _impl_.close_price_;
  if (this != internal_default_instance()) delete _impl_.limit_up_;
  if (this != internal_default_instance()) delete _impl_.limit_down_;
  if (this != internal_default_instance()) delete _impl_.last_price_ts_;
  if (this != internal_default_instance()) delete _impl_.close_price_ts_;
  if (this != internal_default_instance()) delete _impl_.orderbook_ts_;
}

void GetOrderBookResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetOrderBookResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetOrderBookResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bids_.Clear();
  _impl_.asks_.Clear();
  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.last_price_ != nullptr) {
    delete _impl_.last_price_;
  }
  _impl_.last_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.close_price_ != nullptr) {
    delete _impl_.close_price_;
  }
  _impl_.close_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.limit_up_ != nullptr) {
    delete _impl_.limit_up_;
  }
  _impl_.limit_up_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.limit_down_ != nullptr) {
    delete _impl_.limit_down_;
  }
  _impl_.limit_down_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_price_ts_ != nullptr) {
    delete _impl_.last_price_ts_;
  }
  _impl_.last_price_ts_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.close_price_ts_ != nullptr) {
    delete _impl_.close_price_ts_;
  }
  _impl_.close_price_ts_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.orderbook_ts_ != nullptr) {
    delete _impl_.orderbook_ts_;
  }
  _impl_.orderbook_ts_ = nullptr;
  _impl_.depth_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOrderBookResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetOrderBookResponse.figi"));
        } else
          goto handle_unusual;
        continue;
      // int32 depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.Order bids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tinkoff.public_.invest.api.contract.v1.Order asks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_asks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation last_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation close_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation limit_up = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit_up(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation limit_down = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit_down(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetOrderBookResponse.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_price_ts = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_price_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp close_price_ts = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_price_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp orderbook_ts = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_orderbook_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetOrderBookResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetOrderBookResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetOrderBookResponse.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // int32 depth = 2;
  if (this->_internal_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_depth(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.Order bids = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bids_size()); i < n; i++) {
    const auto& repfield = this->_internal_bids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.Order asks = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_asks_size()); i < n; i++) {
    const auto& repfield = this->_internal_asks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation last_price = 5;
  if (this->_internal_has_last_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::last_price(this),
        _Internal::last_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation close_price = 6;
  if (this->_internal_has_close_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::close_price(this),
        _Internal::close_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation limit_up = 7;
  if (this->_internal_has_limit_up()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::limit_up(this),
        _Internal::limit_up(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation limit_down = 8;
  if (this->_internal_has_limit_down()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::limit_down(this),
        _Internal::limit_down(this).GetCachedSize(), target, stream);
  }

  // string instrument_uid = 9;
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetOrderBookResponse.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_instrument_uid(), target);
  }

  // .google.protobuf.Timestamp last_price_ts = 21;
  if (this->_internal_has_last_price_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::last_price_ts(this),
        _Internal::last_price_ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp close_price_ts = 22;
  if (this->_internal_has_close_price_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::close_price_ts(this),
        _Internal::close_price_ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp orderbook_ts = 23;
  if (this->_internal_has_orderbook_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::orderbook_ts(this),
        _Internal::orderbook_ts(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetOrderBookResponse)
  return target;
}

size_t GetOrderBookResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetOrderBookResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Order bids = 3;
  total_size += 1UL * this->_internal_bids_size();
  for (const auto& msg : this->_impl_.bids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.Order asks = 4;
  total_size += 1UL * this->_internal_asks_size();
  for (const auto& msg : this->_impl_.asks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_uid = 9;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation last_price = 5;
  if (this->_internal_has_last_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation close_price = 6;
  if (this->_internal_has_close_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.close_price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation limit_up = 7;
  if (this->_internal_has_limit_up()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.limit_up_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation limit_down = 8;
  if (this->_internal_has_limit_down()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.limit_down_);
  }

  // .google.protobuf.Timestamp last_price_ts = 21;
  if (this->_internal_has_last_price_ts()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_price_ts_);
  }

  // .google.protobuf.Timestamp close_price_ts = 22;
  if (this->_internal_has_close_price_ts()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.close_price_ts_);
  }

  // .google.protobuf.Timestamp orderbook_ts = 23;
  if (this->_internal_has_orderbook_ts()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.orderbook_ts_);
  }

  // int32 depth = 2;
  if (this->_internal_depth() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_depth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOrderBookResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetOrderBookResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOrderBookResponse::GetClassData() const { return &_class_data_; }


void GetOrderBookResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetOrderBookResponse*>(&to_msg);
  auto& from = static_cast<const GetOrderBookResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetOrderBookResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bids_.MergeFrom(from._impl_.bids_);
  _this->_impl_.asks_.MergeFrom(from._impl_.asks_);
  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (from._internal_has_last_price()) {
    _this->_internal_mutable_last_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_last_price());
  }
  if (from._internal_has_close_price()) {
    _this->_internal_mutable_close_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_close_price());
  }
  if (from._internal_has_limit_up()) {
    _this->_internal_mutable_limit_up()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_limit_up());
  }
  if (from._internal_has_limit_down()) {
    _this->_internal_mutable_limit_down()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_limit_down());
  }
  if (from._internal_has_last_price_ts()) {
    _this->_internal_mutable_last_price_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_price_ts());
  }
  if (from._internal_has_close_price_ts()) {
    _this->_internal_mutable_close_price_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_close_price_ts());
  }
  if (from._internal_has_orderbook_ts()) {
    _this->_internal_mutable_orderbook_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_orderbook_ts());
  }
  if (from._internal_depth() != 0) {
    _this->_internal_set_depth(from._internal_depth());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOrderBookResponse::CopyFrom(const GetOrderBookResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetOrderBookResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrderBookResponse::IsInitialized() const {
  return true;
}

void GetOrderBookResponse::InternalSwap(GetOrderBookResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bids_.InternalSwap(&other->_impl_.bids_);
  _impl_.asks_.InternalSwap(&other->_impl_.asks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_.depth_)
      + sizeof(GetOrderBookResponse::_impl_.depth_)
      - PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_.last_price_)>(
          reinterpret_cast<char*>(&_impl_.last_price_),
          reinterpret_cast<char*>(&other->_impl_.last_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOrderBookResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[35]);
}

// ===================================================================

class GetTradingStatusRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetTradingStatusRequest>()._impl_._has_bits_);
  static void set_has_figi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_instrument_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetTradingStatusRequest::GetTradingStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetTradingStatusRequest)
}
GetTradingStatusRequest::GetTradingStatusRequest(const GetTradingStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTradingStatusRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_figi()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_instrument_id()) {
    _this->_impl_.instrument_id_.Set(from._internal_instrument_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetTradingStatusRequest)
}

inline void GetTradingStatusRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetTradingStatusRequest::~GetTradingStatusRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetTradingStatusRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTradingStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
}

void GetTradingStatusRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTradingStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.figi_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.instrument_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTradingStatusRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string figi = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetTradingStatusRequest.figi"));
        } else
          goto handle_unusual;
        continue;
      // optional string instrument_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetTradingStatusRequest.instrument_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTradingStatusRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string figi = 1 [deprecated = true];
  if (_internal_has_figi()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetTradingStatusRequest.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // optional string instrument_id = 2;
  if (_internal_has_instrument_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetTradingStatusRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instrument_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetTradingStatusRequest)
  return target;
}

size_t GetTradingStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string figi = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_figi());
    }

    // optional string instrument_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_instrument_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTradingStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTradingStatusRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTradingStatusRequest::GetClassData() const { return &_class_data_; }


void GetTradingStatusRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTradingStatusRequest*>(&to_msg);
  auto& from = static_cast<const GetTradingStatusRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_figi(from._internal_figi());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_instrument_id(from._internal_instrument_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTradingStatusRequest::CopyFrom(const GetTradingStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTradingStatusRequest::IsInitialized() const {
  return true;
}

void GetTradingStatusRequest::InternalSwap(GetTradingStatusRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_id_, lhs_arena,
      &other->_impl_.instrument_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTradingStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[36]);
}

// ===================================================================

class GetTradingStatusesRequest::_Internal {
 public:
};

GetTradingStatusesRequest::GetTradingStatusesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesRequest)
}
GetTradingStatusesRequest::GetTradingStatusesRequest(const GetTradingStatusesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTradingStatusesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_id_){from._impl_.instrument_id_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesRequest)
}

inline void GetTradingStatusesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_id_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetTradingStatusesRequest::~GetTradingStatusesRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTradingStatusesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instrument_id_.~RepeatedPtrField();
}

void GetTradingStatusesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTradingStatusesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTradingStatusesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string instrument_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_instrument_id();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetTradingStatusesRequest.instrument_id"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTradingStatusesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string instrument_id = 1;
  for (int i = 0, n = this->_internal_instrument_id_size(); i < n; i++) {
    const auto& s = this->_internal_instrument_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetTradingStatusesRequest.instrument_id");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesRequest)
  return target;
}

size_t GetTradingStatusesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string instrument_id = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.instrument_id_.size());
  for (int i = 0, n = _impl_.instrument_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.instrument_id_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTradingStatusesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTradingStatusesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTradingStatusesRequest::GetClassData() const { return &_class_data_; }


void GetTradingStatusesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTradingStatusesRequest*>(&to_msg);
  auto& from = static_cast<const GetTradingStatusesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instrument_id_.MergeFrom(from._impl_.instrument_id_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTradingStatusesRequest::CopyFrom(const GetTradingStatusesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTradingStatusesRequest::IsInitialized() const {
  return true;
}

void GetTradingStatusesRequest::InternalSwap(GetTradingStatusesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instrument_id_.InternalSwap(&other->_impl_.instrument_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTradingStatusesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[37]);
}

// ===================================================================

class GetTradingStatusesResponse::_Internal {
 public:
};

GetTradingStatusesResponse::GetTradingStatusesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesResponse)
}
GetTradingStatusesResponse::GetTradingStatusesResponse(const GetTradingStatusesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTradingStatusesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trading_statuses_){from._impl_.trading_statuses_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesResponse)
}

inline void GetTradingStatusesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trading_statuses_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetTradingStatusesResponse::~GetTradingStatusesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTradingStatusesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trading_statuses_.~RepeatedPtrField();
}

void GetTradingStatusesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTradingStatusesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trading_statuses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTradingStatusesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse trading_statuses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trading_statuses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTradingStatusesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse trading_statuses = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trading_statuses_size()); i < n; i++) {
    const auto& repfield = this->_internal_trading_statuses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesResponse)
  return target;
}

size_t GetTradingStatusesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse trading_statuses = 1;
  total_size += 1UL * this->_internal_trading_statuses_size();
  for (const auto& msg : this->_impl_.trading_statuses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTradingStatusesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTradingStatusesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTradingStatusesResponse::GetClassData() const { return &_class_data_; }


void GetTradingStatusesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTradingStatusesResponse*>(&to_msg);
  auto& from = static_cast<const GetTradingStatusesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.trading_statuses_.MergeFrom(from._impl_.trading_statuses_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTradingStatusesResponse::CopyFrom(const GetTradingStatusesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTradingStatusesResponse::IsInitialized() const {
  return true;
}

void GetTradingStatusesResponse::InternalSwap(GetTradingStatusesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.trading_statuses_.InternalSwap(&other->_impl_.trading_statuses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTradingStatusesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[38]);
}

// ===================================================================

class GetTradingStatusResponse::_Internal {
 public:
};

GetTradingStatusResponse::GetTradingStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse)
}
GetTradingStatusResponse::GetTradingStatusResponse(const GetTradingStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTradingStatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.trading_status_){}
    , decltype(_impl_.limit_order_available_flag_){}
    , decltype(_impl_.market_order_available_flag_){}
    , decltype(_impl_.api_trade_available_flag_){}
    , decltype(_impl_.bestprice_order_available_flag_){}
    , decltype(_impl_.only_best_price_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.trading_status_, &from._impl_.trading_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.only_best_price_) -
    reinterpret_cast<char*>(&_impl_.trading_status_)) + sizeof(_impl_.only_best_price_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse)
}

inline void GetTradingStatusResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.trading_status_){0}
    , decltype(_impl_.limit_order_available_flag_){false}
    , decltype(_impl_.market_order_available_flag_){false}
    , decltype(_impl_.api_trade_available_flag_){false}
    , decltype(_impl_.bestprice_order_available_flag_){false}
    , decltype(_impl_.only_best_price_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetTradingStatusResponse::~GetTradingStatusResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTradingStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
}

void GetTradingStatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTradingStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  ::memset(&_impl_.trading_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.only_best_price_) -
      reinterpret_cast<char*>(&_impl_.trading_status_)) + sizeof(_impl_.only_best_price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTradingStatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse.figi"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trading_status(static_cast<::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // bool limit_order_available_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.limit_order_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool market_order_available_flag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.market_order_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool api_trade_available_flag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.api_trade_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      // bool bestprice_order_available_flag = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.bestprice_order_available_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool only_best_price = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.only_best_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTradingStatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 2;
  if (this->_internal_trading_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_trading_status(), target);
  }

  // bool limit_order_available_flag = 3;
  if (this->_internal_limit_order_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_limit_order_available_flag(), target);
  }

  // bool market_order_available_flag = 4;
  if (this->_internal_market_order_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_market_order_available_flag(), target);
  }

  // bool api_trade_available_flag = 5;
  if (this->_internal_api_trade_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_api_trade_available_flag(), target);
  }

  // string instrument_uid = 6;
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_instrument_uid(), target);
  }

  // bool bestprice_order_available_flag = 8;
  if (this->_internal_bestprice_order_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_bestprice_order_available_flag(), target);
  }

  // bool only_best_price = 9;
  if (this->_internal_only_best_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_only_best_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse)
  return target;
}

size_t GetTradingStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_uid = 6;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 2;
  if (this->_internal_trading_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_trading_status());
  }

  // bool limit_order_available_flag = 3;
  if (this->_internal_limit_order_available_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool market_order_available_flag = 4;
  if (this->_internal_market_order_available_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool api_trade_available_flag = 5;
  if (this->_internal_api_trade_available_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool bestprice_order_available_flag = 8;
  if (this->_internal_bestprice_order_available_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool only_best_price = 9;
  if (this->_internal_only_best_price() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTradingStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTradingStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTradingStatusResponse::GetClassData() const { return &_class_data_; }


void GetTradingStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTradingStatusResponse*>(&to_msg);
  auto& from = static_cast<const GetTradingStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (from._internal_trading_status() != 0) {
    _this->_internal_set_trading_status(from._internal_trading_status());
  }
  if (from._internal_limit_order_available_flag() != 0) {
    _this->_internal_set_limit_order_available_flag(from._internal_limit_order_available_flag());
  }
  if (from._internal_market_order_available_flag() != 0) {
    _this->_internal_set_market_order_available_flag(from._internal_market_order_available_flag());
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_internal_set_api_trade_available_flag(from._internal_api_trade_available_flag());
  }
  if (from._internal_bestprice_order_available_flag() != 0) {
    _this->_internal_set_bestprice_order_available_flag(from._internal_bestprice_order_available_flag());
  }
  if (from._internal_only_best_price() != 0) {
    _this->_internal_set_only_best_price(from._internal_only_best_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTradingStatusResponse::CopyFrom(const GetTradingStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTradingStatusResponse::IsInitialized() const {
  return true;
}

void GetTradingStatusResponse::InternalSwap(GetTradingStatusResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTradingStatusResponse, _impl_.only_best_price_)
      + sizeof(GetTradingStatusResponse::_impl_.only_best_price_)
      - PROTOBUF_FIELD_OFFSET(GetTradingStatusResponse, _impl_.trading_status_)>(
          reinterpret_cast<char*>(&_impl_.trading_status_),
          reinterpret_cast<char*>(&other->_impl_.trading_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTradingStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[39]);
}

// ===================================================================

class GetLastTradesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetLastTradesRequest>()._impl_._has_bits_);
  static void set_has_figi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& from(const GetLastTradesRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& to(const GetLastTradesRequest* msg);
  static void set_has_instrument_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetLastTradesRequest::_Internal::from(const GetLastTradesRequest* msg) {
  return *msg->_impl_.from_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetLastTradesRequest::_Internal::to(const GetLastTradesRequest* msg) {
  return *msg->_impl_.to_;
}
void GetLastTradesRequest::clear_from() {
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
}
void GetLastTradesRequest::clear_to() {
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
}
GetLastTradesRequest::GetLastTradesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetLastTradesRequest)
}
GetLastTradesRequest::GetLastTradesRequest(const GetLastTradesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetLastTradesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_figi()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_instrument_id()) {
    _this->_impl_.instrument_id_.Set(from._internal_instrument_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_from()) {
    _this->_impl_.from_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.from_);
  }
  if (from._internal_has_to()) {
    _this->_impl_.to_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.to_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetLastTradesRequest)
}

inline void GetLastTradesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_id_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetLastTradesRequest::~GetLastTradesRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetLastTradesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetLastTradesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.from_;
  if (this != internal_default_instance()) delete _impl_.to_;
}

void GetLastTradesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetLastTradesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetLastTradesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.figi_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.instrument_id_.ClearNonDefaultToEmpty();
    }
  }
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLastTradesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string figi = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetLastTradesRequest.figi"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string instrument_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetLastTradesRequest.instrument_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLastTradesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetLastTradesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string figi = 1 [deprecated = true];
  if (_internal_has_figi()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetLastTradesRequest.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_from()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_to()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  // optional string instrument_id = 4;
  if (_internal_has_instrument_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetLastTradesRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_instrument_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetLastTradesRequest)
  return target;
}

size_t GetLastTradesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetLastTradesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string figi = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_figi());
    }

    // optional string instrument_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_instrument_id());
    }

  }
  // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.from_);
  }

  // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.to_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLastTradesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetLastTradesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLastTradesRequest::GetClassData() const { return &_class_data_; }


void GetLastTradesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetLastTradesRequest*>(&to_msg);
  auto& from = static_cast<const GetLastTradesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetLastTradesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_figi(from._internal_figi());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_instrument_id(from._internal_instrument_id());
    }
  }
  if (from._internal_has_from()) {
    _this->_internal_mutable_from()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_from());
  }
  if (from._internal_has_to()) {
    _this->_internal_mutable_to()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_to());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLastTradesRequest::CopyFrom(const GetLastTradesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetLastTradesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastTradesRequest::IsInitialized() const {
  return true;
}

void GetLastTradesRequest::InternalSwap(GetLastTradesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_id_, lhs_arena,
      &other->_impl_.instrument_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLastTradesRequest, _impl_.to_)
      + sizeof(GetLastTradesRequest::_impl_.to_)
      - PROTOBUF_FIELD_OFFSET(GetLastTradesRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLastTradesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[40]);
}

// ===================================================================

class GetLastTradesResponse::_Internal {
 public:
};

GetLastTradesResponse::GetLastTradesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetLastTradesResponse)
}
GetLastTradesResponse::GetLastTradesResponse(const GetLastTradesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetLastTradesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trades_){from._impl_.trades_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetLastTradesResponse)
}

inline void GetLastTradesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trades_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetLastTradesResponse::~GetLastTradesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetLastTradesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetLastTradesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trades_.~RepeatedPtrField();
}

void GetLastTradesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetLastTradesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetLastTradesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trades_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLastTradesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.Trade trades = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLastTradesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetLastTradesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Trade trades = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trades_size()); i < n; i++) {
    const auto& repfield = this->_internal_trades(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetLastTradesResponse)
  return target;
}

size_t GetLastTradesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetLastTradesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Trade trades = 1;
  total_size += 1UL * this->_internal_trades_size();
  for (const auto& msg : this->_impl_.trades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLastTradesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetLastTradesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLastTradesResponse::GetClassData() const { return &_class_data_; }


void GetLastTradesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetLastTradesResponse*>(&to_msg);
  auto& from = static_cast<const GetLastTradesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetLastTradesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.trades_.MergeFrom(from._impl_.trades_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLastTradesResponse::CopyFrom(const GetLastTradesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetLastTradesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastTradesResponse::IsInitialized() const {
  return true;
}

void GetLastTradesResponse::InternalSwap(GetLastTradesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.trades_.InternalSwap(&other->_impl_.trades_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLastTradesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[41]);
}

// ===================================================================

class GetMySubscriptions::_Internal {
 public:
};

GetMySubscriptions::GetMySubscriptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetMySubscriptions)
}
GetMySubscriptions::GetMySubscriptions(const GetMySubscriptions& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetMySubscriptions* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetMySubscriptions)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMySubscriptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMySubscriptions::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetMySubscriptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[42]);
}

// ===================================================================

class GetClosePricesRequest::_Internal {
 public:
};

GetClosePricesRequest::GetClosePricesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetClosePricesRequest)
}
GetClosePricesRequest::GetClosePricesRequest(const GetClosePricesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetClosePricesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){from._impl_.instruments_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetClosePricesRequest)
}

inline void GetClosePricesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetClosePricesRequest::~GetClosePricesRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetClosePricesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetClosePricesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instruments_.~RepeatedPtrField();
}

void GetClosePricesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetClosePricesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetClosePricesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetClosePricesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest instruments = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetClosePricesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetClosePricesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest instruments = 1 [(.google.api.field_behavior) = REQUIRED];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetClosePricesRequest)
  return target;
}

size_t GetClosePricesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetClosePricesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest instruments = 1 [(.google.api.field_behavior) = REQUIRED];
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_impl_.instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetClosePricesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetClosePricesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClosePricesRequest::GetClassData() const { return &_class_data_; }


void GetClosePricesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetClosePricesRequest*>(&to_msg);
  auto& from = static_cast<const GetClosePricesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetClosePricesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instruments_.MergeFrom(from._impl_.instruments_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetClosePricesRequest::CopyFrom(const GetClosePricesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetClosePricesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClosePricesRequest::IsInitialized() const {
  return true;
}

void GetClosePricesRequest::InternalSwap(GetClosePricesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetClosePricesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[43]);
}

// ===================================================================

class InstrumentClosePriceRequest::_Internal {
 public:
};

InstrumentClosePriceRequest::InstrumentClosePriceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest)
}
InstrumentClosePriceRequest::InstrumentClosePriceRequest(const InstrumentClosePriceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InstrumentClosePriceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_id().empty()) {
    _this->_impl_.instrument_id_.Set(from._internal_instrument_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest)
}

inline void InstrumentClosePriceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.instrument_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InstrumentClosePriceRequest::~InstrumentClosePriceRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstrumentClosePriceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instrument_id_.Destroy();
}

void InstrumentClosePriceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InstrumentClosePriceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentClosePriceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string instrument_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest.instrument_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstrumentClosePriceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string instrument_id = 1;
  if (!this->_internal_instrument_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instrument_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest)
  return target;
}

size_t InstrumentClosePriceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instrument_id = 1;
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstrumentClosePriceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InstrumentClosePriceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstrumentClosePriceRequest::GetClassData() const { return &_class_data_; }


void InstrumentClosePriceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InstrumentClosePriceRequest*>(&to_msg);
  auto& from = static_cast<const InstrumentClosePriceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentClosePriceRequest::CopyFrom(const InstrumentClosePriceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentClosePriceRequest::IsInitialized() const {
  return true;
}

void InstrumentClosePriceRequest::InternalSwap(InstrumentClosePriceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_id_, lhs_arena,
      &other->_impl_.instrument_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentClosePriceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[44]);
}

// ===================================================================

class GetClosePricesResponse::_Internal {
 public:
};

GetClosePricesResponse::GetClosePricesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetClosePricesResponse)
}
GetClosePricesResponse::GetClosePricesResponse(const GetClosePricesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetClosePricesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.close_prices_){from._impl_.close_prices_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetClosePricesResponse)
}

inline void GetClosePricesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.close_prices_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetClosePricesResponse::~GetClosePricesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetClosePricesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetClosePricesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.close_prices_.~RepeatedPtrField();
}

void GetClosePricesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetClosePricesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetClosePricesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.close_prices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetClosePricesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse close_prices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_close_prices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetClosePricesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetClosePricesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse close_prices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_close_prices_size()); i < n; i++) {
    const auto& repfield = this->_internal_close_prices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetClosePricesResponse)
  return target;
}

size_t GetClosePricesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetClosePricesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse close_prices = 1;
  total_size += 1UL * this->_internal_close_prices_size();
  for (const auto& msg : this->_impl_.close_prices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetClosePricesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetClosePricesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClosePricesResponse::GetClassData() const { return &_class_data_; }


void GetClosePricesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetClosePricesResponse*>(&to_msg);
  auto& from = static_cast<const GetClosePricesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetClosePricesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.close_prices_.MergeFrom(from._impl_.close_prices_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetClosePricesResponse::CopyFrom(const GetClosePricesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetClosePricesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClosePricesResponse::IsInitialized() const {
  return true;
}

void GetClosePricesResponse::InternalSwap(GetClosePricesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.close_prices_.InternalSwap(&other->_impl_.close_prices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetClosePricesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[45]);
}

// ===================================================================

class InstrumentClosePriceResponse::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& price(const InstrumentClosePriceResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& evening_session_price(const InstrumentClosePriceResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const InstrumentClosePriceResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
InstrumentClosePriceResponse::_Internal::price(const InstrumentClosePriceResponse* msg) {
  return *msg->_impl_.price_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
InstrumentClosePriceResponse::_Internal::evening_session_price(const InstrumentClosePriceResponse* msg) {
  return *msg->_impl_.evening_session_price_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
InstrumentClosePriceResponse::_Internal::time(const InstrumentClosePriceResponse* msg) {
  return *msg->_impl_.time_;
}
void InstrumentClosePriceResponse::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
void InstrumentClosePriceResponse::clear_evening_session_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.evening_session_price_ != nullptr) {
    delete _impl_.evening_session_price_;
  }
  _impl_.evening_session_price_ = nullptr;
}
void InstrumentClosePriceResponse::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
InstrumentClosePriceResponse::InstrumentClosePriceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse)
}
InstrumentClosePriceResponse::InstrumentClosePriceResponse(const InstrumentClosePriceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InstrumentClosePriceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.evening_session_price_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_figi().empty()) {
    _this->_impl_.figi_.Set(from._internal_figi(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.price_);
  }
  if (from._internal_has_evening_session_price()) {
    _this->_impl_.evening_session_price_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.evening_session_price_);
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse)
}

inline void InstrumentClosePriceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.figi_){}
    , decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.evening_session_price_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.figi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.figi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InstrumentClosePriceResponse::~InstrumentClosePriceResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstrumentClosePriceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.price_;
  if (this != internal_default_instance()) delete _impl_.evening_session_price_;
  if (this != internal_default_instance()) delete _impl_.time_;
}

void InstrumentClosePriceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InstrumentClosePriceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.evening_session_price_ != nullptr) {
    delete _impl_.evening_session_price_;
  }
  _impl_.evening_session_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentClosePriceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string figi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_figi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse.figi"));
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation price = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.Quotation evening_session_price = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_evening_session_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstrumentClosePriceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_figi().data(), static_cast<int>(this->_internal_figi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse.figi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_figi(), target);
  }

  // string instrument_uid = 2;
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instrument_uid(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation price = 11;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation evening_session_price = 12;
  if (this->_internal_has_evening_session_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::evening_session_price(this),
        _Internal::evening_session_price(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time = 21;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse)
  return target;
}

size_t InstrumentClosePriceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_figi());
  }

  // string instrument_uid = 2;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation price = 11;
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation evening_session_price = 12;
  if (this->_internal_has_evening_session_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.evening_session_price_);
  }

  // .google.protobuf.Timestamp time = 21;
  if (this->_internal_has_time()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstrumentClosePriceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InstrumentClosePriceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstrumentClosePriceResponse::GetClassData() const { return &_class_data_; }


void InstrumentClosePriceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InstrumentClosePriceResponse*>(&to_msg);
  auto& from = static_cast<const InstrumentClosePriceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_price());
  }
  if (from._internal_has_evening_session_price()) {
    _this->_internal_mutable_evening_session_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_evening_session_price());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentClosePriceResponse::CopyFrom(const InstrumentClosePriceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentClosePriceResponse::IsInitialized() const {
  return true;
}

void InstrumentClosePriceResponse::InternalSwap(InstrumentClosePriceResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.figi_, lhs_arena,
      &other->_impl_.figi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstrumentClosePriceResponse, _impl_.time_)
      + sizeof(InstrumentClosePriceResponse::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(InstrumentClosePriceResponse, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentClosePriceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[46]);
}

// ===================================================================

class GetTechAnalysisRequest_Smoothing::_Internal {
 public:
};

GetTechAnalysisRequest_Smoothing::GetTechAnalysisRequest_Smoothing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing)
}
GetTechAnalysisRequest_Smoothing::GetTechAnalysisRequest_Smoothing(const GetTechAnalysisRequest_Smoothing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTechAnalysisRequest_Smoothing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fast_length_){}
    , decltype(_impl_.slow_length_){}
    , decltype(_impl_.signal_smoothing_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.fast_length_, &from._impl_.fast_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.signal_smoothing_) -
    reinterpret_cast<char*>(&_impl_.fast_length_)) + sizeof(_impl_.signal_smoothing_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing)
}

inline void GetTechAnalysisRequest_Smoothing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fast_length_){0}
    , decltype(_impl_.slow_length_){0}
    , decltype(_impl_.signal_smoothing_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetTechAnalysisRequest_Smoothing::~GetTechAnalysisRequest_Smoothing() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTechAnalysisRequest_Smoothing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetTechAnalysisRequest_Smoothing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTechAnalysisRequest_Smoothing::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.fast_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.signal_smoothing_) -
      reinterpret_cast<char*>(&_impl_.fast_length_)) + sizeof(_impl_.signal_smoothing_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTechAnalysisRequest_Smoothing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 fast_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fast_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 slow_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.slow_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 signal_smoothing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.signal_smoothing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTechAnalysisRequest_Smoothing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fast_length = 1;
  if (this->_internal_fast_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_fast_length(), target);
  }

  // int32 slow_length = 2;
  if (this->_internal_slow_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_slow_length(), target);
  }

  // int32 signal_smoothing = 3;
  if (this->_internal_signal_smoothing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_signal_smoothing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing)
  return target;
}

size_t GetTechAnalysisRequest_Smoothing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 fast_length = 1;
  if (this->_internal_fast_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fast_length());
  }

  // int32 slow_length = 2;
  if (this->_internal_slow_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_slow_length());
  }

  // int32 signal_smoothing = 3;
  if (this->_internal_signal_smoothing() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_signal_smoothing());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTechAnalysisRequest_Smoothing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTechAnalysisRequest_Smoothing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTechAnalysisRequest_Smoothing::GetClassData() const { return &_class_data_; }


void GetTechAnalysisRequest_Smoothing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTechAnalysisRequest_Smoothing*>(&to_msg);
  auto& from = static_cast<const GetTechAnalysisRequest_Smoothing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fast_length() != 0) {
    _this->_internal_set_fast_length(from._internal_fast_length());
  }
  if (from._internal_slow_length() != 0) {
    _this->_internal_set_slow_length(from._internal_slow_length());
  }
  if (from._internal_signal_smoothing() != 0) {
    _this->_internal_set_signal_smoothing(from._internal_signal_smoothing());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTechAnalysisRequest_Smoothing::CopyFrom(const GetTechAnalysisRequest_Smoothing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTechAnalysisRequest_Smoothing::IsInitialized() const {
  return true;
}

void GetTechAnalysisRequest_Smoothing::InternalSwap(GetTechAnalysisRequest_Smoothing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest_Smoothing, _impl_.signal_smoothing_)
      + sizeof(GetTechAnalysisRequest_Smoothing::_impl_.signal_smoothing_)
      - PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest_Smoothing, _impl_.fast_length_)>(
          reinterpret_cast<char*>(&_impl_.fast_length_),
          reinterpret_cast<char*>(&other->_impl_.fast_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTechAnalysisRequest_Smoothing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[47]);
}

// ===================================================================

class GetTechAnalysisRequest_Deviation::_Internal {
 public:
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& deviation_multiplier(const GetTechAnalysisRequest_Deviation* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetTechAnalysisRequest_Deviation::_Internal::deviation_multiplier(const GetTechAnalysisRequest_Deviation* msg) {
  return *msg->_impl_.deviation_multiplier_;
}
void GetTechAnalysisRequest_Deviation::clear_deviation_multiplier() {
  if (GetArenaForAllocation() == nullptr && _impl_.deviation_multiplier_ != nullptr) {
    delete _impl_.deviation_multiplier_;
  }
  _impl_.deviation_multiplier_ = nullptr;
}
GetTechAnalysisRequest_Deviation::GetTechAnalysisRequest_Deviation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Deviation)
}
GetTechAnalysisRequest_Deviation::GetTechAnalysisRequest_Deviation(const GetTechAnalysisRequest_Deviation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTechAnalysisRequest_Deviation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.deviation_multiplier_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_deviation_multiplier()) {
    _this->_impl_.deviation_multiplier_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.deviation_multiplier_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Deviation)
}

inline void GetTechAnalysisRequest_Deviation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.deviation_multiplier_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetTechAnalysisRequest_Deviation::~GetTechAnalysisRequest_Deviation() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Deviation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTechAnalysisRequest_Deviation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.deviation_multiplier_;
}

void GetTechAnalysisRequest_Deviation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTechAnalysisRequest_Deviation::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Deviation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.deviation_multiplier_ != nullptr) {
    delete _impl_.deviation_multiplier_;
  }
  _impl_.deviation_multiplier_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTechAnalysisRequest_Deviation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.Quotation deviation_multiplier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_deviation_multiplier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTechAnalysisRequest_Deviation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Deviation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Quotation deviation_multiplier = 1;
  if (this->_internal_has_deviation_multiplier()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::deviation_multiplier(this),
        _Internal::deviation_multiplier(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Deviation)
  return target;
}

size_t GetTechAnalysisRequest_Deviation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Deviation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Quotation deviation_multiplier = 1;
  if (this->_internal_has_deviation_multiplier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deviation_multiplier_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTechAnalysisRequest_Deviation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTechAnalysisRequest_Deviation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTechAnalysisRequest_Deviation::GetClassData() const { return &_class_data_; }


void GetTechAnalysisRequest_Deviation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTechAnalysisRequest_Deviation*>(&to_msg);
  auto& from = static_cast<const GetTechAnalysisRequest_Deviation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Deviation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_deviation_multiplier()) {
    _this->_internal_mutable_deviation_multiplier()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_deviation_multiplier());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTechAnalysisRequest_Deviation::CopyFrom(const GetTechAnalysisRequest_Deviation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Deviation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTechAnalysisRequest_Deviation::IsInitialized() const {
  return true;
}

void GetTechAnalysisRequest_Deviation::InternalSwap(GetTechAnalysisRequest_Deviation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.deviation_multiplier_, other->_impl_.deviation_multiplier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTechAnalysisRequest_Deviation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[48]);
}

// ===================================================================

class GetTechAnalysisRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& from(const GetTechAnalysisRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& to(const GetTechAnalysisRequest* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Deviation& deviation(const GetTechAnalysisRequest* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing& smoothing(const GetTechAnalysisRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetTechAnalysisRequest::_Internal::from(const GetTechAnalysisRequest* msg) {
  return *msg->_impl_.from_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetTechAnalysisRequest::_Internal::to(const GetTechAnalysisRequest* msg) {
  return *msg->_impl_.to_;
}
const ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Deviation&
GetTechAnalysisRequest::_Internal::deviation(const GetTechAnalysisRequest* msg) {
  return *msg->_impl_.deviation_;
}
const ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing&
GetTechAnalysisRequest::_Internal::smoothing(const GetTechAnalysisRequest* msg) {
  return *msg->_impl_.smoothing_;
}
void GetTechAnalysisRequest::clear_from() {
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
}
void GetTechAnalysisRequest::clear_to() {
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
}
GetTechAnalysisRequest::GetTechAnalysisRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest)
}
GetTechAnalysisRequest::GetTechAnalysisRequest(const GetTechAnalysisRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTechAnalysisRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
    , decltype(_impl_.deviation_){nullptr}
    , decltype(_impl_.smoothing_){nullptr}
    , decltype(_impl_.indicator_type_){}
    , decltype(_impl_.interval_){}
    , decltype(_impl_.type_of_price_){}
    , decltype(_impl_.length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_uid().empty()) {
    _this->_impl_.instrument_uid_.Set(from._internal_instrument_uid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_from()) {
    _this->_impl_.from_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.from_);
  }
  if (from._internal_has_to()) {
    _this->_impl_.to_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.to_);
  }
  if (from._internal_has_deviation()) {
    _this->_impl_.deviation_ = new ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Deviation(*from._impl_.deviation_);
  }
  if (from._internal_has_smoothing()) {
    _this->_impl_.smoothing_ = new ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing(*from._impl_.smoothing_);
  }
  ::memcpy(&_impl_.indicator_type_, &from._impl_.indicator_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.length_) -
    reinterpret_cast<char*>(&_impl_.indicator_type_)) + sizeof(_impl_.length_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest)
}

inline void GetTechAnalysisRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_uid_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
    , decltype(_impl_.deviation_){nullptr}
    , decltype(_impl_.smoothing_){nullptr}
    , decltype(_impl_.indicator_type_){0}
    , decltype(_impl_.interval_){0}
    , decltype(_impl_.type_of_price_){0}
    , decltype(_impl_.length_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.instrument_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrument_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetTechAnalysisRequest::~GetTechAnalysisRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTechAnalysisRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instrument_uid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.from_;
  if (this != internal_default_instance()) delete _impl_.to_;
  if (this != internal_default_instance()) delete _impl_.deviation_;
  if (this != internal_default_instance()) delete _impl_.smoothing_;
}

void GetTechAnalysisRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTechAnalysisRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_uid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.deviation_ != nullptr) {
    delete _impl_.deviation_;
  }
  _impl_.deviation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.smoothing_ != nullptr) {
    delete _impl_.smoothing_;
  }
  _impl_.smoothing_ = nullptr;
  ::memset(&_impl_.indicator_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.length_) -
      reinterpret_cast<char*>(&_impl_.indicator_type_)) + sizeof(_impl_.length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTechAnalysisRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorType indicator_type = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_indicator_type(static_cast<::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorType>(val));
        } else
          goto handle_unusual;
        continue;
      // string instrument_uid = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instrument_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.instrument_uid"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp from = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp to = 4 [(.google.api.field_behavior) = REQUIRED];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorInterval interval = 5 [(.google.api.field_behavior) = REQUIRED];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interval(static_cast<::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorInterval>(val));
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.TypeOfPrice type_of_price = 6 [(.google.api.field_behavior) = REQUIRED];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type_of_price(static_cast<::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_TypeOfPrice>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 length = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Deviation deviation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_deviation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing smoothing = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_smoothing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTechAnalysisRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorType indicator_type = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_indicator_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_indicator_type(), target);
  }

  // string instrument_uid = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_uid().data(), static_cast<int>(this->_internal_instrument_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.instrument_uid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instrument_uid(), target);
  }

  // .google.protobuf.Timestamp from = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_from()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp to = 4 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_to()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorInterval interval = 5 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_interval(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.TypeOfPrice type_of_price = 6 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_type_of_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type_of_price(), target);
  }

  // int32 length = 7;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_length(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Deviation deviation = 8;
  if (this->_internal_has_deviation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::deviation(this),
        _Internal::deviation(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing smoothing = 9;
  if (this->_internal_has_smoothing()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::smoothing(this),
        _Internal::smoothing(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest)
  return target;
}

size_t GetTechAnalysisRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instrument_uid = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_uid());
  }

  // .google.protobuf.Timestamp from = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.from_);
  }

  // .google.protobuf.Timestamp to = 4 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.to_);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Deviation deviation = 8;
  if (this->_internal_has_deviation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deviation_);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing smoothing = 9;
  if (this->_internal_has_smoothing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.smoothing_);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorType indicator_type = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_indicator_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_indicator_type());
  }

  // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorInterval interval = 5 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_interval() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_interval());
  }

  // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.TypeOfPrice type_of_price = 6 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_type_of_price() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type_of_price());
  }

  // int32 length = 7;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTechAnalysisRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTechAnalysisRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTechAnalysisRequest::GetClassData() const { return &_class_data_; }


void GetTechAnalysisRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTechAnalysisRequest*>(&to_msg);
  auto& from = static_cast<const GetTechAnalysisRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (from._internal_has_from()) {
    _this->_internal_mutable_from()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_from());
  }
  if (from._internal_has_to()) {
    _this->_internal_mutable_to()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_to());
  }
  if (from._internal_has_deviation()) {
    _this->_internal_mutable_deviation()->::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Deviation::MergeFrom(
        from._internal_deviation());
  }
  if (from._internal_has_smoothing()) {
    _this->_internal_mutable_smoothing()->::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing::MergeFrom(
        from._internal_smoothing());
  }
  if (from._internal_indicator_type() != 0) {
    _this->_internal_set_indicator_type(from._internal_indicator_type());
  }
  if (from._internal_interval() != 0) {
    _this->_internal_set_interval(from._internal_interval());
  }
  if (from._internal_type_of_price() != 0) {
    _this->_internal_set_type_of_price(from._internal_type_of_price());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTechAnalysisRequest::CopyFrom(const GetTechAnalysisRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTechAnalysisRequest::IsInitialized() const {
  return true;
}

void GetTechAnalysisRequest::InternalSwap(GetTechAnalysisRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrument_uid_, lhs_arena,
      &other->_impl_.instrument_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest, _impl_.length_)
      + sizeof(GetTechAnalysisRequest::_impl_.length_)
      - PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTechAnalysisRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[49]);
}

// ===================================================================

class GetTechAnalysisResponse_TechAnalysisItem::_Internal {
 public:
  using HasBits = decltype(std::declval<GetTechAnalysisResponse_TechAnalysisItem>()._impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const GetTechAnalysisResponse_TechAnalysisItem* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& middle_band(const GetTechAnalysisResponse_TechAnalysisItem* msg);
  static void set_has_middle_band(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& upper_band(const GetTechAnalysisResponse_TechAnalysisItem* msg);
  static void set_has_upper_band(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& lower_band(const GetTechAnalysisResponse_TechAnalysisItem* msg);
  static void set_has_lower_band(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& signal(const GetTechAnalysisResponse_TechAnalysisItem* msg);
  static void set_has_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& macd(const GetTechAnalysisResponse_TechAnalysisItem* msg);
  static void set_has_macd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetTechAnalysisResponse_TechAnalysisItem::_Internal::timestamp(const GetTechAnalysisResponse_TechAnalysisItem* msg) {
  return *msg->_impl_.timestamp_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetTechAnalysisResponse_TechAnalysisItem::_Internal::middle_band(const GetTechAnalysisResponse_TechAnalysisItem* msg) {
  return *msg->_impl_.middle_band_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetTechAnalysisResponse_TechAnalysisItem::_Internal::upper_band(const GetTechAnalysisResponse_TechAnalysisItem* msg) {
  return *msg->_impl_.upper_band_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetTechAnalysisResponse_TechAnalysisItem::_Internal::lower_band(const GetTechAnalysisResponse_TechAnalysisItem* msg) {
  return *msg->_impl_.lower_band_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetTechAnalysisResponse_TechAnalysisItem::_Internal::signal(const GetTechAnalysisResponse_TechAnalysisItem* msg) {
  return *msg->_impl_.signal_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation&
GetTechAnalysisResponse_TechAnalysisItem::_Internal::macd(const GetTechAnalysisResponse_TechAnalysisItem* msg) {
  return *msg->_impl_.macd_;
}
void GetTechAnalysisResponse_TechAnalysisItem::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
void GetTechAnalysisResponse_TechAnalysisItem::clear_middle_band() {
  if (_impl_.middle_band_ != nullptr) _impl_.middle_band_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetTechAnalysisResponse_TechAnalysisItem::clear_upper_band() {
  if (_impl_.upper_band_ != nullptr) _impl_.upper_band_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GetTechAnalysisResponse_TechAnalysisItem::clear_lower_band() {
  if (_impl_.lower_band_ != nullptr) _impl_.lower_band_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void GetTechAnalysisResponse_TechAnalysisItem::clear_signal() {
  if (_impl_.signal_ != nullptr) _impl_.signal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void GetTechAnalysisResponse_TechAnalysisItem::clear_macd() {
  if (_impl_.macd_ != nullptr) _impl_.macd_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
GetTechAnalysisResponse_TechAnalysisItem::GetTechAnalysisResponse_TechAnalysisItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem)
}
GetTechAnalysisResponse_TechAnalysisItem::GetTechAnalysisResponse_TechAnalysisItem(const GetTechAnalysisResponse_TechAnalysisItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTechAnalysisResponse_TechAnalysisItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.middle_band_){nullptr}
    , decltype(_impl_.upper_band_){nullptr}
    , decltype(_impl_.lower_band_){nullptr}
    , decltype(_impl_.signal_){nullptr}
    , decltype(_impl_.macd_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  if (from._internal_has_middle_band()) {
    _this->_impl_.middle_band_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.middle_band_);
  }
  if (from._internal_has_upper_band()) {
    _this->_impl_.upper_band_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.upper_band_);
  }
  if (from._internal_has_lower_band()) {
    _this->_impl_.lower_band_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.lower_band_);
  }
  if (from._internal_has_signal()) {
    _this->_impl_.signal_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.signal_);
  }
  if (from._internal_has_macd()) {
    _this->_impl_.macd_ = new ::tinkoff::public_::invest::api::contract::v1::Quotation(*from._impl_.macd_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem)
}

inline void GetTechAnalysisResponse_TechAnalysisItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.middle_band_){nullptr}
    , decltype(_impl_.upper_band_){nullptr}
    , decltype(_impl_.lower_band_){nullptr}
    , decltype(_impl_.signal_){nullptr}
    , decltype(_impl_.macd_){nullptr}
  };
}

GetTechAnalysisResponse_TechAnalysisItem::~GetTechAnalysisResponse_TechAnalysisItem() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTechAnalysisResponse_TechAnalysisItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.middle_band_;
  if (this != internal_default_instance()) delete _impl_.upper_band_;
  if (this != internal_default_instance()) delete _impl_.lower_band_;
  if (this != internal_default_instance()) delete _impl_.signal_;
  if (this != internal_default_instance()) delete _impl_.macd_;
}

void GetTechAnalysisResponse_TechAnalysisItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTechAnalysisResponse_TechAnalysisItem::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.middle_band_ != nullptr);
      _impl_.middle_band_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.upper_band_ != nullptr);
      _impl_.upper_band_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.lower_band_ != nullptr);
      _impl_.lower_band_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.signal_ != nullptr);
      _impl_.signal_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.macd_ != nullptr);
      _impl_.macd_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTechAnalysisResponse_TechAnalysisItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .tinkoff.public_.invest.api.contract.v1.Quotation middle_band = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_middle_band(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .tinkoff.public_.invest.api.contract.v1.Quotation upper_band = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_upper_band(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .tinkoff.public_.invest.api.contract.v1.Quotation lower_band = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lower_band(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .tinkoff.public_.invest.api.contract.v1.Quotation signal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .tinkoff.public_.invest.api.contract.v1.Quotation macd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_macd(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTechAnalysisResponse_TechAnalysisItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // optional .tinkoff.public_.invest.api.contract.v1.Quotation middle_band = 2;
  if (_internal_has_middle_band()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::middle_band(this),
        _Internal::middle_band(this).GetCachedSize(), target, stream);
  }

  // optional .tinkoff.public_.invest.api.contract.v1.Quotation upper_band = 3;
  if (_internal_has_upper_band()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::upper_band(this),
        _Internal::upper_band(this).GetCachedSize(), target, stream);
  }

  // optional .tinkoff.public_.invest.api.contract.v1.Quotation lower_band = 4;
  if (_internal_has_lower_band()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::lower_band(this),
        _Internal::lower_band(this).GetCachedSize(), target, stream);
  }

  // optional .tinkoff.public_.invest.api.contract.v1.Quotation signal = 5;
  if (_internal_has_signal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::signal(this),
        _Internal::signal(this).GetCachedSize(), target, stream);
  }

  // optional .tinkoff.public_.invest.api.contract.v1.Quotation macd = 6;
  if (_internal_has_macd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::macd(this),
        _Internal::macd(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem)
  return target;
}

size_t GetTechAnalysisResponse_TechAnalysisItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .tinkoff.public_.invest.api.contract.v1.Quotation middle_band = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.middle_band_);
    }

    // optional .tinkoff.public_.invest.api.contract.v1.Quotation upper_band = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.upper_band_);
    }

    // optional .tinkoff.public_.invest.api.contract.v1.Quotation lower_band = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lower_band_);
    }

    // optional .tinkoff.public_.invest.api.contract.v1.Quotation signal = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.signal_);
    }

    // optional .tinkoff.public_.invest.api.contract.v1.Quotation macd = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.macd_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTechAnalysisResponse_TechAnalysisItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTechAnalysisResponse_TechAnalysisItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTechAnalysisResponse_TechAnalysisItem::GetClassData() const { return &_class_data_; }


void GetTechAnalysisResponse_TechAnalysisItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTechAnalysisResponse_TechAnalysisItem*>(&to_msg);
  auto& from = static_cast<const GetTechAnalysisResponse_TechAnalysisItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_middle_band()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_middle_band());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_upper_band()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_upper_band());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_lower_band()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_lower_band());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_signal()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_signal());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_macd()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_macd());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTechAnalysisResponse_TechAnalysisItem::CopyFrom(const GetTechAnalysisResponse_TechAnalysisItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTechAnalysisResponse_TechAnalysisItem::IsInitialized() const {
  return true;
}

void GetTechAnalysisResponse_TechAnalysisItem::InternalSwap(GetTechAnalysisResponse_TechAnalysisItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTechAnalysisResponse_TechAnalysisItem, _impl_.macd_)
      + sizeof(GetTechAnalysisResponse_TechAnalysisItem::_impl_.macd_)
      - PROTOBUF_FIELD_OFFSET(GetTechAnalysisResponse_TechAnalysisItem, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTechAnalysisResponse_TechAnalysisItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[50]);
}

// ===================================================================

class GetTechAnalysisResponse::_Internal {
 public:
};

GetTechAnalysisResponse::GetTechAnalysisResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse)
}
GetTechAnalysisResponse::GetTechAnalysisResponse(const GetTechAnalysisResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTechAnalysisResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.technical_indicators_){from._impl_.technical_indicators_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse)
}

inline void GetTechAnalysisResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.technical_indicators_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetTechAnalysisResponse::~GetTechAnalysisResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTechAnalysisResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.technical_indicators_.~RepeatedPtrField();
}

void GetTechAnalysisResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTechAnalysisResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.technical_indicators_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTechAnalysisResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem technical_indicators = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_technical_indicators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTechAnalysisResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem technical_indicators = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_technical_indicators_size()); i < n; i++) {
    const auto& repfield = this->_internal_technical_indicators(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse)
  return target;
}

size_t GetTechAnalysisResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem technical_indicators = 1;
  total_size += 1UL * this->_internal_technical_indicators_size();
  for (const auto& msg : this->_impl_.technical_indicators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTechAnalysisResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTechAnalysisResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTechAnalysisResponse::GetClassData() const { return &_class_data_; }


void GetTechAnalysisResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTechAnalysisResponse*>(&to_msg);
  auto& from = static_cast<const GetTechAnalysisResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.technical_indicators_.MergeFrom(from._impl_.technical_indicators_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTechAnalysisResponse::CopyFrom(const GetTechAnalysisResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTechAnalysisResponse::IsInitialized() const {
  return true;
}

void GetTechAnalysisResponse::InternalSwap(GetTechAnalysisResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.technical_indicators_.InternalSwap(&other->_impl_.technical_indicators_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTechAnalysisResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[51]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::CandleInstrument*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::CandleInstrument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::CandleInstrument >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::CandleSubscription*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::CandleSubscription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::CandleSubscription >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::OrderBookInstrument*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::OrderBookInstrument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::OrderBookInstrument >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::OrderBookSubscription*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::OrderBookSubscription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::OrderBookSubscription >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::TradeInstrument*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::TradeInstrument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::TradeInstrument >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::SubscribeTradesResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::SubscribeTradesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::SubscribeTradesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::TradeSubscription*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::TradeSubscription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::TradeSubscription >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::InfoInstrument*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::InfoInstrument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::InfoInstrument >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::SubscribeInfoResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::SubscribeInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::SubscribeInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::InfoSubscription*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::InfoSubscription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::InfoSubscription >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::LastPriceInstrument*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::LastPriceInstrument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::LastPriceInstrument >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::LastPriceSubscription*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::LastPriceSubscription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::LastPriceSubscription >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::Candle*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::Candle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::Candle >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::OrderBook*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::OrderBook >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::OrderBook >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::Order*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::Order >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::Order >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::Trade*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::Trade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::Trade >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::TradingStatus*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::TradingStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::TradingStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::HistoricCandle*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::HistoricCandle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::HistoricCandle >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::LastPrice*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::LastPrice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::LastPrice >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetMySubscriptions*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetMySubscriptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetMySubscriptions >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Deviation*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Deviation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Deviation >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
