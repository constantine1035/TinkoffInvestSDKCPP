// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: marketdata.proto

#include "marketdata.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {

inline constexpr TradeSubscription::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        stream_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        subscription_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        subscription_status_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SubscriptionStatus >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TradeSubscription::TradeSubscription(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TradeSubscriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradeSubscriptionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradeSubscriptionDefaultTypeInternal() {}
  union {
    TradeSubscription _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradeSubscriptionDefaultTypeInternal _TradeSubscription_default_instance_;

inline constexpr TradeInstrument::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TradeInstrument::TradeInstrument(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TradeInstrumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradeInstrumentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradeInstrumentDefaultTypeInternal() {}
  union {
    TradeInstrument _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradeInstrumentDefaultTypeInternal _TradeInstrument_default_instance_;

inline constexpr OrderBookSubscription::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        stream_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        subscription_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        depth_{0},
        subscription_status_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SubscriptionStatus >(0)},
        order_book_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::OrderBookType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR OrderBookSubscription::OrderBookSubscription(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OrderBookSubscriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderBookSubscriptionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderBookSubscriptionDefaultTypeInternal() {}
  union {
    OrderBookSubscription _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderBookSubscriptionDefaultTypeInternal _OrderBookSubscription_default_instance_;

inline constexpr OrderBookInstrument::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        depth_{0},
        order_book_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::OrderBookType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR OrderBookInstrument::OrderBookInstrument(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OrderBookInstrumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderBookInstrumentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderBookInstrumentDefaultTypeInternal() {}
  union {
    OrderBookInstrument _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderBookInstrumentDefaultTypeInternal _OrderBookInstrument_default_instance_;

inline constexpr LastPriceSubscription::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        stream_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        subscription_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        subscription_status_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SubscriptionStatus >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LastPriceSubscription::LastPriceSubscription(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LastPriceSubscriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LastPriceSubscriptionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LastPriceSubscriptionDefaultTypeInternal() {}
  union {
    LastPriceSubscription _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LastPriceSubscriptionDefaultTypeInternal _LastPriceSubscription_default_instance_;

inline constexpr LastPriceInstrument::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LastPriceInstrument::LastPriceInstrument(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LastPriceInstrumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LastPriceInstrumentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LastPriceInstrumentDefaultTypeInternal() {}
  union {
    LastPriceInstrument _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LastPriceInstrumentDefaultTypeInternal _LastPriceInstrument_default_instance_;

inline constexpr InstrumentClosePriceRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR InstrumentClosePriceRequest::InstrumentClosePriceRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct InstrumentClosePriceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentClosePriceRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentClosePriceRequestDefaultTypeInternal() {}
  union {
    InstrumentClosePriceRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentClosePriceRequestDefaultTypeInternal _InstrumentClosePriceRequest_default_instance_;

inline constexpr InfoSubscription::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        stream_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        subscription_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        subscription_status_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SubscriptionStatus >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR InfoSubscription::InfoSubscription(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct InfoSubscriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoSubscriptionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoSubscriptionDefaultTypeInternal() {}
  union {
    InfoSubscription _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoSubscriptionDefaultTypeInternal _InfoSubscription_default_instance_;

inline constexpr InfoInstrument::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR InfoInstrument::InfoInstrument(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct InfoInstrumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoInstrumentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoInstrumentDefaultTypeInternal() {}
  union {
    InfoInstrument _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoInstrumentDefaultTypeInternal _InfoInstrument_default_instance_;

inline constexpr GetTradingStatusesRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instrument_id_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetTradingStatusesRequest::GetTradingStatusesRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetTradingStatusesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTradingStatusesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTradingStatusesRequestDefaultTypeInternal() {}
  union {
    GetTradingStatusesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTradingStatusesRequestDefaultTypeInternal _GetTradingStatusesRequest_default_instance_;

inline constexpr GetTradingStatusResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        trading_status_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus >(0)},
        limit_order_available_flag_{false},
        market_order_available_flag_{false},
        api_trade_available_flag_{false},
        bestprice_order_available_flag_{false},
        only_best_price_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetTradingStatusResponse::GetTradingStatusResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetTradingStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTradingStatusResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTradingStatusResponseDefaultTypeInternal() {}
  union {
    GetTradingStatusResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTradingStatusResponseDefaultTypeInternal _GetTradingStatusResponse_default_instance_;

inline constexpr GetTradingStatusRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR GetTradingStatusRequest::GetTradingStatusRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetTradingStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTradingStatusRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTradingStatusRequestDefaultTypeInternal() {}
  union {
    GetTradingStatusRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTradingStatusRequestDefaultTypeInternal _GetTradingStatusRequest_default_instance_;

inline constexpr GetTechAnalysisRequest_Smoothing::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : fast_length_{0},
        slow_length_{0},
        signal_smoothing_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetTechAnalysisRequest_Smoothing::GetTechAnalysisRequest_Smoothing(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetTechAnalysisRequest_SmoothingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTechAnalysisRequest_SmoothingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTechAnalysisRequest_SmoothingDefaultTypeInternal() {}
  union {
    GetTechAnalysisRequest_Smoothing _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTechAnalysisRequest_SmoothingDefaultTypeInternal _GetTechAnalysisRequest_Smoothing_default_instance_;

inline constexpr GetOrderBookRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        depth_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetOrderBookRequest::GetOrderBookRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetOrderBookRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetOrderBookRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetOrderBookRequestDefaultTypeInternal() {}
  union {
    GetOrderBookRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetOrderBookRequestDefaultTypeInternal _GetOrderBookRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR GetMySubscriptions::GetMySubscriptions(::_pbi::ConstantInitialized) {}
struct GetMySubscriptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMySubscriptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMySubscriptionsDefaultTypeInternal() {}
  union {
    GetMySubscriptions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMySubscriptionsDefaultTypeInternal _GetMySubscriptions_default_instance_;

inline constexpr GetLastPricesRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : figi_{},
        instrument_id_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetLastPricesRequest::GetLastPricesRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetLastPricesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLastPricesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLastPricesRequestDefaultTypeInternal() {}
  union {
    GetLastPricesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLastPricesRequestDefaultTypeInternal _GetLastPricesRequest_default_instance_;

inline constexpr CandleSubscription::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        stream_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        subscription_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        interval_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SubscriptionInterval >(0)},
        subscription_status_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SubscriptionStatus >(0)},
        waiting_close_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CandleSubscription::CandleSubscription(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CandleSubscriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CandleSubscriptionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CandleSubscriptionDefaultTypeInternal() {}
  union {
    CandleSubscription _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CandleSubscriptionDefaultTypeInternal _CandleSubscription_default_instance_;

inline constexpr CandleInstrument::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        interval_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SubscriptionInterval >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CandleInstrument::CandleInstrument(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CandleInstrumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CandleInstrumentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CandleInstrumentDefaultTypeInternal() {}
  union {
    CandleInstrument _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CandleInstrumentDefaultTypeInternal _CandleInstrument_default_instance_;

inline constexpr TradingStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        time_{nullptr},
        trading_status_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus >(0)},
        limit_order_available_flag_{false},
        market_order_available_flag_{false} {}

template <typename>
PROTOBUF_CONSTEXPR TradingStatus::TradingStatus(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TradingStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradingStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradingStatusDefaultTypeInternal() {}
  union {
    TradingStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradingStatusDefaultTypeInternal _TradingStatus_default_instance_;

inline constexpr Trade::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        price_{nullptr},
        time_{nullptr},
        quantity_{::int64_t{0}},
        direction_{static_cast< ::tinkoff::public_::invest::api::contract::v1::TradeDirection >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Trade::Trade(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TradeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradeDefaultTypeInternal() {}
  union {
    Trade _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradeDefaultTypeInternal _Trade_default_instance_;

inline constexpr SubscribeTradesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : trade_subscriptions_{},
        tracking_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SubscribeTradesResponse::SubscribeTradesResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SubscribeTradesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeTradesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeTradesResponseDefaultTypeInternal() {}
  union {
    SubscribeTradesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeTradesResponseDefaultTypeInternal _SubscribeTradesResponse_default_instance_;

inline constexpr SubscribeTradesRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        subscription_action_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SubscriptionAction >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SubscribeTradesRequest::SubscribeTradesRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SubscribeTradesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeTradesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeTradesRequestDefaultTypeInternal() {}
  union {
    SubscribeTradesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeTradesRequestDefaultTypeInternal _SubscribeTradesRequest_default_instance_;

inline constexpr SubscribeOrderBookResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : order_book_subscriptions_{},
        tracking_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SubscribeOrderBookResponse::SubscribeOrderBookResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SubscribeOrderBookResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeOrderBookResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeOrderBookResponseDefaultTypeInternal() {}
  union {
    SubscribeOrderBookResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeOrderBookResponseDefaultTypeInternal _SubscribeOrderBookResponse_default_instance_;

inline constexpr SubscribeOrderBookRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        subscription_action_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SubscriptionAction >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SubscribeOrderBookRequest::SubscribeOrderBookRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SubscribeOrderBookRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeOrderBookRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeOrderBookRequestDefaultTypeInternal() {}
  union {
    SubscribeOrderBookRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeOrderBookRequestDefaultTypeInternal _SubscribeOrderBookRequest_default_instance_;

inline constexpr SubscribeLastPriceResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : last_price_subscriptions_{},
        tracking_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SubscribeLastPriceResponse::SubscribeLastPriceResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SubscribeLastPriceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeLastPriceResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeLastPriceResponseDefaultTypeInternal() {}
  union {
    SubscribeLastPriceResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeLastPriceResponseDefaultTypeInternal _SubscribeLastPriceResponse_default_instance_;

inline constexpr SubscribeLastPriceRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        subscription_action_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SubscriptionAction >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SubscribeLastPriceRequest::SubscribeLastPriceRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SubscribeLastPriceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeLastPriceRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeLastPriceRequestDefaultTypeInternal() {}
  union {
    SubscribeLastPriceRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeLastPriceRequestDefaultTypeInternal _SubscribeLastPriceRequest_default_instance_;

inline constexpr SubscribeInfoResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : info_subscriptions_{},
        tracking_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SubscribeInfoResponse::SubscribeInfoResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SubscribeInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeInfoResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeInfoResponseDefaultTypeInternal() {}
  union {
    SubscribeInfoResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeInfoResponseDefaultTypeInternal _SubscribeInfoResponse_default_instance_;

inline constexpr SubscribeInfoRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        subscription_action_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SubscriptionAction >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SubscribeInfoRequest::SubscribeInfoRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SubscribeInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeInfoRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeInfoRequestDefaultTypeInternal() {}
  union {
    SubscribeInfoRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeInfoRequestDefaultTypeInternal _SubscribeInfoRequest_default_instance_;

inline constexpr SubscribeCandlesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : candles_subscriptions_{},
        tracking_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SubscribeCandlesResponse::SubscribeCandlesResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SubscribeCandlesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeCandlesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeCandlesResponseDefaultTypeInternal() {}
  union {
    SubscribeCandlesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeCandlesResponseDefaultTypeInternal _SubscribeCandlesResponse_default_instance_;

inline constexpr SubscribeCandlesRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        subscription_action_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SubscriptionAction >(0)},
        waiting_close_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SubscribeCandlesRequest::SubscribeCandlesRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SubscribeCandlesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeCandlesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeCandlesRequestDefaultTypeInternal() {}
  union {
    SubscribeCandlesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeCandlesRequestDefaultTypeInternal _SubscribeCandlesRequest_default_instance_;

inline constexpr Order::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        price_{nullptr},
        quantity_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR Order::Order(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderDefaultTypeInternal() {}
  union {
    Order _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderDefaultTypeInternal _Order_default_instance_;

inline constexpr LastPrice::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        price_{nullptr},
        time_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR LastPrice::LastPrice(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LastPriceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LastPriceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LastPriceDefaultTypeInternal() {}
  union {
    LastPrice _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LastPriceDefaultTypeInternal _LastPrice_default_instance_;

inline constexpr InstrumentClosePriceResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        price_{nullptr},
        evening_session_price_{nullptr},
        time_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR InstrumentClosePriceResponse::InstrumentClosePriceResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct InstrumentClosePriceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentClosePriceResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentClosePriceResponseDefaultTypeInternal() {}
  union {
    InstrumentClosePriceResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentClosePriceResponseDefaultTypeInternal _InstrumentClosePriceResponse_default_instance_;

inline constexpr HistoricCandle::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        open_{nullptr},
        high_{nullptr},
        low_{nullptr},
        close_{nullptr},
        time_{nullptr},
        volume_{::int64_t{0}},
        is_complete_{false},
        candle_source_{static_cast< ::tinkoff::public_::invest::api::contract::v1::CandleSource >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR HistoricCandle::HistoricCandle(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HistoricCandleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HistoricCandleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HistoricCandleDefaultTypeInternal() {}
  union {
    HistoricCandle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HistoricCandleDefaultTypeInternal _HistoricCandle_default_instance_;

inline constexpr GetTradingStatusesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : trading_statuses_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetTradingStatusesResponse::GetTradingStatusesResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetTradingStatusesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTradingStatusesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTradingStatusesResponseDefaultTypeInternal() {}
  union {
    GetTradingStatusesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTradingStatusesResponseDefaultTypeInternal _GetTradingStatusesResponse_default_instance_;

inline constexpr GetTechAnalysisResponse_TechAnalysisItem::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        timestamp_{nullptr},
        middle_band_{nullptr},
        upper_band_{nullptr},
        lower_band_{nullptr},
        signal_{nullptr},
        macd_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetTechAnalysisResponse_TechAnalysisItem::GetTechAnalysisResponse_TechAnalysisItem(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetTechAnalysisResponse_TechAnalysisItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTechAnalysisResponse_TechAnalysisItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTechAnalysisResponse_TechAnalysisItemDefaultTypeInternal() {}
  union {
    GetTechAnalysisResponse_TechAnalysisItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTechAnalysisResponse_TechAnalysisItemDefaultTypeInternal _GetTechAnalysisResponse_TechAnalysisItem_default_instance_;

inline constexpr GetTechAnalysisRequest_Deviation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        deviation_multiplier_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetTechAnalysisRequest_Deviation::GetTechAnalysisRequest_Deviation(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetTechAnalysisRequest_DeviationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTechAnalysisRequest_DeviationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTechAnalysisRequest_DeviationDefaultTypeInternal() {}
  union {
    GetTechAnalysisRequest_Deviation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTechAnalysisRequest_DeviationDefaultTypeInternal _GetTechAnalysisRequest_Deviation_default_instance_;

inline constexpr GetLastTradesRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        from_{nullptr},
        to_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetLastTradesRequest::GetLastTradesRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetLastTradesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLastTradesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLastTradesRequestDefaultTypeInternal() {}
  union {
    GetLastTradesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLastTradesRequestDefaultTypeInternal _GetLastTradesRequest_default_instance_;

inline constexpr GetClosePricesRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetClosePricesRequest::GetClosePricesRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetClosePricesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetClosePricesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetClosePricesRequestDefaultTypeInternal() {}
  union {
    GetClosePricesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetClosePricesRequestDefaultTypeInternal _GetClosePricesRequest_default_instance_;

inline constexpr GetCandlesRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        from_{nullptr},
        to_{nullptr},
        interval_{static_cast< ::tinkoff::public_::invest::api::contract::v1::CandleInterval >(0)},
        candle_source_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest_CandleSource >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR GetCandlesRequest::GetCandlesRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetCandlesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCandlesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCandlesRequestDefaultTypeInternal() {}
  union {
    GetCandlesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCandlesRequestDefaultTypeInternal _GetCandlesRequest_default_instance_;

inline constexpr Candle::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        open_{nullptr},
        high_{nullptr},
        low_{nullptr},
        close_{nullptr},
        time_{nullptr},
        last_trade_ts_{nullptr},
        volume_{::int64_t{0}},
        interval_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SubscriptionInterval >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Candle::Candle(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CandleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CandleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CandleDefaultTypeInternal() {}
  union {
    Candle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CandleDefaultTypeInternal _Candle_default_instance_;

inline constexpr OrderBook::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        bids_{},
        asks_{},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        time_{nullptr},
        limit_up_{nullptr},
        limit_down_{nullptr},
        depth_{0},
        is_consistent_{false},
        order_book_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::OrderBookType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR OrderBook::OrderBook(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OrderBookDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderBookDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderBookDefaultTypeInternal() {}
  union {
    OrderBook _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderBookDefaultTypeInternal _OrderBook_default_instance_;

inline constexpr MarketDataServerSideStreamRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        subscribe_candles_request_{nullptr},
        subscribe_order_book_request_{nullptr},
        subscribe_trades_request_{nullptr},
        subscribe_info_request_{nullptr},
        subscribe_last_price_request_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MarketDataServerSideStreamRequest::MarketDataServerSideStreamRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MarketDataServerSideStreamRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDataServerSideStreamRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDataServerSideStreamRequestDefaultTypeInternal() {}
  union {
    MarketDataServerSideStreamRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDataServerSideStreamRequestDefaultTypeInternal _MarketDataServerSideStreamRequest_default_instance_;

inline constexpr MarketDataRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : payload_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR MarketDataRequest::MarketDataRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MarketDataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDataRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDataRequestDefaultTypeInternal() {}
  union {
    MarketDataRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDataRequestDefaultTypeInternal _MarketDataRequest_default_instance_;

inline constexpr GetTechAnalysisResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : technical_indicators_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetTechAnalysisResponse::GetTechAnalysisResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetTechAnalysisResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTechAnalysisResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTechAnalysisResponseDefaultTypeInternal() {}
  union {
    GetTechAnalysisResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTechAnalysisResponseDefaultTypeInternal _GetTechAnalysisResponse_default_instance_;

inline constexpr GetTechAnalysisRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        from_{nullptr},
        to_{nullptr},
        deviation_{nullptr},
        smoothing_{nullptr},
        indicator_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorType >(0)},
        interval_{static_cast< ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorInterval >(0)},
        type_of_price_{static_cast< ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_TypeOfPrice >(0)},
        length_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetTechAnalysisRequest::GetTechAnalysisRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetTechAnalysisRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTechAnalysisRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTechAnalysisRequestDefaultTypeInternal() {}
  union {
    GetTechAnalysisRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTechAnalysisRequestDefaultTypeInternal _GetTechAnalysisRequest_default_instance_;

inline constexpr GetOrderBookResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        bids_{},
        asks_{},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        last_price_{nullptr},
        close_price_{nullptr},
        limit_up_{nullptr},
        limit_down_{nullptr},
        last_price_ts_{nullptr},
        close_price_ts_{nullptr},
        orderbook_ts_{nullptr},
        depth_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetOrderBookResponse::GetOrderBookResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetOrderBookResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetOrderBookResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetOrderBookResponseDefaultTypeInternal() {}
  union {
    GetOrderBookResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetOrderBookResponseDefaultTypeInternal _GetOrderBookResponse_default_instance_;

inline constexpr GetLastTradesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : trades_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetLastTradesResponse::GetLastTradesResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetLastTradesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLastTradesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLastTradesResponseDefaultTypeInternal() {}
  union {
    GetLastTradesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLastTradesResponseDefaultTypeInternal _GetLastTradesResponse_default_instance_;

inline constexpr GetLastPricesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : last_prices_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetLastPricesResponse::GetLastPricesResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetLastPricesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLastPricesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLastPricesResponseDefaultTypeInternal() {}
  union {
    GetLastPricesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLastPricesResponseDefaultTypeInternal _GetLastPricesResponse_default_instance_;

inline constexpr GetClosePricesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : close_prices_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetClosePricesResponse::GetClosePricesResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetClosePricesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetClosePricesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetClosePricesResponseDefaultTypeInternal() {}
  union {
    GetClosePricesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetClosePricesResponseDefaultTypeInternal _GetClosePricesResponse_default_instance_;

inline constexpr GetCandlesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : candles_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetCandlesResponse::GetCandlesResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetCandlesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCandlesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCandlesResponseDefaultTypeInternal() {}
  union {
    GetCandlesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCandlesResponseDefaultTypeInternal _GetCandlesResponse_default_instance_;

inline constexpr MarketDataResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : payload_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR MarketDataResponse::MarketDataResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MarketDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDataResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDataResponseDefaultTypeInternal() {}
  union {
    MarketDataResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDataResponseDefaultTypeInternal _MarketDataResponse_default_instance_;
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
static ::_pb::Metadata file_level_metadata_marketdata_2eproto[52];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_marketdata_2eproto[11];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_marketdata_2eproto = nullptr;
const ::uint32_t TableStruct_marketdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, _impl_.payload_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest, _impl_.subscribe_candles_request_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest, _impl_.subscribe_order_book_request_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest, _impl_.subscribe_trades_request_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest, _impl_.subscribe_info_request_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest, _impl_.subscribe_last_price_request_),
    0,
    1,
    2,
    3,
    4,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataResponse, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataResponse, _impl_.payload_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest, _impl_.subscription_action_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest, _impl_.instruments_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest, _impl_.waiting_close_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CandleInstrument, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CandleInstrument, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CandleInstrument, _impl_.interval_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CandleInstrument, _impl_.instrument_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesResponse, _impl_.tracking_id_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesResponse, _impl_.candles_subscriptions_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CandleSubscription, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CandleSubscription, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CandleSubscription, _impl_.interval_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CandleSubscription, _impl_.subscription_status_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CandleSubscription, _impl_.instrument_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CandleSubscription, _impl_.waiting_close_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CandleSubscription, _impl_.stream_id_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CandleSubscription, _impl_.subscription_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest, _impl_.subscription_action_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest, _impl_.instruments_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookInstrument, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookInstrument, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookInstrument, _impl_.depth_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookInstrument, _impl_.instrument_id_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookInstrument, _impl_.order_book_type_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookResponse, _impl_.tracking_id_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookResponse, _impl_.order_book_subscriptions_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookSubscription, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookSubscription, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookSubscription, _impl_.depth_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookSubscription, _impl_.subscription_status_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookSubscription, _impl_.instrument_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookSubscription, _impl_.stream_id_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookSubscription, _impl_.subscription_id_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBookSubscription, _impl_.order_book_type_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest, _impl_.subscription_action_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest, _impl_.instruments_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradeInstrument, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradeInstrument, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradeInstrument, _impl_.instrument_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeTradesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeTradesResponse, _impl_.tracking_id_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeTradesResponse, _impl_.trade_subscriptions_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradeSubscription, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradeSubscription, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradeSubscription, _impl_.subscription_status_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradeSubscription, _impl_.instrument_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradeSubscription, _impl_.stream_id_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradeSubscription, _impl_.subscription_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest, _impl_.subscription_action_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest, _impl_.instruments_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InfoInstrument, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InfoInstrument, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InfoInstrument, _impl_.instrument_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeInfoResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeInfoResponse, _impl_.tracking_id_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeInfoResponse, _impl_.info_subscriptions_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InfoSubscription, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InfoSubscription, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InfoSubscription, _impl_.subscription_status_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InfoSubscription, _impl_.instrument_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InfoSubscription, _impl_.stream_id_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InfoSubscription, _impl_.subscription_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest, _impl_.subscription_action_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest, _impl_.instruments_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPriceInstrument, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPriceInstrument, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPriceInstrument, _impl_.instrument_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceResponse, _impl_.tracking_id_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceResponse, _impl_.last_price_subscriptions_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPriceSubscription, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPriceSubscription, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPriceSubscription, _impl_.subscription_status_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPriceSubscription, _impl_.instrument_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPriceSubscription, _impl_.stream_id_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPriceSubscription, _impl_.subscription_id_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Candle, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Candle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Candle, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Candle, _impl_.interval_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Candle, _impl_.open_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Candle, _impl_.high_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Candle, _impl_.low_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Candle, _impl_.close_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Candle, _impl_.volume_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Candle, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Candle, _impl_.last_trade_ts_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Candle, _impl_.instrument_uid_),
    ~0u,
    ~0u,
    0,
    1,
    2,
    3,
    ~0u,
    4,
    5,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBook, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBook, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBook, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBook, _impl_.depth_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBook, _impl_.is_consistent_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBook, _impl_.bids_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBook, _impl_.asks_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBook, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBook, _impl_.limit_up_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBook, _impl_.limit_down_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBook, _impl_.instrument_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OrderBook, _impl_.order_book_type_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    2,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Order, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Order, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Order, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Order, _impl_.quantity_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Trade, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Trade, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Trade, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Trade, _impl_.direction_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Trade, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Trade, _impl_.quantity_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Trade, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Trade, _impl_.instrument_uid_),
    ~0u,
    ~0u,
    0,
    ~0u,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingStatus, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingStatus, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingStatus, _impl_.trading_status_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingStatus, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingStatus, _impl_.limit_order_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingStatus, _impl_.market_order_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingStatus, _impl_.instrument_uid_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest, _impl_.from_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest, _impl_.to_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest, _impl_.interval_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest, _impl_.instrument_id_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest, _impl_.candle_source_type_),
    0,
    2,
    3,
    ~0u,
    1,
    4,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse, _impl_.candles_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::HistoricCandle, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::HistoricCandle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::HistoricCandle, _impl_.open_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::HistoricCandle, _impl_.high_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::HistoricCandle, _impl_.low_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::HistoricCandle, _impl_.close_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::HistoricCandle, _impl_.volume_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::HistoricCandle, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::HistoricCandle, _impl_.is_complete_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::HistoricCandle, _impl_.candle_source_),
    0,
    1,
    2,
    3,
    ~0u,
    4,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest, _impl_.instrument_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse, _impl_.last_prices_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPrice, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPrice, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPrice, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPrice, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPrice, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::LastPrice, _impl_.instrument_uid_),
    ~0u,
    0,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest, _impl_.depth_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest, _impl_.instrument_id_),
    0,
    ~0u,
    1,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _impl_.depth_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _impl_.bids_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _impl_.asks_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _impl_.last_price_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _impl_.close_price_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _impl_.limit_up_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _impl_.limit_down_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _impl_.last_price_ts_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _impl_.close_price_ts_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _impl_.orderbook_ts_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse, _impl_.instrument_uid_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest, _impl_.instrument_id_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest, _impl_.instrument_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse, _impl_.trading_statuses_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse, _impl_.trading_status_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse, _impl_.limit_order_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse, _impl_.market_order_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse, _impl_.api_trade_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse, _impl_.instrument_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse, _impl_.bestprice_order_available_flag_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse, _impl_.only_best_price_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest, _impl_.from_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest, _impl_.to_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest, _impl_.instrument_id_),
    0,
    2,
    3,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse, _impl_.trades_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetMySubscriptions, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest, _impl_.instruments_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceRequest, _impl_.instrument_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse, _impl_.close_prices_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceResponse, _impl_.figi_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceResponse, _impl_.instrument_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceResponse, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceResponse, _impl_.evening_session_price_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceResponse, _impl_.time_),
    ~0u,
    ~0u,
    0,
    1,
    2,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing, _impl_.fast_length_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing, _impl_.slow_length_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing, _impl_.signal_smoothing_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Deviation, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Deviation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Deviation, _impl_.deviation_multiplier_),
    0,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest, _impl_.indicator_type_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest, _impl_.instrument_uid_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest, _impl_.from_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest, _impl_.to_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest, _impl_.interval_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest, _impl_.type_of_price_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest, _impl_.length_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest, _impl_.deviation_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest, _impl_.smoothing_),
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem, _impl_.middle_band_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem, _impl_.upper_band_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem, _impl_.lower_band_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem, _impl_.signal_),
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem, _impl_.macd_),
    0,
    1,
    2,
    3,
    4,
    5,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse, _impl_.technical_indicators_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::MarketDataRequest)},
        {15, 28, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest)},
        {33, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::MarketDataResponse)},
        {53, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest)},
        {64, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::CandleInstrument)},
        {75, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesResponse)},
        {85, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::CandleSubscription)},
        {100, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest)},
        {110, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::OrderBookInstrument)},
        {122, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookResponse)},
        {132, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::OrderBookSubscription)},
        {147, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest)},
        {157, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradeInstrument)},
        {167, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::SubscribeTradesResponse)},
        {177, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradeSubscription)},
        {190, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest)},
        {200, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::InfoInstrument)},
        {210, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::SubscribeInfoResponse)},
        {220, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::InfoSubscription)},
        {233, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest)},
        {243, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::LastPriceInstrument)},
        {253, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceResponse)},
        {263, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::LastPriceSubscription)},
        {276, 294, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Candle)},
        {304, 322, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::OrderBook)},
        {332, 342, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Order)},
        {344, 358, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Trade)},
        {364, 378, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradingStatus)},
        {384, 398, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest)},
        {404, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse)},
        {413, 429, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::HistoricCandle)},
        {437, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest)},
        {447, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse)},
        {456, 468, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::LastPrice)},
        {472, 483, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest)},
        {486, 506, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse)},
        {518, 528, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest)},
        {530, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest)},
        {539, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse)},
        {548, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse)},
        {564, 576, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest)},
        {580, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse)},
        {589, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetMySubscriptions)},
        {597, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest)},
        {606, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceRequest)},
        {615, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse)},
        {624, 637, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceResponse)},
        {642, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing)},
        {653, 662, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Deviation)},
        {663, 680, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest)},
        {689, 703, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem)},
        {709, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::tinkoff::public_::invest::api::contract::v1::_MarketDataRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_MarketDataServerSideStreamRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_MarketDataResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_SubscribeCandlesRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_CandleInstrument_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_SubscribeCandlesResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_CandleSubscription_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_SubscribeOrderBookRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_OrderBookInstrument_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_SubscribeOrderBookResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_OrderBookSubscription_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_SubscribeTradesRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_TradeInstrument_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_SubscribeTradesResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_TradeSubscription_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_SubscribeInfoRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_InfoInstrument_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_SubscribeInfoResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_InfoSubscription_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_SubscribeLastPriceRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_LastPriceInstrument_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_SubscribeLastPriceResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_LastPriceSubscription_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_Candle_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_OrderBook_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_Order_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_Trade_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_TradingStatus_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetCandlesRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetCandlesResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_HistoricCandle_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetLastPricesRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetLastPricesResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_LastPrice_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetOrderBookRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetOrderBookResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetTradingStatusRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetTradingStatusesRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetTradingStatusesResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetTradingStatusResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetLastTradesRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetLastTradesResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetMySubscriptions_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetClosePricesRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_InstrumentClosePriceRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetClosePricesResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_InstrumentClosePriceResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetTechAnalysisRequest_Smoothing_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetTechAnalysisRequest_Deviation_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetTechAnalysisRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetTechAnalysisResponse_TechAnalysisItem_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetTechAnalysisResponse_default_instance_._instance,
};
const char descriptor_table_protodef_marketdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\020marketdata.proto\022&tinkoff.public_.inve"
    "st.api.contract.v1\032\037google/protobuf/time"
    "stamp.proto\032\014common.proto\032\037google/api/fi"
    "eld_behavior.proto\"\372\004\n\021MarketDataRequest"
    "\022d\n\031subscribe_candles_request\030\001 \001(\0132\?.ti"
    "nkoff.public_.invest.api.contract.v1.Sub"
    "scribeCandlesRequestH\000\022i\n\034subscribe_orde"
    "r_book_request\030\002 \001(\0132A.tinkoff.public_.i"
    "nvest.api.contract.v1.SubscribeOrderBook"
    "RequestH\000\022b\n\030subscribe_trades_request\030\003 "
    "\001(\0132>.tinkoff.public_.invest.api.contrac"
    "t.v1.SubscribeTradesRequestH\000\022^\n\026subscri"
    "be_info_request\030\004 \001(\0132<.tinkoff.public_."
    "invest.api.contract.v1.SubscribeInfoRequ"
    "estH\000\022i\n\034subscribe_last_price_request\030\005 "
    "\001(\0132A.tinkoff.public_.invest.api.contrac"
    "t.v1.SubscribeLastPriceRequestH\000\022Z\n\024get_"
    "my_subscriptions\030\006 \001(\0132:.tinkoff.public_"
    ".invest.api.contract.v1.GetMySubscriptio"
    "nsH\000B\t\n\007payload\"\231\004\n!MarketDataServerSide"
    "StreamRequest\022b\n\031subscribe_candles_reque"
    "st\030\001 \001(\0132\?.tinkoff.public_.invest.api.co"
    "ntract.v1.SubscribeCandlesRequest\022g\n\034sub"
    "scribe_order_book_request\030\002 \001(\0132A.tinkof"
    "f.public_.invest.api.contract.v1.Subscri"
    "beOrderBookRequest\022`\n\030subscribe_trades_r"
    "equest\030\003 \001(\0132>.tinkoff.public_.invest.ap"
    "i.contract.v1.SubscribeTradesRequest\022\\\n\026"
    "subscribe_info_request\030\004 \001(\0132<.tinkoff.p"
    "ublic_.invest.api.contract.v1.SubscribeI"
    "nfoRequest\022g\n\034subscribe_last_price_reque"
    "st\030\005 \001(\0132A.tinkoff.public_.invest.api.co"
    "ntract.v1.SubscribeLastPriceRequest\"\313\007\n\022"
    "MarketDataResponse\022f\n\032subscribe_candles_"
    "response\030\001 \001(\0132@.tinkoff.public_.invest."
    "api.contract.v1.SubscribeCandlesResponse"
    "H\000\022k\n\035subscribe_order_book_response\030\002 \001("
    "\0132B.tinkoff.public_.invest.api.contract."
    "v1.SubscribeOrderBookResponseH\000\022d\n\031subsc"
    "ribe_trades_response\030\003 \001(\0132\?.tinkoff.pub"
    "lic_.invest.api.contract.v1.SubscribeTra"
    "desResponseH\000\022`\n\027subscribe_info_response"
    "\030\004 \001(\0132=.tinkoff.public_.invest.api.cont"
    "ract.v1.SubscribeInfoResponseH\000\022@\n\006candl"
    "e\030\005 \001(\0132..tinkoff.public_.invest.api.con"
    "tract.v1.CandleH\000\022>\n\005trade\030\006 \001(\0132-.tinko"
    "ff.public_.invest.api.contract.v1.TradeH"
    "\000\022F\n\torderbook\030\007 \001(\01321.tinkoff.public_.i"
    "nvest.api.contract.v1.OrderBookH\000\022O\n\016tra"
    "ding_status\030\010 \001(\01325.tinkoff.public_.inve"
    "st.api.contract.v1.TradingStatusH\000\022<\n\004pi"
    "ng\030\t \001(\0132,.tinkoff.public_.invest.api.co"
    "ntract.v1.PingH\000\022k\n\035subscribe_last_price"
    "_response\030\n \001(\0132B.tinkoff.public_.invest"
    ".api.contract.v1.SubscribeLastPriceRespo"
    "nseH\000\022G\n\nlast_price\030\013 \001(\01321.tinkoff.publ"
    "ic_.invest.api.contract.v1.LastPriceH\000B\t"
    "\n\007payload\"\330\001\n\027SubscribeCandlesRequest\022W\n"
    "\023subscription_action\030\001 \001(\0162:.tinkoff.pub"
    "lic_.invest.api.contract.v1.Subscription"
    "Action\022M\n\013instruments\030\002 \003(\01328.tinkoff.pu"
    "blic_.invest.api.contract.v1.CandleInstr"
    "ument\022\025\n\rwaiting_close\030\003 \001(\010\"\213\001\n\020CandleI"
    "nstrument\022\020\n\004figi\030\001 \001(\tB\002\030\001\022N\n\010interval\030"
    "\002 \001(\0162<.tinkoff.public_.invest.api.contr"
    "act.v1.SubscriptionInterval\022\025\n\rinstrumen"
    "t_id\030\003 \001(\t\"\212\001\n\030SubscribeCandlesResponse\022"
    "\023\n\013tracking_id\030\001 \001(\t\022Y\n\025candles_subscrip"
    "tions\030\002 \003(\0132:.tinkoff.public_.invest.api"
    ".contract.v1.CandleSubscription\"\246\002\n\022Cand"
    "leSubscription\022\014\n\004figi\030\001 \001(\t\022N\n\010interval"
    "\030\002 \001(\0162<.tinkoff.public_.invest.api.cont"
    "ract.v1.SubscriptionInterval\022W\n\023subscrip"
    "tion_status\030\003 \001(\0162:.tinkoff.public_.inve"
    "st.api.contract.v1.SubscriptionStatus\022\026\n"
    "\016instrument_uid\030\004 \001(\t\022\025\n\rwaiting_close\030\005"
    " \001(\010\022\021\n\tstream_id\030\006 \001(\t\022\027\n\017subscription_"
    "id\030\007 \001(\t\"\306\001\n\031SubscribeOrderBookRequest\022W"
    "\n\023subscription_action\030\001 \001(\0162:.tinkoff.pu"
    "blic_.invest.api.contract.v1.Subscriptio"
    "nAction\022P\n\013instruments\030\002 \003(\0132;.tinkoff.p"
    "ublic_.invest.api.contract.v1.OrderBookI"
    "nstrument\"\235\001\n\023OrderBookInstrument\022\020\n\004fig"
    "i\030\001 \001(\tB\002\030\001\022\r\n\005depth\030\002 \001(\005\022\025\n\rinstrument"
    "_id\030\003 \001(\t\022N\n\017order_book_type\030\004 \001(\01625.tin"
    "koff.public_.invest.api.contract.v1.Orde"
    "rBookType\"\222\001\n\032SubscribeOrderBookResponse"
    "\022\023\n\013tracking_id\030\001 \001(\t\022_\n\030order_book_subs"
    "criptions\030\002 \003(\0132=.tinkoff.public_.invest"
    ".api.contract.v1.OrderBookSubscription\"\241"
    "\002\n\025OrderBookSubscription\022\014\n\004figi\030\001 \001(\t\022\r"
    "\n\005depth\030\002 \001(\005\022W\n\023subscription_status\030\003 \001"
    "(\0162:.tinkoff.public_.invest.api.contract"
    ".v1.SubscriptionStatus\022\026\n\016instrument_uid"
    "\030\004 \001(\t\022\021\n\tstream_id\030\005 \001(\t\022\027\n\017subscriptio"
    "n_id\030\006 \001(\t\022N\n\017order_book_type\030\007 \001(\01625.ti"
    "nkoff.public_.invest.api.contract.v1.Ord"
    "erBookType\"\277\001\n\026SubscribeTradesRequest\022W\n"
    "\023subscription_action\030\001 \001(\0162:.tinkoff.pub"
    "lic_.invest.api.contract.v1.Subscription"
    "Action\022L\n\013instruments\030\002 \003(\01327.tinkoff.pu"
    "blic_.invest.api.contract.v1.TradeInstru"
    "ment\":\n\017TradeInstrument\022\020\n\004figi\030\001 \001(\tB\002\030"
    "\001\022\025\n\rinstrument_id\030\002 \001(\t\"\206\001\n\027SubscribeTr"
    "adesResponse\022\023\n\013tracking_id\030\001 \001(\t\022V\n\023tra"
    "de_subscriptions\030\002 \003(\01329.tinkoff.public_"
    ".invest.api.contract.v1.TradeSubscriptio"
    "n\"\276\001\n\021TradeSubscription\022\014\n\004figi\030\001 \001(\t\022W\n"
    "\023subscription_status\030\002 \001(\0162:.tinkoff.pub"
    "lic_.invest.api.contract.v1.Subscription"
    "Status\022\026\n\016instrument_uid\030\003 \001(\t\022\021\n\tstream"
    "_id\030\004 \001(\t\022\027\n\017subscription_id\030\005 \001(\t\"\274\001\n\024S"
    "ubscribeInfoRequest\022W\n\023subscription_acti"
    "on\030\001 \001(\0162:.tinkoff.public_.invest.api.co"
    "ntract.v1.SubscriptionAction\022K\n\013instrume"
    "nts\030\002 \003(\01326.tinkoff.public_.invest.api.c"
    "ontract.v1.InfoInstrument\"9\n\016InfoInstrum"
    "ent\022\020\n\004figi\030\001 \001(\tB\002\030\001\022\025\n\rinstrument_id\030\002"
    " \001(\t\"\202\001\n\025SubscribeInfoResponse\022\023\n\013tracki"
    "ng_id\030\001 \001(\t\022T\n\022info_subscriptions\030\002 \003(\0132"
    "8.tinkoff.public_.invest.api.contract.v1"
    ".InfoSubscription\"\275\001\n\020InfoSubscription\022\014"
    "\n\004figi\030\001 \001(\t\022W\n\023subscription_status\030\002 \001("
    "\0162:.tinkoff.public_.invest.api.contract."
    "v1.SubscriptionStatus\022\026\n\016instrument_uid\030"
    "\003 \001(\t\022\021\n\tstream_id\030\004 \001(\t\022\027\n\017subscription"
    "_id\030\005 \001(\t\"\306\001\n\031SubscribeLastPriceRequest\022"
    "W\n\023subscription_action\030\001 \001(\0162:.tinkoff.p"
    "ublic_.invest.api.contract.v1.Subscripti"
    "onAction\022P\n\013instruments\030\002 \003(\0132;.tinkoff."
    "public_.invest.api.contract.v1.LastPrice"
    "Instrument\">\n\023LastPriceInstrument\022\020\n\004fig"
    "i\030\001 \001(\tB\002\030\001\022\025\n\rinstrument_id\030\002 \001(\t\"\222\001\n\032S"
    "ubscribeLastPriceResponse\022\023\n\013tracking_id"
    "\030\001 \001(\t\022_\n\030last_price_subscriptions\030\002 \003(\013"
    "2=.tinkoff.public_.invest.api.contract.v"
    "1.LastPriceSubscription\"\302\001\n\025LastPriceSub"
    "scription\022\014\n\004figi\030\001 \001(\t\022W\n\023subscription_"
    "status\030\002 \001(\0162:.tinkoff.public_.invest.ap"
    "i.contract.v1.SubscriptionStatus\022\026\n\016inst"
    "rument_uid\030\003 \001(\t\022\021\n\tstream_id\030\004 \001(\t\022\027\n\017s"
    "ubscription_id\030\005 \001(\t\"\357\003\n\006Candle\022\014\n\004figi\030"
    "\001 \001(\t\022N\n\010interval\030\002 \001(\0162<.tinkoff.public"
    "_.invest.api.contract.v1.SubscriptionInt"
    "erval\022\?\n\004open\030\003 \001(\01321.tinkoff.public_.in"
    "vest.api.contract.v1.Quotation\022\?\n\004high\030\004"
    " \001(\01321.tinkoff.public_.invest.api.contra"
    "ct.v1.Quotation\022>\n\003low\030\005 \001(\01321.tinkoff.p"
    "ublic_.invest.api.contract.v1.Quotation\022"
    "@\n\005close\030\006 \001(\01321.tinkoff.public_.invest."
    "api.contract.v1.Quotation\022\016\n\006volume\030\007 \001("
    "\003\022(\n\004time\030\010 \001(\0132\032.google.protobuf.Timest"
    "amp\0221\n\rlast_trade_ts\030\t \001(\0132\032.google.prot"
    "obuf.Timestamp\022\026\n\016instrument_uid\030\n \001(\t\"\327"
    "\003\n\tOrderBook\022\014\n\004figi\030\001 \001(\t\022\r\n\005depth\030\002 \001("
    "\005\022\025\n\ris_consistent\030\003 \001(\010\022;\n\004bids\030\004 \003(\0132-"
    ".tinkoff.public_.invest.api.contract.v1."
    "Order\022;\n\004asks\030\005 \003(\0132-.tinkoff.public_.in"
    "vest.api.contract.v1.Order\022(\n\004time\030\006 \001(\013"
    "2\032.google.protobuf.Timestamp\022C\n\010limit_up"
    "\030\007 \001(\01321.tinkoff.public_.invest.api.cont"
    "ract.v1.Quotation\022E\n\nlimit_down\030\010 \001(\01321."
    "tinkoff.public_.invest.api.contract.v1.Q"
    "uotation\022\026\n\016instrument_uid\030\t \001(\t\022N\n\017orde"
    "r_book_type\030\n \001(\01625.tinkoff.public_.inve"
    "st.api.contract.v1.OrderBookType\"[\n\005Orde"
    "r\022@\n\005price\030\001 \001(\01321.tinkoff.public_.inves"
    "t.api.contract.v1.Quotation\022\020\n\010quantity\030"
    "\002 \001(\003\"\366\001\n\005Trade\022\014\n\004figi\030\001 \001(\t\022I\n\tdirecti"
    "on\030\002 \001(\01626.tinkoff.public_.invest.api.co"
    "ntract.v1.TradeDirection\022@\n\005price\030\003 \001(\0132"
    "1.tinkoff.public_.invest.api.contract.v1"
    ".Quotation\022\020\n\010quantity\030\004 \001(\003\022(\n\004time\030\005 \001"
    "(\0132\032.google.protobuf.Timestamp\022\026\n\016instru"
    "ment_uid\030\006 \001(\t\"\377\001\n\rTradingStatus\022\014\n\004figi"
    "\030\001 \001(\t\022U\n\016trading_status\030\002 \001(\0162=.tinkoff"
    ".public_.invest.api.contract.v1.Security"
    "TradingStatus\022(\n\004time\030\003 \001(\0132\032.google.pro"
    "tobuf.Timestamp\022\"\n\032limit_order_available"
    "_flag\030\004 \001(\010\022#\n\033market_order_available_fl"
    "ag\030\005 \001(\010\022\026\n\016instrument_uid\030\006 \001(\t\"\332\003\n\021Get"
    "CandlesRequest\022\025\n\004figi\030\001 \001(\tB\002\030\001H\000\210\001\001\022.\n"
    "\004from\030\002 \001(\0132\032.google.protobuf.TimestampB"
    "\004\342A\001\002\022,\n\002to\030\003 \001(\0132\032.google.protobuf.Time"
    "stampB\004\342A\001\002\022N\n\010interval\030\004 \001(\01626.tinkoff."
    "public_.invest.api.contract.v1.CandleInt"
    "ervalB\004\342A\001\002\022\032\n\rinstrument_id\030\005 \001(\tH\001\210\001\001\022"
    "g\n\022candle_source_type\030\007 \001(\0162F.tinkoff.pu"
    "blic_.invest.api.contract.v1.GetCandlesR"
    "equest.CandleSourceH\002\210\001\001\"I\n\014CandleSource"
    "\022\035\n\031CANDLE_SOURCE_UNSPECIFIED\020\000\022\032\n\026CANDL"
    "E_SOURCE_EXCHANGE\020\001B\007\n\005_figiB\020\n\016_instrum"
    "ent_idB\025\n\023_candle_source_type\"]\n\022GetCand"
    "lesResponse\022G\n\007candles\030\001 \003(\01326.tinkoff.p"
    "ublic_.invest.api.contract.v1.HistoricCa"
    "ndle\"\260\003\n\016HistoricCandle\022\?\n\004open\030\001 \001(\01321."
    "tinkoff.public_.invest.api.contract.v1.Q"
    "uotation\022\?\n\004high\030\002 \001(\01321.tinkoff.public_"
    ".invest.api.contract.v1.Quotation\022>\n\003low"
    "\030\003 \001(\01321.tinkoff.public_.invest.api.cont"
    "ract.v1.Quotation\022@\n\005close\030\004 \001(\01321.tinko"
    "ff.public_.invest.api.contract.v1.Quotat"
    "ion\022\016\n\006volume\030\005 \001(\003\022(\n\004time\030\006 \001(\0132\032.goog"
    "le.protobuf.Timestamp\022\023\n\013is_complete\030\007 \001"
    "(\010\022K\n\rcandle_source\030\t \001(\01624.tinkoff.publ"
    "ic_.invest.api.contract.v1.CandleSource\""
    "\?\n\024GetLastPricesRequest\022\020\n\004figi\030\001 \003(\tB\002\030"
    "\001\022\025\n\rinstrument_id\030\002 \003(\t\"_\n\025GetLastPrice"
    "sResponse\022F\n\013last_prices\030\001 \003(\01321.tinkoff"
    ".public_.invest.api.contract.v1.LastPric"
    "e\"\235\001\n\tLastPrice\022\014\n\004figi\030\001 \001(\t\022@\n\005price\030\002"
    " \001(\01321.tinkoff.public_.invest.api.contra"
    "ct.v1.Quotation\022(\n\004time\030\003 \001(\0132\032.google.p"
    "rotobuf.Timestamp\022\026\n\016instrument_uid\030\013 \001("
    "\t\"x\n\023GetOrderBookRequest\022\025\n\004figi\030\001 \001(\tB\002"
    "\030\001H\000\210\001\001\022\023\n\005depth\030\002 \001(\005B\004\342A\001\002\022\032\n\rinstrume"
    "nt_id\030\003 \001(\tH\001\210\001\001B\007\n\005_figiB\020\n\016_instrument"
    "_id\"\371\004\n\024GetOrderBookResponse\022\014\n\004figi\030\001 \001"
    "(\t\022\r\n\005depth\030\002 \001(\005\022;\n\004bids\030\003 \003(\0132-.tinkof"
    "f.public_.invest.api.contract.v1.Order\022;"
    "\n\004asks\030\004 \003(\0132-.tinkoff.public_.invest.ap"
    "i.contract.v1.Order\022E\n\nlast_price\030\005 \001(\0132"
    "1.tinkoff.public_.invest.api.contract.v1"
    ".Quotation\022F\n\013close_price\030\006 \001(\01321.tinkof"
    "f.public_.invest.api.contract.v1.Quotati"
    "on\022C\n\010limit_up\030\007 \001(\01321.tinkoff.public_.i"
    "nvest.api.contract.v1.Quotation\022E\n\nlimit"
    "_down\030\010 \001(\01321.tinkoff.public_.invest.api"
    ".contract.v1.Quotation\0221\n\rlast_price_ts\030"
    "\025 \001(\0132\032.google.protobuf.Timestamp\0222\n\016clo"
    "se_price_ts\030\026 \001(\0132\032.google.protobuf.Time"
    "stamp\0220\n\014orderbook_ts\030\027 \001(\0132\032.google.pro"
    "tobuf.Timestamp\022\026\n\016instrument_uid\030\t \001(\t\""
    "g\n\027GetTradingStatusRequest\022\025\n\004figi\030\001 \001(\t"
    "B\002\030\001H\000\210\001\001\022\032\n\rinstrument_id\030\002 \001(\tH\001\210\001\001B\007\n"
    "\005_figiB\020\n\016_instrument_id\"2\n\031GetTradingSt"
    "atusesRequest\022\025\n\rinstrument_id\030\001 \003(\t\"x\n\032"
    "GetTradingStatusesResponse\022Z\n\020trading_st"
    "atuses\030\001 \003(\0132@.tinkoff.public_.invest.ap"
    "i.contract.v1.GetTradingStatusResponse\"\303"
    "\002\n\030GetTradingStatusResponse\022\014\n\004figi\030\001 \001("
    "\t\022U\n\016trading_status\030\002 \001(\0162=.tinkoff.publ"
    "ic_.invest.api.contract.v1.SecurityTradi"
    "ngStatus\022\"\n\032limit_order_available_flag\030\003"
    " \001(\010\022#\n\033market_order_available_flag\030\004 \001("
    "\010\022 \n\030api_trade_available_flag\030\005 \001(\010\022\026\n\016i"
    "nstrument_uid\030\006 \001(\t\022&\n\036bestprice_order_a"
    "vailable_flag\030\010 \001(\010\022\027\n\017only_best_price\030\t"
    " \001(\010\"\302\001\n\024GetLastTradesRequest\022\025\n\004figi\030\001 "
    "\001(\tB\002\030\001H\000\210\001\001\022.\n\004from\030\002 \001(\0132\032.google.prot"
    "obuf.TimestampB\004\342A\001\002\022,\n\002to\030\003 \001(\0132\032.googl"
    "e.protobuf.TimestampB\004\342A\001\002\022\032\n\rinstrument"
    "_id\030\004 \001(\tH\001\210\001\001B\007\n\005_figiB\020\n\016_instrument_i"
    "d\"V\n\025GetLastTradesResponse\022=\n\006trades\030\001 \003"
    "(\0132-.tinkoff.public_.invest.api.contract"
    ".v1.Trade\"\024\n\022GetMySubscriptions\"w\n\025GetCl"
    "osePricesRequest\022^\n\013instruments\030\001 \003(\0132C."
    "tinkoff.public_.invest.api.contract.v1.I"
    "nstrumentClosePriceRequestB\004\342A\001\002\"4\n\033Inst"
    "rumentClosePriceRequest\022\025\n\rinstrument_id"
    "\030\001 \001(\t\"t\n\026GetClosePricesResponse\022Z\n\014clos"
    "e_prices\030\001 \003(\0132D.tinkoff.public_.invest."
    "api.contract.v1.InstrumentClosePriceResp"
    "onse\"\202\002\n\034InstrumentClosePriceResponse\022\014\n"
    "\004figi\030\001 \001(\t\022\026\n\016instrument_uid\030\002 \001(\t\022@\n\005p"
    "rice\030\013 \001(\01321.tinkoff.public_.invest.api."
    "contract.v1.Quotation\022P\n\025evening_session"
    "_price\030\014 \001(\01321.tinkoff.public_.invest.ap"
    "i.contract.v1.Quotation\022(\n\004time\030\025 \001(\0132\032."
    "google.protobuf.Timestamp\"\372\014\n\026GetTechAna"
    "lysisRequest\022j\n\016indicator_type\030\001 \001(\0162L.t"
    "inkoff.public_.invest.api.contract.v1.Ge"
    "tTechAnalysisRequest.IndicatorTypeB\004\342A\001\002"
    "\022\034\n\016instrument_uid\030\002 \001(\tB\004\342A\001\002\022.\n\004from\030\003"
    " \001(\0132\032.google.protobuf.TimestampB\004\342A\001\002\022,"
    "\n\002to\030\004 \001(\0132\032.google.protobuf.TimestampB\004"
    "\342A\001\002\022h\n\010interval\030\005 \001(\0162P.tinkoff.public_"
    ".invest.api.contract.v1.GetTechAnalysisR"
    "equest.IndicatorIntervalB\004\342A\001\002\022g\n\rtype_o"
    "f_price\030\006 \001(\0162J.tinkoff.public_.invest.a"
    "pi.contract.v1.GetTechAnalysisRequest.Ty"
    "peOfPriceB\004\342A\001\002\022\016\n\006length\030\007 \001(\005\022[\n\tdevia"
    "tion\030\010 \001(\0132H.tinkoff.public_.invest.api."
    "contract.v1.GetTechAnalysisRequest.Devia"
    "tion\022[\n\tsmoothing\030\t \001(\0132H.tinkoff.public"
    "_.invest.api.contract.v1.GetTechAnalysis"
    "Request.Smoothing\032O\n\tSmoothing\022\023\n\013fast_l"
    "ength\030\001 \001(\005\022\023\n\013slow_length\030\002 \001(\005\022\030\n\020sign"
    "al_smoothing\030\003 \001(\005\032\\\n\tDeviation\022O\n\024devia"
    "tion_multiplier\030\001 \001(\01321.tinkoff.public_."
    "invest.api.contract.v1.Quotation\"\333\003\n\021Ind"
    "icatorInterval\022\"\n\036INDICATOR_INTERVAL_UNS"
    "PECIFIED\020\000\022!\n\035INDICATOR_INTERVAL_ONE_MIN"
    "UTE\020\001\022#\n\037INDICATOR_INTERVAL_FIVE_MINUTES"
    "\020\002\022&\n\"INDICATOR_INTERVAL_FIFTEEN_MINUTES"
    "\020\003\022\037\n\033INDICATOR_INTERVAL_ONE_HOUR\020\004\022\036\n\032I"
    "NDICATOR_INTERVAL_ONE_DAY\020\005\022\034\n\030INDICATOR"
    "_INTERVAL_2_MIN\020\006\022\034\n\030INDICATOR_INTERVAL_"
    "3_MIN\020\007\022\035\n\031INDICATOR_INTERVAL_10_MIN\020\010\022\035"
    "\n\031INDICATOR_INTERVAL_30_MIN\020\t\022\035\n\031INDICAT"
    "OR_INTERVAL_2_HOUR\020\n\022\035\n\031INDICATOR_INTERV"
    "AL_4_HOUR\020\013\022\033\n\027INDICATOR_INTERVAL_WEEK\020\014"
    "\022\034\n\030INDICATOR_INTERVAL_MONTH\020\r\"\243\001\n\013TypeO"
    "fPrice\022\035\n\031TYPE_OF_PRICE_UNSPECIFIED\020\000\022\027\n"
    "\023TYPE_OF_PRICE_CLOSE\020\001\022\026\n\022TYPE_OF_PRICE_"
    "OPEN\020\002\022\026\n\022TYPE_OF_PRICE_HIGH\020\003\022\025\n\021TYPE_O"
    "F_PRICE_LOW\020\004\022\025\n\021TYPE_OF_PRICE_AVG\020\005\"\247\001\n"
    "\rIndicatorType\022\036\n\032INDICATOR_TYPE_UNSPECI"
    "FIED\020\000\022\025\n\021INDICATOR_TYPE_BB\020\001\022\026\n\022INDICAT"
    "OR_TYPE_EMA\020\002\022\026\n\022INDICATOR_TYPE_RSI\020\003\022\027\n"
    "\023INDICATOR_TYPE_MACD\020\004\022\026\n\022INDICATOR_TYPE"
    "_SMA\020\005\"\202\005\n\027GetTechAnalysisResponse\022n\n\024te"
    "chnical_indicators\030\001 \003(\0132P.tinkoff.publi"
    "c_.invest.api.contract.v1.GetTechAnalysi"
    "sResponse.TechAnalysisItem\032\366\003\n\020TechAnaly"
    "sisItem\022-\n\ttimestamp\030\001 \001(\0132\032.google.prot"
    "obuf.Timestamp\022K\n\013middle_band\030\002 \001(\01321.ti"
    "nkoff.public_.invest.api.contract.v1.Quo"
    "tationH\000\210\001\001\022J\n\nupper_band\030\003 \001(\01321.tinkof"
    "f.public_.invest.api.contract.v1.Quotati"
    "onH\001\210\001\001\022J\n\nlower_band\030\004 \001(\01321.tinkoff.pu"
    "blic_.invest.api.contract.v1.QuotationH\002"
    "\210\001\001\022F\n\006signal\030\005 \001(\01321.tinkoff.public_.in"
    "vest.api.contract.v1.QuotationH\003\210\001\001\022D\n\004m"
    "acd\030\006 \001(\01321.tinkoff.public_.invest.api.c"
    "ontract.v1.QuotationH\004\210\001\001B\016\n\014_middle_ban"
    "dB\r\n\013_upper_bandB\r\n\013_lower_bandB\t\n\007_sign"
    "alB\007\n\005_macd*\201\001\n\022SubscriptionAction\022#\n\037SU"
    "BSCRIPTION_ACTION_UNSPECIFIED\020\000\022!\n\035SUBSC"
    "RIPTION_ACTION_SUBSCRIBE\020\001\022#\n\037SUBSCRIPTI"
    "ON_ACTION_UNSUBSCRIBE\020\002*\210\004\n\024Subscription"
    "Interval\022%\n!SUBSCRIPTION_INTERVAL_UNSPEC"
    "IFIED\020\000\022$\n SUBSCRIPTION_INTERVAL_ONE_MIN"
    "UTE\020\001\022&\n\"SUBSCRIPTION_INTERVAL_FIVE_MINU"
    "TES\020\002\022)\n%SUBSCRIPTION_INTERVAL_FIFTEEN_M"
    "INUTES\020\003\022\"\n\036SUBSCRIPTION_INTERVAL_ONE_HO"
    "UR\020\004\022!\n\035SUBSCRIPTION_INTERVAL_ONE_DAY\020\005\022"
    "\037\n\033SUBSCRIPTION_INTERVAL_2_MIN\020\006\022\037\n\033SUBS"
    "CRIPTION_INTERVAL_3_MIN\020\007\022 \n\034SUBSCRIPTIO"
    "N_INTERVAL_10_MIN\020\010\022 \n\034SUBSCRIPTION_INTE"
    "RVAL_30_MIN\020\t\022 \n\034SUBSCRIPTION_INTERVAL_2"
    "_HOUR\020\n\022 \n\034SUBSCRIPTION_INTERVAL_4_HOUR\020"
    "\013\022\036\n\032SUBSCRIPTION_INTERVAL_WEEK\020\014\022\037\n\033SUB"
    "SCRIPTION_INTERVAL_MONTH\020\r*\305\003\n\022Subscript"
    "ionStatus\022#\n\037SUBSCRIPTION_STATUS_UNSPECI"
    "FIED\020\000\022\037\n\033SUBSCRIPTION_STATUS_SUCCESS\020\001\022"
    ",\n(SUBSCRIPTION_STATUS_INSTRUMENT_NOT_FO"
    "UND\020\002\0226\n2SUBSCRIPTION_STATUS_SUBSCRIPTIO"
    "N_ACTION_IS_INVALID\020\003\022(\n$SUBSCRIPTION_ST"
    "ATUS_DEPTH_IS_INVALID\020\004\022+\n\'SUBSCRIPTION_"
    "STATUS_INTERVAL_IS_INVALID\020\005\022)\n%SUBSCRIP"
    "TION_STATUS_LIMIT_IS_EXCEEDED\020\006\022&\n\"SUBSC"
    "RIPTION_STATUS_INTERNAL_ERROR\020\007\022)\n%SUBSC"
    "RIPTION_STATUS_TOO_MANY_REQUESTS\020\010\022.\n*SU"
    "BSCRIPTION_STATUS_SUBSCRIPTION_NOT_FOUND"
    "\020\t*d\n\016TradeDirection\022\037\n\033TRADE_DIRECTION_"
    "UNSPECIFIED\020\000\022\027\n\023TRADE_DIRECTION_BUY\020\001\022\030"
    "\n\024TRADE_DIRECTION_SELL\020\002*\221\003\n\016CandleInter"
    "val\022\037\n\033CANDLE_INTERVAL_UNSPECIFIED\020\000\022\031\n\025"
    "CANDLE_INTERVAL_1_MIN\020\001\022\031\n\025CANDLE_INTERV"
    "AL_5_MIN\020\002\022\032\n\026CANDLE_INTERVAL_15_MIN\020\003\022\030"
    "\n\024CANDLE_INTERVAL_HOUR\020\004\022\027\n\023CANDLE_INTER"
    "VAL_DAY\020\005\022\031\n\025CANDLE_INTERVAL_2_MIN\020\006\022\031\n\025"
    "CANDLE_INTERVAL_3_MIN\020\007\022\032\n\026CANDLE_INTERV"
    "AL_10_MIN\020\010\022\032\n\026CANDLE_INTERVAL_30_MIN\020\t\022"
    "\032\n\026CANDLE_INTERVAL_2_HOUR\020\n\022\032\n\026CANDLE_IN"
    "TERVAL_4_HOUR\020\013\022\030\n\024CANDLE_INTERVAL_WEEK\020"
    "\014\022\031\n\025CANDLE_INTERVAL_MONTH\020\r*k\n\014CandleSo"
    "urce\022\035\n\031CANDLE_SOURCE_UNSPECIFIED\020\000\022\032\n\026C"
    "ANDLE_SOURCE_EXCHANGE\020\001\022 \n\034CANDLE_SOURCE"
    "_DEALER_WEEKEND\020\002*g\n\rOrderBookType\022\036\n\032OR"
    "DERBOOK_TYPE_UNSPECIFIED\020\000\022\033\n\027ORDERBOOK_"
    "TYPE_EXCHANGE\020\001\022\031\n\025ORDERBOOK_TYPE_DEALER"
    "\020\0022\240\t\n\021MarketDataService\022\203\001\n\nGetCandles\022"
    "9.tinkoff.public_.invest.api.contract.v1"
    ".GetCandlesRequest\032:.tinkoff.public_.inv"
    "est.api.contract.v1.GetCandlesResponse\022\214"
    "\001\n\rGetLastPrices\022<.tinkoff.public_.inves"
    "t.api.contract.v1.GetLastPricesRequest\032="
    ".tinkoff.public_.invest.api.contract.v1."
    "GetLastPricesResponse\022\211\001\n\014GetOrderBook\022;"
    ".tinkoff.public_.invest.api.contract.v1."
    "GetOrderBookRequest\032<.tinkoff.public_.in"
    "vest.api.contract.v1.GetOrderBookRespons"
    "e\022\225\001\n\020GetTradingStatus\022\?.tinkoff.public_"
    ".invest.api.contract.v1.GetTradingStatus"
    "Request\032@.tinkoff.public_.invest.api.con"
    "tract.v1.GetTradingStatusResponse\022\233\001\n\022Ge"
    "tTradingStatuses\022A.tinkoff.public_.inves"
    "t.api.contract.v1.GetTradingStatusesRequ"
    "est\032B.tinkoff.public_.invest.api.contrac"
    "t.v1.GetTradingStatusesResponse\022\214\001\n\rGetL"
    "astTrades\022<.tinkoff.public_.invest.api.c"
    "ontract.v1.GetLastTradesRequest\032=.tinkof"
    "f.public_.invest.api.contract.v1.GetLast"
    "TradesResponse\022\217\001\n\016GetClosePrices\022=.tink"
    "off.public_.invest.api.contract.v1.GetCl"
    "osePricesRequest\032>.tinkoff.public_.inves"
    "t.api.contract.v1.GetClosePricesResponse"
    "\022\222\001\n\017GetTechAnalysis\022>.tinkoff.public_.i"
    "nvest.api.contract.v1.GetTechAnalysisReq"
    "uest\032\?.tinkoff.public_.invest.api.contra"
    "ct.v1.GetTechAnalysisResponse2\321\002\n\027Market"
    "DataStreamService\022\215\001\n\020MarketDataStream\0229"
    ".tinkoff.public_.invest.api.contract.v1."
    "MarketDataRequest\032:.tinkoff.public_.inve"
    "st.api.contract.v1.MarketDataResponse(\0010"
    "\001\022\245\001\n\032MarketDataServerSideStream\022I.tinko"
    "ff.public_.invest.api.contract.v1.Market"
    "DataServerSideStreamRequest\032:.tinkoff.pu"
    "blic_.invest.api.contract.v1.MarketDataR"
    "esponse0\001Ba\n\034ru.tinkoff.piapi.contract.v"
    "1P\001Z\014./;investapi\242\002\005TIAPI\252\002\024Tinkoff.Inve"
    "stApi.V1\312\002\021Tinkoff\\Invest\\V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_marketdata_2eproto_deps[3] =
    {
        &::descriptor_table_common_2eproto,
        &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_marketdata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_marketdata_2eproto = {
    false,
    false,
    16556,
    descriptor_table_protodef_marketdata_2eproto,
    "marketdata.proto",
    &descriptor_table_marketdata_2eproto_once,
    descriptor_table_marketdata_2eproto_deps,
    3,
    52,
    schemas,
    file_default_instances,
    TableStruct_marketdata_2eproto::offsets,
    file_level_metadata_marketdata_2eproto,
    file_level_enum_descriptors_marketdata_2eproto,
    file_level_service_descriptors_marketdata_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_marketdata_2eproto_getter() {
  return &descriptor_table_marketdata_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_marketdata_2eproto(&descriptor_table_marketdata_2eproto);
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
const ::google::protobuf::EnumDescriptor* GetCandlesRequest_CandleSource_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_marketdata_2eproto);
  return file_level_enum_descriptors_marketdata_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t GetCandlesRequest_CandleSource_internal_data_[] = {
    131072u, 0u, };
bool GetCandlesRequest_CandleSource_IsValid(int value) {
  return 0 <= value && value <= 1;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr GetCandlesRequest_CandleSource GetCandlesRequest::CANDLE_SOURCE_UNSPECIFIED;
constexpr GetCandlesRequest_CandleSource GetCandlesRequest::CANDLE_SOURCE_EXCHANGE;
constexpr GetCandlesRequest_CandleSource GetCandlesRequest::CandleSource_MIN;
constexpr GetCandlesRequest_CandleSource GetCandlesRequest::CandleSource_MAX;
constexpr int GetCandlesRequest::CandleSource_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* GetTechAnalysisRequest_IndicatorInterval_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_marketdata_2eproto);
  return file_level_enum_descriptors_marketdata_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t GetTechAnalysisRequest_IndicatorInterval_internal_data_[] = {
    917504u, 0u, };
bool GetTechAnalysisRequest_IndicatorInterval_IsValid(int value) {
  return 0 <= value && value <= 13;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_UNSPECIFIED;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_ONE_MINUTE;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_FIVE_MINUTES;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_FIFTEEN_MINUTES;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_ONE_HOUR;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_ONE_DAY;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_2_MIN;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_3_MIN;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_10_MIN;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_30_MIN;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_2_HOUR;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_4_HOUR;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_WEEK;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::INDICATOR_INTERVAL_MONTH;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::IndicatorInterval_MIN;
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::IndicatorInterval_MAX;
constexpr int GetTechAnalysisRequest::IndicatorInterval_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* GetTechAnalysisRequest_TypeOfPrice_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_marketdata_2eproto);
  return file_level_enum_descriptors_marketdata_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t GetTechAnalysisRequest_TypeOfPrice_internal_data_[] = {
    393216u, 0u, };
bool GetTechAnalysisRequest_TypeOfPrice_IsValid(int value) {
  return 0 <= value && value <= 5;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr GetTechAnalysisRequest_TypeOfPrice GetTechAnalysisRequest::TYPE_OF_PRICE_UNSPECIFIED;
constexpr GetTechAnalysisRequest_TypeOfPrice GetTechAnalysisRequest::TYPE_OF_PRICE_CLOSE;
constexpr GetTechAnalysisRequest_TypeOfPrice GetTechAnalysisRequest::TYPE_OF_PRICE_OPEN;
constexpr GetTechAnalysisRequest_TypeOfPrice GetTechAnalysisRequest::TYPE_OF_PRICE_HIGH;
constexpr GetTechAnalysisRequest_TypeOfPrice GetTechAnalysisRequest::TYPE_OF_PRICE_LOW;
constexpr GetTechAnalysisRequest_TypeOfPrice GetTechAnalysisRequest::TYPE_OF_PRICE_AVG;
constexpr GetTechAnalysisRequest_TypeOfPrice GetTechAnalysisRequest::TypeOfPrice_MIN;
constexpr GetTechAnalysisRequest_TypeOfPrice GetTechAnalysisRequest::TypeOfPrice_MAX;
constexpr int GetTechAnalysisRequest::TypeOfPrice_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* GetTechAnalysisRequest_IndicatorType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_marketdata_2eproto);
  return file_level_enum_descriptors_marketdata_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t GetTechAnalysisRequest_IndicatorType_internal_data_[] = {
    393216u, 0u, };
bool GetTechAnalysisRequest_IndicatorType_IsValid(int value) {
  return 0 <= value && value <= 5;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr GetTechAnalysisRequest_IndicatorType GetTechAnalysisRequest::INDICATOR_TYPE_UNSPECIFIED;
constexpr GetTechAnalysisRequest_IndicatorType GetTechAnalysisRequest::INDICATOR_TYPE_BB;
constexpr GetTechAnalysisRequest_IndicatorType GetTechAnalysisRequest::INDICATOR_TYPE_EMA;
constexpr GetTechAnalysisRequest_IndicatorType GetTechAnalysisRequest::INDICATOR_TYPE_RSI;
constexpr GetTechAnalysisRequest_IndicatorType GetTechAnalysisRequest::INDICATOR_TYPE_MACD;
constexpr GetTechAnalysisRequest_IndicatorType GetTechAnalysisRequest::INDICATOR_TYPE_SMA;
constexpr GetTechAnalysisRequest_IndicatorType GetTechAnalysisRequest::IndicatorType_MIN;
constexpr GetTechAnalysisRequest_IndicatorType GetTechAnalysisRequest::IndicatorType_MAX;
constexpr int GetTechAnalysisRequest::IndicatorType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* SubscriptionAction_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_marketdata_2eproto);
  return file_level_enum_descriptors_marketdata_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t SubscriptionAction_internal_data_[] = {
    196608u, 0u, };
bool SubscriptionAction_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* SubscriptionInterval_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_marketdata_2eproto);
  return file_level_enum_descriptors_marketdata_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t SubscriptionInterval_internal_data_[] = {
    917504u, 0u, };
bool SubscriptionInterval_IsValid(int value) {
  return 0 <= value && value <= 13;
}
const ::google::protobuf::EnumDescriptor* SubscriptionStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_marketdata_2eproto);
  return file_level_enum_descriptors_marketdata_2eproto[6];
}
PROTOBUF_CONSTINIT const uint32_t SubscriptionStatus_internal_data_[] = {
    655360u, 0u, };
bool SubscriptionStatus_IsValid(int value) {
  return 0 <= value && value <= 9;
}
const ::google::protobuf::EnumDescriptor* TradeDirection_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_marketdata_2eproto);
  return file_level_enum_descriptors_marketdata_2eproto[7];
}
PROTOBUF_CONSTINIT const uint32_t TradeDirection_internal_data_[] = {
    196608u, 0u, };
bool TradeDirection_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* CandleInterval_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_marketdata_2eproto);
  return file_level_enum_descriptors_marketdata_2eproto[8];
}
PROTOBUF_CONSTINIT const uint32_t CandleInterval_internal_data_[] = {
    917504u, 0u, };
bool CandleInterval_IsValid(int value) {
  return 0 <= value && value <= 13;
}
const ::google::protobuf::EnumDescriptor* CandleSource_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_marketdata_2eproto);
  return file_level_enum_descriptors_marketdata_2eproto[9];
}
PROTOBUF_CONSTINIT const uint32_t CandleSource_internal_data_[] = {
    196608u, 0u, };
bool CandleSource_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* OrderBookType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_marketdata_2eproto);
  return file_level_enum_descriptors_marketdata_2eproto[10];
}
PROTOBUF_CONSTINIT const uint32_t OrderBookType_internal_data_[] = {
    196608u, 0u, };
bool OrderBookType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
// ===================================================================

class MarketDataRequest::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, _impl_._oneof_case_);
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest& subscribe_candles_request(const MarketDataRequest* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest& subscribe_order_book_request(const MarketDataRequest* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest& subscribe_trades_request(const MarketDataRequest* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest& subscribe_info_request(const MarketDataRequest* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest& subscribe_last_price_request(const MarketDataRequest* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::GetMySubscriptions& get_my_subscriptions(const MarketDataRequest* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest& MarketDataRequest::_Internal::subscribe_candles_request(const MarketDataRequest* msg) {
  return *msg->_impl_.payload_.subscribe_candles_request_;
}
const ::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest& MarketDataRequest::_Internal::subscribe_order_book_request(const MarketDataRequest* msg) {
  return *msg->_impl_.payload_.subscribe_order_book_request_;
}
const ::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest& MarketDataRequest::_Internal::subscribe_trades_request(const MarketDataRequest* msg) {
  return *msg->_impl_.payload_.subscribe_trades_request_;
}
const ::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest& MarketDataRequest::_Internal::subscribe_info_request(const MarketDataRequest* msg) {
  return *msg->_impl_.payload_.subscribe_info_request_;
}
const ::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest& MarketDataRequest::_Internal::subscribe_last_price_request(const MarketDataRequest* msg) {
  return *msg->_impl_.payload_.subscribe_last_price_request_;
}
const ::tinkoff::public_::invest::api::contract::v1::GetMySubscriptions& MarketDataRequest::_Internal::get_my_subscriptions(const MarketDataRequest* msg) {
  return *msg->_impl_.payload_.get_my_subscriptions_;
}
void MarketDataRequest::set_allocated_subscribe_candles_request(::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest* subscribe_candles_request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (subscribe_candles_request) {
    ::google::protobuf::Arena* submessage_arena = subscribe_candles_request->GetArena();
    if (message_arena != submessage_arena) {
      subscribe_candles_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, subscribe_candles_request, submessage_arena);
    }
    set_has_subscribe_candles_request();
    _impl_.payload_.subscribe_candles_request_ = subscribe_candles_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataRequest.subscribe_candles_request)
}
void MarketDataRequest::set_allocated_subscribe_order_book_request(::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest* subscribe_order_book_request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (subscribe_order_book_request) {
    ::google::protobuf::Arena* submessage_arena = subscribe_order_book_request->GetArena();
    if (message_arena != submessage_arena) {
      subscribe_order_book_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, subscribe_order_book_request, submessage_arena);
    }
    set_has_subscribe_order_book_request();
    _impl_.payload_.subscribe_order_book_request_ = subscribe_order_book_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataRequest.subscribe_order_book_request)
}
void MarketDataRequest::set_allocated_subscribe_trades_request(::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest* subscribe_trades_request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (subscribe_trades_request) {
    ::google::protobuf::Arena* submessage_arena = subscribe_trades_request->GetArena();
    if (message_arena != submessage_arena) {
      subscribe_trades_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, subscribe_trades_request, submessage_arena);
    }
    set_has_subscribe_trades_request();
    _impl_.payload_.subscribe_trades_request_ = subscribe_trades_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataRequest.subscribe_trades_request)
}
void MarketDataRequest::set_allocated_subscribe_info_request(::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest* subscribe_info_request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (subscribe_info_request) {
    ::google::protobuf::Arena* submessage_arena = subscribe_info_request->GetArena();
    if (message_arena != submessage_arena) {
      subscribe_info_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, subscribe_info_request, submessage_arena);
    }
    set_has_subscribe_info_request();
    _impl_.payload_.subscribe_info_request_ = subscribe_info_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataRequest.subscribe_info_request)
}
void MarketDataRequest::set_allocated_subscribe_last_price_request(::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest* subscribe_last_price_request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (subscribe_last_price_request) {
    ::google::protobuf::Arena* submessage_arena = subscribe_last_price_request->GetArena();
    if (message_arena != submessage_arena) {
      subscribe_last_price_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, subscribe_last_price_request, submessage_arena);
    }
    set_has_subscribe_last_price_request();
    _impl_.payload_.subscribe_last_price_request_ = subscribe_last_price_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataRequest.subscribe_last_price_request)
}
void MarketDataRequest::set_allocated_get_my_subscriptions(::tinkoff::public_::invest::api::contract::v1::GetMySubscriptions* get_my_subscriptions) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (get_my_subscriptions) {
    ::google::protobuf::Arena* submessage_arena = get_my_subscriptions->GetArena();
    if (message_arena != submessage_arena) {
      get_my_subscriptions = ::google::protobuf::internal::GetOwnedMessage(message_arena, get_my_subscriptions, submessage_arena);
    }
    set_has_get_my_subscriptions();
    _impl_.payload_.get_my_subscriptions_ = get_my_subscriptions;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataRequest.get_my_subscriptions)
}
MarketDataRequest::MarketDataRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.MarketDataRequest)
}
inline PROTOBUF_NDEBUG_INLINE MarketDataRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : payload_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

MarketDataRequest::MarketDataRequest(
    ::google::protobuf::Arena* arena,
    const MarketDataRequest& from)
    : ::google::protobuf::Message(arena) {
  MarketDataRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (payload_case()) {
    case PAYLOAD_NOT_SET:
      break;
      case kSubscribeCandlesRequest:
        _impl_.payload_.subscribe_candles_request_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest>(arena, *from._impl_.payload_.subscribe_candles_request_);
        break;
      case kSubscribeOrderBookRequest:
        _impl_.payload_.subscribe_order_book_request_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest>(arena, *from._impl_.payload_.subscribe_order_book_request_);
        break;
      case kSubscribeTradesRequest:
        _impl_.payload_.subscribe_trades_request_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest>(arena, *from._impl_.payload_.subscribe_trades_request_);
        break;
      case kSubscribeInfoRequest:
        _impl_.payload_.subscribe_info_request_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest>(arena, *from._impl_.payload_.subscribe_info_request_);
        break;
      case kSubscribeLastPriceRequest:
        _impl_.payload_.subscribe_last_price_request_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest>(arena, *from._impl_.payload_.subscribe_last_price_request_);
        break;
      case kGetMySubscriptions:
        _impl_.payload_.get_my_subscriptions_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetMySubscriptions>(arena, *from._impl_.payload_.get_my_subscriptions_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.MarketDataRequest)
}
inline PROTOBUF_NDEBUG_INLINE MarketDataRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : payload_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void MarketDataRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
MarketDataRequest::~MarketDataRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.MarketDataRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MarketDataRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
  _impl_.~Impl_();
}

void MarketDataRequest::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:tinkoff.public_.invest.api.contract.v1.MarketDataRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (payload_case()) {
    case kSubscribeCandlesRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.subscribe_candles_request_;
      }
      break;
    }
    case kSubscribeOrderBookRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.subscribe_order_book_request_;
      }
      break;
    }
    case kSubscribeTradesRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.subscribe_trades_request_;
      }
      break;
    }
    case kSubscribeInfoRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.subscribe_info_request_;
      }
      break;
    }
    case kSubscribeLastPriceRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.subscribe_last_price_request_;
      }
      break;
    }
    case kGetMySubscriptions: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.get_my_subscriptions_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


PROTOBUF_NOINLINE void MarketDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.MarketDataRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MarketDataRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 6, 6, 0, 2> MarketDataRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MarketDataRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest subscribe_candles_request = 1;
    {PROTOBUF_FIELD_OFFSET(MarketDataRequest, _impl_.payload_.subscribe_candles_request_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest subscribe_order_book_request = 2;
    {PROTOBUF_FIELD_OFFSET(MarketDataRequest, _impl_.payload_.subscribe_order_book_request_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest subscribe_trades_request = 3;
    {PROTOBUF_FIELD_OFFSET(MarketDataRequest, _impl_.payload_.subscribe_trades_request_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest subscribe_info_request = 4;
    {PROTOBUF_FIELD_OFFSET(MarketDataRequest, _impl_.payload_.subscribe_info_request_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest subscribe_last_price_request = 5;
    {PROTOBUF_FIELD_OFFSET(MarketDataRequest, _impl_.payload_.subscribe_last_price_request_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.GetMySubscriptions get_my_subscriptions = 6;
    {PROTOBUF_FIELD_OFFSET(MarketDataRequest, _impl_.payload_.get_my_subscriptions_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvDefault)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest>()},
    {::_pbi::FieldAuxDefaultMessage{}, &::tinkoff::public_::invest::api::contract::v1::_GetMySubscriptions_default_instance_},
  }}, {{
  }},
};

::uint8_t* MarketDataRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.MarketDataRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (payload_case()) {
    case kSubscribeCandlesRequest: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, _Internal::subscribe_candles_request(this),
          _Internal::subscribe_candles_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kSubscribeOrderBookRequest: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, _Internal::subscribe_order_book_request(this),
          _Internal::subscribe_order_book_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kSubscribeTradesRequest: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, _Internal::subscribe_trades_request(this),
          _Internal::subscribe_trades_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kSubscribeInfoRequest: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, _Internal::subscribe_info_request(this),
          _Internal::subscribe_info_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kSubscribeLastPriceRequest: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, _Internal::subscribe_last_price_request(this),
          _Internal::subscribe_last_price_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kGetMySubscriptions: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, _Internal::get_my_subscriptions(this),
          _Internal::get_my_subscriptions(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.MarketDataRequest)
  return target;
}

::size_t MarketDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.MarketDataRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest subscribe_candles_request = 1;
    case kSubscribeCandlesRequest: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.subscribe_candles_request_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest subscribe_order_book_request = 2;
    case kSubscribeOrderBookRequest: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.subscribe_order_book_request_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest subscribe_trades_request = 3;
    case kSubscribeTradesRequest: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.subscribe_trades_request_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest subscribe_info_request = 4;
    case kSubscribeInfoRequest: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.subscribe_info_request_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest subscribe_last_price_request = 5;
    case kSubscribeLastPriceRequest: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.subscribe_last_price_request_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.GetMySubscriptions get_my_subscriptions = 6;
    case kGetMySubscriptions: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.get_my_subscriptions_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MarketDataRequest::_class_data_ = {
    MarketDataRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MarketDataRequest::GetClassData() const {
  return &_class_data_;
}

void MarketDataRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MarketDataRequest*>(&to_msg);
  auto& from = static_cast<const MarketDataRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.MarketDataRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kSubscribeCandlesRequest: {
      _this->_internal_mutable_subscribe_candles_request()->::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest::MergeFrom(
          from._internal_subscribe_candles_request());
      break;
    }
    case kSubscribeOrderBookRequest: {
      _this->_internal_mutable_subscribe_order_book_request()->::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest::MergeFrom(
          from._internal_subscribe_order_book_request());
      break;
    }
    case kSubscribeTradesRequest: {
      _this->_internal_mutable_subscribe_trades_request()->::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest::MergeFrom(
          from._internal_subscribe_trades_request());
      break;
    }
    case kSubscribeInfoRequest: {
      _this->_internal_mutable_subscribe_info_request()->::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest::MergeFrom(
          from._internal_subscribe_info_request());
      break;
    }
    case kSubscribeLastPriceRequest: {
      _this->_internal_mutable_subscribe_last_price_request()->::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest::MergeFrom(
          from._internal_subscribe_last_price_request());
      break;
    }
    case kGetMySubscriptions: {
      _this->_internal_mutable_get_my_subscriptions()->::tinkoff::public_::invest::api::contract::v1::GetMySubscriptions::MergeFrom(
          from._internal_get_my_subscriptions());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDataRequest::CopyFrom(const MarketDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.MarketDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MarketDataRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MarketDataRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MarketDataRequest::InternalSwap(MarketDataRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata MarketDataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[0]);
}
// ===================================================================

class MarketDataServerSideStreamRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MarketDataServerSideStreamRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MarketDataServerSideStreamRequest, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest& subscribe_candles_request(const MarketDataServerSideStreamRequest* msg);
  static void set_has_subscribe_candles_request(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest& subscribe_order_book_request(const MarketDataServerSideStreamRequest* msg);
  static void set_has_subscribe_order_book_request(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest& subscribe_trades_request(const MarketDataServerSideStreamRequest* msg);
  static void set_has_subscribe_trades_request(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest& subscribe_info_request(const MarketDataServerSideStreamRequest* msg);
  static void set_has_subscribe_info_request(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest& subscribe_last_price_request(const MarketDataServerSideStreamRequest* msg);
  static void set_has_subscribe_last_price_request(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest& MarketDataServerSideStreamRequest::_Internal::subscribe_candles_request(const MarketDataServerSideStreamRequest* msg) {
  return *msg->_impl_.subscribe_candles_request_;
}
const ::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest& MarketDataServerSideStreamRequest::_Internal::subscribe_order_book_request(const MarketDataServerSideStreamRequest* msg) {
  return *msg->_impl_.subscribe_order_book_request_;
}
const ::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest& MarketDataServerSideStreamRequest::_Internal::subscribe_trades_request(const MarketDataServerSideStreamRequest* msg) {
  return *msg->_impl_.subscribe_trades_request_;
}
const ::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest& MarketDataServerSideStreamRequest::_Internal::subscribe_info_request(const MarketDataServerSideStreamRequest* msg) {
  return *msg->_impl_.subscribe_info_request_;
}
const ::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest& MarketDataServerSideStreamRequest::_Internal::subscribe_last_price_request(const MarketDataServerSideStreamRequest* msg) {
  return *msg->_impl_.subscribe_last_price_request_;
}
MarketDataServerSideStreamRequest::MarketDataServerSideStreamRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.MarketDataServerSideStreamRequest)
}
inline PROTOBUF_NDEBUG_INLINE MarketDataServerSideStreamRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

MarketDataServerSideStreamRequest::MarketDataServerSideStreamRequest(
    ::google::protobuf::Arena* arena,
    const MarketDataServerSideStreamRequest& from)
    : ::google::protobuf::Message(arena) {
  MarketDataServerSideStreamRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.subscribe_candles_request_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest>(arena, *from._impl_.subscribe_candles_request_)
                : nullptr;
  _impl_.subscribe_order_book_request_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest>(arena, *from._impl_.subscribe_order_book_request_)
                : nullptr;
  _impl_.subscribe_trades_request_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest>(arena, *from._impl_.subscribe_trades_request_)
                : nullptr;
  _impl_.subscribe_info_request_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest>(arena, *from._impl_.subscribe_info_request_)
                : nullptr;
  _impl_.subscribe_last_price_request_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest>(arena, *from._impl_.subscribe_last_price_request_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.MarketDataServerSideStreamRequest)
}
inline PROTOBUF_NDEBUG_INLINE MarketDataServerSideStreamRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MarketDataServerSideStreamRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, subscribe_candles_request_),
           0,
           offsetof(Impl_, subscribe_last_price_request_) -
               offsetof(Impl_, subscribe_candles_request_) +
               sizeof(Impl_::subscribe_last_price_request_));
}
MarketDataServerSideStreamRequest::~MarketDataServerSideStreamRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.MarketDataServerSideStreamRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MarketDataServerSideStreamRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.subscribe_candles_request_;
  delete _impl_.subscribe_order_book_request_;
  delete _impl_.subscribe_trades_request_;
  delete _impl_.subscribe_info_request_;
  delete _impl_.subscribe_last_price_request_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MarketDataServerSideStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.MarketDataServerSideStreamRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.subscribe_candles_request_ != nullptr);
      _impl_.subscribe_candles_request_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.subscribe_order_book_request_ != nullptr);
      _impl_.subscribe_order_book_request_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.subscribe_trades_request_ != nullptr);
      _impl_.subscribe_trades_request_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.subscribe_info_request_ != nullptr);
      _impl_.subscribe_info_request_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.subscribe_last_price_request_ != nullptr);
      _impl_.subscribe_last_price_request_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MarketDataServerSideStreamRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 5, 0, 2> MarketDataServerSideStreamRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MarketDataServerSideStreamRequest, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MarketDataServerSideStreamRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest subscribe_candles_request = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MarketDataServerSideStreamRequest, _impl_.subscribe_candles_request_)}},
    // .tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest subscribe_order_book_request = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(MarketDataServerSideStreamRequest, _impl_.subscribe_order_book_request_)}},
    // .tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest subscribe_trades_request = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(MarketDataServerSideStreamRequest, _impl_.subscribe_trades_request_)}},
    // .tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest subscribe_info_request = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(MarketDataServerSideStreamRequest, _impl_.subscribe_info_request_)}},
    // .tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest subscribe_last_price_request = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(MarketDataServerSideStreamRequest, _impl_.subscribe_last_price_request_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest subscribe_candles_request = 1;
    {PROTOBUF_FIELD_OFFSET(MarketDataServerSideStreamRequest, _impl_.subscribe_candles_request_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest subscribe_order_book_request = 2;
    {PROTOBUF_FIELD_OFFSET(MarketDataServerSideStreamRequest, _impl_.subscribe_order_book_request_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest subscribe_trades_request = 3;
    {PROTOBUF_FIELD_OFFSET(MarketDataServerSideStreamRequest, _impl_.subscribe_trades_request_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest subscribe_info_request = 4;
    {PROTOBUF_FIELD_OFFSET(MarketDataServerSideStreamRequest, _impl_.subscribe_info_request_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest subscribe_last_price_request = 5;
    {PROTOBUF_FIELD_OFFSET(MarketDataServerSideStreamRequest, _impl_.subscribe_last_price_request_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest>()},
  }}, {{
  }},
};

::uint8_t* MarketDataServerSideStreamRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.MarketDataServerSideStreamRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest subscribe_candles_request = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::subscribe_candles_request(this),
        _Internal::subscribe_candles_request(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest subscribe_order_book_request = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::subscribe_order_book_request(this),
        _Internal::subscribe_order_book_request(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest subscribe_trades_request = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::subscribe_trades_request(this),
        _Internal::subscribe_trades_request(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest subscribe_info_request = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::subscribe_info_request(this),
        _Internal::subscribe_info_request(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest subscribe_last_price_request = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::subscribe_last_price_request(this),
        _Internal::subscribe_last_price_request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.MarketDataServerSideStreamRequest)
  return target;
}

::size_t MarketDataServerSideStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.MarketDataServerSideStreamRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // .tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest subscribe_candles_request = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.subscribe_candles_request_);
    }

    // .tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest subscribe_order_book_request = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.subscribe_order_book_request_);
    }

    // .tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest subscribe_trades_request = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.subscribe_trades_request_);
    }

    // .tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest subscribe_info_request = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.subscribe_info_request_);
    }

    // .tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest subscribe_last_price_request = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.subscribe_last_price_request_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MarketDataServerSideStreamRequest::_class_data_ = {
    MarketDataServerSideStreamRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MarketDataServerSideStreamRequest::GetClassData() const {
  return &_class_data_;
}

void MarketDataServerSideStreamRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MarketDataServerSideStreamRequest*>(&to_msg);
  auto& from = static_cast<const MarketDataServerSideStreamRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.MarketDataServerSideStreamRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_subscribe_candles_request()->::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesRequest::MergeFrom(
          from._internal_subscribe_candles_request());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_subscribe_order_book_request()->::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookRequest::MergeFrom(
          from._internal_subscribe_order_book_request());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_subscribe_trades_request()->::tinkoff::public_::invest::api::contract::v1::SubscribeTradesRequest::MergeFrom(
          from._internal_subscribe_trades_request());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_subscribe_info_request()->::tinkoff::public_::invest::api::contract::v1::SubscribeInfoRequest::MergeFrom(
          from._internal_subscribe_info_request());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_subscribe_last_price_request()->::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceRequest::MergeFrom(
          from._internal_subscribe_last_price_request());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDataServerSideStreamRequest::CopyFrom(const MarketDataServerSideStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.MarketDataServerSideStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MarketDataServerSideStreamRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MarketDataServerSideStreamRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MarketDataServerSideStreamRequest::InternalSwap(MarketDataServerSideStreamRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketDataServerSideStreamRequest, _impl_.subscribe_last_price_request_)
      + sizeof(MarketDataServerSideStreamRequest::_impl_.subscribe_last_price_request_)
      - PROTOBUF_FIELD_OFFSET(MarketDataServerSideStreamRequest, _impl_.subscribe_candles_request_)>(
          reinterpret_cast<char*>(&_impl_.subscribe_candles_request_),
          reinterpret_cast<char*>(&other->_impl_.subscribe_candles_request_));
}

::google::protobuf::Metadata MarketDataServerSideStreamRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[1]);
}
// ===================================================================

class MarketDataResponse::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MarketDataResponse, _impl_._oneof_case_);
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesResponse& subscribe_candles_response(const MarketDataResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookResponse& subscribe_order_book_response(const MarketDataResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeTradesResponse& subscribe_trades_response(const MarketDataResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeInfoResponse& subscribe_info_response(const MarketDataResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Candle& candle(const MarketDataResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Trade& trade(const MarketDataResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::OrderBook& orderbook(const MarketDataResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::TradingStatus& trading_status(const MarketDataResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::Ping& ping(const MarketDataResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceResponse& subscribe_last_price_response(const MarketDataResponse* msg);
  static const ::tinkoff::public_::invest::api::contract::v1::LastPrice& last_price(const MarketDataResponse* msg);
};

const ::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesResponse& MarketDataResponse::_Internal::subscribe_candles_response(const MarketDataResponse* msg) {
  return *msg->_impl_.payload_.subscribe_candles_response_;
}
const ::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookResponse& MarketDataResponse::_Internal::subscribe_order_book_response(const MarketDataResponse* msg) {
  return *msg->_impl_.payload_.subscribe_order_book_response_;
}
const ::tinkoff::public_::invest::api::contract::v1::SubscribeTradesResponse& MarketDataResponse::_Internal::subscribe_trades_response(const MarketDataResponse* msg) {
  return *msg->_impl_.payload_.subscribe_trades_response_;
}
const ::tinkoff::public_::invest::api::contract::v1::SubscribeInfoResponse& MarketDataResponse::_Internal::subscribe_info_response(const MarketDataResponse* msg) {
  return *msg->_impl_.payload_.subscribe_info_response_;
}
const ::tinkoff::public_::invest::api::contract::v1::Candle& MarketDataResponse::_Internal::candle(const MarketDataResponse* msg) {
  return *msg->_impl_.payload_.candle_;
}
const ::tinkoff::public_::invest::api::contract::v1::Trade& MarketDataResponse::_Internal::trade(const MarketDataResponse* msg) {
  return *msg->_impl_.payload_.trade_;
}
const ::tinkoff::public_::invest::api::contract::v1::OrderBook& MarketDataResponse::_Internal::orderbook(const MarketDataResponse* msg) {
  return *msg->_impl_.payload_.orderbook_;
}
const ::tinkoff::public_::invest::api::contract::v1::TradingStatus& MarketDataResponse::_Internal::trading_status(const MarketDataResponse* msg) {
  return *msg->_impl_.payload_.trading_status_;
}
const ::tinkoff::public_::invest::api::contract::v1::Ping& MarketDataResponse::_Internal::ping(const MarketDataResponse* msg) {
  return *msg->_impl_.payload_.ping_;
}
const ::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceResponse& MarketDataResponse::_Internal::subscribe_last_price_response(const MarketDataResponse* msg) {
  return *msg->_impl_.payload_.subscribe_last_price_response_;
}
const ::tinkoff::public_::invest::api::contract::v1::LastPrice& MarketDataResponse::_Internal::last_price(const MarketDataResponse* msg) {
  return *msg->_impl_.payload_.last_price_;
}
void MarketDataResponse::set_allocated_subscribe_candles_response(::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesResponse* subscribe_candles_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (subscribe_candles_response) {
    ::google::protobuf::Arena* submessage_arena = subscribe_candles_response->GetArena();
    if (message_arena != submessage_arena) {
      subscribe_candles_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, subscribe_candles_response, submessage_arena);
    }
    set_has_subscribe_candles_response();
    _impl_.payload_.subscribe_candles_response_ = subscribe_candles_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataResponse.subscribe_candles_response)
}
void MarketDataResponse::set_allocated_subscribe_order_book_response(::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookResponse* subscribe_order_book_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (subscribe_order_book_response) {
    ::google::protobuf::Arena* submessage_arena = subscribe_order_book_response->GetArena();
    if (message_arena != submessage_arena) {
      subscribe_order_book_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, subscribe_order_book_response, submessage_arena);
    }
    set_has_subscribe_order_book_response();
    _impl_.payload_.subscribe_order_book_response_ = subscribe_order_book_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataResponse.subscribe_order_book_response)
}
void MarketDataResponse::set_allocated_subscribe_trades_response(::tinkoff::public_::invest::api::contract::v1::SubscribeTradesResponse* subscribe_trades_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (subscribe_trades_response) {
    ::google::protobuf::Arena* submessage_arena = subscribe_trades_response->GetArena();
    if (message_arena != submessage_arena) {
      subscribe_trades_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, subscribe_trades_response, submessage_arena);
    }
    set_has_subscribe_trades_response();
    _impl_.payload_.subscribe_trades_response_ = subscribe_trades_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataResponse.subscribe_trades_response)
}
void MarketDataResponse::set_allocated_subscribe_info_response(::tinkoff::public_::invest::api::contract::v1::SubscribeInfoResponse* subscribe_info_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (subscribe_info_response) {
    ::google::protobuf::Arena* submessage_arena = subscribe_info_response->GetArena();
    if (message_arena != submessage_arena) {
      subscribe_info_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, subscribe_info_response, submessage_arena);
    }
    set_has_subscribe_info_response();
    _impl_.payload_.subscribe_info_response_ = subscribe_info_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataResponse.subscribe_info_response)
}
void MarketDataResponse::set_allocated_candle(::tinkoff::public_::invest::api::contract::v1::Candle* candle) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (candle) {
    ::google::protobuf::Arena* submessage_arena = candle->GetArena();
    if (message_arena != submessage_arena) {
      candle = ::google::protobuf::internal::GetOwnedMessage(message_arena, candle, submessage_arena);
    }
    set_has_candle();
    _impl_.payload_.candle_ = candle;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataResponse.candle)
}
void MarketDataResponse::set_allocated_trade(::tinkoff::public_::invest::api::contract::v1::Trade* trade) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (trade) {
    ::google::protobuf::Arena* submessage_arena = trade->GetArena();
    if (message_arena != submessage_arena) {
      trade = ::google::protobuf::internal::GetOwnedMessage(message_arena, trade, submessage_arena);
    }
    set_has_trade();
    _impl_.payload_.trade_ = trade;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataResponse.trade)
}
void MarketDataResponse::set_allocated_orderbook(::tinkoff::public_::invest::api::contract::v1::OrderBook* orderbook) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (orderbook) {
    ::google::protobuf::Arena* submessage_arena = orderbook->GetArena();
    if (message_arena != submessage_arena) {
      orderbook = ::google::protobuf::internal::GetOwnedMessage(message_arena, orderbook, submessage_arena);
    }
    set_has_orderbook();
    _impl_.payload_.orderbook_ = orderbook;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataResponse.orderbook)
}
void MarketDataResponse::set_allocated_trading_status(::tinkoff::public_::invest::api::contract::v1::TradingStatus* trading_status) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (trading_status) {
    ::google::protobuf::Arena* submessage_arena = trading_status->GetArena();
    if (message_arena != submessage_arena) {
      trading_status = ::google::protobuf::internal::GetOwnedMessage(message_arena, trading_status, submessage_arena);
    }
    set_has_trading_status();
    _impl_.payload_.trading_status_ = trading_status;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataResponse.trading_status)
}
void MarketDataResponse::set_allocated_ping(::tinkoff::public_::invest::api::contract::v1::Ping* ping) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (ping) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(ping)->GetArena();
    if (message_arena != submessage_arena) {
      ping = ::google::protobuf::internal::GetOwnedMessage(message_arena, ping, submessage_arena);
    }
    set_has_ping();
    _impl_.payload_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataResponse.ping)
}
void MarketDataResponse::clear_ping() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kPing) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.ping_;
    }
    clear_has_payload();
  }
}
void MarketDataResponse::set_allocated_subscribe_last_price_response(::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceResponse* subscribe_last_price_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (subscribe_last_price_response) {
    ::google::protobuf::Arena* submessage_arena = subscribe_last_price_response->GetArena();
    if (message_arena != submessage_arena) {
      subscribe_last_price_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, subscribe_last_price_response, submessage_arena);
    }
    set_has_subscribe_last_price_response();
    _impl_.payload_.subscribe_last_price_response_ = subscribe_last_price_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataResponse.subscribe_last_price_response)
}
void MarketDataResponse::set_allocated_last_price(::tinkoff::public_::invest::api::contract::v1::LastPrice* last_price) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (last_price) {
    ::google::protobuf::Arena* submessage_arena = last_price->GetArena();
    if (message_arena != submessage_arena) {
      last_price = ::google::protobuf::internal::GetOwnedMessage(message_arena, last_price, submessage_arena);
    }
    set_has_last_price();
    _impl_.payload_.last_price_ = last_price;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.MarketDataResponse.last_price)
}
MarketDataResponse::MarketDataResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.MarketDataResponse)
}
inline PROTOBUF_NDEBUG_INLINE MarketDataResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : payload_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

MarketDataResponse::MarketDataResponse(
    ::google::protobuf::Arena* arena,
    const MarketDataResponse& from)
    : ::google::protobuf::Message(arena) {
  MarketDataResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (payload_case()) {
    case PAYLOAD_NOT_SET:
      break;
      case kSubscribeCandlesResponse:
        _impl_.payload_.subscribe_candles_response_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesResponse>(arena, *from._impl_.payload_.subscribe_candles_response_);
        break;
      case kSubscribeOrderBookResponse:
        _impl_.payload_.subscribe_order_book_response_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookResponse>(arena, *from._impl_.payload_.subscribe_order_book_response_);
        break;
      case kSubscribeTradesResponse:
        _impl_.payload_.subscribe_trades_response_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::SubscribeTradesResponse>(arena, *from._impl_.payload_.subscribe_trades_response_);
        break;
      case kSubscribeInfoResponse:
        _impl_.payload_.subscribe_info_response_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::SubscribeInfoResponse>(arena, *from._impl_.payload_.subscribe_info_response_);
        break;
      case kCandle:
        _impl_.payload_.candle_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Candle>(arena, *from._impl_.payload_.candle_);
        break;
      case kTrade:
        _impl_.payload_.trade_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Trade>(arena, *from._impl_.payload_.trade_);
        break;
      case kOrderbook:
        _impl_.payload_.orderbook_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::OrderBook>(arena, *from._impl_.payload_.orderbook_);
        break;
      case kTradingStatus:
        _impl_.payload_.trading_status_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::TradingStatus>(arena, *from._impl_.payload_.trading_status_);
        break;
      case kPing:
        _impl_.payload_.ping_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Ping>(arena, *from._impl_.payload_.ping_);
        break;
      case kSubscribeLastPriceResponse:
        _impl_.payload_.subscribe_last_price_response_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceResponse>(arena, *from._impl_.payload_.subscribe_last_price_response_);
        break;
      case kLastPrice:
        _impl_.payload_.last_price_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::LastPrice>(arena, *from._impl_.payload_.last_price_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.MarketDataResponse)
}
inline PROTOBUF_NDEBUG_INLINE MarketDataResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : payload_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void MarketDataResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
MarketDataResponse::~MarketDataResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.MarketDataResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MarketDataResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
  _impl_.~Impl_();
}

void MarketDataResponse::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:tinkoff.public_.invest.api.contract.v1.MarketDataResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (payload_case()) {
    case kSubscribeCandlesResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.subscribe_candles_response_;
      }
      break;
    }
    case kSubscribeOrderBookResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.subscribe_order_book_response_;
      }
      break;
    }
    case kSubscribeTradesResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.subscribe_trades_response_;
      }
      break;
    }
    case kSubscribeInfoResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.subscribe_info_response_;
      }
      break;
    }
    case kCandle: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.candle_;
      }
      break;
    }
    case kTrade: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.trade_;
      }
      break;
    }
    case kOrderbook: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.orderbook_;
      }
      break;
    }
    case kTradingStatus: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.trading_status_;
      }
      break;
    }
    case kPing: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.ping_;
      }
      break;
    }
    case kSubscribeLastPriceResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.subscribe_last_price_response_;
      }
      break;
    }
    case kLastPrice: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.last_price_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


PROTOBUF_NOINLINE void MarketDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.MarketDataResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MarketDataResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 11, 11, 0, 2> MarketDataResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    11, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    11,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MarketDataResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse subscribe_candles_response = 1;
    {PROTOBUF_FIELD_OFFSET(MarketDataResponse, _impl_.payload_.subscribe_candles_response_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse subscribe_order_book_response = 2;
    {PROTOBUF_FIELD_OFFSET(MarketDataResponse, _impl_.payload_.subscribe_order_book_response_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse subscribe_trades_response = 3;
    {PROTOBUF_FIELD_OFFSET(MarketDataResponse, _impl_.payload_.subscribe_trades_response_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse subscribe_info_response = 4;
    {PROTOBUF_FIELD_OFFSET(MarketDataResponse, _impl_.payload_.subscribe_info_response_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Candle candle = 5;
    {PROTOBUF_FIELD_OFFSET(MarketDataResponse, _impl_.payload_.candle_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Trade trade = 6;
    {PROTOBUF_FIELD_OFFSET(MarketDataResponse, _impl_.payload_.trade_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.OrderBook orderbook = 7;
    {PROTOBUF_FIELD_OFFSET(MarketDataResponse, _impl_.payload_.orderbook_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.TradingStatus trading_status = 8;
    {PROTOBUF_FIELD_OFFSET(MarketDataResponse, _impl_.payload_.trading_status_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Ping ping = 9;
    {PROTOBUF_FIELD_OFFSET(MarketDataResponse, _impl_.payload_.ping_), _Internal::kOneofCaseOffset + 0, 8,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse subscribe_last_price_response = 10;
    {PROTOBUF_FIELD_OFFSET(MarketDataResponse, _impl_.payload_.subscribe_last_price_response_), _Internal::kOneofCaseOffset + 0, 9,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.LastPrice last_price = 11;
    {PROTOBUF_FIELD_OFFSET(MarketDataResponse, _impl_.payload_.last_price_), _Internal::kOneofCaseOffset + 0, 10,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesResponse>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookResponse>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::SubscribeTradesResponse>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::SubscribeInfoResponse>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Candle>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Trade>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::OrderBook>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::TradingStatus>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Ping>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceResponse>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::LastPrice>()},
  }}, {{
  }},
};

::uint8_t* MarketDataResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.MarketDataResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (payload_case()) {
    case kSubscribeCandlesResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, _Internal::subscribe_candles_response(this),
          _Internal::subscribe_candles_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kSubscribeOrderBookResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, _Internal::subscribe_order_book_response(this),
          _Internal::subscribe_order_book_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kSubscribeTradesResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, _Internal::subscribe_trades_response(this),
          _Internal::subscribe_trades_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kSubscribeInfoResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, _Internal::subscribe_info_response(this),
          _Internal::subscribe_info_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kCandle: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, _Internal::candle(this),
          _Internal::candle(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrade: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, _Internal::trade(this),
          _Internal::trade(this).GetCachedSize(), target, stream);
      break;
    }
    case kOrderbook: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, _Internal::orderbook(this),
          _Internal::orderbook(this).GetCachedSize(), target, stream);
      break;
    }
    case kTradingStatus: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          8, _Internal::trading_status(this),
          _Internal::trading_status(this).GetCachedSize(), target, stream);
      break;
    }
    case kPing: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          9, _Internal::ping(this),
          _Internal::ping(this).GetCachedSize(), target, stream);
      break;
    }
    case kSubscribeLastPriceResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          10, _Internal::subscribe_last_price_response(this),
          _Internal::subscribe_last_price_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kLastPrice: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          11, _Internal::last_price(this),
          _Internal::last_price(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.MarketDataResponse)
  return target;
}

::size_t MarketDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.MarketDataResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse subscribe_candles_response = 1;
    case kSubscribeCandlesResponse: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.subscribe_candles_response_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse subscribe_order_book_response = 2;
    case kSubscribeOrderBookResponse: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.subscribe_order_book_response_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse subscribe_trades_response = 3;
    case kSubscribeTradesResponse: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.subscribe_trades_response_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse subscribe_info_response = 4;
    case kSubscribeInfoResponse: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.subscribe_info_response_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.Candle candle = 5;
    case kCandle: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.candle_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.Trade trade = 6;
    case kTrade: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.trade_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.OrderBook orderbook = 7;
    case kOrderbook: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.orderbook_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.TradingStatus trading_status = 8;
    case kTradingStatus: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.trading_status_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.Ping ping = 9;
    case kPing: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.ping_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse subscribe_last_price_response = 10;
    case kSubscribeLastPriceResponse: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.subscribe_last_price_response_);
      break;
    }
    // .tinkoff.public_.invest.api.contract.v1.LastPrice last_price = 11;
    case kLastPrice: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.last_price_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MarketDataResponse::_class_data_ = {
    MarketDataResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MarketDataResponse::GetClassData() const {
  return &_class_data_;
}

void MarketDataResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MarketDataResponse*>(&to_msg);
  auto& from = static_cast<const MarketDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.MarketDataResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kSubscribeCandlesResponse: {
      _this->_internal_mutable_subscribe_candles_response()->::tinkoff::public_::invest::api::contract::v1::SubscribeCandlesResponse::MergeFrom(
          from._internal_subscribe_candles_response());
      break;
    }
    case kSubscribeOrderBookResponse: {
      _this->_internal_mutable_subscribe_order_book_response()->::tinkoff::public_::invest::api::contract::v1::SubscribeOrderBookResponse::MergeFrom(
          from._internal_subscribe_order_book_response());
      break;
    }
    case kSubscribeTradesResponse: {
      _this->_internal_mutable_subscribe_trades_response()->::tinkoff::public_::invest::api::contract::v1::SubscribeTradesResponse::MergeFrom(
          from._internal_subscribe_trades_response());
      break;
    }
    case kSubscribeInfoResponse: {
      _this->_internal_mutable_subscribe_info_response()->::tinkoff::public_::invest::api::contract::v1::SubscribeInfoResponse::MergeFrom(
          from._internal_subscribe_info_response());
      break;
    }
    case kCandle: {
      _this->_internal_mutable_candle()->::tinkoff::public_::invest::api::contract::v1::Candle::MergeFrom(
          from._internal_candle());
      break;
    }
    case kTrade: {
      _this->_internal_mutable_trade()->::tinkoff::public_::invest::api::contract::v1::Trade::MergeFrom(
          from._internal_trade());
      break;
    }
    case kOrderbook: {
      _this->_internal_mutable_orderbook()->::tinkoff::public_::invest::api::contract::v1::OrderBook::MergeFrom(
          from._internal_orderbook());
      break;
    }
    case kTradingStatus: {
      _this->_internal_mutable_trading_status()->::tinkoff::public_::invest::api::contract::v1::TradingStatus::MergeFrom(
          from._internal_trading_status());
      break;
    }
    case kPing: {
      _this->_internal_mutable_ping()->::tinkoff::public_::invest::api::contract::v1::Ping::MergeFrom(
          from._internal_ping());
      break;
    }
    case kSubscribeLastPriceResponse: {
      _this->_internal_mutable_subscribe_last_price_response()->::tinkoff::public_::invest::api::contract::v1::SubscribeLastPriceResponse::MergeFrom(
          from._internal_subscribe_last_price_response());
      break;
    }
    case kLastPrice: {
      _this->_internal_mutable_last_price()->::tinkoff::public_::invest::api::contract::v1::LastPrice::MergeFrom(
          from._internal_last_price());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDataResponse::CopyFrom(const MarketDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.MarketDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MarketDataResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MarketDataResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MarketDataResponse::InternalSwap(MarketDataResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata MarketDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[2]);
}
// ===================================================================

class SubscribeCandlesRequest::_Internal {
 public:
};

SubscribeCandlesRequest::SubscribeCandlesRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest)
}
inline PROTOBUF_NDEBUG_INLINE SubscribeCandlesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : instruments_{visibility, arena, from.instruments_},
        _cached_size_{0} {}

SubscribeCandlesRequest::SubscribeCandlesRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeCandlesRequest& from)
    : ::google::protobuf::Message(arena) {
  SubscribeCandlesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, subscription_action_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, subscription_action_),
           offsetof(Impl_, waiting_close_) -
               offsetof(Impl_, subscription_action_) +
               sizeof(Impl_::waiting_close_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest)
}
inline PROTOBUF_NDEBUG_INLINE SubscribeCandlesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        _cached_size_{0} {}

inline void SubscribeCandlesRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, subscription_action_),
           0,
           offsetof(Impl_, waiting_close_) -
               offsetof(Impl_, subscription_action_) +
               sizeof(Impl_::waiting_close_));
}
SubscribeCandlesRequest::~SubscribeCandlesRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SubscribeCandlesRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SubscribeCandlesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  ::memset(&_impl_.subscription_action_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.waiting_close_) -
      reinterpret_cast<char*>(&_impl_.subscription_action_)) + sizeof(_impl_.waiting_close_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SubscribeCandlesRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> SubscribeCandlesRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SubscribeCandlesRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SubscribeCandlesRequest, _impl_.subscription_action_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SubscribeCandlesRequest, _impl_.subscription_action_)}},
    // repeated .tinkoff.public_.invest.api.contract.v1.CandleInstrument instruments = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SubscribeCandlesRequest, _impl_.instruments_)}},
    // bool waiting_close = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SubscribeCandlesRequest, _impl_.waiting_close_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(SubscribeCandlesRequest, _impl_.waiting_close_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
    {PROTOBUF_FIELD_OFFSET(SubscribeCandlesRequest, _impl_.subscription_action_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated .tinkoff.public_.invest.api.contract.v1.CandleInstrument instruments = 2;
    {PROTOBUF_FIELD_OFFSET(SubscribeCandlesRequest, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool waiting_close = 3;
    {PROTOBUF_FIELD_OFFSET(SubscribeCandlesRequest, _impl_.waiting_close_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::CandleInstrument>()},
  }}, {{
  }},
};

::uint8_t* SubscribeCandlesRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
  if (this->_internal_subscription_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_subscription_action(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.CandleInstrument instruments = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool waiting_close = 3;
  if (this->_internal_waiting_close() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_waiting_close(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest)
  return target;
}

::size_t SubscribeCandlesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.CandleInstrument instruments = 2;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_internal_instruments()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
  if (this->_internal_subscription_action() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_subscription_action());
  }

  // bool waiting_close = 3;
  if (this->_internal_waiting_close() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SubscribeCandlesRequest::_class_data_ = {
    SubscribeCandlesRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SubscribeCandlesRequest::GetClassData() const {
  return &_class_data_;
}

void SubscribeCandlesRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SubscribeCandlesRequest*>(&to_msg);
  auto& from = static_cast<const SubscribeCandlesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  if (from._internal_subscription_action() != 0) {
    _this->_internal_set_subscription_action(from._internal_subscription_action());
  }
  if (from._internal_waiting_close() != 0) {
    _this->_internal_set_waiting_close(from._internal_waiting_close());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeCandlesRequest::CopyFrom(const SubscribeCandlesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SubscribeCandlesRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SubscribeCandlesRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SubscribeCandlesRequest::InternalSwap(SubscribeCandlesRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscribeCandlesRequest, _impl_.waiting_close_)
      + sizeof(SubscribeCandlesRequest::_impl_.waiting_close_)
      - PROTOBUF_FIELD_OFFSET(SubscribeCandlesRequest, _impl_.subscription_action_)>(
          reinterpret_cast<char*>(&_impl_.subscription_action_),
          reinterpret_cast<char*>(&other->_impl_.subscription_action_));
}

::google::protobuf::Metadata SubscribeCandlesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[3]);
}
// ===================================================================

class CandleInstrument::_Internal {
 public:
};

CandleInstrument::CandleInstrument(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.CandleInstrument)
}
inline PROTOBUF_NDEBUG_INLINE CandleInstrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : figi_(arena, from.figi_),
        instrument_id_(arena, from.instrument_id_),
        _cached_size_{0} {}

CandleInstrument::CandleInstrument(
    ::google::protobuf::Arena* arena,
    const CandleInstrument& from)
    : ::google::protobuf::Message(arena) {
  CandleInstrument* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.interval_ = from._impl_.interval_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.CandleInstrument)
}
inline PROTOBUF_NDEBUG_INLINE CandleInstrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : figi_(arena),
        instrument_id_(arena),
        _cached_size_{0} {}

inline void CandleInstrument::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.interval_ = {};
}
CandleInstrument::~CandleInstrument() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.CandleInstrument)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CandleInstrument::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CandleInstrument::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.CandleInstrument)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  _impl_.interval_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CandleInstrument::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 81, 2> CandleInstrument::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CandleInstrument_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1 [deprecated = true];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CandleInstrument, _impl_.figi_)}},
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionInterval interval = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CandleInstrument, _impl_.interval_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CandleInstrument, _impl_.interval_)}},
    // string instrument_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(CandleInstrument, _impl_.instrument_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(CandleInstrument, _impl_.figi_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionInterval interval = 2;
    {PROTOBUF_FIELD_OFFSET(CandleInstrument, _impl_.interval_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string instrument_id = 3;
    {PROTOBUF_FIELD_OFFSET(CandleInstrument, _impl_.instrument_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\67\4\0\15\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.CandleInstrument"
    "figi"
    "instrument_id"
  }},
};

::uint8_t* CandleInstrument::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.CandleInstrument)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.CandleInstrument.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionInterval interval = 2;
  if (this->_internal_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_interval(), target);
  }

  // string instrument_id = 3;
  if (!this->_internal_instrument_id().empty()) {
    const std::string& _s = this->_internal_instrument_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.CandleInstrument.instrument_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.CandleInstrument)
  return target;
}

::size_t CandleInstrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.CandleInstrument)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string instrument_id = 3;
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_id());
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionInterval interval = 2;
  if (this->_internal_interval() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_interval());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CandleInstrument::_class_data_ = {
    CandleInstrument::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CandleInstrument::GetClassData() const {
  return &_class_data_;
}

void CandleInstrument::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CandleInstrument*>(&to_msg);
  auto& from = static_cast<const CandleInstrument&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.CandleInstrument)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  if (from._internal_interval() != 0) {
    _this->_internal_set_interval(from._internal_interval());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CandleInstrument::CopyFrom(const CandleInstrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.CandleInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CandleInstrument::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CandleInstrument::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CandleInstrument::InternalSwap(CandleInstrument* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
  swap(_impl_.interval_, other->_impl_.interval_);
}

::google::protobuf::Metadata CandleInstrument::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[4]);
}
// ===================================================================

class SubscribeCandlesResponse::_Internal {
 public:
};

SubscribeCandlesResponse::SubscribeCandlesResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse)
}
inline PROTOBUF_NDEBUG_INLINE SubscribeCandlesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : candles_subscriptions_{visibility, arena, from.candles_subscriptions_},
        tracking_id_(arena, from.tracking_id_),
        _cached_size_{0} {}

SubscribeCandlesResponse::SubscribeCandlesResponse(
    ::google::protobuf::Arena* arena,
    const SubscribeCandlesResponse& from)
    : ::google::protobuf::Message(arena) {
  SubscribeCandlesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse)
}
inline PROTOBUF_NDEBUG_INLINE SubscribeCandlesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : candles_subscriptions_{visibility, arena},
        tracking_id_(arena),
        _cached_size_{0} {}

inline void SubscribeCandlesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SubscribeCandlesResponse::~SubscribeCandlesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SubscribeCandlesResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.tracking_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SubscribeCandlesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.candles_subscriptions_.Clear();
  _impl_.tracking_id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SubscribeCandlesResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 83, 2> SubscribeCandlesResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SubscribeCandlesResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.CandleSubscription candles_subscriptions = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SubscribeCandlesResponse, _impl_.candles_subscriptions_)}},
    // string tracking_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SubscribeCandlesResponse, _impl_.tracking_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string tracking_id = 1;
    {PROTOBUF_FIELD_OFFSET(SubscribeCandlesResponse, _impl_.tracking_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .tinkoff.public_.invest.api.contract.v1.CandleSubscription candles_subscriptions = 2;
    {PROTOBUF_FIELD_OFFSET(SubscribeCandlesResponse, _impl_.candles_subscriptions_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::CandleSubscription>()},
  }}, {{
    "\77\13\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse"
    "tracking_id"
  }},
};

::uint8_t* SubscribeCandlesResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string tracking_id = 1;
  if (!this->_internal_tracking_id().empty()) {
    const std::string& _s = this->_internal_tracking_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse.tracking_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.CandleSubscription candles_subscriptions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_candles_subscriptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_candles_subscriptions().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse)
  return target;
}

::size_t SubscribeCandlesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.CandleSubscription candles_subscriptions = 2;
  total_size += 1UL * this->_internal_candles_subscriptions_size();
  for (const auto& msg : this->_internal_candles_subscriptions()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string tracking_id = 1;
  if (!this->_internal_tracking_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_tracking_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SubscribeCandlesResponse::_class_data_ = {
    SubscribeCandlesResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SubscribeCandlesResponse::GetClassData() const {
  return &_class_data_;
}

void SubscribeCandlesResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SubscribeCandlesResponse*>(&to_msg);
  auto& from = static_cast<const SubscribeCandlesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_candles_subscriptions()->MergeFrom(
      from._internal_candles_subscriptions());
  if (!from._internal_tracking_id().empty()) {
    _this->_internal_set_tracking_id(from._internal_tracking_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeCandlesResponse::CopyFrom(const SubscribeCandlesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeCandlesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SubscribeCandlesResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SubscribeCandlesResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SubscribeCandlesResponse::InternalSwap(SubscribeCandlesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.candles_subscriptions_.InternalSwap(&other->_impl_.candles_subscriptions_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tracking_id_, &other->_impl_.tracking_id_, arena);
}

::google::protobuf::Metadata SubscribeCandlesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[5]);
}
// ===================================================================

class CandleSubscription::_Internal {
 public:
};

CandleSubscription::CandleSubscription(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.CandleSubscription)
}
inline PROTOBUF_NDEBUG_INLINE CandleSubscription::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : figi_(arena, from.figi_),
        instrument_uid_(arena, from.instrument_uid_),
        stream_id_(arena, from.stream_id_),
        subscription_id_(arena, from.subscription_id_),
        _cached_size_{0} {}

CandleSubscription::CandleSubscription(
    ::google::protobuf::Arena* arena,
    const CandleSubscription& from)
    : ::google::protobuf::Message(arena) {
  CandleSubscription* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, interval_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, interval_),
           offsetof(Impl_, waiting_close_) -
               offsetof(Impl_, interval_) +
               sizeof(Impl_::waiting_close_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.CandleSubscription)
}
inline PROTOBUF_NDEBUG_INLINE CandleSubscription::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : figi_(arena),
        instrument_uid_(arena),
        stream_id_(arena),
        subscription_id_(arena),
        _cached_size_{0} {}

inline void CandleSubscription::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, interval_),
           0,
           offsetof(Impl_, waiting_close_) -
               offsetof(Impl_, interval_) +
               sizeof(Impl_::waiting_close_));
}
CandleSubscription::~CandleSubscription() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.CandleSubscription)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CandleSubscription::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
  _impl_.stream_id_.Destroy();
  _impl_.subscription_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CandleSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.CandleSubscription)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  _impl_.stream_id_.ClearToEmpty();
  _impl_.subscription_id_.ClearToEmpty();
  ::memset(&_impl_.interval_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.waiting_close_) -
      reinterpret_cast<char*>(&_impl_.interval_)) + sizeof(_impl_.waiting_close_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CandleSubscription::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 108, 2> CandleSubscription::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CandleSubscription_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CandleSubscription, _impl_.figi_)}},
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionInterval interval = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CandleSubscription, _impl_.interval_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CandleSubscription, _impl_.interval_)}},
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CandleSubscription, _impl_.subscription_status_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(CandleSubscription, _impl_.subscription_status_)}},
    // string instrument_uid = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(CandleSubscription, _impl_.instrument_uid_)}},
    // bool waiting_close = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CandleSubscription, _impl_.waiting_close_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(CandleSubscription, _impl_.waiting_close_)}},
    // string stream_id = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(CandleSubscription, _impl_.stream_id_)}},
    // string subscription_id = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(CandleSubscription, _impl_.subscription_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(CandleSubscription, _impl_.figi_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionInterval interval = 2;
    {PROTOBUF_FIELD_OFFSET(CandleSubscription, _impl_.interval_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 3;
    {PROTOBUF_FIELD_OFFSET(CandleSubscription, _impl_.subscription_status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string instrument_uid = 4;
    {PROTOBUF_FIELD_OFFSET(CandleSubscription, _impl_.instrument_uid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool waiting_close = 5;
    {PROTOBUF_FIELD_OFFSET(CandleSubscription, _impl_.waiting_close_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string stream_id = 6;
    {PROTOBUF_FIELD_OFFSET(CandleSubscription, _impl_.stream_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string subscription_id = 7;
    {PROTOBUF_FIELD_OFFSET(CandleSubscription, _impl_.subscription_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\71\4\0\0\16\0\11\17"
    "tinkoff.public_.invest.api.contract.v1.CandleSubscription"
    "figi"
    "instrument_uid"
    "stream_id"
    "subscription_id"
  }},
};

::uint8_t* CandleSubscription::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.CandleSubscription)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.CandleSubscription.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionInterval interval = 2;
  if (this->_internal_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_interval(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 3;
  if (this->_internal_subscription_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_subscription_status(), target);
  }

  // string instrument_uid = 4;
  if (!this->_internal_instrument_uid().empty()) {
    const std::string& _s = this->_internal_instrument_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.CandleSubscription.instrument_uid");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // bool waiting_close = 5;
  if (this->_internal_waiting_close() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_waiting_close(), target);
  }

  // string stream_id = 6;
  if (!this->_internal_stream_id().empty()) {
    const std::string& _s = this->_internal_stream_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.CandleSubscription.stream_id");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string subscription_id = 7;
  if (!this->_internal_subscription_id().empty()) {
    const std::string& _s = this->_internal_subscription_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.CandleSubscription.subscription_id");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.CandleSubscription)
  return target;
}

::size_t CandleSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.CandleSubscription)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string instrument_uid = 4;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_uid());
  }

  // string stream_id = 6;
  if (!this->_internal_stream_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_stream_id());
  }

  // string subscription_id = 7;
  if (!this->_internal_subscription_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_subscription_id());
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionInterval interval = 2;
  if (this->_internal_interval() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_interval());
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 3;
  if (this->_internal_subscription_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_subscription_status());
  }

  // bool waiting_close = 5;
  if (this->_internal_waiting_close() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CandleSubscription::_class_data_ = {
    CandleSubscription::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CandleSubscription::GetClassData() const {
  return &_class_data_;
}

void CandleSubscription::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CandleSubscription*>(&to_msg);
  auto& from = static_cast<const CandleSubscription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.CandleSubscription)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (!from._internal_stream_id().empty()) {
    _this->_internal_set_stream_id(from._internal_stream_id());
  }
  if (!from._internal_subscription_id().empty()) {
    _this->_internal_set_subscription_id(from._internal_subscription_id());
  }
  if (from._internal_interval() != 0) {
    _this->_internal_set_interval(from._internal_interval());
  }
  if (from._internal_subscription_status() != 0) {
    _this->_internal_set_subscription_status(from._internal_subscription_status());
  }
  if (from._internal_waiting_close() != 0) {
    _this->_internal_set_waiting_close(from._internal_waiting_close());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CandleSubscription::CopyFrom(const CandleSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.CandleSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CandleSubscription::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CandleSubscription::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CandleSubscription::InternalSwap(CandleSubscription* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_uid_, &other->_impl_.instrument_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.stream_id_, &other->_impl_.stream_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subscription_id_, &other->_impl_.subscription_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CandleSubscription, _impl_.waiting_close_)
      + sizeof(CandleSubscription::_impl_.waiting_close_)
      - PROTOBUF_FIELD_OFFSET(CandleSubscription, _impl_.interval_)>(
          reinterpret_cast<char*>(&_impl_.interval_),
          reinterpret_cast<char*>(&other->_impl_.interval_));
}

::google::protobuf::Metadata CandleSubscription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[6]);
}
// ===================================================================

class SubscribeOrderBookRequest::_Internal {
 public:
};

SubscribeOrderBookRequest::SubscribeOrderBookRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest)
}
inline PROTOBUF_NDEBUG_INLINE SubscribeOrderBookRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : instruments_{visibility, arena, from.instruments_},
        _cached_size_{0} {}

SubscribeOrderBookRequest::SubscribeOrderBookRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeOrderBookRequest& from)
    : ::google::protobuf::Message(arena) {
  SubscribeOrderBookRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.subscription_action_ = from._impl_.subscription_action_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest)
}
inline PROTOBUF_NDEBUG_INLINE SubscribeOrderBookRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        _cached_size_{0} {}

inline void SubscribeOrderBookRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.subscription_action_ = {};
}
SubscribeOrderBookRequest::~SubscribeOrderBookRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SubscribeOrderBookRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SubscribeOrderBookRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _impl_.subscription_action_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SubscribeOrderBookRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> SubscribeOrderBookRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SubscribeOrderBookRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.OrderBookInstrument instruments = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SubscribeOrderBookRequest, _impl_.instruments_)}},
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SubscribeOrderBookRequest, _impl_.subscription_action_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SubscribeOrderBookRequest, _impl_.subscription_action_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
    {PROTOBUF_FIELD_OFFSET(SubscribeOrderBookRequest, _impl_.subscription_action_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated .tinkoff.public_.invest.api.contract.v1.OrderBookInstrument instruments = 2;
    {PROTOBUF_FIELD_OFFSET(SubscribeOrderBookRequest, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::OrderBookInstrument>()},
  }}, {{
  }},
};

::uint8_t* SubscribeOrderBookRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
  if (this->_internal_subscription_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_subscription_action(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.OrderBookInstrument instruments = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest)
  return target;
}

::size_t SubscribeOrderBookRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.OrderBookInstrument instruments = 2;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_internal_instruments()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
  if (this->_internal_subscription_action() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_subscription_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SubscribeOrderBookRequest::_class_data_ = {
    SubscribeOrderBookRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SubscribeOrderBookRequest::GetClassData() const {
  return &_class_data_;
}

void SubscribeOrderBookRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SubscribeOrderBookRequest*>(&to_msg);
  auto& from = static_cast<const SubscribeOrderBookRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  if (from._internal_subscription_action() != 0) {
    _this->_internal_set_subscription_action(from._internal_subscription_action());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeOrderBookRequest::CopyFrom(const SubscribeOrderBookRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SubscribeOrderBookRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SubscribeOrderBookRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SubscribeOrderBookRequest::InternalSwap(SubscribeOrderBookRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
  swap(_impl_.subscription_action_, other->_impl_.subscription_action_);
}

::google::protobuf::Metadata SubscribeOrderBookRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[7]);
}
// ===================================================================

class OrderBookInstrument::_Internal {
 public:
};

OrderBookInstrument::OrderBookInstrument(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.OrderBookInstrument)
}
inline PROTOBUF_NDEBUG_INLINE OrderBookInstrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : figi_(arena, from.figi_),
        instrument_id_(arena, from.instrument_id_),
        _cached_size_{0} {}

OrderBookInstrument::OrderBookInstrument(
    ::google::protobuf::Arena* arena,
    const OrderBookInstrument& from)
    : ::google::protobuf::Message(arena) {
  OrderBookInstrument* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, depth_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, depth_),
           offsetof(Impl_, order_book_type_) -
               offsetof(Impl_, depth_) +
               sizeof(Impl_::order_book_type_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.OrderBookInstrument)
}
inline PROTOBUF_NDEBUG_INLINE OrderBookInstrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : figi_(arena),
        instrument_id_(arena),
        _cached_size_{0} {}

inline void OrderBookInstrument::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, depth_),
           0,
           offsetof(Impl_, order_book_type_) -
               offsetof(Impl_, depth_) +
               sizeof(Impl_::order_book_type_));
}
OrderBookInstrument::~OrderBookInstrument() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.OrderBookInstrument)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OrderBookInstrument::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void OrderBookInstrument::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.OrderBookInstrument)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  ::memset(&_impl_.depth_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.order_book_type_) -
      reinterpret_cast<char*>(&_impl_.depth_)) + sizeof(_impl_.order_book_type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* OrderBookInstrument::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 84, 2> OrderBookInstrument::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_OrderBookInstrument_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .tinkoff.public_.invest.api.contract.v1.OrderBookType order_book_type = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OrderBookInstrument, _impl_.order_book_type_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBookInstrument, _impl_.order_book_type_)}},
    // string figi = 1 [deprecated = true];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBookInstrument, _impl_.figi_)}},
    // int32 depth = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OrderBookInstrument, _impl_.depth_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBookInstrument, _impl_.depth_)}},
    // string instrument_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBookInstrument, _impl_.instrument_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(OrderBookInstrument, _impl_.figi_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 depth = 2;
    {PROTOBUF_FIELD_OFFSET(OrderBookInstrument, _impl_.depth_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string instrument_id = 3;
    {PROTOBUF_FIELD_OFFSET(OrderBookInstrument, _impl_.instrument_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.OrderBookType order_book_type = 4;
    {PROTOBUF_FIELD_OFFSET(OrderBookInstrument, _impl_.order_book_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\72\4\0\15\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.OrderBookInstrument"
    "figi"
    "instrument_id"
  }},
};

::uint8_t* OrderBookInstrument::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.OrderBookInstrument)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.OrderBookInstrument.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 depth = 2;
  if (this->_internal_depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_depth(), target);
  }

  // string instrument_id = 3;
  if (!this->_internal_instrument_id().empty()) {
    const std::string& _s = this->_internal_instrument_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.OrderBookInstrument.instrument_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderBookType order_book_type = 4;
  if (this->_internal_order_book_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_order_book_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.OrderBookInstrument)
  return target;
}

::size_t OrderBookInstrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.OrderBookInstrument)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string instrument_id = 3;
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_id());
  }

  // int32 depth = 2;
  if (this->_internal_depth() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_depth());
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderBookType order_book_type = 4;
  if (this->_internal_order_book_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_order_book_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData OrderBookInstrument::_class_data_ = {
    OrderBookInstrument::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* OrderBookInstrument::GetClassData() const {
  return &_class_data_;
}

void OrderBookInstrument::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<OrderBookInstrument*>(&to_msg);
  auto& from = static_cast<const OrderBookInstrument&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.OrderBookInstrument)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  if (from._internal_depth() != 0) {
    _this->_internal_set_depth(from._internal_depth());
  }
  if (from._internal_order_book_type() != 0) {
    _this->_internal_set_order_book_type(from._internal_order_book_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OrderBookInstrument::CopyFrom(const OrderBookInstrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.OrderBookInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool OrderBookInstrument::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* OrderBookInstrument::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void OrderBookInstrument::InternalSwap(OrderBookInstrument* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderBookInstrument, _impl_.order_book_type_)
      + sizeof(OrderBookInstrument::_impl_.order_book_type_)
      - PROTOBUF_FIELD_OFFSET(OrderBookInstrument, _impl_.depth_)>(
          reinterpret_cast<char*>(&_impl_.depth_),
          reinterpret_cast<char*>(&other->_impl_.depth_));
}

::google::protobuf::Metadata OrderBookInstrument::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[8]);
}
// ===================================================================

class SubscribeOrderBookResponse::_Internal {
 public:
};

SubscribeOrderBookResponse::SubscribeOrderBookResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse)
}
inline PROTOBUF_NDEBUG_INLINE SubscribeOrderBookResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : order_book_subscriptions_{visibility, arena, from.order_book_subscriptions_},
        tracking_id_(arena, from.tracking_id_),
        _cached_size_{0} {}

SubscribeOrderBookResponse::SubscribeOrderBookResponse(
    ::google::protobuf::Arena* arena,
    const SubscribeOrderBookResponse& from)
    : ::google::protobuf::Message(arena) {
  SubscribeOrderBookResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse)
}
inline PROTOBUF_NDEBUG_INLINE SubscribeOrderBookResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : order_book_subscriptions_{visibility, arena},
        tracking_id_(arena),
        _cached_size_{0} {}

inline void SubscribeOrderBookResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SubscribeOrderBookResponse::~SubscribeOrderBookResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SubscribeOrderBookResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.tracking_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SubscribeOrderBookResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.order_book_subscriptions_.Clear();
  _impl_.tracking_id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SubscribeOrderBookResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 85, 2> SubscribeOrderBookResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SubscribeOrderBookResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.OrderBookSubscription order_book_subscriptions = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SubscribeOrderBookResponse, _impl_.order_book_subscriptions_)}},
    // string tracking_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SubscribeOrderBookResponse, _impl_.tracking_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string tracking_id = 1;
    {PROTOBUF_FIELD_OFFSET(SubscribeOrderBookResponse, _impl_.tracking_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .tinkoff.public_.invest.api.contract.v1.OrderBookSubscription order_book_subscriptions = 2;
    {PROTOBUF_FIELD_OFFSET(SubscribeOrderBookResponse, _impl_.order_book_subscriptions_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::OrderBookSubscription>()},
  }}, {{
    "\101\13\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse"
    "tracking_id"
  }},
};

::uint8_t* SubscribeOrderBookResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string tracking_id = 1;
  if (!this->_internal_tracking_id().empty()) {
    const std::string& _s = this->_internal_tracking_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse.tracking_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.OrderBookSubscription order_book_subscriptions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_order_book_subscriptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_order_book_subscriptions().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse)
  return target;
}

::size_t SubscribeOrderBookResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.OrderBookSubscription order_book_subscriptions = 2;
  total_size += 1UL * this->_internal_order_book_subscriptions_size();
  for (const auto& msg : this->_internal_order_book_subscriptions()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string tracking_id = 1;
  if (!this->_internal_tracking_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_tracking_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SubscribeOrderBookResponse::_class_data_ = {
    SubscribeOrderBookResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SubscribeOrderBookResponse::GetClassData() const {
  return &_class_data_;
}

void SubscribeOrderBookResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SubscribeOrderBookResponse*>(&to_msg);
  auto& from = static_cast<const SubscribeOrderBookResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_order_book_subscriptions()->MergeFrom(
      from._internal_order_book_subscriptions());
  if (!from._internal_tracking_id().empty()) {
    _this->_internal_set_tracking_id(from._internal_tracking_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeOrderBookResponse::CopyFrom(const SubscribeOrderBookResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeOrderBookResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SubscribeOrderBookResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SubscribeOrderBookResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SubscribeOrderBookResponse::InternalSwap(SubscribeOrderBookResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.order_book_subscriptions_.InternalSwap(&other->_impl_.order_book_subscriptions_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tracking_id_, &other->_impl_.tracking_id_, arena);
}

::google::protobuf::Metadata SubscribeOrderBookResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[9]);
}
// ===================================================================

class OrderBookSubscription::_Internal {
 public:
};

OrderBookSubscription::OrderBookSubscription(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.OrderBookSubscription)
}
inline PROTOBUF_NDEBUG_INLINE OrderBookSubscription::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : figi_(arena, from.figi_),
        instrument_uid_(arena, from.instrument_uid_),
        stream_id_(arena, from.stream_id_),
        subscription_id_(arena, from.subscription_id_),
        _cached_size_{0} {}

OrderBookSubscription::OrderBookSubscription(
    ::google::protobuf::Arena* arena,
    const OrderBookSubscription& from)
    : ::google::protobuf::Message(arena) {
  OrderBookSubscription* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, depth_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, depth_),
           offsetof(Impl_, order_book_type_) -
               offsetof(Impl_, depth_) +
               sizeof(Impl_::order_book_type_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.OrderBookSubscription)
}
inline PROTOBUF_NDEBUG_INLINE OrderBookSubscription::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : figi_(arena),
        instrument_uid_(arena),
        stream_id_(arena),
        subscription_id_(arena),
        _cached_size_{0} {}

inline void OrderBookSubscription::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, depth_),
           0,
           offsetof(Impl_, order_book_type_) -
               offsetof(Impl_, depth_) +
               sizeof(Impl_::order_book_type_));
}
OrderBookSubscription::~OrderBookSubscription() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.OrderBookSubscription)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OrderBookSubscription::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
  _impl_.stream_id_.Destroy();
  _impl_.subscription_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void OrderBookSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.OrderBookSubscription)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  _impl_.stream_id_.ClearToEmpty();
  _impl_.subscription_id_.ClearToEmpty();
  ::memset(&_impl_.depth_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.order_book_type_) -
      reinterpret_cast<char*>(&_impl_.depth_)) + sizeof(_impl_.order_book_type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* OrderBookSubscription::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 111, 2> OrderBookSubscription::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_OrderBookSubscription_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBookSubscription, _impl_.figi_)}},
    // int32 depth = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OrderBookSubscription, _impl_.depth_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBookSubscription, _impl_.depth_)}},
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OrderBookSubscription, _impl_.subscription_status_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBookSubscription, _impl_.subscription_status_)}},
    // string instrument_uid = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBookSubscription, _impl_.instrument_uid_)}},
    // string stream_id = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBookSubscription, _impl_.stream_id_)}},
    // string subscription_id = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBookSubscription, _impl_.subscription_id_)}},
    // .tinkoff.public_.invest.api.contract.v1.OrderBookType order_book_type = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OrderBookSubscription, _impl_.order_book_type_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBookSubscription, _impl_.order_book_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(OrderBookSubscription, _impl_.figi_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 depth = 2;
    {PROTOBUF_FIELD_OFFSET(OrderBookSubscription, _impl_.depth_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 3;
    {PROTOBUF_FIELD_OFFSET(OrderBookSubscription, _impl_.subscription_status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string instrument_uid = 4;
    {PROTOBUF_FIELD_OFFSET(OrderBookSubscription, _impl_.instrument_uid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string stream_id = 5;
    {PROTOBUF_FIELD_OFFSET(OrderBookSubscription, _impl_.stream_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string subscription_id = 6;
    {PROTOBUF_FIELD_OFFSET(OrderBookSubscription, _impl_.subscription_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.OrderBookType order_book_type = 7;
    {PROTOBUF_FIELD_OFFSET(OrderBookSubscription, _impl_.order_book_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\74\4\0\0\16\11\17\0"
    "tinkoff.public_.invest.api.contract.v1.OrderBookSubscription"
    "figi"
    "instrument_uid"
    "stream_id"
    "subscription_id"
  }},
};

::uint8_t* OrderBookSubscription::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.OrderBookSubscription)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.OrderBookSubscription.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 depth = 2;
  if (this->_internal_depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_depth(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 3;
  if (this->_internal_subscription_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_subscription_status(), target);
  }

  // string instrument_uid = 4;
  if (!this->_internal_instrument_uid().empty()) {
    const std::string& _s = this->_internal_instrument_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.OrderBookSubscription.instrument_uid");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string stream_id = 5;
  if (!this->_internal_stream_id().empty()) {
    const std::string& _s = this->_internal_stream_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.OrderBookSubscription.stream_id");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string subscription_id = 6;
  if (!this->_internal_subscription_id().empty()) {
    const std::string& _s = this->_internal_subscription_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.OrderBookSubscription.subscription_id");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderBookType order_book_type = 7;
  if (this->_internal_order_book_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_order_book_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.OrderBookSubscription)
  return target;
}

::size_t OrderBookSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.OrderBookSubscription)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string instrument_uid = 4;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_uid());
  }

  // string stream_id = 5;
  if (!this->_internal_stream_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_stream_id());
  }

  // string subscription_id = 6;
  if (!this->_internal_subscription_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_subscription_id());
  }

  // int32 depth = 2;
  if (this->_internal_depth() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_depth());
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 3;
  if (this->_internal_subscription_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_subscription_status());
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderBookType order_book_type = 7;
  if (this->_internal_order_book_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_order_book_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData OrderBookSubscription::_class_data_ = {
    OrderBookSubscription::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* OrderBookSubscription::GetClassData() const {
  return &_class_data_;
}

void OrderBookSubscription::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<OrderBookSubscription*>(&to_msg);
  auto& from = static_cast<const OrderBookSubscription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.OrderBookSubscription)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (!from._internal_stream_id().empty()) {
    _this->_internal_set_stream_id(from._internal_stream_id());
  }
  if (!from._internal_subscription_id().empty()) {
    _this->_internal_set_subscription_id(from._internal_subscription_id());
  }
  if (from._internal_depth() != 0) {
    _this->_internal_set_depth(from._internal_depth());
  }
  if (from._internal_subscription_status() != 0) {
    _this->_internal_set_subscription_status(from._internal_subscription_status());
  }
  if (from._internal_order_book_type() != 0) {
    _this->_internal_set_order_book_type(from._internal_order_book_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OrderBookSubscription::CopyFrom(const OrderBookSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.OrderBookSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool OrderBookSubscription::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* OrderBookSubscription::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void OrderBookSubscription::InternalSwap(OrderBookSubscription* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_uid_, &other->_impl_.instrument_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.stream_id_, &other->_impl_.stream_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subscription_id_, &other->_impl_.subscription_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderBookSubscription, _impl_.order_book_type_)
      + sizeof(OrderBookSubscription::_impl_.order_book_type_)
      - PROTOBUF_FIELD_OFFSET(OrderBookSubscription, _impl_.depth_)>(
          reinterpret_cast<char*>(&_impl_.depth_),
          reinterpret_cast<char*>(&other->_impl_.depth_));
}

::google::protobuf::Metadata OrderBookSubscription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[10]);
}
// ===================================================================

class SubscribeTradesRequest::_Internal {
 public:
};

SubscribeTradesRequest::SubscribeTradesRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest)
}
inline PROTOBUF_NDEBUG_INLINE SubscribeTradesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : instruments_{visibility, arena, from.instruments_},
        _cached_size_{0} {}

SubscribeTradesRequest::SubscribeTradesRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeTradesRequest& from)
    : ::google::protobuf::Message(arena) {
  SubscribeTradesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.subscription_action_ = from._impl_.subscription_action_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest)
}
inline PROTOBUF_NDEBUG_INLINE SubscribeTradesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        _cached_size_{0} {}

inline void SubscribeTradesRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.subscription_action_ = {};
}
SubscribeTradesRequest::~SubscribeTradesRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SubscribeTradesRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SubscribeTradesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _impl_.subscription_action_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SubscribeTradesRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> SubscribeTradesRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SubscribeTradesRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.TradeInstrument instruments = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SubscribeTradesRequest, _impl_.instruments_)}},
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SubscribeTradesRequest, _impl_.subscription_action_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SubscribeTradesRequest, _impl_.subscription_action_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
    {PROTOBUF_FIELD_OFFSET(SubscribeTradesRequest, _impl_.subscription_action_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated .tinkoff.public_.invest.api.contract.v1.TradeInstrument instruments = 2;
    {PROTOBUF_FIELD_OFFSET(SubscribeTradesRequest, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::TradeInstrument>()},
  }}, {{
  }},
};

::uint8_t* SubscribeTradesRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
  if (this->_internal_subscription_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_subscription_action(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.TradeInstrument instruments = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest)
  return target;
}

::size_t SubscribeTradesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.TradeInstrument instruments = 2;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_internal_instruments()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
  if (this->_internal_subscription_action() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_subscription_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SubscribeTradesRequest::_class_data_ = {
    SubscribeTradesRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SubscribeTradesRequest::GetClassData() const {
  return &_class_data_;
}

void SubscribeTradesRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SubscribeTradesRequest*>(&to_msg);
  auto& from = static_cast<const SubscribeTradesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  if (from._internal_subscription_action() != 0) {
    _this->_internal_set_subscription_action(from._internal_subscription_action());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeTradesRequest::CopyFrom(const SubscribeTradesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeTradesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SubscribeTradesRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SubscribeTradesRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SubscribeTradesRequest::InternalSwap(SubscribeTradesRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
  swap(_impl_.subscription_action_, other->_impl_.subscription_action_);
}

::google::protobuf::Metadata SubscribeTradesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[11]);
}
// ===================================================================

class TradeInstrument::_Internal {
 public:
};

TradeInstrument::TradeInstrument(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.TradeInstrument)
}
inline PROTOBUF_NDEBUG_INLINE TradeInstrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : figi_(arena, from.figi_),
        instrument_id_(arena, from.instrument_id_),
        _cached_size_{0} {}

TradeInstrument::TradeInstrument(
    ::google::protobuf::Arena* arena,
    const TradeInstrument& from)
    : ::google::protobuf::Message(arena) {
  TradeInstrument* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.TradeInstrument)
}
inline PROTOBUF_NDEBUG_INLINE TradeInstrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : figi_(arena),
        instrument_id_(arena),
        _cached_size_{0} {}

inline void TradeInstrument::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TradeInstrument::~TradeInstrument() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.TradeInstrument)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TradeInstrument::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TradeInstrument::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.TradeInstrument)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TradeInstrument::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 80, 2> TradeInstrument::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TradeInstrument_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string instrument_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TradeInstrument, _impl_.instrument_id_)}},
    // string figi = 1 [deprecated = true];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TradeInstrument, _impl_.figi_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(TradeInstrument, _impl_.figi_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string instrument_id = 2;
    {PROTOBUF_FIELD_OFFSET(TradeInstrument, _impl_.instrument_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\66\4\15\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.TradeInstrument"
    "figi"
    "instrument_id"
  }},
};

::uint8_t* TradeInstrument::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.TradeInstrument)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.TradeInstrument.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string instrument_id = 2;
  if (!this->_internal_instrument_id().empty()) {
    const std::string& _s = this->_internal_instrument_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.TradeInstrument.instrument_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.TradeInstrument)
  return target;
}

::size_t TradeInstrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.TradeInstrument)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string instrument_id = 2;
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TradeInstrument::_class_data_ = {
    TradeInstrument::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TradeInstrument::GetClassData() const {
  return &_class_data_;
}

void TradeInstrument::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TradeInstrument*>(&to_msg);
  auto& from = static_cast<const TradeInstrument&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.TradeInstrument)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TradeInstrument::CopyFrom(const TradeInstrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.TradeInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TradeInstrument::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TradeInstrument::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TradeInstrument::InternalSwap(TradeInstrument* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
}

::google::protobuf::Metadata TradeInstrument::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[12]);
}
// ===================================================================

class SubscribeTradesResponse::_Internal {
 public:
};

SubscribeTradesResponse::SubscribeTradesResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse)
}
inline PROTOBUF_NDEBUG_INLINE SubscribeTradesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : trade_subscriptions_{visibility, arena, from.trade_subscriptions_},
        tracking_id_(arena, from.tracking_id_),
        _cached_size_{0} {}

SubscribeTradesResponse::SubscribeTradesResponse(
    ::google::protobuf::Arena* arena,
    const SubscribeTradesResponse& from)
    : ::google::protobuf::Message(arena) {
  SubscribeTradesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse)
}
inline PROTOBUF_NDEBUG_INLINE SubscribeTradesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : trade_subscriptions_{visibility, arena},
        tracking_id_(arena),
        _cached_size_{0} {}

inline void SubscribeTradesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SubscribeTradesResponse::~SubscribeTradesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SubscribeTradesResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.tracking_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SubscribeTradesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trade_subscriptions_.Clear();
  _impl_.tracking_id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SubscribeTradesResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 82, 2> SubscribeTradesResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SubscribeTradesResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.TradeSubscription trade_subscriptions = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SubscribeTradesResponse, _impl_.trade_subscriptions_)}},
    // string tracking_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SubscribeTradesResponse, _impl_.tracking_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string tracking_id = 1;
    {PROTOBUF_FIELD_OFFSET(SubscribeTradesResponse, _impl_.tracking_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .tinkoff.public_.invest.api.contract.v1.TradeSubscription trade_subscriptions = 2;
    {PROTOBUF_FIELD_OFFSET(SubscribeTradesResponse, _impl_.trade_subscriptions_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::TradeSubscription>()},
  }}, {{
    "\76\13\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse"
    "tracking_id"
  }},
};

::uint8_t* SubscribeTradesResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string tracking_id = 1;
  if (!this->_internal_tracking_id().empty()) {
    const std::string& _s = this->_internal_tracking_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse.tracking_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.TradeSubscription trade_subscriptions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trade_subscriptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_trade_subscriptions().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse)
  return target;
}

::size_t SubscribeTradesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.TradeSubscription trade_subscriptions = 2;
  total_size += 1UL * this->_internal_trade_subscriptions_size();
  for (const auto& msg : this->_internal_trade_subscriptions()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string tracking_id = 1;
  if (!this->_internal_tracking_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_tracking_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SubscribeTradesResponse::_class_data_ = {
    SubscribeTradesResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SubscribeTradesResponse::GetClassData() const {
  return &_class_data_;
}

void SubscribeTradesResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SubscribeTradesResponse*>(&to_msg);
  auto& from = static_cast<const SubscribeTradesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_trade_subscriptions()->MergeFrom(
      from._internal_trade_subscriptions());
  if (!from._internal_tracking_id().empty()) {
    _this->_internal_set_tracking_id(from._internal_tracking_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeTradesResponse::CopyFrom(const SubscribeTradesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeTradesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SubscribeTradesResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SubscribeTradesResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SubscribeTradesResponse::InternalSwap(SubscribeTradesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.trade_subscriptions_.InternalSwap(&other->_impl_.trade_subscriptions_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tracking_id_, &other->_impl_.tracking_id_, arena);
}

::google::protobuf::Metadata SubscribeTradesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[13]);
}
// ===================================================================

class TradeSubscription::_Internal {
 public:
};

TradeSubscription::TradeSubscription(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.TradeSubscription)
}
inline PROTOBUF_NDEBUG_INLINE TradeSubscription::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : figi_(arena, from.figi_),
        instrument_uid_(arena, from.instrument_uid_),
        stream_id_(arena, from.stream_id_),
        subscription_id_(arena, from.subscription_id_),
        _cached_size_{0} {}

TradeSubscription::TradeSubscription(
    ::google::protobuf::Arena* arena,
    const TradeSubscription& from)
    : ::google::protobuf::Message(arena) {
  TradeSubscription* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.subscription_status_ = from._impl_.subscription_status_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.TradeSubscription)
}
inline PROTOBUF_NDEBUG_INLINE TradeSubscription::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : figi_(arena),
        instrument_uid_(arena),
        stream_id_(arena),
        subscription_id_(arena),
        _cached_size_{0} {}

inline void TradeSubscription::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.subscription_status_ = {};
}
TradeSubscription::~TradeSubscription() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.TradeSubscription)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TradeSubscription::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
  _impl_.stream_id_.Destroy();
  _impl_.subscription_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TradeSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.TradeSubscription)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  _impl_.stream_id_.ClearToEmpty();
  _impl_.subscription_id_.ClearToEmpty();
  _impl_.subscription_status_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TradeSubscription::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 107, 2> TradeSubscription::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TradeSubscription_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TradeSubscription, _impl_.figi_)}},
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TradeSubscription, _impl_.subscription_status_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TradeSubscription, _impl_.subscription_status_)}},
    // string instrument_uid = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TradeSubscription, _impl_.instrument_uid_)}},
    // string stream_id = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(TradeSubscription, _impl_.stream_id_)}},
    // string subscription_id = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(TradeSubscription, _impl_.subscription_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(TradeSubscription, _impl_.figi_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
    {PROTOBUF_FIELD_OFFSET(TradeSubscription, _impl_.subscription_status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string instrument_uid = 3;
    {PROTOBUF_FIELD_OFFSET(TradeSubscription, _impl_.instrument_uid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string stream_id = 4;
    {PROTOBUF_FIELD_OFFSET(TradeSubscription, _impl_.stream_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string subscription_id = 5;
    {PROTOBUF_FIELD_OFFSET(TradeSubscription, _impl_.subscription_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\70\4\0\16\11\17\0\0"
    "tinkoff.public_.invest.api.contract.v1.TradeSubscription"
    "figi"
    "instrument_uid"
    "stream_id"
    "subscription_id"
  }},
};

::uint8_t* TradeSubscription::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.TradeSubscription)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.TradeSubscription.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
  if (this->_internal_subscription_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_subscription_status(), target);
  }

  // string instrument_uid = 3;
  if (!this->_internal_instrument_uid().empty()) {
    const std::string& _s = this->_internal_instrument_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.TradeSubscription.instrument_uid");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string stream_id = 4;
  if (!this->_internal_stream_id().empty()) {
    const std::string& _s = this->_internal_stream_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.TradeSubscription.stream_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string subscription_id = 5;
  if (!this->_internal_subscription_id().empty()) {
    const std::string& _s = this->_internal_subscription_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.TradeSubscription.subscription_id");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.TradeSubscription)
  return target;
}

::size_t TradeSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.TradeSubscription)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string instrument_uid = 3;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_uid());
  }

  // string stream_id = 4;
  if (!this->_internal_stream_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_stream_id());
  }

  // string subscription_id = 5;
  if (!this->_internal_subscription_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_subscription_id());
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
  if (this->_internal_subscription_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_subscription_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TradeSubscription::_class_data_ = {
    TradeSubscription::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TradeSubscription::GetClassData() const {
  return &_class_data_;
}

void TradeSubscription::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TradeSubscription*>(&to_msg);
  auto& from = static_cast<const TradeSubscription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.TradeSubscription)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (!from._internal_stream_id().empty()) {
    _this->_internal_set_stream_id(from._internal_stream_id());
  }
  if (!from._internal_subscription_id().empty()) {
    _this->_internal_set_subscription_id(from._internal_subscription_id());
  }
  if (from._internal_subscription_status() != 0) {
    _this->_internal_set_subscription_status(from._internal_subscription_status());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TradeSubscription::CopyFrom(const TradeSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.TradeSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TradeSubscription::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TradeSubscription::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TradeSubscription::InternalSwap(TradeSubscription* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_uid_, &other->_impl_.instrument_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.stream_id_, &other->_impl_.stream_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subscription_id_, &other->_impl_.subscription_id_, arena);
  swap(_impl_.subscription_status_, other->_impl_.subscription_status_);
}

::google::protobuf::Metadata TradeSubscription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[14]);
}
// ===================================================================

class SubscribeInfoRequest::_Internal {
 public:
};

SubscribeInfoRequest::SubscribeInfoRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest)
}
inline PROTOBUF_NDEBUG_INLINE SubscribeInfoRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : instruments_{visibility, arena, from.instruments_},
        _cached_size_{0} {}

SubscribeInfoRequest::SubscribeInfoRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeInfoRequest& from)
    : ::google::protobuf::Message(arena) {
  SubscribeInfoRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.subscription_action_ = from._impl_.subscription_action_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest)
}
inline PROTOBUF_NDEBUG_INLINE SubscribeInfoRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        _cached_size_{0} {}

inline void SubscribeInfoRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.subscription_action_ = {};
}
SubscribeInfoRequest::~SubscribeInfoRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SubscribeInfoRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SubscribeInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _impl_.subscription_action_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SubscribeInfoRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> SubscribeInfoRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SubscribeInfoRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.InfoInstrument instruments = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SubscribeInfoRequest, _impl_.instruments_)}},
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SubscribeInfoRequest, _impl_.subscription_action_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SubscribeInfoRequest, _impl_.subscription_action_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
    {PROTOBUF_FIELD_OFFSET(SubscribeInfoRequest, _impl_.subscription_action_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated .tinkoff.public_.invest.api.contract.v1.InfoInstrument instruments = 2;
    {PROTOBUF_FIELD_OFFSET(SubscribeInfoRequest, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::InfoInstrument>()},
  }}, {{
  }},
};

::uint8_t* SubscribeInfoRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
  if (this->_internal_subscription_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_subscription_action(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.InfoInstrument instruments = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest)
  return target;
}

::size_t SubscribeInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.InfoInstrument instruments = 2;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_internal_instruments()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
  if (this->_internal_subscription_action() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_subscription_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SubscribeInfoRequest::_class_data_ = {
    SubscribeInfoRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SubscribeInfoRequest::GetClassData() const {
  return &_class_data_;
}

void SubscribeInfoRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SubscribeInfoRequest*>(&to_msg);
  auto& from = static_cast<const SubscribeInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  if (from._internal_subscription_action() != 0) {
    _this->_internal_set_subscription_action(from._internal_subscription_action());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeInfoRequest::CopyFrom(const SubscribeInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SubscribeInfoRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SubscribeInfoRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SubscribeInfoRequest::InternalSwap(SubscribeInfoRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
  swap(_impl_.subscription_action_, other->_impl_.subscription_action_);
}

::google::protobuf::Metadata SubscribeInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[15]);
}
// ===================================================================

class InfoInstrument::_Internal {
 public:
};

InfoInstrument::InfoInstrument(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.InfoInstrument)
}
inline PROTOBUF_NDEBUG_INLINE InfoInstrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : figi_(arena, from.figi_),
        instrument_id_(arena, from.instrument_id_),
        _cached_size_{0} {}

InfoInstrument::InfoInstrument(
    ::google::protobuf::Arena* arena,
    const InfoInstrument& from)
    : ::google::protobuf::Message(arena) {
  InfoInstrument* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.InfoInstrument)
}
inline PROTOBUF_NDEBUG_INLINE InfoInstrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : figi_(arena),
        instrument_id_(arena),
        _cached_size_{0} {}

inline void InfoInstrument::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
InfoInstrument::~InfoInstrument() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.InfoInstrument)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InfoInstrument::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void InfoInstrument::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.InfoInstrument)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* InfoInstrument::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 79, 2> InfoInstrument::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_InfoInstrument_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string instrument_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(InfoInstrument, _impl_.instrument_id_)}},
    // string figi = 1 [deprecated = true];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(InfoInstrument, _impl_.figi_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(InfoInstrument, _impl_.figi_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string instrument_id = 2;
    {PROTOBUF_FIELD_OFFSET(InfoInstrument, _impl_.instrument_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\65\4\15\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.InfoInstrument"
    "figi"
    "instrument_id"
  }},
};

::uint8_t* InfoInstrument::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.InfoInstrument)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.InfoInstrument.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string instrument_id = 2;
  if (!this->_internal_instrument_id().empty()) {
    const std::string& _s = this->_internal_instrument_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.InfoInstrument.instrument_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.InfoInstrument)
  return target;
}

::size_t InfoInstrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.InfoInstrument)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string instrument_id = 2;
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData InfoInstrument::_class_data_ = {
    InfoInstrument::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* InfoInstrument::GetClassData() const {
  return &_class_data_;
}

void InfoInstrument::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<InfoInstrument*>(&to_msg);
  auto& from = static_cast<const InfoInstrument&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.InfoInstrument)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InfoInstrument::CopyFrom(const InfoInstrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.InfoInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool InfoInstrument::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* InfoInstrument::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void InfoInstrument::InternalSwap(InfoInstrument* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
}

::google::protobuf::Metadata InfoInstrument::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[16]);
}
// ===================================================================

class SubscribeInfoResponse::_Internal {
 public:
};

SubscribeInfoResponse::SubscribeInfoResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse)
}
inline PROTOBUF_NDEBUG_INLINE SubscribeInfoResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : info_subscriptions_{visibility, arena, from.info_subscriptions_},
        tracking_id_(arena, from.tracking_id_),
        _cached_size_{0} {}

SubscribeInfoResponse::SubscribeInfoResponse(
    ::google::protobuf::Arena* arena,
    const SubscribeInfoResponse& from)
    : ::google::protobuf::Message(arena) {
  SubscribeInfoResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse)
}
inline PROTOBUF_NDEBUG_INLINE SubscribeInfoResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : info_subscriptions_{visibility, arena},
        tracking_id_(arena),
        _cached_size_{0} {}

inline void SubscribeInfoResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SubscribeInfoResponse::~SubscribeInfoResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SubscribeInfoResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.tracking_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SubscribeInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.info_subscriptions_.Clear();
  _impl_.tracking_id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SubscribeInfoResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 80, 2> SubscribeInfoResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SubscribeInfoResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.InfoSubscription info_subscriptions = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SubscribeInfoResponse, _impl_.info_subscriptions_)}},
    // string tracking_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SubscribeInfoResponse, _impl_.tracking_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string tracking_id = 1;
    {PROTOBUF_FIELD_OFFSET(SubscribeInfoResponse, _impl_.tracking_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .tinkoff.public_.invest.api.contract.v1.InfoSubscription info_subscriptions = 2;
    {PROTOBUF_FIELD_OFFSET(SubscribeInfoResponse, _impl_.info_subscriptions_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::InfoSubscription>()},
  }}, {{
    "\74\13\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse"
    "tracking_id"
  }},
};

::uint8_t* SubscribeInfoResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string tracking_id = 1;
  if (!this->_internal_tracking_id().empty()) {
    const std::string& _s = this->_internal_tracking_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse.tracking_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.InfoSubscription info_subscriptions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_info_subscriptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_info_subscriptions().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse)
  return target;
}

::size_t SubscribeInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.InfoSubscription info_subscriptions = 2;
  total_size += 1UL * this->_internal_info_subscriptions_size();
  for (const auto& msg : this->_internal_info_subscriptions()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string tracking_id = 1;
  if (!this->_internal_tracking_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_tracking_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SubscribeInfoResponse::_class_data_ = {
    SubscribeInfoResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SubscribeInfoResponse::GetClassData() const {
  return &_class_data_;
}

void SubscribeInfoResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SubscribeInfoResponse*>(&to_msg);
  auto& from = static_cast<const SubscribeInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_info_subscriptions()->MergeFrom(
      from._internal_info_subscriptions());
  if (!from._internal_tracking_id().empty()) {
    _this->_internal_set_tracking_id(from._internal_tracking_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeInfoResponse::CopyFrom(const SubscribeInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SubscribeInfoResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SubscribeInfoResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SubscribeInfoResponse::InternalSwap(SubscribeInfoResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.info_subscriptions_.InternalSwap(&other->_impl_.info_subscriptions_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tracking_id_, &other->_impl_.tracking_id_, arena);
}

::google::protobuf::Metadata SubscribeInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[17]);
}
// ===================================================================

class InfoSubscription::_Internal {
 public:
};

InfoSubscription::InfoSubscription(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.InfoSubscription)
}
inline PROTOBUF_NDEBUG_INLINE InfoSubscription::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : figi_(arena, from.figi_),
        instrument_uid_(arena, from.instrument_uid_),
        stream_id_(arena, from.stream_id_),
        subscription_id_(arena, from.subscription_id_),
        _cached_size_{0} {}

InfoSubscription::InfoSubscription(
    ::google::protobuf::Arena* arena,
    const InfoSubscription& from)
    : ::google::protobuf::Message(arena) {
  InfoSubscription* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.subscription_status_ = from._impl_.subscription_status_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.InfoSubscription)
}
inline PROTOBUF_NDEBUG_INLINE InfoSubscription::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : figi_(arena),
        instrument_uid_(arena),
        stream_id_(arena),
        subscription_id_(arena),
        _cached_size_{0} {}

inline void InfoSubscription::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.subscription_status_ = {};
}
InfoSubscription::~InfoSubscription() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.InfoSubscription)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InfoSubscription::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
  _impl_.stream_id_.Destroy();
  _impl_.subscription_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void InfoSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.InfoSubscription)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  _impl_.stream_id_.ClearToEmpty();
  _impl_.subscription_id_.ClearToEmpty();
  _impl_.subscription_status_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* InfoSubscription::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 106, 2> InfoSubscription::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_InfoSubscription_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(InfoSubscription, _impl_.figi_)}},
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InfoSubscription, _impl_.subscription_status_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(InfoSubscription, _impl_.subscription_status_)}},
    // string instrument_uid = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(InfoSubscription, _impl_.instrument_uid_)}},
    // string stream_id = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(InfoSubscription, _impl_.stream_id_)}},
    // string subscription_id = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(InfoSubscription, _impl_.subscription_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(InfoSubscription, _impl_.figi_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
    {PROTOBUF_FIELD_OFFSET(InfoSubscription, _impl_.subscription_status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string instrument_uid = 3;
    {PROTOBUF_FIELD_OFFSET(InfoSubscription, _impl_.instrument_uid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string stream_id = 4;
    {PROTOBUF_FIELD_OFFSET(InfoSubscription, _impl_.stream_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string subscription_id = 5;
    {PROTOBUF_FIELD_OFFSET(InfoSubscription, _impl_.subscription_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\67\4\0\16\11\17\0\0"
    "tinkoff.public_.invest.api.contract.v1.InfoSubscription"
    "figi"
    "instrument_uid"
    "stream_id"
    "subscription_id"
  }},
};

::uint8_t* InfoSubscription::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.InfoSubscription)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.InfoSubscription.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
  if (this->_internal_subscription_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_subscription_status(), target);
  }

  // string instrument_uid = 3;
  if (!this->_internal_instrument_uid().empty()) {
    const std::string& _s = this->_internal_instrument_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.InfoSubscription.instrument_uid");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string stream_id = 4;
  if (!this->_internal_stream_id().empty()) {
    const std::string& _s = this->_internal_stream_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.InfoSubscription.stream_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string subscription_id = 5;
  if (!this->_internal_subscription_id().empty()) {
    const std::string& _s = this->_internal_subscription_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.InfoSubscription.subscription_id");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.InfoSubscription)
  return target;
}

::size_t InfoSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.InfoSubscription)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string instrument_uid = 3;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_uid());
  }

  // string stream_id = 4;
  if (!this->_internal_stream_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_stream_id());
  }

  // string subscription_id = 5;
  if (!this->_internal_subscription_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_subscription_id());
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
  if (this->_internal_subscription_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_subscription_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData InfoSubscription::_class_data_ = {
    InfoSubscription::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* InfoSubscription::GetClassData() const {
  return &_class_data_;
}

void InfoSubscription::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<InfoSubscription*>(&to_msg);
  auto& from = static_cast<const InfoSubscription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.InfoSubscription)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (!from._internal_stream_id().empty()) {
    _this->_internal_set_stream_id(from._internal_stream_id());
  }
  if (!from._internal_subscription_id().empty()) {
    _this->_internal_set_subscription_id(from._internal_subscription_id());
  }
  if (from._internal_subscription_status() != 0) {
    _this->_internal_set_subscription_status(from._internal_subscription_status());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InfoSubscription::CopyFrom(const InfoSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.InfoSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool InfoSubscription::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* InfoSubscription::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void InfoSubscription::InternalSwap(InfoSubscription* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_uid_, &other->_impl_.instrument_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.stream_id_, &other->_impl_.stream_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subscription_id_, &other->_impl_.subscription_id_, arena);
  swap(_impl_.subscription_status_, other->_impl_.subscription_status_);
}

::google::protobuf::Metadata InfoSubscription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[18]);
}
// ===================================================================

class SubscribeLastPriceRequest::_Internal {
 public:
};

SubscribeLastPriceRequest::SubscribeLastPriceRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest)
}
inline PROTOBUF_NDEBUG_INLINE SubscribeLastPriceRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : instruments_{visibility, arena, from.instruments_},
        _cached_size_{0} {}

SubscribeLastPriceRequest::SubscribeLastPriceRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeLastPriceRequest& from)
    : ::google::protobuf::Message(arena) {
  SubscribeLastPriceRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.subscription_action_ = from._impl_.subscription_action_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest)
}
inline PROTOBUF_NDEBUG_INLINE SubscribeLastPriceRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        _cached_size_{0} {}

inline void SubscribeLastPriceRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.subscription_action_ = {};
}
SubscribeLastPriceRequest::~SubscribeLastPriceRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SubscribeLastPriceRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SubscribeLastPriceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _impl_.subscription_action_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SubscribeLastPriceRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> SubscribeLastPriceRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SubscribeLastPriceRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.LastPriceInstrument instruments = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SubscribeLastPriceRequest, _impl_.instruments_)}},
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SubscribeLastPriceRequest, _impl_.subscription_action_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SubscribeLastPriceRequest, _impl_.subscription_action_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
    {PROTOBUF_FIELD_OFFSET(SubscribeLastPriceRequest, _impl_.subscription_action_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated .tinkoff.public_.invest.api.contract.v1.LastPriceInstrument instruments = 2;
    {PROTOBUF_FIELD_OFFSET(SubscribeLastPriceRequest, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::LastPriceInstrument>()},
  }}, {{
  }},
};

::uint8_t* SubscribeLastPriceRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
  if (this->_internal_subscription_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_subscription_action(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.LastPriceInstrument instruments = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest)
  return target;
}

::size_t SubscribeLastPriceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.LastPriceInstrument instruments = 2;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_internal_instruments()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .tinkoff.public_.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
  if (this->_internal_subscription_action() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_subscription_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SubscribeLastPriceRequest::_class_data_ = {
    SubscribeLastPriceRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SubscribeLastPriceRequest::GetClassData() const {
  return &_class_data_;
}

void SubscribeLastPriceRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SubscribeLastPriceRequest*>(&to_msg);
  auto& from = static_cast<const SubscribeLastPriceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  if (from._internal_subscription_action() != 0) {
    _this->_internal_set_subscription_action(from._internal_subscription_action());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeLastPriceRequest::CopyFrom(const SubscribeLastPriceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SubscribeLastPriceRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SubscribeLastPriceRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SubscribeLastPriceRequest::InternalSwap(SubscribeLastPriceRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
  swap(_impl_.subscription_action_, other->_impl_.subscription_action_);
}

::google::protobuf::Metadata SubscribeLastPriceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[19]);
}
// ===================================================================

class LastPriceInstrument::_Internal {
 public:
};

LastPriceInstrument::LastPriceInstrument(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.LastPriceInstrument)
}
inline PROTOBUF_NDEBUG_INLINE LastPriceInstrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : figi_(arena, from.figi_),
        instrument_id_(arena, from.instrument_id_),
        _cached_size_{0} {}

LastPriceInstrument::LastPriceInstrument(
    ::google::protobuf::Arena* arena,
    const LastPriceInstrument& from)
    : ::google::protobuf::Message(arena) {
  LastPriceInstrument* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.LastPriceInstrument)
}
inline PROTOBUF_NDEBUG_INLINE LastPriceInstrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : figi_(arena),
        instrument_id_(arena),
        _cached_size_{0} {}

inline void LastPriceInstrument::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
LastPriceInstrument::~LastPriceInstrument() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.LastPriceInstrument)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LastPriceInstrument::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LastPriceInstrument::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.LastPriceInstrument)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LastPriceInstrument::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 84, 2> LastPriceInstrument::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_LastPriceInstrument_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string instrument_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(LastPriceInstrument, _impl_.instrument_id_)}},
    // string figi = 1 [deprecated = true];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(LastPriceInstrument, _impl_.figi_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(LastPriceInstrument, _impl_.figi_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string instrument_id = 2;
    {PROTOBUF_FIELD_OFFSET(LastPriceInstrument, _impl_.instrument_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\72\4\15\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.LastPriceInstrument"
    "figi"
    "instrument_id"
  }},
};

::uint8_t* LastPriceInstrument::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.LastPriceInstrument)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.LastPriceInstrument.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string instrument_id = 2;
  if (!this->_internal_instrument_id().empty()) {
    const std::string& _s = this->_internal_instrument_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.LastPriceInstrument.instrument_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.LastPriceInstrument)
  return target;
}

::size_t LastPriceInstrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.LastPriceInstrument)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1 [deprecated = true];
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string instrument_id = 2;
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LastPriceInstrument::_class_data_ = {
    LastPriceInstrument::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LastPriceInstrument::GetClassData() const {
  return &_class_data_;
}

void LastPriceInstrument::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LastPriceInstrument*>(&to_msg);
  auto& from = static_cast<const LastPriceInstrument&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.LastPriceInstrument)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LastPriceInstrument::CopyFrom(const LastPriceInstrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.LastPriceInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LastPriceInstrument::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LastPriceInstrument::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LastPriceInstrument::InternalSwap(LastPriceInstrument* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
}

::google::protobuf::Metadata LastPriceInstrument::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[20]);
}
// ===================================================================

class SubscribeLastPriceResponse::_Internal {
 public:
};

SubscribeLastPriceResponse::SubscribeLastPriceResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse)
}
inline PROTOBUF_NDEBUG_INLINE SubscribeLastPriceResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : last_price_subscriptions_{visibility, arena, from.last_price_subscriptions_},
        tracking_id_(arena, from.tracking_id_),
        _cached_size_{0} {}

SubscribeLastPriceResponse::SubscribeLastPriceResponse(
    ::google::protobuf::Arena* arena,
    const SubscribeLastPriceResponse& from)
    : ::google::protobuf::Message(arena) {
  SubscribeLastPriceResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse)
}
inline PROTOBUF_NDEBUG_INLINE SubscribeLastPriceResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : last_price_subscriptions_{visibility, arena},
        tracking_id_(arena),
        _cached_size_{0} {}

inline void SubscribeLastPriceResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SubscribeLastPriceResponse::~SubscribeLastPriceResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SubscribeLastPriceResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.tracking_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SubscribeLastPriceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.last_price_subscriptions_.Clear();
  _impl_.tracking_id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SubscribeLastPriceResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 85, 2> SubscribeLastPriceResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SubscribeLastPriceResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.LastPriceSubscription last_price_subscriptions = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SubscribeLastPriceResponse, _impl_.last_price_subscriptions_)}},
    // string tracking_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SubscribeLastPriceResponse, _impl_.tracking_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string tracking_id = 1;
    {PROTOBUF_FIELD_OFFSET(SubscribeLastPriceResponse, _impl_.tracking_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .tinkoff.public_.invest.api.contract.v1.LastPriceSubscription last_price_subscriptions = 2;
    {PROTOBUF_FIELD_OFFSET(SubscribeLastPriceResponse, _impl_.last_price_subscriptions_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::LastPriceSubscription>()},
  }}, {{
    "\101\13\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse"
    "tracking_id"
  }},
};

::uint8_t* SubscribeLastPriceResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string tracking_id = 1;
  if (!this->_internal_tracking_id().empty()) {
    const std::string& _s = this->_internal_tracking_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse.tracking_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.LastPriceSubscription last_price_subscriptions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_last_price_subscriptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_last_price_subscriptions().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse)
  return target;
}

::size_t SubscribeLastPriceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.LastPriceSubscription last_price_subscriptions = 2;
  total_size += 1UL * this->_internal_last_price_subscriptions_size();
  for (const auto& msg : this->_internal_last_price_subscriptions()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string tracking_id = 1;
  if (!this->_internal_tracking_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_tracking_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SubscribeLastPriceResponse::_class_data_ = {
    SubscribeLastPriceResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SubscribeLastPriceResponse::GetClassData() const {
  return &_class_data_;
}

void SubscribeLastPriceResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SubscribeLastPriceResponse*>(&to_msg);
  auto& from = static_cast<const SubscribeLastPriceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_last_price_subscriptions()->MergeFrom(
      from._internal_last_price_subscriptions());
  if (!from._internal_tracking_id().empty()) {
    _this->_internal_set_tracking_id(from._internal_tracking_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeLastPriceResponse::CopyFrom(const SubscribeLastPriceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.SubscribeLastPriceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SubscribeLastPriceResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SubscribeLastPriceResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SubscribeLastPriceResponse::InternalSwap(SubscribeLastPriceResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.last_price_subscriptions_.InternalSwap(&other->_impl_.last_price_subscriptions_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tracking_id_, &other->_impl_.tracking_id_, arena);
}

::google::protobuf::Metadata SubscribeLastPriceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[21]);
}
// ===================================================================

class LastPriceSubscription::_Internal {
 public:
};

LastPriceSubscription::LastPriceSubscription(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.LastPriceSubscription)
}
inline PROTOBUF_NDEBUG_INLINE LastPriceSubscription::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : figi_(arena, from.figi_),
        instrument_uid_(arena, from.instrument_uid_),
        stream_id_(arena, from.stream_id_),
        subscription_id_(arena, from.subscription_id_),
        _cached_size_{0} {}

LastPriceSubscription::LastPriceSubscription(
    ::google::protobuf::Arena* arena,
    const LastPriceSubscription& from)
    : ::google::protobuf::Message(arena) {
  LastPriceSubscription* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.subscription_status_ = from._impl_.subscription_status_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.LastPriceSubscription)
}
inline PROTOBUF_NDEBUG_INLINE LastPriceSubscription::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : figi_(arena),
        instrument_uid_(arena),
        stream_id_(arena),
        subscription_id_(arena),
        _cached_size_{0} {}

inline void LastPriceSubscription::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.subscription_status_ = {};
}
LastPriceSubscription::~LastPriceSubscription() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.LastPriceSubscription)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LastPriceSubscription::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
  _impl_.stream_id_.Destroy();
  _impl_.subscription_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LastPriceSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.LastPriceSubscription)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  _impl_.stream_id_.ClearToEmpty();
  _impl_.subscription_id_.ClearToEmpty();
  _impl_.subscription_status_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LastPriceSubscription::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 111, 2> LastPriceSubscription::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_LastPriceSubscription_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(LastPriceSubscription, _impl_.figi_)}},
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LastPriceSubscription, _impl_.subscription_status_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(LastPriceSubscription, _impl_.subscription_status_)}},
    // string instrument_uid = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(LastPriceSubscription, _impl_.instrument_uid_)}},
    // string stream_id = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(LastPriceSubscription, _impl_.stream_id_)}},
    // string subscription_id = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(LastPriceSubscription, _impl_.subscription_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(LastPriceSubscription, _impl_.figi_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
    {PROTOBUF_FIELD_OFFSET(LastPriceSubscription, _impl_.subscription_status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string instrument_uid = 3;
    {PROTOBUF_FIELD_OFFSET(LastPriceSubscription, _impl_.instrument_uid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string stream_id = 4;
    {PROTOBUF_FIELD_OFFSET(LastPriceSubscription, _impl_.stream_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string subscription_id = 5;
    {PROTOBUF_FIELD_OFFSET(LastPriceSubscription, _impl_.subscription_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\74\4\0\16\11\17\0\0"
    "tinkoff.public_.invest.api.contract.v1.LastPriceSubscription"
    "figi"
    "instrument_uid"
    "stream_id"
    "subscription_id"
  }},
};

::uint8_t* LastPriceSubscription::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.LastPriceSubscription)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.LastPriceSubscription.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
  if (this->_internal_subscription_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_subscription_status(), target);
  }

  // string instrument_uid = 3;
  if (!this->_internal_instrument_uid().empty()) {
    const std::string& _s = this->_internal_instrument_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.LastPriceSubscription.instrument_uid");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string stream_id = 4;
  if (!this->_internal_stream_id().empty()) {
    const std::string& _s = this->_internal_stream_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.LastPriceSubscription.stream_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string subscription_id = 5;
  if (!this->_internal_subscription_id().empty()) {
    const std::string& _s = this->_internal_subscription_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.LastPriceSubscription.subscription_id");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.LastPriceSubscription)
  return target;
}

::size_t LastPriceSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.LastPriceSubscription)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string instrument_uid = 3;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_uid());
  }

  // string stream_id = 4;
  if (!this->_internal_stream_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_stream_id());
  }

  // string subscription_id = 5;
  if (!this->_internal_subscription_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_subscription_id());
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
  if (this->_internal_subscription_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_subscription_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LastPriceSubscription::_class_data_ = {
    LastPriceSubscription::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LastPriceSubscription::GetClassData() const {
  return &_class_data_;
}

void LastPriceSubscription::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LastPriceSubscription*>(&to_msg);
  auto& from = static_cast<const LastPriceSubscription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.LastPriceSubscription)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (!from._internal_stream_id().empty()) {
    _this->_internal_set_stream_id(from._internal_stream_id());
  }
  if (!from._internal_subscription_id().empty()) {
    _this->_internal_set_subscription_id(from._internal_subscription_id());
  }
  if (from._internal_subscription_status() != 0) {
    _this->_internal_set_subscription_status(from._internal_subscription_status());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LastPriceSubscription::CopyFrom(const LastPriceSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.LastPriceSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LastPriceSubscription::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LastPriceSubscription::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LastPriceSubscription::InternalSwap(LastPriceSubscription* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_uid_, &other->_impl_.instrument_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.stream_id_, &other->_impl_.stream_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subscription_id_, &other->_impl_.subscription_id_, arena);
  swap(_impl_.subscription_status_, other->_impl_.subscription_status_);
}

::google::protobuf::Metadata LastPriceSubscription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[22]);
}
// ===================================================================

class Candle::_Internal {
 public:
  using HasBits = decltype(std::declval<Candle>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Candle, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& open(const Candle* msg);
  static void set_has_open(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& high(const Candle* msg);
  static void set_has_high(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& low(const Candle* msg);
  static void set_has_low(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& close(const Candle* msg);
  static void set_has_close(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::google::protobuf::Timestamp& time(const Candle* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::google::protobuf::Timestamp& last_trade_ts(const Candle* msg);
  static void set_has_last_trade_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation& Candle::_Internal::open(const Candle* msg) {
  return *msg->_impl_.open_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Candle::_Internal::high(const Candle* msg) {
  return *msg->_impl_.high_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Candle::_Internal::low(const Candle* msg) {
  return *msg->_impl_.low_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& Candle::_Internal::close(const Candle* msg) {
  return *msg->_impl_.close_;
}
const ::google::protobuf::Timestamp& Candle::_Internal::time(const Candle* msg) {
  return *msg->_impl_.time_;
}
const ::google::protobuf::Timestamp& Candle::_Internal::last_trade_ts(const Candle* msg) {
  return *msg->_impl_.last_trade_ts_;
}
void Candle::clear_open() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.open_ != nullptr) _impl_.open_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Candle::clear_high() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.high_ != nullptr) _impl_.high_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Candle::clear_low() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.low_ != nullptr) _impl_.low_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Candle::clear_close() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.close_ != nullptr) _impl_.close_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Candle::clear_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Candle::clear_last_trade_ts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.last_trade_ts_ != nullptr) _impl_.last_trade_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
Candle::Candle(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Candle)
}
inline PROTOBUF_NDEBUG_INLINE Candle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        instrument_uid_(arena, from.instrument_uid_) {}

Candle::Candle(
    ::google::protobuf::Arena* arena,
    const Candle& from)
    : ::google::protobuf::Message(arena) {
  Candle* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.open_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.open_)
                : nullptr;
  _impl_.high_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.high_)
                : nullptr;
  _impl_.low_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.low_)
                : nullptr;
  _impl_.close_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.close_)
                : nullptr;
  _impl_.time_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.time_)
                : nullptr;
  _impl_.last_trade_ts_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.last_trade_ts_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, volume_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, volume_),
           offsetof(Impl_, interval_) -
               offsetof(Impl_, volume_) +
               sizeof(Impl_::interval_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Candle)
}
inline PROTOBUF_NDEBUG_INLINE Candle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        instrument_uid_(arena) {}

inline void Candle::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, open_),
           0,
           offsetof(Impl_, interval_) -
               offsetof(Impl_, open_) +
               sizeof(Impl_::interval_));
}
Candle::~Candle() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Candle)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Candle::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
  delete _impl_.open_;
  delete _impl_.high_;
  delete _impl_.low_;
  delete _impl_.close_;
  delete _impl_.time_;
  delete _impl_.last_trade_ts_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Candle::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Candle)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.open_ != nullptr);
      _impl_.open_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.high_ != nullptr);
      _impl_.high_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.low_ != nullptr);
      _impl_.low_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.close_ != nullptr);
      _impl_.close_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.last_trade_ts_ != nullptr);
      _impl_.last_trade_ts_->Clear();
    }
  }
  ::memset(&_impl_.volume_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.interval_) -
      reinterpret_cast<char*>(&_impl_.volume_)) + sizeof(_impl_.interval_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Candle::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 6, 80, 2> Candle::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Candle, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Candle_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Candle, _impl_.figi_)}},
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionInterval interval = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Candle, _impl_.interval_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Candle, _impl_.interval_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation open = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(Candle, _impl_.open_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation high = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(Candle, _impl_.high_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation low = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(Candle, _impl_.low_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation close = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 3, 3, PROTOBUF_FIELD_OFFSET(Candle, _impl_.close_)}},
    // int64 volume = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Candle, _impl_.volume_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Candle, _impl_.volume_)}},
    // .google.protobuf.Timestamp time = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 4, 4, PROTOBUF_FIELD_OFFSET(Candle, _impl_.time_)}},
    // .google.protobuf.Timestamp last_trade_ts = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 5, 5, PROTOBUF_FIELD_OFFSET(Candle, _impl_.last_trade_ts_)}},
    // string instrument_uid = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(Candle, _impl_.instrument_uid_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(Candle, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.SubscriptionInterval interval = 2;
    {PROTOBUF_FIELD_OFFSET(Candle, _impl_.interval_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation open = 3;
    {PROTOBUF_FIELD_OFFSET(Candle, _impl_.open_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation high = 4;
    {PROTOBUF_FIELD_OFFSET(Candle, _impl_.high_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation low = 5;
    {PROTOBUF_FIELD_OFFSET(Candle, _impl_.low_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation close = 6;
    {PROTOBUF_FIELD_OFFSET(Candle, _impl_.close_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 volume = 7;
    {PROTOBUF_FIELD_OFFSET(Candle, _impl_.volume_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .google.protobuf.Timestamp time = 8;
    {PROTOBUF_FIELD_OFFSET(Candle, _impl_.time_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp last_trade_ts = 9;
    {PROTOBUF_FIELD_OFFSET(Candle, _impl_.last_trade_ts_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string instrument_uid = 10;
    {PROTOBUF_FIELD_OFFSET(Candle, _impl_.instrument_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\55\4\0\0\0\0\0\0\0\0\16\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.Candle"
    "figi"
    "instrument_uid"
  }},
};

::uint8_t* Candle::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Candle)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Candle.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionInterval interval = 2;
  if (this->_internal_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_interval(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Quotation open = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::open(this),
        _Internal::open(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation high = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::high(this),
        _Internal::high(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation low = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::low(this),
        _Internal::low(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation close = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::close(this),
        _Internal::close(this).GetCachedSize(), target, stream);
  }

  // int64 volume = 7;
  if (this->_internal_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<7>(
            stream, this->_internal_volume(), target);
  }

  // .google.protobuf.Timestamp time = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_trade_ts = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::last_trade_ts(this),
        _Internal::last_trade_ts(this).GetCachedSize(), target, stream);
  }

  // string instrument_uid = 10;
  if (!this->_internal_instrument_uid().empty()) {
    const std::string& _s = this->_internal_instrument_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Candle.instrument_uid");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Candle)
  return target;
}

::size_t Candle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Candle)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string instrument_uid = 10;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_uid());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // .tinkoff.public_.invest.api.contract.v1.Quotation open = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.open_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation high = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.high_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation low = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.low_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation close = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.close_);
    }

    // .google.protobuf.Timestamp time = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.time_);
    }

    // .google.protobuf.Timestamp last_trade_ts = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.last_trade_ts_);
    }

  }
  // int64 volume = 7;
  if (this->_internal_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_volume());
  }

  // .tinkoff.public_.invest.api.contract.v1.SubscriptionInterval interval = 2;
  if (this->_internal_interval() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_interval());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Candle::_class_data_ = {
    Candle::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Candle::GetClassData() const {
  return &_class_data_;
}

void Candle::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Candle*>(&to_msg);
  auto& from = static_cast<const Candle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Candle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_open()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_open());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_high()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_high());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_low()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_low());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_close()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_close());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_time());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_last_trade_ts()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_last_trade_ts());
    }
  }
  if (from._internal_volume() != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  if (from._internal_interval() != 0) {
    _this->_internal_set_interval(from._internal_interval());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Candle::CopyFrom(const Candle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Candle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Candle::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Candle::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Candle::InternalSwap(Candle* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_uid_, &other->_impl_.instrument_uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Candle, _impl_.interval_)
      + sizeof(Candle::_impl_.interval_)
      - PROTOBUF_FIELD_OFFSET(Candle, _impl_.open_)>(
          reinterpret_cast<char*>(&_impl_.open_),
          reinterpret_cast<char*>(&other->_impl_.open_));
}

::google::protobuf::Metadata Candle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[23]);
}
// ===================================================================

class OrderBook::_Internal {
 public:
  using HasBits = decltype(std::declval<OrderBook>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OrderBook, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& time(const OrderBook* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& limit_up(const OrderBook* msg);
  static void set_has_limit_up(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& limit_down(const OrderBook* msg);
  static void set_has_limit_down(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::google::protobuf::Timestamp& OrderBook::_Internal::time(const OrderBook* msg) {
  return *msg->_impl_.time_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& OrderBook::_Internal::limit_up(const OrderBook* msg) {
  return *msg->_impl_.limit_up_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& OrderBook::_Internal::limit_down(const OrderBook* msg) {
  return *msg->_impl_.limit_down_;
}
void OrderBook::clear_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void OrderBook::clear_limit_up() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.limit_up_ != nullptr) _impl_.limit_up_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void OrderBook::clear_limit_down() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.limit_down_ != nullptr) _impl_.limit_down_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
OrderBook::OrderBook(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.OrderBook)
}
inline PROTOBUF_NDEBUG_INLINE OrderBook::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        bids_{visibility, arena, from.bids_},
        asks_{visibility, arena, from.asks_},
        figi_(arena, from.figi_),
        instrument_uid_(arena, from.instrument_uid_) {}

OrderBook::OrderBook(
    ::google::protobuf::Arena* arena,
    const OrderBook& from)
    : ::google::protobuf::Message(arena) {
  OrderBook* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.time_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.time_)
                : nullptr;
  _impl_.limit_up_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.limit_up_)
                : nullptr;
  _impl_.limit_down_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.limit_down_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, depth_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, depth_),
           offsetof(Impl_, order_book_type_) -
               offsetof(Impl_, depth_) +
               sizeof(Impl_::order_book_type_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.OrderBook)
}
inline PROTOBUF_NDEBUG_INLINE OrderBook::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        bids_{visibility, arena},
        asks_{visibility, arena},
        figi_(arena),
        instrument_uid_(arena) {}

inline void OrderBook::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, time_),
           0,
           offsetof(Impl_, order_book_type_) -
               offsetof(Impl_, time_) +
               sizeof(Impl_::order_book_type_));
}
OrderBook::~OrderBook() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.OrderBook)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OrderBook::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
  delete _impl_.time_;
  delete _impl_.limit_up_;
  delete _impl_.limit_down_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void OrderBook::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.OrderBook)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bids_.Clear();
  _impl_.asks_.Clear();
  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.limit_up_ != nullptr);
      _impl_.limit_up_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.limit_down_ != nullptr);
      _impl_.limit_down_->Clear();
    }
  }
  ::memset(&_impl_.depth_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.order_book_type_) -
      reinterpret_cast<char*>(&_impl_.depth_)) + sizeof(_impl_.order_book_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* OrderBook::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 5, 83, 2> OrderBook::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(OrderBook, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_OrderBook_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBook, _impl_.figi_)}},
    // int32 depth = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OrderBook, _impl_.depth_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBook, _impl_.depth_)}},
    // bool is_consistent = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(OrderBook, _impl_.is_consistent_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBook, _impl_.is_consistent_)}},
    // repeated .tinkoff.public_.invest.api.contract.v1.Order bids = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBook, _impl_.bids_)}},
    // repeated .tinkoff.public_.invest.api.contract.v1.Order asks = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 1, PROTOBUF_FIELD_OFFSET(OrderBook, _impl_.asks_)}},
    // .google.protobuf.Timestamp time = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 2, PROTOBUF_FIELD_OFFSET(OrderBook, _impl_.time_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation limit_up = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 3, PROTOBUF_FIELD_OFFSET(OrderBook, _impl_.limit_up_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation limit_down = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 2, 4, PROTOBUF_FIELD_OFFSET(OrderBook, _impl_.limit_down_)}},
    // string instrument_uid = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBook, _impl_.instrument_uid_)}},
    // .tinkoff.public_.invest.api.contract.v1.OrderBookType order_book_type = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OrderBook, _impl_.order_book_type_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBook, _impl_.order_book_type_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(OrderBook, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 depth = 2;
    {PROTOBUF_FIELD_OFFSET(OrderBook, _impl_.depth_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool is_consistent = 3;
    {PROTOBUF_FIELD_OFFSET(OrderBook, _impl_.is_consistent_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated .tinkoff.public_.invest.api.contract.v1.Order bids = 4;
    {PROTOBUF_FIELD_OFFSET(OrderBook, _impl_.bids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .tinkoff.public_.invest.api.contract.v1.Order asks = 5;
    {PROTOBUF_FIELD_OFFSET(OrderBook, _impl_.asks_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp time = 6;
    {PROTOBUF_FIELD_OFFSET(OrderBook, _impl_.time_), _Internal::kHasBitsOffset + 0, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation limit_up = 7;
    {PROTOBUF_FIELD_OFFSET(OrderBook, _impl_.limit_up_), _Internal::kHasBitsOffset + 1, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation limit_down = 8;
    {PROTOBUF_FIELD_OFFSET(OrderBook, _impl_.limit_down_), _Internal::kHasBitsOffset + 2, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string instrument_uid = 9;
    {PROTOBUF_FIELD_OFFSET(OrderBook, _impl_.instrument_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.OrderBookType order_book_type = 10;
    {PROTOBUF_FIELD_OFFSET(OrderBook, _impl_.order_book_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Order>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Order>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
    "\60\4\0\0\0\0\0\0\0\16\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.OrderBook"
    "figi"
    "instrument_uid"
  }},
};

::uint8_t* OrderBook::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.OrderBook)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.OrderBook.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 depth = 2;
  if (this->_internal_depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_depth(), target);
  }

  // bool is_consistent = 3;
  if (this->_internal_is_consistent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_is_consistent(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.Order bids = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bids_size()); i < n; i++) {
    const auto& repfield = this->_internal_bids().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.Order asks = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_asks_size()); i < n; i++) {
    const auto& repfield = this->_internal_asks().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp time = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation limit_up = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::limit_up(this),
        _Internal::limit_up(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation limit_down = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::limit_down(this),
        _Internal::limit_down(this).GetCachedSize(), target, stream);
  }

  // string instrument_uid = 9;
  if (!this->_internal_instrument_uid().empty()) {
    const std::string& _s = this->_internal_instrument_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.OrderBook.instrument_uid");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderBookType order_book_type = 10;
  if (this->_internal_order_book_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_order_book_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.OrderBook)
  return target;
}

::size_t OrderBook::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.OrderBook)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Order bids = 4;
  total_size += 1UL * this->_internal_bids_size();
  for (const auto& msg : this->_internal_bids()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .tinkoff.public_.invest.api.contract.v1.Order asks = 5;
  total_size += 1UL * this->_internal_asks_size();
  for (const auto& msg : this->_internal_asks()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string instrument_uid = 9;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_uid());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .google.protobuf.Timestamp time = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.time_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation limit_up = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.limit_up_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation limit_down = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.limit_down_);
    }

  }
  // int32 depth = 2;
  if (this->_internal_depth() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_depth());
  }

  // bool is_consistent = 3;
  if (this->_internal_is_consistent() != 0) {
    total_size += 2;
  }

  // .tinkoff.public_.invest.api.contract.v1.OrderBookType order_book_type = 10;
  if (this->_internal_order_book_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_order_book_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData OrderBook::_class_data_ = {
    OrderBook::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* OrderBook::GetClassData() const {
  return &_class_data_;
}

void OrderBook::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<OrderBook*>(&to_msg);
  auto& from = static_cast<const OrderBook&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.OrderBook)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_bids()->MergeFrom(
      from._internal_bids());
  _this->_internal_mutable_asks()->MergeFrom(
      from._internal_asks());
  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_time());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_limit_up()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_limit_up());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_limit_down()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_limit_down());
    }
  }
  if (from._internal_depth() != 0) {
    _this->_internal_set_depth(from._internal_depth());
  }
  if (from._internal_is_consistent() != 0) {
    _this->_internal_set_is_consistent(from._internal_is_consistent());
  }
  if (from._internal_order_book_type() != 0) {
    _this->_internal_set_order_book_type(from._internal_order_book_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OrderBook::CopyFrom(const OrderBook& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.OrderBook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool OrderBook::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* OrderBook::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void OrderBook::InternalSwap(OrderBook* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.bids_.InternalSwap(&other->_impl_.bids_);
  _impl_.asks_.InternalSwap(&other->_impl_.asks_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_uid_, &other->_impl_.instrument_uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderBook, _impl_.order_book_type_)
      + sizeof(OrderBook::_impl_.order_book_type_)
      - PROTOBUF_FIELD_OFFSET(OrderBook, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::google::protobuf::Metadata OrderBook::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[24]);
}
// ===================================================================

class Order::_Internal {
 public:
  using HasBits = decltype(std::declval<Order>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Order, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& price(const Order* msg);
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation& Order::_Internal::price(const Order* msg) {
  return *msg->_impl_.price_;
}
void Order::clear_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.price_ != nullptr) _impl_.price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Order::Order(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Order)
}
inline PROTOBUF_NDEBUG_INLINE Order::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Order::Order(
    ::google::protobuf::Arena* arena,
    const Order& from)
    : ::google::protobuf::Message(arena) {
  Order* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.price_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.price_)
                : nullptr;
  _impl_.quantity_ = from._impl_.quantity_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Order)
}
inline PROTOBUF_NDEBUG_INLINE Order::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Order::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, price_),
           0,
           offsetof(Impl_, quantity_) -
               offsetof(Impl_, price_) +
               sizeof(Impl_::quantity_));
}
Order::~Order() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Order)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Order::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.price_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Order::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Order)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.price_ != nullptr);
    _impl_.price_->Clear();
  }
  _impl_.quantity_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Order::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> Order::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Order, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Order_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int64 quantity = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Order, _impl_.quantity_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.quantity_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation price = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.price_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.Quotation price = 1;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.price_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 quantity = 2;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.quantity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
  }},
};

::uint8_t* Order::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Order)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Quotation price = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // int64 quantity = 2;
  if (this->_internal_quantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Order)
  return target;
}

::size_t Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Order)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Quotation price = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.price_);
  }

  // int64 quantity = 2;
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_quantity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Order::_class_data_ = {
    Order::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Order::GetClassData() const {
  return &_class_data_;
}

void Order::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Order*>(&to_msg);
  auto& from = static_cast<const Order&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Order)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_price());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Order::CopyFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Order::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Order::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Order::InternalSwap(Order* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Order, _impl_.quantity_)
      + sizeof(Order::_impl_.quantity_)
      - PROTOBUF_FIELD_OFFSET(Order, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::google::protobuf::Metadata Order::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[25]);
}
// ===================================================================

class Trade::_Internal {
 public:
  using HasBits = decltype(std::declval<Trade>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Trade, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& price(const Trade* msg);
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Timestamp& time(const Trade* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation& Trade::_Internal::price(const Trade* msg) {
  return *msg->_impl_.price_;
}
const ::google::protobuf::Timestamp& Trade::_Internal::time(const Trade* msg) {
  return *msg->_impl_.time_;
}
void Trade::clear_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.price_ != nullptr) _impl_.price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Trade::clear_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Trade::Trade(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Trade)
}
inline PROTOBUF_NDEBUG_INLINE Trade::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        instrument_uid_(arena, from.instrument_uid_) {}

Trade::Trade(
    ::google::protobuf::Arena* arena,
    const Trade& from)
    : ::google::protobuf::Message(arena) {
  Trade* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.price_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.price_)
                : nullptr;
  _impl_.time_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.time_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, quantity_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, quantity_),
           offsetof(Impl_, direction_) -
               offsetof(Impl_, quantity_) +
               sizeof(Impl_::direction_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Trade)
}
inline PROTOBUF_NDEBUG_INLINE Trade::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        instrument_uid_(arena) {}

inline void Trade::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, price_),
           0,
           offsetof(Impl_, direction_) -
               offsetof(Impl_, price_) +
               sizeof(Impl_::direction_));
}
Trade::~Trade() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Trade)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Trade::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
  delete _impl_.price_;
  delete _impl_.time_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Trade::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Trade)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.price_ != nullptr);
      _impl_.price_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
  }
  ::memset(&_impl_.quantity_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.direction_) -
      reinterpret_cast<char*>(&_impl_.quantity_)) + sizeof(_impl_.direction_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Trade::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 2, 71, 2> Trade::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Trade, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Trade_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Trade, _impl_.figi_)}},
    // .tinkoff.public_.invest.api.contract.v1.TradeDirection direction = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Trade, _impl_.direction_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Trade, _impl_.direction_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(Trade, _impl_.price_)}},
    // int64 quantity = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Trade, _impl_.quantity_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Trade, _impl_.quantity_)}},
    // .google.protobuf.Timestamp time = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 1, PROTOBUF_FIELD_OFFSET(Trade, _impl_.time_)}},
    // string instrument_uid = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Trade, _impl_.instrument_uid_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(Trade, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.TradeDirection direction = 2;
    {PROTOBUF_FIELD_OFFSET(Trade, _impl_.direction_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
    {PROTOBUF_FIELD_OFFSET(Trade, _impl_.price_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 quantity = 4;
    {PROTOBUF_FIELD_OFFSET(Trade, _impl_.quantity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .google.protobuf.Timestamp time = 5;
    {PROTOBUF_FIELD_OFFSET(Trade, _impl_.time_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string instrument_uid = 6;
    {PROTOBUF_FIELD_OFFSET(Trade, _impl_.instrument_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\54\4\0\0\0\0\16\0"
    "tinkoff.public_.invest.api.contract.v1.Trade"
    "figi"
    "instrument_uid"
  }},
};

::uint8_t* Trade::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Trade)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Trade.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.TradeDirection direction = 2;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_direction(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // int64 quantity = 4;
  if (this->_internal_quantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<4>(
            stream, this->_internal_quantity(), target);
  }

  // .google.protobuf.Timestamp time = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // string instrument_uid = 6;
  if (!this->_internal_instrument_uid().empty()) {
    const std::string& _s = this->_internal_instrument_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.Trade.instrument_uid");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Trade)
  return target;
}

::size_t Trade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Trade)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string instrument_uid = 6;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_uid());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .tinkoff.public_.invest.api.contract.v1.Quotation price = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.price_);
    }

    // .google.protobuf.Timestamp time = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.time_);
    }

  }
  // int64 quantity = 4;
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_quantity());
  }

  // .tinkoff.public_.invest.api.contract.v1.TradeDirection direction = 2;
  if (this->_internal_direction() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Trade::_class_data_ = {
    Trade::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Trade::GetClassData() const {
  return &_class_data_;
}

void Trade::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Trade*>(&to_msg);
  auto& from = static_cast<const Trade&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Trade)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_price());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_time());
    }
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  if (from._internal_direction() != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Trade::CopyFrom(const Trade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Trade::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Trade::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Trade::InternalSwap(Trade* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_uid_, &other->_impl_.instrument_uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trade, _impl_.direction_)
      + sizeof(Trade::_impl_.direction_)
      - PROTOBUF_FIELD_OFFSET(Trade, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::google::protobuf::Metadata Trade::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[26]);
}
// ===================================================================

class TradingStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<TradingStatus>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TradingStatus, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& time(const TradingStatus* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::protobuf::Timestamp& TradingStatus::_Internal::time(const TradingStatus* msg) {
  return *msg->_impl_.time_;
}
void TradingStatus::clear_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TradingStatus::TradingStatus(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.TradingStatus)
}
inline PROTOBUF_NDEBUG_INLINE TradingStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        instrument_uid_(arena, from.instrument_uid_) {}

TradingStatus::TradingStatus(
    ::google::protobuf::Arena* arena,
    const TradingStatus& from)
    : ::google::protobuf::Message(arena) {
  TradingStatus* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.time_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.time_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, trading_status_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, trading_status_),
           offsetof(Impl_, market_order_available_flag_) -
               offsetof(Impl_, trading_status_) +
               sizeof(Impl_::market_order_available_flag_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.TradingStatus)
}
inline PROTOBUF_NDEBUG_INLINE TradingStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        instrument_uid_(arena) {}

inline void TradingStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, time_),
           0,
           offsetof(Impl_, market_order_available_flag_) -
               offsetof(Impl_, time_) +
               sizeof(Impl_::market_order_available_flag_));
}
TradingStatus::~TradingStatus() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.TradingStatus)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TradingStatus::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
  delete _impl_.time_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TradingStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.TradingStatus)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.time_ != nullptr);
    _impl_.time_->Clear();
  }
  ::memset(&_impl_.trading_status_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.market_order_available_flag_) -
      reinterpret_cast<char*>(&_impl_.trading_status_)) + sizeof(_impl_.market_order_available_flag_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TradingStatus::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 79, 2> TradingStatus::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TradingStatus, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TradingStatus_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TradingStatus, _impl_.figi_)}},
    // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TradingStatus, _impl_.trading_status_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TradingStatus, _impl_.trading_status_)}},
    // .google.protobuf.Timestamp time = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(TradingStatus, _impl_.time_)}},
    // bool limit_order_available_flag = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TradingStatus, _impl_.limit_order_available_flag_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TradingStatus, _impl_.limit_order_available_flag_)}},
    // bool market_order_available_flag = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TradingStatus, _impl_.market_order_available_flag_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(TradingStatus, _impl_.market_order_available_flag_)}},
    // string instrument_uid = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(TradingStatus, _impl_.instrument_uid_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(TradingStatus, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 2;
    {PROTOBUF_FIELD_OFFSET(TradingStatus, _impl_.trading_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .google.protobuf.Timestamp time = 3;
    {PROTOBUF_FIELD_OFFSET(TradingStatus, _impl_.time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool limit_order_available_flag = 4;
    {PROTOBUF_FIELD_OFFSET(TradingStatus, _impl_.limit_order_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool market_order_available_flag = 5;
    {PROTOBUF_FIELD_OFFSET(TradingStatus, _impl_.market_order_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string instrument_uid = 6;
    {PROTOBUF_FIELD_OFFSET(TradingStatus, _impl_.instrument_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\64\4\0\0\0\0\16\0"
    "tinkoff.public_.invest.api.contract.v1.TradingStatus"
    "figi"
    "instrument_uid"
  }},
};

::uint8_t* TradingStatus::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.TradingStatus)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.TradingStatus.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 2;
  if (this->_internal_trading_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_trading_status(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp time = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // bool limit_order_available_flag = 4;
  if (this->_internal_limit_order_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_limit_order_available_flag(), target);
  }

  // bool market_order_available_flag = 5;
  if (this->_internal_market_order_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_market_order_available_flag(), target);
  }

  // string instrument_uid = 6;
  if (!this->_internal_instrument_uid().empty()) {
    const std::string& _s = this->_internal_instrument_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.TradingStatus.instrument_uid");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.TradingStatus)
  return target;
}

::size_t TradingStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.TradingStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string instrument_uid = 6;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_uid());
  }

  // .google.protobuf.Timestamp time = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.time_);
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 2;
  if (this->_internal_trading_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_trading_status());
  }

  // bool limit_order_available_flag = 4;
  if (this->_internal_limit_order_available_flag() != 0) {
    total_size += 2;
  }

  // bool market_order_available_flag = 5;
  if (this->_internal_market_order_available_flag() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TradingStatus::_class_data_ = {
    TradingStatus::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TradingStatus::GetClassData() const {
  return &_class_data_;
}

void TradingStatus::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TradingStatus*>(&to_msg);
  auto& from = static_cast<const TradingStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.TradingStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_time()->::google::protobuf::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_trading_status() != 0) {
    _this->_internal_set_trading_status(from._internal_trading_status());
  }
  if (from._internal_limit_order_available_flag() != 0) {
    _this->_internal_set_limit_order_available_flag(from._internal_limit_order_available_flag());
  }
  if (from._internal_market_order_available_flag() != 0) {
    _this->_internal_set_market_order_available_flag(from._internal_market_order_available_flag());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TradingStatus::CopyFrom(const TradingStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.TradingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TradingStatus::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TradingStatus::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TradingStatus::InternalSwap(TradingStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_uid_, &other->_impl_.instrument_uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradingStatus, _impl_.market_order_available_flag_)
      + sizeof(TradingStatus::_impl_.market_order_available_flag_)
      - PROTOBUF_FIELD_OFFSET(TradingStatus, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::google::protobuf::Metadata TradingStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[27]);
}
// ===================================================================

class GetCandlesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetCandlesRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetCandlesRequest, _impl_._has_bits_);
  static void set_has_figi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Timestamp& from(const GetCandlesRequest* msg);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::google::protobuf::Timestamp& to(const GetCandlesRequest* msg);
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_instrument_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_candle_source_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::google::protobuf::Timestamp& GetCandlesRequest::_Internal::from(const GetCandlesRequest* msg) {
  return *msg->_impl_.from_;
}
const ::google::protobuf::Timestamp& GetCandlesRequest::_Internal::to(const GetCandlesRequest* msg) {
  return *msg->_impl_.to_;
}
void GetCandlesRequest::clear_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void GetCandlesRequest::clear_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
GetCandlesRequest::GetCandlesRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetCandlesRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetCandlesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        instrument_id_(arena, from.instrument_id_) {}

GetCandlesRequest::GetCandlesRequest(
    ::google::protobuf::Arena* arena,
    const GetCandlesRequest& from)
    : ::google::protobuf::Message(arena) {
  GetCandlesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.from_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.from_)
                : nullptr;
  _impl_.to_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.to_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, interval_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, interval_),
           offsetof(Impl_, candle_source_type_) -
               offsetof(Impl_, interval_) +
               sizeof(Impl_::candle_source_type_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetCandlesRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetCandlesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        instrument_id_(arena) {}

inline void GetCandlesRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, from_),
           0,
           offsetof(Impl_, candle_source_type_) -
               offsetof(Impl_, from_) +
               sizeof(Impl_::candle_source_type_));
}
GetCandlesRequest::~GetCandlesRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetCandlesRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetCandlesRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
  delete _impl_.from_;
  delete _impl_.to_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetCandlesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetCandlesRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.figi_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.instrument_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.from_ != nullptr);
      _impl_.from_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.to_ != nullptr);
      _impl_.to_->Clear();
    }
  }
  _impl_.interval_ = 0;
  _impl_.candle_source_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetCandlesRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 2, 82, 2> GetCandlesRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetCandlesRequest, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetCandlesRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string figi = 1 [deprecated = true];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetCandlesRequest, _impl_.figi_)}},
    // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastMtS1,
     {18, 2, 0, PROTOBUF_FIELD_OFFSET(GetCandlesRequest, _impl_.from_)}},
    // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastMtS1,
     {26, 3, 1, PROTOBUF_FIELD_OFFSET(GetCandlesRequest, _impl_.to_)}},
    // .tinkoff.public_.invest.api.contract.v1.CandleInterval interval = 4 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetCandlesRequest, _impl_.interval_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(GetCandlesRequest, _impl_.interval_)}},
    // optional string instrument_id = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 1, 0, PROTOBUF_FIELD_OFFSET(GetCandlesRequest, _impl_.instrument_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional .tinkoff.public_.invest.api.contract.v1.GetCandlesRequest.CandleSource candle_source_type = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetCandlesRequest, _impl_.candle_source_type_), 4>(),
     {56, 4, 0, PROTOBUF_FIELD_OFFSET(GetCandlesRequest, _impl_.candle_source_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string figi = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GetCandlesRequest, _impl_.figi_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetCandlesRequest, _impl_.from_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetCandlesRequest, _impl_.to_), _Internal::kHasBitsOffset + 3, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.CandleInterval interval = 4 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetCandlesRequest, _impl_.interval_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // optional string instrument_id = 5;
    {PROTOBUF_FIELD_OFFSET(GetCandlesRequest, _impl_.instrument_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional .tinkoff.public_.invest.api.contract.v1.GetCandlesRequest.CandleSource candle_source_type = 7;
    {PROTOBUF_FIELD_OFFSET(GetCandlesRequest, _impl_.candle_source_type_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\70\4\0\0\0\15\0\0"
    "tinkoff.public_.invest.api.contract.v1.GetCandlesRequest"
    "figi"
    "instrument_id"
  }},
};

::uint8_t* GetCandlesRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetCandlesRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string figi = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetCandlesRequest.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.CandleInterval interval = 4 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_interval(), target);
  }

  // optional string instrument_id = 5;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_instrument_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetCandlesRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional .tinkoff.public_.invest.api.contract.v1.GetCandlesRequest.CandleSource candle_source_type = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_candle_source_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetCandlesRequest)
  return target;
}

::size_t GetCandlesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetCandlesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string figi = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_figi());
    }

    // optional string instrument_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_instrument_id());
    }

    // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.from_);
    }

    // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.to_);
    }

  }
  // .tinkoff.public_.invest.api.contract.v1.CandleInterval interval = 4 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_interval() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_interval());
  }

  // optional .tinkoff.public_.invest.api.contract.v1.GetCandlesRequest.CandleSource candle_source_type = 7;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_candle_source_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetCandlesRequest::_class_data_ = {
    GetCandlesRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetCandlesRequest::GetClassData() const {
  return &_class_data_;
}

void GetCandlesRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetCandlesRequest*>(&to_msg);
  auto& from = static_cast<const GetCandlesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetCandlesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_figi(from._internal_figi());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_instrument_id(from._internal_instrument_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_from()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_from());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_to()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_to());
    }
  }
  if (from._internal_interval() != 0) {
    _this->_internal_set_interval(from._internal_interval());
  }
  if (cached_has_bits & 0x00000010u) {
    _this->_internal_set_candle_source_type(from._internal_candle_source_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetCandlesRequest::CopyFrom(const GetCandlesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetCandlesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetCandlesRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetCandlesRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetCandlesRequest::InternalSwap(GetCandlesRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCandlesRequest, _impl_.candle_source_type_)
      + sizeof(GetCandlesRequest::_impl_.candle_source_type_)
      - PROTOBUF_FIELD_OFFSET(GetCandlesRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::google::protobuf::Metadata GetCandlesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[28]);
}
// ===================================================================

class GetCandlesResponse::_Internal {
 public:
};

GetCandlesResponse::GetCandlesResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetCandlesResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetCandlesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : candles_{visibility, arena, from.candles_},
        _cached_size_{0} {}

GetCandlesResponse::GetCandlesResponse(
    ::google::protobuf::Arena* arena,
    const GetCandlesResponse& from)
    : ::google::protobuf::Message(arena) {
  GetCandlesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetCandlesResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetCandlesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : candles_{visibility, arena},
        _cached_size_{0} {}

inline void GetCandlesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetCandlesResponse::~GetCandlesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetCandlesResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetCandlesResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetCandlesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetCandlesResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.candles_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetCandlesResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetCandlesResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetCandlesResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.HistoricCandle candles = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetCandlesResponse, _impl_.candles_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.HistoricCandle candles = 1;
    {PROTOBUF_FIELD_OFFSET(GetCandlesResponse, _impl_.candles_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::HistoricCandle>()},
  }}, {{
  }},
};

::uint8_t* GetCandlesResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetCandlesResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.HistoricCandle candles = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_candles_size()); i < n; i++) {
    const auto& repfield = this->_internal_candles().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetCandlesResponse)
  return target;
}

::size_t GetCandlesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetCandlesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.HistoricCandle candles = 1;
  total_size += 1UL * this->_internal_candles_size();
  for (const auto& msg : this->_internal_candles()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetCandlesResponse::_class_data_ = {
    GetCandlesResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetCandlesResponse::GetClassData() const {
  return &_class_data_;
}

void GetCandlesResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetCandlesResponse*>(&to_msg);
  auto& from = static_cast<const GetCandlesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetCandlesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_candles()->MergeFrom(
      from._internal_candles());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetCandlesResponse::CopyFrom(const GetCandlesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetCandlesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetCandlesResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetCandlesResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetCandlesResponse::InternalSwap(GetCandlesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.candles_.InternalSwap(&other->_impl_.candles_);
}

::google::protobuf::Metadata GetCandlesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[29]);
}
// ===================================================================

class HistoricCandle::_Internal {
 public:
  using HasBits = decltype(std::declval<HistoricCandle>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HistoricCandle, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& open(const HistoricCandle* msg);
  static void set_has_open(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& high(const HistoricCandle* msg);
  static void set_has_high(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& low(const HistoricCandle* msg);
  static void set_has_low(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& close(const HistoricCandle* msg);
  static void set_has_close(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::google::protobuf::Timestamp& time(const HistoricCandle* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation& HistoricCandle::_Internal::open(const HistoricCandle* msg) {
  return *msg->_impl_.open_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& HistoricCandle::_Internal::high(const HistoricCandle* msg) {
  return *msg->_impl_.high_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& HistoricCandle::_Internal::low(const HistoricCandle* msg) {
  return *msg->_impl_.low_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& HistoricCandle::_Internal::close(const HistoricCandle* msg) {
  return *msg->_impl_.close_;
}
const ::google::protobuf::Timestamp& HistoricCandle::_Internal::time(const HistoricCandle* msg) {
  return *msg->_impl_.time_;
}
void HistoricCandle::clear_open() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.open_ != nullptr) _impl_.open_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void HistoricCandle::clear_high() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.high_ != nullptr) _impl_.high_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void HistoricCandle::clear_low() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.low_ != nullptr) _impl_.low_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void HistoricCandle::clear_close() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.close_ != nullptr) _impl_.close_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void HistoricCandle::clear_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
HistoricCandle::HistoricCandle(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.HistoricCandle)
}
inline PROTOBUF_NDEBUG_INLINE HistoricCandle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

HistoricCandle::HistoricCandle(
    ::google::protobuf::Arena* arena,
    const HistoricCandle& from)
    : ::google::protobuf::Message(arena) {
  HistoricCandle* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.open_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.open_)
                : nullptr;
  _impl_.high_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.high_)
                : nullptr;
  _impl_.low_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.low_)
                : nullptr;
  _impl_.close_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.close_)
                : nullptr;
  _impl_.time_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.time_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, volume_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, volume_),
           offsetof(Impl_, candle_source_) -
               offsetof(Impl_, volume_) +
               sizeof(Impl_::candle_source_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.HistoricCandle)
}
inline PROTOBUF_NDEBUG_INLINE HistoricCandle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void HistoricCandle::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, open_),
           0,
           offsetof(Impl_, candle_source_) -
               offsetof(Impl_, open_) +
               sizeof(Impl_::candle_source_));
}
HistoricCandle::~HistoricCandle() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.HistoricCandle)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HistoricCandle::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.open_;
  delete _impl_.high_;
  delete _impl_.low_;
  delete _impl_.close_;
  delete _impl_.time_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void HistoricCandle::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.HistoricCandle)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.open_ != nullptr);
      _impl_.open_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.high_ != nullptr);
      _impl_.high_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.low_ != nullptr);
      _impl_.low_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.close_ != nullptr);
      _impl_.close_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
  }
  ::memset(&_impl_.volume_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.candle_source_) -
      reinterpret_cast<char*>(&_impl_.volume_)) + sizeof(_impl_.candle_source_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* HistoricCandle::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 8, 5, 0, 2> HistoricCandle::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HistoricCandle, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_HistoricCandle_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation open = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(HistoricCandle, _impl_.open_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation high = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(HistoricCandle, _impl_.high_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation low = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(HistoricCandle, _impl_.low_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation close = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(HistoricCandle, _impl_.close_)}},
    // int64 volume = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(HistoricCandle, _impl_.volume_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(HistoricCandle, _impl_.volume_)}},
    // .google.protobuf.Timestamp time = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 4, 4, PROTOBUF_FIELD_OFFSET(HistoricCandle, _impl_.time_)}},
    // bool is_complete = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HistoricCandle, _impl_.is_complete_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(HistoricCandle, _impl_.is_complete_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .tinkoff.public_.invest.api.contract.v1.CandleSource candle_source = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HistoricCandle, _impl_.candle_source_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(HistoricCandle, _impl_.candle_source_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.Quotation open = 1;
    {PROTOBUF_FIELD_OFFSET(HistoricCandle, _impl_.open_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation high = 2;
    {PROTOBUF_FIELD_OFFSET(HistoricCandle, _impl_.high_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation low = 3;
    {PROTOBUF_FIELD_OFFSET(HistoricCandle, _impl_.low_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation close = 4;
    {PROTOBUF_FIELD_OFFSET(HistoricCandle, _impl_.close_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 volume = 5;
    {PROTOBUF_FIELD_OFFSET(HistoricCandle, _impl_.volume_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .google.protobuf.Timestamp time = 6;
    {PROTOBUF_FIELD_OFFSET(HistoricCandle, _impl_.time_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool is_complete = 7;
    {PROTOBUF_FIELD_OFFSET(HistoricCandle, _impl_.is_complete_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .tinkoff.public_.invest.api.contract.v1.CandleSource candle_source = 9;
    {PROTOBUF_FIELD_OFFSET(HistoricCandle, _impl_.candle_source_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

::uint8_t* HistoricCandle::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.HistoricCandle)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Quotation open = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::open(this),
        _Internal::open(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation high = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::high(this),
        _Internal::high(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation low = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::low(this),
        _Internal::low(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation close = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::close(this),
        _Internal::close(this).GetCachedSize(), target, stream);
  }

  // int64 volume = 5;
  if (this->_internal_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<5>(
            stream, this->_internal_volume(), target);
  }

  // .google.protobuf.Timestamp time = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // bool is_complete = 7;
  if (this->_internal_is_complete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_is_complete(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.CandleSource candle_source = 9;
  if (this->_internal_candle_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        9, this->_internal_candle_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.HistoricCandle)
  return target;
}

::size_t HistoricCandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.HistoricCandle)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // .tinkoff.public_.invest.api.contract.v1.Quotation open = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.open_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation high = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.high_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation low = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.low_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation close = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.close_);
    }

    // .google.protobuf.Timestamp time = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.time_);
    }

  }
  // int64 volume = 5;
  if (this->_internal_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_volume());
  }

  // bool is_complete = 7;
  if (this->_internal_is_complete() != 0) {
    total_size += 2;
  }

  // .tinkoff.public_.invest.api.contract.v1.CandleSource candle_source = 9;
  if (this->_internal_candle_source() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_candle_source());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData HistoricCandle::_class_data_ = {
    HistoricCandle::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* HistoricCandle::GetClassData() const {
  return &_class_data_;
}

void HistoricCandle::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<HistoricCandle*>(&to_msg);
  auto& from = static_cast<const HistoricCandle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.HistoricCandle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_open()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_open());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_high()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_high());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_low()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_low());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_close()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_close());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_time());
    }
  }
  if (from._internal_volume() != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  if (from._internal_is_complete() != 0) {
    _this->_internal_set_is_complete(from._internal_is_complete());
  }
  if (from._internal_candle_source() != 0) {
    _this->_internal_set_candle_source(from._internal_candle_source());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HistoricCandle::CopyFrom(const HistoricCandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.HistoricCandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool HistoricCandle::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* HistoricCandle::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void HistoricCandle::InternalSwap(HistoricCandle* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistoricCandle, _impl_.candle_source_)
      + sizeof(HistoricCandle::_impl_.candle_source_)
      - PROTOBUF_FIELD_OFFSET(HistoricCandle, _impl_.open_)>(
          reinterpret_cast<char*>(&_impl_.open_),
          reinterpret_cast<char*>(&other->_impl_.open_));
}

::google::protobuf::Metadata HistoricCandle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[30]);
}
// ===================================================================

class GetLastPricesRequest::_Internal {
 public:
};

GetLastPricesRequest::GetLastPricesRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetLastPricesRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetLastPricesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : figi_{visibility, arena, from.figi_},
        instrument_id_{visibility, arena, from.instrument_id_},
        _cached_size_{0} {}

GetLastPricesRequest::GetLastPricesRequest(
    ::google::protobuf::Arena* arena,
    const GetLastPricesRequest& from)
    : ::google::protobuf::Message(arena) {
  GetLastPricesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetLastPricesRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetLastPricesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : figi_{visibility, arena},
        instrument_id_{visibility, arena},
        _cached_size_{0} {}

inline void GetLastPricesRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetLastPricesRequest::~GetLastPricesRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetLastPricesRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetLastPricesRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetLastPricesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetLastPricesRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.Clear();
  _impl_.instrument_id_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetLastPricesRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 85, 2> GetLastPricesRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GetLastPricesRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated string instrument_id = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GetLastPricesRequest, _impl_.instrument_id_)}},
    // repeated string figi = 1 [deprecated = true];
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetLastPricesRequest, _impl_.figi_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string figi = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GetLastPricesRequest, _impl_.figi_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string instrument_id = 2;
    {PROTOBUF_FIELD_OFFSET(GetLastPricesRequest, _impl_.instrument_id_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\73\4\15\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.GetLastPricesRequest"
    "figi"
    "instrument_id"
  }},
};

::uint8_t* GetLastPricesRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetLastPricesRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string figi = 1 [deprecated = true];
  for (int i = 0, n = this->_internal_figi_size(); i < n; ++i) {
    const auto& s = this->_internal_figi().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetLastPricesRequest.figi");
    target = stream->WriteString(1, s, target);
  }

  // repeated string instrument_id = 2;
  for (int i = 0, n = this->_internal_instrument_id_size(); i < n; ++i) {
    const auto& s = this->_internal_instrument_id().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetLastPricesRequest.instrument_id");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetLastPricesRequest)
  return target;
}

::size_t GetLastPricesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetLastPricesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string figi = 1 [deprecated = true];
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_figi().size());
  for (int i = 0, n = _internal_figi().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_figi().Get(i));
  }
  // repeated string instrument_id = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_instrument_id().size());
  for (int i = 0, n = _internal_instrument_id().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_instrument_id().Get(i));
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetLastPricesRequest::_class_data_ = {
    GetLastPricesRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetLastPricesRequest::GetClassData() const {
  return &_class_data_;
}

void GetLastPricesRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetLastPricesRequest*>(&to_msg);
  auto& from = static_cast<const GetLastPricesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetLastPricesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_figi()->MergeFrom(from._internal_figi());
  _this->_internal_mutable_instrument_id()->MergeFrom(from._internal_instrument_id());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetLastPricesRequest::CopyFrom(const GetLastPricesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetLastPricesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetLastPricesRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetLastPricesRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetLastPricesRequest::InternalSwap(GetLastPricesRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.figi_.InternalSwap(&other->_impl_.figi_);
  _impl_.instrument_id_.InternalSwap(&other->_impl_.instrument_id_);
}

::google::protobuf::Metadata GetLastPricesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[31]);
}
// ===================================================================

class GetLastPricesResponse::_Internal {
 public:
};

GetLastPricesResponse::GetLastPricesResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetLastPricesResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetLastPricesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : last_prices_{visibility, arena, from.last_prices_},
        _cached_size_{0} {}

GetLastPricesResponse::GetLastPricesResponse(
    ::google::protobuf::Arena* arena,
    const GetLastPricesResponse& from)
    : ::google::protobuf::Message(arena) {
  GetLastPricesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetLastPricesResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetLastPricesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : last_prices_{visibility, arena},
        _cached_size_{0} {}

inline void GetLastPricesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetLastPricesResponse::~GetLastPricesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetLastPricesResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetLastPricesResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetLastPricesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetLastPricesResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.last_prices_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetLastPricesResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetLastPricesResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetLastPricesResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.LastPrice last_prices = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetLastPricesResponse, _impl_.last_prices_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.LastPrice last_prices = 1;
    {PROTOBUF_FIELD_OFFSET(GetLastPricesResponse, _impl_.last_prices_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::LastPrice>()},
  }}, {{
  }},
};

::uint8_t* GetLastPricesResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetLastPricesResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.LastPrice last_prices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_last_prices_size()); i < n; i++) {
    const auto& repfield = this->_internal_last_prices().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetLastPricesResponse)
  return target;
}

::size_t GetLastPricesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetLastPricesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.LastPrice last_prices = 1;
  total_size += 1UL * this->_internal_last_prices_size();
  for (const auto& msg : this->_internal_last_prices()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetLastPricesResponse::_class_data_ = {
    GetLastPricesResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetLastPricesResponse::GetClassData() const {
  return &_class_data_;
}

void GetLastPricesResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetLastPricesResponse*>(&to_msg);
  auto& from = static_cast<const GetLastPricesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetLastPricesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_last_prices()->MergeFrom(
      from._internal_last_prices());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetLastPricesResponse::CopyFrom(const GetLastPricesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetLastPricesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetLastPricesResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetLastPricesResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetLastPricesResponse::InternalSwap(GetLastPricesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.last_prices_.InternalSwap(&other->_impl_.last_prices_);
}

::google::protobuf::Metadata GetLastPricesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[32]);
}
// ===================================================================

class LastPrice::_Internal {
 public:
  using HasBits = decltype(std::declval<LastPrice>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LastPrice, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& price(const LastPrice* msg);
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Timestamp& time(const LastPrice* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation& LastPrice::_Internal::price(const LastPrice* msg) {
  return *msg->_impl_.price_;
}
const ::google::protobuf::Timestamp& LastPrice::_Internal::time(const LastPrice* msg) {
  return *msg->_impl_.time_;
}
void LastPrice::clear_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.price_ != nullptr) _impl_.price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LastPrice::clear_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
LastPrice::LastPrice(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.LastPrice)
}
inline PROTOBUF_NDEBUG_INLINE LastPrice::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        instrument_uid_(arena, from.instrument_uid_) {}

LastPrice::LastPrice(
    ::google::protobuf::Arena* arena,
    const LastPrice& from)
    : ::google::protobuf::Message(arena) {
  LastPrice* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.price_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.price_)
                : nullptr;
  _impl_.time_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.time_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.LastPrice)
}
inline PROTOBUF_NDEBUG_INLINE LastPrice::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        instrument_uid_(arena) {}

inline void LastPrice::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, price_),
           0,
           offsetof(Impl_, time_) -
               offsetof(Impl_, price_) +
               sizeof(Impl_::time_));
}
LastPrice::~LastPrice() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.LastPrice)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LastPrice::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
  delete _impl_.price_;
  delete _impl_.time_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LastPrice::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.LastPrice)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.price_ != nullptr);
      _impl_.price_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LastPrice::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 75, 2> LastPrice::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LastPrice, _impl_._has_bits_),
    0, // no _extensions_
    11, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_LastPrice_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(LastPrice, _impl_.figi_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation price = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(LastPrice, _impl_.price_)}},
    // .google.protobuf.Timestamp time = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(LastPrice, _impl_.time_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(LastPrice, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation price = 2;
    {PROTOBUF_FIELD_OFFSET(LastPrice, _impl_.price_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp time = 3;
    {PROTOBUF_FIELD_OFFSET(LastPrice, _impl_.time_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string instrument_uid = 11;
    {PROTOBUF_FIELD_OFFSET(LastPrice, _impl_.instrument_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\60\4\0\0\16\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.LastPrice"
    "figi"
    "instrument_uid"
  }},
};

::uint8_t* LastPrice::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.LastPrice)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.LastPrice.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Quotation price = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // string instrument_uid = 11;
  if (!this->_internal_instrument_uid().empty()) {
    const std::string& _s = this->_internal_instrument_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.LastPrice.instrument_uid");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.LastPrice)
  return target;
}

::size_t LastPrice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.LastPrice)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string instrument_uid = 11;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_uid());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .tinkoff.public_.invest.api.contract.v1.Quotation price = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.price_);
    }

    // .google.protobuf.Timestamp time = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.time_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LastPrice::_class_data_ = {
    LastPrice::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LastPrice::GetClassData() const {
  return &_class_data_;
}

void LastPrice::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LastPrice*>(&to_msg);
  auto& from = static_cast<const LastPrice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.LastPrice)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_price());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_time());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LastPrice::CopyFrom(const LastPrice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.LastPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LastPrice::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LastPrice::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LastPrice::InternalSwap(LastPrice* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_uid_, &other->_impl_.instrument_uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LastPrice, _impl_.time_)
      + sizeof(LastPrice::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(LastPrice, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::google::protobuf::Metadata LastPrice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[33]);
}
// ===================================================================

class GetOrderBookRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetOrderBookRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetOrderBookRequest, _impl_._has_bits_);
  static void set_has_figi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_instrument_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetOrderBookRequest::GetOrderBookRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetOrderBookRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetOrderBookRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        instrument_id_(arena, from.instrument_id_) {}

GetOrderBookRequest::GetOrderBookRequest(
    ::google::protobuf::Arena* arena,
    const GetOrderBookRequest& from)
    : ::google::protobuf::Message(arena) {
  GetOrderBookRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.depth_ = from._impl_.depth_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetOrderBookRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetOrderBookRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        instrument_id_(arena) {}

inline void GetOrderBookRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.depth_ = {};
}
GetOrderBookRequest::~GetOrderBookRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetOrderBookRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetOrderBookRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetOrderBookRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetOrderBookRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.figi_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.instrument_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.depth_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetOrderBookRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 84, 2> GetOrderBookRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetOrderBookRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GetOrderBookRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string figi = 1 [deprecated = true];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetOrderBookRequest, _impl_.figi_)}},
    // int32 depth = 2 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetOrderBookRequest, _impl_.depth_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GetOrderBookRequest, _impl_.depth_)}},
    // optional string instrument_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(GetOrderBookRequest, _impl_.instrument_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string figi = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GetOrderBookRequest, _impl_.figi_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 depth = 2 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetOrderBookRequest, _impl_.depth_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // optional string instrument_id = 3;
    {PROTOBUF_FIELD_OFFSET(GetOrderBookRequest, _impl_.instrument_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\72\4\0\15\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.GetOrderBookRequest"
    "figi"
    "instrument_id"
  }},
};

::uint8_t* GetOrderBookRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetOrderBookRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string figi = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetOrderBookRequest.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 depth = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_depth(), target);
  }

  // optional string instrument_id = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_instrument_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetOrderBookRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetOrderBookRequest)
  return target;
}

::size_t GetOrderBookRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetOrderBookRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string figi = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_figi());
    }

    // optional string instrument_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_instrument_id());
    }

  }
  // int32 depth = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_depth() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_depth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetOrderBookRequest::_class_data_ = {
    GetOrderBookRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetOrderBookRequest::GetClassData() const {
  return &_class_data_;
}

void GetOrderBookRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetOrderBookRequest*>(&to_msg);
  auto& from = static_cast<const GetOrderBookRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetOrderBookRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_figi(from._internal_figi());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_instrument_id(from._internal_instrument_id());
    }
  }
  if (from._internal_depth() != 0) {
    _this->_internal_set_depth(from._internal_depth());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetOrderBookRequest::CopyFrom(const GetOrderBookRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetOrderBookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetOrderBookRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetOrderBookRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetOrderBookRequest::InternalSwap(GetOrderBookRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
        swap(_impl_.depth_, other->_impl_.depth_);
}

::google::protobuf::Metadata GetOrderBookRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[34]);
}
// ===================================================================

class GetOrderBookResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetOrderBookResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& last_price(const GetOrderBookResponse* msg);
  static void set_has_last_price(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& close_price(const GetOrderBookResponse* msg);
  static void set_has_close_price(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& limit_up(const GetOrderBookResponse* msg);
  static void set_has_limit_up(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& limit_down(const GetOrderBookResponse* msg);
  static void set_has_limit_down(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::google::protobuf::Timestamp& last_price_ts(const GetOrderBookResponse* msg);
  static void set_has_last_price_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::google::protobuf::Timestamp& close_price_ts(const GetOrderBookResponse* msg);
  static void set_has_close_price_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::google::protobuf::Timestamp& orderbook_ts(const GetOrderBookResponse* msg);
  static void set_has_orderbook_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetOrderBookResponse::_Internal::last_price(const GetOrderBookResponse* msg) {
  return *msg->_impl_.last_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetOrderBookResponse::_Internal::close_price(const GetOrderBookResponse* msg) {
  return *msg->_impl_.close_price_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetOrderBookResponse::_Internal::limit_up(const GetOrderBookResponse* msg) {
  return *msg->_impl_.limit_up_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetOrderBookResponse::_Internal::limit_down(const GetOrderBookResponse* msg) {
  return *msg->_impl_.limit_down_;
}
const ::google::protobuf::Timestamp& GetOrderBookResponse::_Internal::last_price_ts(const GetOrderBookResponse* msg) {
  return *msg->_impl_.last_price_ts_;
}
const ::google::protobuf::Timestamp& GetOrderBookResponse::_Internal::close_price_ts(const GetOrderBookResponse* msg) {
  return *msg->_impl_.close_price_ts_;
}
const ::google::protobuf::Timestamp& GetOrderBookResponse::_Internal::orderbook_ts(const GetOrderBookResponse* msg) {
  return *msg->_impl_.orderbook_ts_;
}
void GetOrderBookResponse::clear_last_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.last_price_ != nullptr) _impl_.last_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetOrderBookResponse::clear_close_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.close_price_ != nullptr) _impl_.close_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GetOrderBookResponse::clear_limit_up() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.limit_up_ != nullptr) _impl_.limit_up_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void GetOrderBookResponse::clear_limit_down() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.limit_down_ != nullptr) _impl_.limit_down_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void GetOrderBookResponse::clear_last_price_ts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.last_price_ts_ != nullptr) _impl_.last_price_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void GetOrderBookResponse::clear_close_price_ts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.close_price_ts_ != nullptr) _impl_.close_price_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void GetOrderBookResponse::clear_orderbook_ts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.orderbook_ts_ != nullptr) _impl_.orderbook_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
GetOrderBookResponse::GetOrderBookResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetOrderBookResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetOrderBookResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        bids_{visibility, arena, from.bids_},
        asks_{visibility, arena, from.asks_},
        figi_(arena, from.figi_),
        instrument_uid_(arena, from.instrument_uid_) {}

GetOrderBookResponse::GetOrderBookResponse(
    ::google::protobuf::Arena* arena,
    const GetOrderBookResponse& from)
    : ::google::protobuf::Message(arena) {
  GetOrderBookResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.last_price_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.last_price_)
                : nullptr;
  _impl_.close_price_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.close_price_)
                : nullptr;
  _impl_.limit_up_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.limit_up_)
                : nullptr;
  _impl_.limit_down_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.limit_down_)
                : nullptr;
  _impl_.last_price_ts_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.last_price_ts_)
                : nullptr;
  _impl_.close_price_ts_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.close_price_ts_)
                : nullptr;
  _impl_.orderbook_ts_ = (cached_has_bits & 0x00000040u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.orderbook_ts_)
                : nullptr;
  _impl_.depth_ = from._impl_.depth_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetOrderBookResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetOrderBookResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        bids_{visibility, arena},
        asks_{visibility, arena},
        figi_(arena),
        instrument_uid_(arena) {}

inline void GetOrderBookResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, last_price_),
           0,
           offsetof(Impl_, depth_) -
               offsetof(Impl_, last_price_) +
               sizeof(Impl_::depth_));
}
GetOrderBookResponse::~GetOrderBookResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetOrderBookResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetOrderBookResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
  delete _impl_.last_price_;
  delete _impl_.close_price_;
  delete _impl_.limit_up_;
  delete _impl_.limit_down_;
  delete _impl_.last_price_ts_;
  delete _impl_.close_price_ts_;
  delete _impl_.orderbook_ts_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetOrderBookResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetOrderBookResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bids_.Clear();
  _impl_.asks_.Clear();
  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.last_price_ != nullptr);
      _impl_.last_price_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.close_price_ != nullptr);
      _impl_.close_price_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.limit_up_ != nullptr);
      _impl_.limit_up_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.limit_down_ != nullptr);
      _impl_.limit_down_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.last_price_ts_ != nullptr);
      _impl_.last_price_ts_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.close_price_ts_ != nullptr);
      _impl_.close_price_ts_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.orderbook_ts_ != nullptr);
      _impl_.orderbook_ts_->Clear();
    }
  }
  _impl_.depth_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetOrderBookResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 9, 94, 2> GetOrderBookResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_._has_bits_),
    0, // no _extensions_
    23, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4287626752,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    9,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetOrderBookResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_.figi_)}},
    // int32 depth = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetOrderBookResponse, _impl_.depth_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_.depth_)}},
    // repeated .tinkoff.public_.invest.api.contract.v1.Order bids = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_.bids_)}},
    // repeated .tinkoff.public_.invest.api.contract.v1.Order asks = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_.asks_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation last_price = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 2, PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_.last_price_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation close_price = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 1, 3, PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_.close_price_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation limit_up = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 2, 4, PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_.limit_up_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation limit_down = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 3, 5, PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_.limit_down_)}},
    // string instrument_uid = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_.instrument_uid_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 depth = 2;
    {PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_.depth_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .tinkoff.public_.invest.api.contract.v1.Order bids = 3;
    {PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_.bids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .tinkoff.public_.invest.api.contract.v1.Order asks = 4;
    {PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_.asks_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation last_price = 5;
    {PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_.last_price_), _Internal::kHasBitsOffset + 0, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation close_price = 6;
    {PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_.close_price_), _Internal::kHasBitsOffset + 1, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation limit_up = 7;
    {PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_.limit_up_), _Internal::kHasBitsOffset + 2, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation limit_down = 8;
    {PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_.limit_down_), _Internal::kHasBitsOffset + 3, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string instrument_uid = 9;
    {PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_.instrument_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp last_price_ts = 21;
    {PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_.last_price_ts_), _Internal::kHasBitsOffset + 4, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp close_price_ts = 22;
    {PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_.close_price_ts_), _Internal::kHasBitsOffset + 5, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp orderbook_ts = 23;
    {PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_.orderbook_ts_), _Internal::kHasBitsOffset + 6, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Order>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Order>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\73\4\0\0\0\0\0\0\0\16\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.GetOrderBookResponse"
    "figi"
    "instrument_uid"
  }},
};

::uint8_t* GetOrderBookResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetOrderBookResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetOrderBookResponse.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 depth = 2;
  if (this->_internal_depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_depth(), target);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.Order bids = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bids_size()); i < n; i++) {
    const auto& repfield = this->_internal_bids().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tinkoff.public_.invest.api.contract.v1.Order asks = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_asks_size()); i < n; i++) {
    const auto& repfield = this->_internal_asks().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Quotation last_price = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::last_price(this),
        _Internal::last_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation close_price = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::close_price(this),
        _Internal::close_price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation limit_up = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::limit_up(this),
        _Internal::limit_up(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation limit_down = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::limit_down(this),
        _Internal::limit_down(this).GetCachedSize(), target, stream);
  }

  // string instrument_uid = 9;
  if (!this->_internal_instrument_uid().empty()) {
    const std::string& _s = this->_internal_instrument_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetOrderBookResponse.instrument_uid");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // .google.protobuf.Timestamp last_price_ts = 21;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        21, _Internal::last_price_ts(this),
        _Internal::last_price_ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp close_price_ts = 22;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        22, _Internal::close_price_ts(this),
        _Internal::close_price_ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp orderbook_ts = 23;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        23, _Internal::orderbook_ts(this),
        _Internal::orderbook_ts(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetOrderBookResponse)
  return target;
}

::size_t GetOrderBookResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetOrderBookResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Order bids = 3;
  total_size += 1UL * this->_internal_bids_size();
  for (const auto& msg : this->_internal_bids()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .tinkoff.public_.invest.api.contract.v1.Order asks = 4;
  total_size += 1UL * this->_internal_asks_size();
  for (const auto& msg : this->_internal_asks()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string instrument_uid = 9;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_uid());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // .tinkoff.public_.invest.api.contract.v1.Quotation last_price = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.last_price_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation close_price = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.close_price_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation limit_up = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.limit_up_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation limit_down = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.limit_down_);
    }

    // .google.protobuf.Timestamp last_price_ts = 21;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.last_price_ts_);
    }

    // .google.protobuf.Timestamp close_price_ts = 22;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.close_price_ts_);
    }

    // .google.protobuf.Timestamp orderbook_ts = 23;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.orderbook_ts_);
    }

  }
  // int32 depth = 2;
  if (this->_internal_depth() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_depth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetOrderBookResponse::_class_data_ = {
    GetOrderBookResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetOrderBookResponse::GetClassData() const {
  return &_class_data_;
}

void GetOrderBookResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetOrderBookResponse*>(&to_msg);
  auto& from = static_cast<const GetOrderBookResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetOrderBookResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_bids()->MergeFrom(
      from._internal_bids());
  _this->_internal_mutable_asks()->MergeFrom(
      from._internal_asks());
  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_last_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_last_price());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_close_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_close_price());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_limit_up()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_limit_up());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_limit_down()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_limit_down());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_last_price_ts()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_last_price_ts());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_close_price_ts()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_close_price_ts());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_orderbook_ts()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_orderbook_ts());
    }
  }
  if (from._internal_depth() != 0) {
    _this->_internal_set_depth(from._internal_depth());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetOrderBookResponse::CopyFrom(const GetOrderBookResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetOrderBookResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetOrderBookResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetOrderBookResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetOrderBookResponse::InternalSwap(GetOrderBookResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.bids_.InternalSwap(&other->_impl_.bids_);
  _impl_.asks_.InternalSwap(&other->_impl_.asks_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_uid_, &other->_impl_.instrument_uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_.depth_)
      + sizeof(GetOrderBookResponse::_impl_.depth_)
      - PROTOBUF_FIELD_OFFSET(GetOrderBookResponse, _impl_.last_price_)>(
          reinterpret_cast<char*>(&_impl_.last_price_),
          reinterpret_cast<char*>(&other->_impl_.last_price_));
}

::google::protobuf::Metadata GetOrderBookResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[35]);
}
// ===================================================================

class GetTradingStatusRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetTradingStatusRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetTradingStatusRequest, _impl_._has_bits_);
  static void set_has_figi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_instrument_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetTradingStatusRequest::GetTradingStatusRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetTradingStatusRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetTradingStatusRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        instrument_id_(arena, from.instrument_id_) {}

GetTradingStatusRequest::GetTradingStatusRequest(
    ::google::protobuf::Arena* arena,
    const GetTradingStatusRequest& from)
    : ::google::protobuf::Message(arena) {
  GetTradingStatusRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetTradingStatusRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetTradingStatusRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        instrument_id_(arena) {}

inline void GetTradingStatusRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetTradingStatusRequest::~GetTradingStatusRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetTradingStatusRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetTradingStatusRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetTradingStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.figi_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.instrument_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetTradingStatusRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 88, 2> GetTradingStatusRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetTradingStatusRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GetTradingStatusRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional string instrument_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(GetTradingStatusRequest, _impl_.instrument_id_)}},
    // optional string figi = 1 [deprecated = true];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetTradingStatusRequest, _impl_.figi_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string figi = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GetTradingStatusRequest, _impl_.figi_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string instrument_id = 2;
    {PROTOBUF_FIELD_OFFSET(GetTradingStatusRequest, _impl_.instrument_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\76\4\15\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.GetTradingStatusRequest"
    "figi"
    "instrument_id"
  }},
};

::uint8_t* GetTradingStatusRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string figi = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetTradingStatusRequest.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string instrument_id = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_instrument_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetTradingStatusRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetTradingStatusRequest)
  return target;
}

::size_t GetTradingStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string figi = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_figi());
    }

    // optional string instrument_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_instrument_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetTradingStatusRequest::_class_data_ = {
    GetTradingStatusRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetTradingStatusRequest::GetClassData() const {
  return &_class_data_;
}

void GetTradingStatusRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetTradingStatusRequest*>(&to_msg);
  auto& from = static_cast<const GetTradingStatusRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_figi(from._internal_figi());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_instrument_id(from._internal_instrument_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetTradingStatusRequest::CopyFrom(const GetTradingStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetTradingStatusRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetTradingStatusRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetTradingStatusRequest::InternalSwap(GetTradingStatusRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
}

::google::protobuf::Metadata GetTradingStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[36]);
}
// ===================================================================

class GetTradingStatusesRequest::_Internal {
 public:
};

GetTradingStatusesRequest::GetTradingStatusesRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetTradingStatusesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : instrument_id_{visibility, arena, from.instrument_id_},
        _cached_size_{0} {}

GetTradingStatusesRequest::GetTradingStatusesRequest(
    ::google::protobuf::Arena* arena,
    const GetTradingStatusesRequest& from)
    : ::google::protobuf::Message(arena) {
  GetTradingStatusesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetTradingStatusesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instrument_id_{visibility, arena},
        _cached_size_{0} {}

inline void GetTradingStatusesRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetTradingStatusesRequest::~GetTradingStatusesRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetTradingStatusesRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetTradingStatusesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_id_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetTradingStatusesRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 86, 2> GetTradingStatusesRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GetTradingStatusesRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated string instrument_id = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetTradingStatusesRequest, _impl_.instrument_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string instrument_id = 1;
    {PROTOBUF_FIELD_OFFSET(GetTradingStatusesRequest, _impl_.instrument_id_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\100\15\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.GetTradingStatusesRequest"
    "instrument_id"
  }},
};

::uint8_t* GetTradingStatusesRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string instrument_id = 1;
  for (int i = 0, n = this->_internal_instrument_id_size(); i < n; ++i) {
    const auto& s = this->_internal_instrument_id().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetTradingStatusesRequest.instrument_id");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesRequest)
  return target;
}

::size_t GetTradingStatusesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string instrument_id = 1;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_instrument_id().size());
  for (int i = 0, n = _internal_instrument_id().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_instrument_id().Get(i));
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetTradingStatusesRequest::_class_data_ = {
    GetTradingStatusesRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetTradingStatusesRequest::GetClassData() const {
  return &_class_data_;
}

void GetTradingStatusesRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetTradingStatusesRequest*>(&to_msg);
  auto& from = static_cast<const GetTradingStatusesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instrument_id()->MergeFrom(from._internal_instrument_id());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetTradingStatusesRequest::CopyFrom(const GetTradingStatusesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetTradingStatusesRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetTradingStatusesRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetTradingStatusesRequest::InternalSwap(GetTradingStatusesRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instrument_id_.InternalSwap(&other->_impl_.instrument_id_);
}

::google::protobuf::Metadata GetTradingStatusesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[37]);
}
// ===================================================================

class GetTradingStatusesResponse::_Internal {
 public:
};

GetTradingStatusesResponse::GetTradingStatusesResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetTradingStatusesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : trading_statuses_{visibility, arena, from.trading_statuses_},
        _cached_size_{0} {}

GetTradingStatusesResponse::GetTradingStatusesResponse(
    ::google::protobuf::Arena* arena,
    const GetTradingStatusesResponse& from)
    : ::google::protobuf::Message(arena) {
  GetTradingStatusesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetTradingStatusesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : trading_statuses_{visibility, arena},
        _cached_size_{0} {}

inline void GetTradingStatusesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetTradingStatusesResponse::~GetTradingStatusesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetTradingStatusesResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetTradingStatusesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trading_statuses_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetTradingStatusesResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetTradingStatusesResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetTradingStatusesResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse trading_statuses = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetTradingStatusesResponse, _impl_.trading_statuses_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse trading_statuses = 1;
    {PROTOBUF_FIELD_OFFSET(GetTradingStatusesResponse, _impl_.trading_statuses_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse>()},
  }}, {{
  }},
};

::uint8_t* GetTradingStatusesResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse trading_statuses = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trading_statuses_size()); i < n; i++) {
    const auto& repfield = this->_internal_trading_statuses().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesResponse)
  return target;
}

::size_t GetTradingStatusesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse trading_statuses = 1;
  total_size += 1UL * this->_internal_trading_statuses_size();
  for (const auto& msg : this->_internal_trading_statuses()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetTradingStatusesResponse::_class_data_ = {
    GetTradingStatusesResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetTradingStatusesResponse::GetClassData() const {
  return &_class_data_;
}

void GetTradingStatusesResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetTradingStatusesResponse*>(&to_msg);
  auto& from = static_cast<const GetTradingStatusesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_trading_statuses()->MergeFrom(
      from._internal_trading_statuses());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetTradingStatusesResponse::CopyFrom(const GetTradingStatusesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetTradingStatusesResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetTradingStatusesResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetTradingStatusesResponse::InternalSwap(GetTradingStatusesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.trading_statuses_.InternalSwap(&other->_impl_.trading_statuses_);
}

::google::protobuf::Metadata GetTradingStatusesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[38]);
}
// ===================================================================

class GetTradingStatusResponse::_Internal {
 public:
};

GetTradingStatusResponse::GetTradingStatusResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetTradingStatusResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : figi_(arena, from.figi_),
        instrument_uid_(arena, from.instrument_uid_),
        _cached_size_{0} {}

GetTradingStatusResponse::GetTradingStatusResponse(
    ::google::protobuf::Arena* arena,
    const GetTradingStatusResponse& from)
    : ::google::protobuf::Message(arena) {
  GetTradingStatusResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, trading_status_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, trading_status_),
           offsetof(Impl_, only_best_price_) -
               offsetof(Impl_, trading_status_) +
               sizeof(Impl_::only_best_price_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetTradingStatusResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : figi_(arena),
        instrument_uid_(arena),
        _cached_size_{0} {}

inline void GetTradingStatusResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, trading_status_),
           0,
           offsetof(Impl_, only_best_price_) -
               offsetof(Impl_, trading_status_) +
               sizeof(Impl_::only_best_price_));
}
GetTradingStatusResponse::~GetTradingStatusResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetTradingStatusResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetTradingStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  ::memset(&_impl_.trading_status_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.only_best_price_) -
      reinterpret_cast<char*>(&_impl_.trading_status_)) + sizeof(_impl_.only_best_price_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetTradingStatusResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 8, 0, 98, 2> GetTradingStatusResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966848,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GetTradingStatusResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetTradingStatusResponse, _impl_.figi_)}},
    // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetTradingStatusResponse, _impl_.trading_status_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GetTradingStatusResponse, _impl_.trading_status_)}},
    // bool limit_order_available_flag = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GetTradingStatusResponse, _impl_.limit_order_available_flag_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GetTradingStatusResponse, _impl_.limit_order_available_flag_)}},
    // bool market_order_available_flag = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GetTradingStatusResponse, _impl_.market_order_available_flag_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(GetTradingStatusResponse, _impl_.market_order_available_flag_)}},
    // bool api_trade_available_flag = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GetTradingStatusResponse, _impl_.api_trade_available_flag_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(GetTradingStatusResponse, _impl_.api_trade_available_flag_)}},
    // string instrument_uid = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(GetTradingStatusResponse, _impl_.instrument_uid_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool bestprice_order_available_flag = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GetTradingStatusResponse, _impl_.bestprice_order_available_flag_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(GetTradingStatusResponse, _impl_.bestprice_order_available_flag_)}},
    // bool only_best_price = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GetTradingStatusResponse, _impl_.only_best_price_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(GetTradingStatusResponse, _impl_.only_best_price_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(GetTradingStatusResponse, _impl_.figi_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 2;
    {PROTOBUF_FIELD_OFFSET(GetTradingStatusResponse, _impl_.trading_status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool limit_order_available_flag = 3;
    {PROTOBUF_FIELD_OFFSET(GetTradingStatusResponse, _impl_.limit_order_available_flag_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool market_order_available_flag = 4;
    {PROTOBUF_FIELD_OFFSET(GetTradingStatusResponse, _impl_.market_order_available_flag_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool api_trade_available_flag = 5;
    {PROTOBUF_FIELD_OFFSET(GetTradingStatusResponse, _impl_.api_trade_available_flag_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string instrument_uid = 6;
    {PROTOBUF_FIELD_OFFSET(GetTradingStatusResponse, _impl_.instrument_uid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool bestprice_order_available_flag = 8;
    {PROTOBUF_FIELD_OFFSET(GetTradingStatusResponse, _impl_.bestprice_order_available_flag_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool only_best_price = 9;
    {PROTOBUF_FIELD_OFFSET(GetTradingStatusResponse, _impl_.only_best_price_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\77\4\0\0\0\0\16\0\0\0\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse"
    "figi"
    "instrument_uid"
  }},
};

::uint8_t* GetTradingStatusResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 2;
  if (this->_internal_trading_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_trading_status(), target);
  }

  // bool limit_order_available_flag = 3;
  if (this->_internal_limit_order_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_limit_order_available_flag(), target);
  }

  // bool market_order_available_flag = 4;
  if (this->_internal_market_order_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_market_order_available_flag(), target);
  }

  // bool api_trade_available_flag = 5;
  if (this->_internal_api_trade_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_api_trade_available_flag(), target);
  }

  // string instrument_uid = 6;
  if (!this->_internal_instrument_uid().empty()) {
    const std::string& _s = this->_internal_instrument_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse.instrument_uid");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // bool bestprice_order_available_flag = 8;
  if (this->_internal_bestprice_order_available_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_bestprice_order_available_flag(), target);
  }

  // bool only_best_price = 9;
  if (this->_internal_only_best_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_only_best_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse)
  return target;
}

::size_t GetTradingStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string instrument_uid = 6;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_uid());
  }

  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 2;
  if (this->_internal_trading_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_trading_status());
  }

  // bool limit_order_available_flag = 3;
  if (this->_internal_limit_order_available_flag() != 0) {
    total_size += 2;
  }

  // bool market_order_available_flag = 4;
  if (this->_internal_market_order_available_flag() != 0) {
    total_size += 2;
  }

  // bool api_trade_available_flag = 5;
  if (this->_internal_api_trade_available_flag() != 0) {
    total_size += 2;
  }

  // bool bestprice_order_available_flag = 8;
  if (this->_internal_bestprice_order_available_flag() != 0) {
    total_size += 2;
  }

  // bool only_best_price = 9;
  if (this->_internal_only_best_price() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetTradingStatusResponse::_class_data_ = {
    GetTradingStatusResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetTradingStatusResponse::GetClassData() const {
  return &_class_data_;
}

void GetTradingStatusResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetTradingStatusResponse*>(&to_msg);
  auto& from = static_cast<const GetTradingStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  if (from._internal_trading_status() != 0) {
    _this->_internal_set_trading_status(from._internal_trading_status());
  }
  if (from._internal_limit_order_available_flag() != 0) {
    _this->_internal_set_limit_order_available_flag(from._internal_limit_order_available_flag());
  }
  if (from._internal_market_order_available_flag() != 0) {
    _this->_internal_set_market_order_available_flag(from._internal_market_order_available_flag());
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_internal_set_api_trade_available_flag(from._internal_api_trade_available_flag());
  }
  if (from._internal_bestprice_order_available_flag() != 0) {
    _this->_internal_set_bestprice_order_available_flag(from._internal_bestprice_order_available_flag());
  }
  if (from._internal_only_best_price() != 0) {
    _this->_internal_set_only_best_price(from._internal_only_best_price());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetTradingStatusResponse::CopyFrom(const GetTradingStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetTradingStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetTradingStatusResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetTradingStatusResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetTradingStatusResponse::InternalSwap(GetTradingStatusResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_uid_, &other->_impl_.instrument_uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTradingStatusResponse, _impl_.only_best_price_)
      + sizeof(GetTradingStatusResponse::_impl_.only_best_price_)
      - PROTOBUF_FIELD_OFFSET(GetTradingStatusResponse, _impl_.trading_status_)>(
          reinterpret_cast<char*>(&_impl_.trading_status_),
          reinterpret_cast<char*>(&other->_impl_.trading_status_));
}

::google::protobuf::Metadata GetTradingStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[39]);
}
// ===================================================================

class GetLastTradesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetLastTradesRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetLastTradesRequest, _impl_._has_bits_);
  static void set_has_figi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Timestamp& from(const GetLastTradesRequest* msg);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::google::protobuf::Timestamp& to(const GetLastTradesRequest* msg);
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_instrument_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::google::protobuf::Timestamp& GetLastTradesRequest::_Internal::from(const GetLastTradesRequest* msg) {
  return *msg->_impl_.from_;
}
const ::google::protobuf::Timestamp& GetLastTradesRequest::_Internal::to(const GetLastTradesRequest* msg) {
  return *msg->_impl_.to_;
}
void GetLastTradesRequest::clear_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void GetLastTradesRequest::clear_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
GetLastTradesRequest::GetLastTradesRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetLastTradesRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetLastTradesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        instrument_id_(arena, from.instrument_id_) {}

GetLastTradesRequest::GetLastTradesRequest(
    ::google::protobuf::Arena* arena,
    const GetLastTradesRequest& from)
    : ::google::protobuf::Message(arena) {
  GetLastTradesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.from_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.from_)
                : nullptr;
  _impl_.to_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.to_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetLastTradesRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetLastTradesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        instrument_id_(arena) {}

inline void GetLastTradesRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, from_),
           0,
           offsetof(Impl_, to_) -
               offsetof(Impl_, from_) +
               sizeof(Impl_::to_));
}
GetLastTradesRequest::~GetLastTradesRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetLastTradesRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetLastTradesRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_id_.Destroy();
  delete _impl_.from_;
  delete _impl_.to_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetLastTradesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetLastTradesRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.figi_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.instrument_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.from_ != nullptr);
      _impl_.from_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.to_ != nullptr);
      _impl_.to_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetLastTradesRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 85, 2> GetLastTradesRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetLastTradesRequest, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetLastTradesRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional string instrument_id = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(GetLastTradesRequest, _impl_.instrument_id_)}},
    // optional string figi = 1 [deprecated = true];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetLastTradesRequest, _impl_.figi_)}},
    // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastMtS1,
     {18, 2, 0, PROTOBUF_FIELD_OFFSET(GetLastTradesRequest, _impl_.from_)}},
    // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastMtS1,
     {26, 3, 1, PROTOBUF_FIELD_OFFSET(GetLastTradesRequest, _impl_.to_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string figi = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GetLastTradesRequest, _impl_.figi_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetLastTradesRequest, _impl_.from_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetLastTradesRequest, _impl_.to_), _Internal::kHasBitsOffset + 3, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional string instrument_id = 4;
    {PROTOBUF_FIELD_OFFSET(GetLastTradesRequest, _impl_.instrument_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\73\4\0\0\15\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.GetLastTradesRequest"
    "figi"
    "instrument_id"
  }},
};

::uint8_t* GetLastTradesRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetLastTradesRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string figi = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetLastTradesRequest.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  // optional string instrument_id = 4;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_instrument_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetLastTradesRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetLastTradesRequest)
  return target;
}

::size_t GetLastTradesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetLastTradesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string figi = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_figi());
    }

    // optional string instrument_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_instrument_id());
    }

    // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.from_);
    }

    // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.to_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetLastTradesRequest::_class_data_ = {
    GetLastTradesRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetLastTradesRequest::GetClassData() const {
  return &_class_data_;
}

void GetLastTradesRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetLastTradesRequest*>(&to_msg);
  auto& from = static_cast<const GetLastTradesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetLastTradesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_figi(from._internal_figi());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_instrument_id(from._internal_instrument_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_from()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_from());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_to()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_to());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetLastTradesRequest::CopyFrom(const GetLastTradesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetLastTradesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetLastTradesRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetLastTradesRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetLastTradesRequest::InternalSwap(GetLastTradesRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLastTradesRequest, _impl_.to_)
      + sizeof(GetLastTradesRequest::_impl_.to_)
      - PROTOBUF_FIELD_OFFSET(GetLastTradesRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::google::protobuf::Metadata GetLastTradesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[40]);
}
// ===================================================================

class GetLastTradesResponse::_Internal {
 public:
};

GetLastTradesResponse::GetLastTradesResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetLastTradesResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetLastTradesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : trades_{visibility, arena, from.trades_},
        _cached_size_{0} {}

GetLastTradesResponse::GetLastTradesResponse(
    ::google::protobuf::Arena* arena,
    const GetLastTradesResponse& from)
    : ::google::protobuf::Message(arena) {
  GetLastTradesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetLastTradesResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetLastTradesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : trades_{visibility, arena},
        _cached_size_{0} {}

inline void GetLastTradesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetLastTradesResponse::~GetLastTradesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetLastTradesResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetLastTradesResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetLastTradesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetLastTradesResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trades_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetLastTradesResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetLastTradesResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetLastTradesResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.Trade trades = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetLastTradesResponse, _impl_.trades_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.Trade trades = 1;
    {PROTOBUF_FIELD_OFFSET(GetLastTradesResponse, _impl_.trades_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Trade>()},
  }}, {{
  }},
};

::uint8_t* GetLastTradesResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetLastTradesResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Trade trades = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trades_size()); i < n; i++) {
    const auto& repfield = this->_internal_trades().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetLastTradesResponse)
  return target;
}

::size_t GetLastTradesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetLastTradesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.Trade trades = 1;
  total_size += 1UL * this->_internal_trades_size();
  for (const auto& msg : this->_internal_trades()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetLastTradesResponse::_class_data_ = {
    GetLastTradesResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetLastTradesResponse::GetClassData() const {
  return &_class_data_;
}

void GetLastTradesResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetLastTradesResponse*>(&to_msg);
  auto& from = static_cast<const GetLastTradesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetLastTradesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_trades()->MergeFrom(
      from._internal_trades());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetLastTradesResponse::CopyFrom(const GetLastTradesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetLastTradesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetLastTradesResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetLastTradesResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetLastTradesResponse::InternalSwap(GetLastTradesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.trades_.InternalSwap(&other->_impl_.trades_);
}

::google::protobuf::Metadata GetLastTradesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[41]);
}
// ===================================================================

class GetMySubscriptions::_Internal {
 public:
};

GetMySubscriptions::GetMySubscriptions(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetMySubscriptions)
}
GetMySubscriptions::GetMySubscriptions(
    ::google::protobuf::Arena* arena,
    const GetMySubscriptions& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  GetMySubscriptions* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetMySubscriptions)
}









::google::protobuf::Metadata GetMySubscriptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[42]);
}
// ===================================================================

class GetClosePricesRequest::_Internal {
 public:
};

GetClosePricesRequest::GetClosePricesRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetClosePricesRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetClosePricesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : instruments_{visibility, arena, from.instruments_},
        _cached_size_{0} {}

GetClosePricesRequest::GetClosePricesRequest(
    ::google::protobuf::Arena* arena,
    const GetClosePricesRequest& from)
    : ::google::protobuf::Message(arena) {
  GetClosePricesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetClosePricesRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetClosePricesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        _cached_size_{0} {}

inline void GetClosePricesRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetClosePricesRequest::~GetClosePricesRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetClosePricesRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetClosePricesRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetClosePricesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetClosePricesRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetClosePricesRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetClosePricesRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetClosePricesRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest instruments = 1 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetClosePricesRequest, _impl_.instruments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest instruments = 1 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetClosePricesRequest, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceRequest>()},
  }}, {{
  }},
};

::uint8_t* GetClosePricesRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetClosePricesRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest instruments = 1 [(.google.api.field_behavior) = REQUIRED];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetClosePricesRequest)
  return target;
}

::size_t GetClosePricesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetClosePricesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest instruments = 1 [(.google.api.field_behavior) = REQUIRED];
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_internal_instruments()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetClosePricesRequest::_class_data_ = {
    GetClosePricesRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetClosePricesRequest::GetClassData() const {
  return &_class_data_;
}

void GetClosePricesRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetClosePricesRequest*>(&to_msg);
  auto& from = static_cast<const GetClosePricesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetClosePricesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetClosePricesRequest::CopyFrom(const GetClosePricesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetClosePricesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetClosePricesRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetClosePricesRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetClosePricesRequest::InternalSwap(GetClosePricesRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::google::protobuf::Metadata GetClosePricesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[43]);
}
// ===================================================================

class InstrumentClosePriceRequest::_Internal {
 public:
};

InstrumentClosePriceRequest::InstrumentClosePriceRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest)
}
inline PROTOBUF_NDEBUG_INLINE InstrumentClosePriceRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : instrument_id_(arena, from.instrument_id_),
        _cached_size_{0} {}

InstrumentClosePriceRequest::InstrumentClosePriceRequest(
    ::google::protobuf::Arena* arena,
    const InstrumentClosePriceRequest& from)
    : ::google::protobuf::Message(arena) {
  InstrumentClosePriceRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest)
}
inline PROTOBUF_NDEBUG_INLINE InstrumentClosePriceRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instrument_id_(arena),
        _cached_size_{0} {}

inline void InstrumentClosePriceRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
InstrumentClosePriceRequest::~InstrumentClosePriceRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InstrumentClosePriceRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.instrument_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void InstrumentClosePriceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* InstrumentClosePriceRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 88, 2> InstrumentClosePriceRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_InstrumentClosePriceRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string instrument_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentClosePriceRequest, _impl_.instrument_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string instrument_id = 1;
    {PROTOBUF_FIELD_OFFSET(InstrumentClosePriceRequest, _impl_.instrument_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\102\15\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest"
    "instrument_id"
  }},
};

::uint8_t* InstrumentClosePriceRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string instrument_id = 1;
  if (!this->_internal_instrument_id().empty()) {
    const std::string& _s = this->_internal_instrument_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest.instrument_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest)
  return target;
}

::size_t InstrumentClosePriceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instrument_id = 1;
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData InstrumentClosePriceRequest::_class_data_ = {
    InstrumentClosePriceRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* InstrumentClosePriceRequest::GetClassData() const {
  return &_class_data_;
}

void InstrumentClosePriceRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<InstrumentClosePriceRequest*>(&to_msg);
  auto& from = static_cast<const InstrumentClosePriceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentClosePriceRequest::CopyFrom(const InstrumentClosePriceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool InstrumentClosePriceRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* InstrumentClosePriceRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void InstrumentClosePriceRequest::InternalSwap(InstrumentClosePriceRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
}

::google::protobuf::Metadata InstrumentClosePriceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[44]);
}
// ===================================================================

class GetClosePricesResponse::_Internal {
 public:
};

GetClosePricesResponse::GetClosePricesResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetClosePricesResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetClosePricesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : close_prices_{visibility, arena, from.close_prices_},
        _cached_size_{0} {}

GetClosePricesResponse::GetClosePricesResponse(
    ::google::protobuf::Arena* arena,
    const GetClosePricesResponse& from)
    : ::google::protobuf::Message(arena) {
  GetClosePricesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetClosePricesResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetClosePricesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : close_prices_{visibility, arena},
        _cached_size_{0} {}

inline void GetClosePricesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetClosePricesResponse::~GetClosePricesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetClosePricesResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetClosePricesResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetClosePricesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetClosePricesResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.close_prices_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetClosePricesResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetClosePricesResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetClosePricesResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse close_prices = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetClosePricesResponse, _impl_.close_prices_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse close_prices = 1;
    {PROTOBUF_FIELD_OFFSET(GetClosePricesResponse, _impl_.close_prices_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::InstrumentClosePriceResponse>()},
  }}, {{
  }},
};

::uint8_t* GetClosePricesResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetClosePricesResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse close_prices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_close_prices_size()); i < n; i++) {
    const auto& repfield = this->_internal_close_prices().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetClosePricesResponse)
  return target;
}

::size_t GetClosePricesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetClosePricesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse close_prices = 1;
  total_size += 1UL * this->_internal_close_prices_size();
  for (const auto& msg : this->_internal_close_prices()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetClosePricesResponse::_class_data_ = {
    GetClosePricesResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetClosePricesResponse::GetClassData() const {
  return &_class_data_;
}

void GetClosePricesResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetClosePricesResponse*>(&to_msg);
  auto& from = static_cast<const GetClosePricesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetClosePricesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_close_prices()->MergeFrom(
      from._internal_close_prices());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetClosePricesResponse::CopyFrom(const GetClosePricesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetClosePricesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetClosePricesResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetClosePricesResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetClosePricesResponse::InternalSwap(GetClosePricesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.close_prices_.InternalSwap(&other->_impl_.close_prices_);
}

::google::protobuf::Metadata GetClosePricesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[45]);
}
// ===================================================================

class InstrumentClosePriceResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<InstrumentClosePriceResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InstrumentClosePriceResponse, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& price(const InstrumentClosePriceResponse* msg);
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& evening_session_price(const InstrumentClosePriceResponse* msg);
  static void set_has_evening_session_price(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::google::protobuf::Timestamp& time(const InstrumentClosePriceResponse* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation& InstrumentClosePriceResponse::_Internal::price(const InstrumentClosePriceResponse* msg) {
  return *msg->_impl_.price_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& InstrumentClosePriceResponse::_Internal::evening_session_price(const InstrumentClosePriceResponse* msg) {
  return *msg->_impl_.evening_session_price_;
}
const ::google::protobuf::Timestamp& InstrumentClosePriceResponse::_Internal::time(const InstrumentClosePriceResponse* msg) {
  return *msg->_impl_.time_;
}
void InstrumentClosePriceResponse::clear_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.price_ != nullptr) _impl_.price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void InstrumentClosePriceResponse::clear_evening_session_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.evening_session_price_ != nullptr) _impl_.evening_session_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void InstrumentClosePriceResponse::clear_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
InstrumentClosePriceResponse::InstrumentClosePriceResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse)
}
inline PROTOBUF_NDEBUG_INLINE InstrumentClosePriceResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        instrument_uid_(arena, from.instrument_uid_) {}

InstrumentClosePriceResponse::InstrumentClosePriceResponse(
    ::google::protobuf::Arena* arena,
    const InstrumentClosePriceResponse& from)
    : ::google::protobuf::Message(arena) {
  InstrumentClosePriceResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.price_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.price_)
                : nullptr;
  _impl_.evening_session_price_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.evening_session_price_)
                : nullptr;
  _impl_.time_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.time_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse)
}
inline PROTOBUF_NDEBUG_INLINE InstrumentClosePriceResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        instrument_uid_(arena) {}

inline void InstrumentClosePriceResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, price_),
           0,
           offsetof(Impl_, time_) -
               offsetof(Impl_, price_) +
               sizeof(Impl_::time_));
}
InstrumentClosePriceResponse::~InstrumentClosePriceResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InstrumentClosePriceResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.figi_.Destroy();
  _impl_.instrument_uid_.Destroy();
  delete _impl_.price_;
  delete _impl_.evening_session_price_;
  delete _impl_.time_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void InstrumentClosePriceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.price_ != nullptr);
      _impl_.price_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.evening_session_price_ != nullptr);
      _impl_.evening_session_price_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* InstrumentClosePriceResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 94, 2> InstrumentClosePriceResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InstrumentClosePriceResponse, _impl_._has_bits_),
    0, // no _extensions_
    21, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4293915644,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_InstrumentClosePriceResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentClosePriceResponse, _impl_.figi_)}},
    // string instrument_uid = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentClosePriceResponse, _impl_.instrument_uid_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation price = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 0, 0, PROTOBUF_FIELD_OFFSET(InstrumentClosePriceResponse, _impl_.price_)}},
    // .tinkoff.public_.invest.api.contract.v1.Quotation evening_session_price = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 1, 1, PROTOBUF_FIELD_OFFSET(InstrumentClosePriceResponse, _impl_.evening_session_price_)}},
    // .google.protobuf.Timestamp time = 21;
    {::_pbi::TcParser::FastMtS2,
     {426, 2, 2, PROTOBUF_FIELD_OFFSET(InstrumentClosePriceResponse, _impl_.time_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(InstrumentClosePriceResponse, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string instrument_uid = 2;
    {PROTOBUF_FIELD_OFFSET(InstrumentClosePriceResponse, _impl_.instrument_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation price = 11;
    {PROTOBUF_FIELD_OFFSET(InstrumentClosePriceResponse, _impl_.price_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.Quotation evening_session_price = 12;
    {PROTOBUF_FIELD_OFFSET(InstrumentClosePriceResponse, _impl_.evening_session_price_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp time = 21;
    {PROTOBUF_FIELD_OFFSET(InstrumentClosePriceResponse, _impl_.time_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\103\4\16\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse"
    "figi"
    "instrument_uid"
  }},
};

::uint8_t* InstrumentClosePriceResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    const std::string& _s = this->_internal_figi();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse.figi");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string instrument_uid = 2;
  if (!this->_internal_instrument_uid().empty()) {
    const std::string& _s = this->_internal_instrument_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse.instrument_uid");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Quotation price = 11;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.Quotation evening_session_price = 12;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, _Internal::evening_session_price(this),
        _Internal::evening_session_price(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time = 21;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        21, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse)
  return target;
}

::size_t InstrumentClosePriceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string figi = 1;
  if (!this->_internal_figi().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_figi());
  }

  // string instrument_uid = 2;
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_uid());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .tinkoff.public_.invest.api.contract.v1.Quotation price = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.price_);
    }

    // .tinkoff.public_.invest.api.contract.v1.Quotation evening_session_price = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.evening_session_price_);
    }

    // .google.protobuf.Timestamp time = 21;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.time_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData InstrumentClosePriceResponse::_class_data_ = {
    InstrumentClosePriceResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* InstrumentClosePriceResponse::GetClassData() const {
  return &_class_data_;
}

void InstrumentClosePriceResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<InstrumentClosePriceResponse*>(&to_msg);
  auto& from = static_cast<const InstrumentClosePriceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_price());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_evening_session_price()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_evening_session_price());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_time());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentClosePriceResponse::CopyFrom(const InstrumentClosePriceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.InstrumentClosePriceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool InstrumentClosePriceResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* InstrumentClosePriceResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void InstrumentClosePriceResponse::InternalSwap(InstrumentClosePriceResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_uid_, &other->_impl_.instrument_uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstrumentClosePriceResponse, _impl_.time_)
      + sizeof(InstrumentClosePriceResponse::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(InstrumentClosePriceResponse, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::google::protobuf::Metadata InstrumentClosePriceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[46]);
}
// ===================================================================

class GetTechAnalysisRequest_Smoothing::_Internal {
 public:
};

GetTechAnalysisRequest_Smoothing::GetTechAnalysisRequest_Smoothing(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing)
}
GetTechAnalysisRequest_Smoothing::GetTechAnalysisRequest_Smoothing(
    ::google::protobuf::Arena* arena, const GetTechAnalysisRequest_Smoothing& from)
    : GetTechAnalysisRequest_Smoothing(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GetTechAnalysisRequest_Smoothing::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetTechAnalysisRequest_Smoothing::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, fast_length_),
           0,
           offsetof(Impl_, signal_smoothing_) -
               offsetof(Impl_, fast_length_) +
               sizeof(Impl_::signal_smoothing_));
}
GetTechAnalysisRequest_Smoothing::~GetTechAnalysisRequest_Smoothing() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetTechAnalysisRequest_Smoothing::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetTechAnalysisRequest_Smoothing::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.fast_length_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.signal_smoothing_) -
      reinterpret_cast<char*>(&_impl_.fast_length_)) + sizeof(_impl_.signal_smoothing_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetTechAnalysisRequest_Smoothing::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> GetTechAnalysisRequest_Smoothing::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GetTechAnalysisRequest_Smoothing_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 fast_length = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetTechAnalysisRequest_Smoothing, _impl_.fast_length_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest_Smoothing, _impl_.fast_length_)}},
    // int32 slow_length = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetTechAnalysisRequest_Smoothing, _impl_.slow_length_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest_Smoothing, _impl_.slow_length_)}},
    // int32 signal_smoothing = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetTechAnalysisRequest_Smoothing, _impl_.signal_smoothing_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest_Smoothing, _impl_.signal_smoothing_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 fast_length = 1;
    {PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest_Smoothing, _impl_.fast_length_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 slow_length = 2;
    {PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest_Smoothing, _impl_.slow_length_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 signal_smoothing = 3;
    {PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest_Smoothing, _impl_.signal_smoothing_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* GetTechAnalysisRequest_Smoothing::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 fast_length = 1;
  if (this->_internal_fast_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_fast_length(), target);
  }

  // int32 slow_length = 2;
  if (this->_internal_slow_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_slow_length(), target);
  }

  // int32 signal_smoothing = 3;
  if (this->_internal_signal_smoothing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_signal_smoothing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing)
  return target;
}

::size_t GetTechAnalysisRequest_Smoothing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 fast_length = 1;
  if (this->_internal_fast_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_fast_length());
  }

  // int32 slow_length = 2;
  if (this->_internal_slow_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_slow_length());
  }

  // int32 signal_smoothing = 3;
  if (this->_internal_signal_smoothing() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_signal_smoothing());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetTechAnalysisRequest_Smoothing::_class_data_ = {
    GetTechAnalysisRequest_Smoothing::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetTechAnalysisRequest_Smoothing::GetClassData() const {
  return &_class_data_;
}

void GetTechAnalysisRequest_Smoothing::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetTechAnalysisRequest_Smoothing*>(&to_msg);
  auto& from = static_cast<const GetTechAnalysisRequest_Smoothing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fast_length() != 0) {
    _this->_internal_set_fast_length(from._internal_fast_length());
  }
  if (from._internal_slow_length() != 0) {
    _this->_internal_set_slow_length(from._internal_slow_length());
  }
  if (from._internal_signal_smoothing() != 0) {
    _this->_internal_set_signal_smoothing(from._internal_signal_smoothing());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetTechAnalysisRequest_Smoothing::CopyFrom(const GetTechAnalysisRequest_Smoothing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetTechAnalysisRequest_Smoothing::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetTechAnalysisRequest_Smoothing::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetTechAnalysisRequest_Smoothing::InternalSwap(GetTechAnalysisRequest_Smoothing* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest_Smoothing, _impl_.signal_smoothing_)
      + sizeof(GetTechAnalysisRequest_Smoothing::_impl_.signal_smoothing_)
      - PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest_Smoothing, _impl_.fast_length_)>(
          reinterpret_cast<char*>(&_impl_.fast_length_),
          reinterpret_cast<char*>(&other->_impl_.fast_length_));
}

::google::protobuf::Metadata GetTechAnalysisRequest_Smoothing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[47]);
}
// ===================================================================

class GetTechAnalysisRequest_Deviation::_Internal {
 public:
  using HasBits = decltype(std::declval<GetTechAnalysisRequest_Deviation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest_Deviation, _impl_._has_bits_);
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& deviation_multiplier(const GetTechAnalysisRequest_Deviation* msg);
  static void set_has_deviation_multiplier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetTechAnalysisRequest_Deviation::_Internal::deviation_multiplier(const GetTechAnalysisRequest_Deviation* msg) {
  return *msg->_impl_.deviation_multiplier_;
}
void GetTechAnalysisRequest_Deviation::clear_deviation_multiplier() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.deviation_multiplier_ != nullptr) _impl_.deviation_multiplier_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetTechAnalysisRequest_Deviation::GetTechAnalysisRequest_Deviation(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Deviation)
}
inline PROTOBUF_NDEBUG_INLINE GetTechAnalysisRequest_Deviation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GetTechAnalysisRequest_Deviation::GetTechAnalysisRequest_Deviation(
    ::google::protobuf::Arena* arena,
    const GetTechAnalysisRequest_Deviation& from)
    : ::google::protobuf::Message(arena) {
  GetTechAnalysisRequest_Deviation* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.deviation_multiplier_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.deviation_multiplier_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Deviation)
}
inline PROTOBUF_NDEBUG_INLINE GetTechAnalysisRequest_Deviation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetTechAnalysisRequest_Deviation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.deviation_multiplier_ = {};
}
GetTechAnalysisRequest_Deviation::~GetTechAnalysisRequest_Deviation() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Deviation)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetTechAnalysisRequest_Deviation::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.deviation_multiplier_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetTechAnalysisRequest_Deviation::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Deviation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.deviation_multiplier_ != nullptr);
    _impl_.deviation_multiplier_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetTechAnalysisRequest_Deviation::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetTechAnalysisRequest_Deviation::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest_Deviation, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetTechAnalysisRequest_Deviation_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .tinkoff.public_.invest.api.contract.v1.Quotation deviation_multiplier = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest_Deviation, _impl_.deviation_multiplier_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.Quotation deviation_multiplier = 1;
    {PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest_Deviation, _impl_.deviation_multiplier_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
  }},
};

::uint8_t* GetTechAnalysisRequest_Deviation::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Deviation)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tinkoff.public_.invest.api.contract.v1.Quotation deviation_multiplier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::deviation_multiplier(this),
        _Internal::deviation_multiplier(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Deviation)
  return target;
}

::size_t GetTechAnalysisRequest_Deviation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Deviation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.Quotation deviation_multiplier = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.deviation_multiplier_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetTechAnalysisRequest_Deviation::_class_data_ = {
    GetTechAnalysisRequest_Deviation::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetTechAnalysisRequest_Deviation::GetClassData() const {
  return &_class_data_;
}

void GetTechAnalysisRequest_Deviation::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetTechAnalysisRequest_Deviation*>(&to_msg);
  auto& from = static_cast<const GetTechAnalysisRequest_Deviation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Deviation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_deviation_multiplier()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
        from._internal_deviation_multiplier());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetTechAnalysisRequest_Deviation::CopyFrom(const GetTechAnalysisRequest_Deviation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Deviation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetTechAnalysisRequest_Deviation::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetTechAnalysisRequest_Deviation::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetTechAnalysisRequest_Deviation::InternalSwap(GetTechAnalysisRequest_Deviation* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.deviation_multiplier_, other->_impl_.deviation_multiplier_);
}

::google::protobuf::Metadata GetTechAnalysisRequest_Deviation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[48]);
}
// ===================================================================

class GetTechAnalysisRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetTechAnalysisRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& from(const GetTechAnalysisRequest* msg);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Timestamp& to(const GetTechAnalysisRequest* msg);
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Deviation& deviation(const GetTechAnalysisRequest* msg);
  static void set_has_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing& smoothing(const GetTechAnalysisRequest* msg);
  static void set_has_smoothing(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::google::protobuf::Timestamp& GetTechAnalysisRequest::_Internal::from(const GetTechAnalysisRequest* msg) {
  return *msg->_impl_.from_;
}
const ::google::protobuf::Timestamp& GetTechAnalysisRequest::_Internal::to(const GetTechAnalysisRequest* msg) {
  return *msg->_impl_.to_;
}
const ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Deviation& GetTechAnalysisRequest::_Internal::deviation(const GetTechAnalysisRequest* msg) {
  return *msg->_impl_.deviation_;
}
const ::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing& GetTechAnalysisRequest::_Internal::smoothing(const GetTechAnalysisRequest* msg) {
  return *msg->_impl_.smoothing_;
}
void GetTechAnalysisRequest::clear_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetTechAnalysisRequest::clear_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GetTechAnalysisRequest::GetTechAnalysisRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetTechAnalysisRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        instrument_uid_(arena, from.instrument_uid_) {}

GetTechAnalysisRequest::GetTechAnalysisRequest(
    ::google::protobuf::Arena* arena,
    const GetTechAnalysisRequest& from)
    : ::google::protobuf::Message(arena) {
  GetTechAnalysisRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.from_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.from_)
                : nullptr;
  _impl_.to_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.to_)
                : nullptr;
  _impl_.deviation_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Deviation>(arena, *from._impl_.deviation_)
                : nullptr;
  _impl_.smoothing_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing>(arena, *from._impl_.smoothing_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, indicator_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, indicator_type_),
           offsetof(Impl_, length_) -
               offsetof(Impl_, indicator_type_) +
               sizeof(Impl_::length_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetTechAnalysisRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        instrument_uid_(arena) {}

inline void GetTechAnalysisRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, from_),
           0,
           offsetof(Impl_, length_) -
               offsetof(Impl_, from_) +
               sizeof(Impl_::length_));
}
GetTechAnalysisRequest::~GetTechAnalysisRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetTechAnalysisRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.instrument_uid_.Destroy();
  delete _impl_.from_;
  delete _impl_.to_;
  delete _impl_.deviation_;
  delete _impl_.smoothing_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetTechAnalysisRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_uid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.from_ != nullptr);
      _impl_.from_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.to_ != nullptr);
      _impl_.to_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.deviation_ != nullptr);
      _impl_.deviation_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.smoothing_ != nullptr);
      _impl_.smoothing_->Clear();
    }
  }
  ::memset(&_impl_.indicator_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.length_) -
      reinterpret_cast<char*>(&_impl_.indicator_type_)) + sizeof(_impl_.length_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetTechAnalysisRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 4, 92, 2> GetTechAnalysisRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetTechAnalysisRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorType indicator_type = 1 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetTechAnalysisRequest, _impl_.indicator_type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest, _impl_.indicator_type_)}},
    // string instrument_uid = 2 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest, _impl_.instrument_uid_)}},
    // .google.protobuf.Timestamp from = 3 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest, _impl_.from_)}},
    // .google.protobuf.Timestamp to = 4 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest, _impl_.to_)}},
    // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorInterval interval = 5 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetTechAnalysisRequest, _impl_.interval_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest, _impl_.interval_)}},
    // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.TypeOfPrice type_of_price = 6 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetTechAnalysisRequest, _impl_.type_of_price_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest, _impl_.type_of_price_)}},
    // int32 length = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetTechAnalysisRequest, _impl_.length_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest, _impl_.length_)}},
    // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Deviation deviation = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 2, 2, PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest, _impl_.deviation_)}},
    // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing smoothing = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 3, 3, PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest, _impl_.smoothing_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorType indicator_type = 1 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest, _impl_.indicator_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string instrument_uid = 2 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest, _impl_.instrument_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp from = 3 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest, _impl_.from_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp to = 4 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest, _impl_.to_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorInterval interval = 5 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest, _impl_.interval_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.TypeOfPrice type_of_price = 6 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest, _impl_.type_of_price_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 length = 7;
    {PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest, _impl_.length_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Deviation deviation = 8;
    {PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest, _impl_.deviation_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing smoothing = 9;
    {PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest, _impl_.smoothing_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Deviation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing>()},
  }}, {{
    "\75\0\16\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest"
    "instrument_uid"
  }},
};

::uint8_t* GetTechAnalysisRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorType indicator_type = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_indicator_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_indicator_type(), target);
  }

  // string instrument_uid = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_uid().empty()) {
    const std::string& _s = this->_internal_instrument_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.instrument_uid");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp from = 3 [(.google.api.field_behavior) = REQUIRED];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp to = 4 [(.google.api.field_behavior) = REQUIRED];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorInterval interval = 5 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_interval(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.TypeOfPrice type_of_price = 6 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_type_of_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_type_of_price(), target);
  }

  // int32 length = 7;
  if (this->_internal_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_length(), target);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Deviation deviation = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::deviation(this),
        _Internal::deviation(this).GetCachedSize(), target, stream);
  }

  // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing smoothing = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::smoothing(this),
        _Internal::smoothing(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest)
  return target;
}

::size_t GetTechAnalysisRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instrument_uid = 2 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_instrument_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrument_uid());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .google.protobuf.Timestamp from = 3 [(.google.api.field_behavior) = REQUIRED];
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.from_);
    }

    // .google.protobuf.Timestamp to = 4 [(.google.api.field_behavior) = REQUIRED];
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.to_);
    }

    // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Deviation deviation = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.deviation_);
    }

    // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing smoothing = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.smoothing_);
    }

  }
  // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorType indicator_type = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_indicator_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_indicator_type());
  }

  // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorInterval interval = 5 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_interval() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_interval());
  }

  // .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest.TypeOfPrice type_of_price = 6 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_type_of_price() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type_of_price());
  }

  // int32 length = 7;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetTechAnalysisRequest::_class_data_ = {
    GetTechAnalysisRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetTechAnalysisRequest::GetClassData() const {
  return &_class_data_;
}

void GetTechAnalysisRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetTechAnalysisRequest*>(&to_msg);
  auto& from = static_cast<const GetTechAnalysisRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_from()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_from());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_to()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_to());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_deviation()->::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Deviation::MergeFrom(
          from._internal_deviation());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_smoothing()->::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing::MergeFrom(
          from._internal_smoothing());
    }
  }
  if (from._internal_indicator_type() != 0) {
    _this->_internal_set_indicator_type(from._internal_indicator_type());
  }
  if (from._internal_interval() != 0) {
    _this->_internal_set_interval(from._internal_interval());
  }
  if (from._internal_type_of_price() != 0) {
    _this->_internal_set_type_of_price(from._internal_type_of_price());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetTechAnalysisRequest::CopyFrom(const GetTechAnalysisRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetTechAnalysisRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetTechAnalysisRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetTechAnalysisRequest::InternalSwap(GetTechAnalysisRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_uid_, &other->_impl_.instrument_uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest, _impl_.length_)
      + sizeof(GetTechAnalysisRequest::_impl_.length_)
      - PROTOBUF_FIELD_OFFSET(GetTechAnalysisRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::google::protobuf::Metadata GetTechAnalysisRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[49]);
}
// ===================================================================

class GetTechAnalysisResponse_TechAnalysisItem::_Internal {
 public:
  using HasBits = decltype(std::declval<GetTechAnalysisResponse_TechAnalysisItem>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetTechAnalysisResponse_TechAnalysisItem, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& timestamp(const GetTechAnalysisResponse_TechAnalysisItem* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& middle_band(const GetTechAnalysisResponse_TechAnalysisItem* msg);
  static void set_has_middle_band(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& upper_band(const GetTechAnalysisResponse_TechAnalysisItem* msg);
  static void set_has_upper_band(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& lower_band(const GetTechAnalysisResponse_TechAnalysisItem* msg);
  static void set_has_lower_band(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& signal(const GetTechAnalysisResponse_TechAnalysisItem* msg);
  static void set_has_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::tinkoff::public_::invest::api::contract::v1::Quotation& macd(const GetTechAnalysisResponse_TechAnalysisItem* msg);
  static void set_has_macd(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::google::protobuf::Timestamp& GetTechAnalysisResponse_TechAnalysisItem::_Internal::timestamp(const GetTechAnalysisResponse_TechAnalysisItem* msg) {
  return *msg->_impl_.timestamp_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetTechAnalysisResponse_TechAnalysisItem::_Internal::middle_band(const GetTechAnalysisResponse_TechAnalysisItem* msg) {
  return *msg->_impl_.middle_band_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetTechAnalysisResponse_TechAnalysisItem::_Internal::upper_band(const GetTechAnalysisResponse_TechAnalysisItem* msg) {
  return *msg->_impl_.upper_band_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetTechAnalysisResponse_TechAnalysisItem::_Internal::lower_band(const GetTechAnalysisResponse_TechAnalysisItem* msg) {
  return *msg->_impl_.lower_band_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetTechAnalysisResponse_TechAnalysisItem::_Internal::signal(const GetTechAnalysisResponse_TechAnalysisItem* msg) {
  return *msg->_impl_.signal_;
}
const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetTechAnalysisResponse_TechAnalysisItem::_Internal::macd(const GetTechAnalysisResponse_TechAnalysisItem* msg) {
  return *msg->_impl_.macd_;
}
void GetTechAnalysisResponse_TechAnalysisItem::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetTechAnalysisResponse_TechAnalysisItem::clear_middle_band() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.middle_band_ != nullptr) _impl_.middle_band_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GetTechAnalysisResponse_TechAnalysisItem::clear_upper_band() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.upper_band_ != nullptr) _impl_.upper_band_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void GetTechAnalysisResponse_TechAnalysisItem::clear_lower_band() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.lower_band_ != nullptr) _impl_.lower_band_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void GetTechAnalysisResponse_TechAnalysisItem::clear_signal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.signal_ != nullptr) _impl_.signal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void GetTechAnalysisResponse_TechAnalysisItem::clear_macd() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.macd_ != nullptr) _impl_.macd_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
GetTechAnalysisResponse_TechAnalysisItem::GetTechAnalysisResponse_TechAnalysisItem(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem)
}
inline PROTOBUF_NDEBUG_INLINE GetTechAnalysisResponse_TechAnalysisItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GetTechAnalysisResponse_TechAnalysisItem::GetTechAnalysisResponse_TechAnalysisItem(
    ::google::protobuf::Arena* arena,
    const GetTechAnalysisResponse_TechAnalysisItem& from)
    : ::google::protobuf::Message(arena) {
  GetTechAnalysisResponse_TechAnalysisItem* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_)
                : nullptr;
  _impl_.middle_band_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.middle_band_)
                : nullptr;
  _impl_.upper_band_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.upper_band_)
                : nullptr;
  _impl_.lower_band_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.lower_band_)
                : nullptr;
  _impl_.signal_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.signal_)
                : nullptr;
  _impl_.macd_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.macd_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem)
}
inline PROTOBUF_NDEBUG_INLINE GetTechAnalysisResponse_TechAnalysisItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetTechAnalysisResponse_TechAnalysisItem::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, macd_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::macd_));
}
GetTechAnalysisResponse_TechAnalysisItem::~GetTechAnalysisResponse_TechAnalysisItem() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetTechAnalysisResponse_TechAnalysisItem::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.timestamp_;
  delete _impl_.middle_band_;
  delete _impl_.upper_band_;
  delete _impl_.lower_band_;
  delete _impl_.signal_;
  delete _impl_.macd_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetTechAnalysisResponse_TechAnalysisItem::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.middle_band_ != nullptr);
      _impl_.middle_band_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.upper_band_ != nullptr);
      _impl_.upper_band_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.lower_band_ != nullptr);
      _impl_.lower_band_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.signal_ != nullptr);
      _impl_.signal_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.macd_ != nullptr);
      _impl_.macd_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetTechAnalysisResponse_TechAnalysisItem::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 6, 0, 2> GetTechAnalysisResponse_TechAnalysisItem::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetTechAnalysisResponse_TechAnalysisItem, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetTechAnalysisResponse_TechAnalysisItem_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp timestamp = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetTechAnalysisResponse_TechAnalysisItem, _impl_.timestamp_)}},
    // optional .tinkoff.public_.invest.api.contract.v1.Quotation middle_band = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(GetTechAnalysisResponse_TechAnalysisItem, _impl_.middle_band_)}},
    // optional .tinkoff.public_.invest.api.contract.v1.Quotation upper_band = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(GetTechAnalysisResponse_TechAnalysisItem, _impl_.upper_band_)}},
    // optional .tinkoff.public_.invest.api.contract.v1.Quotation lower_band = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(GetTechAnalysisResponse_TechAnalysisItem, _impl_.lower_band_)}},
    // optional .tinkoff.public_.invest.api.contract.v1.Quotation signal = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(GetTechAnalysisResponse_TechAnalysisItem, _impl_.signal_)}},
    // optional .tinkoff.public_.invest.api.contract.v1.Quotation macd = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 5, 5, PROTOBUF_FIELD_OFFSET(GetTechAnalysisResponse_TechAnalysisItem, _impl_.macd_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(GetTechAnalysisResponse_TechAnalysisItem, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .tinkoff.public_.invest.api.contract.v1.Quotation middle_band = 2;
    {PROTOBUF_FIELD_OFFSET(GetTechAnalysisResponse_TechAnalysisItem, _impl_.middle_band_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .tinkoff.public_.invest.api.contract.v1.Quotation upper_band = 3;
    {PROTOBUF_FIELD_OFFSET(GetTechAnalysisResponse_TechAnalysisItem, _impl_.upper_band_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .tinkoff.public_.invest.api.contract.v1.Quotation lower_band = 4;
    {PROTOBUF_FIELD_OFFSET(GetTechAnalysisResponse_TechAnalysisItem, _impl_.lower_band_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .tinkoff.public_.invest.api.contract.v1.Quotation signal = 5;
    {PROTOBUF_FIELD_OFFSET(GetTechAnalysisResponse_TechAnalysisItem, _impl_.signal_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .tinkoff.public_.invest.api.contract.v1.Quotation macd = 6;
    {PROTOBUF_FIELD_OFFSET(GetTechAnalysisResponse_TechAnalysisItem, _impl_.macd_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
  }},
};

::uint8_t* GetTechAnalysisResponse_TechAnalysisItem::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // optional .tinkoff.public_.invest.api.contract.v1.Quotation middle_band = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::middle_band(this),
        _Internal::middle_band(this).GetCachedSize(), target, stream);
  }

  // optional .tinkoff.public_.invest.api.contract.v1.Quotation upper_band = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::upper_band(this),
        _Internal::upper_band(this).GetCachedSize(), target, stream);
  }

  // optional .tinkoff.public_.invest.api.contract.v1.Quotation lower_band = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::lower_band(this),
        _Internal::lower_band(this).GetCachedSize(), target, stream);
  }

  // optional .tinkoff.public_.invest.api.contract.v1.Quotation signal = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::signal(this),
        _Internal::signal(this).GetCachedSize(), target, stream);
  }

  // optional .tinkoff.public_.invest.api.contract.v1.Quotation macd = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::macd(this),
        _Internal::macd(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem)
  return target;
}

::size_t GetTechAnalysisResponse_TechAnalysisItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // .google.protobuf.Timestamp timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.timestamp_);
    }

    // optional .tinkoff.public_.invest.api.contract.v1.Quotation middle_band = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.middle_band_);
    }

    // optional .tinkoff.public_.invest.api.contract.v1.Quotation upper_band = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.upper_band_);
    }

    // optional .tinkoff.public_.invest.api.contract.v1.Quotation lower_band = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.lower_band_);
    }

    // optional .tinkoff.public_.invest.api.contract.v1.Quotation signal = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.signal_);
    }

    // optional .tinkoff.public_.invest.api.contract.v1.Quotation macd = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.macd_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetTechAnalysisResponse_TechAnalysisItem::_class_data_ = {
    GetTechAnalysisResponse_TechAnalysisItem::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetTechAnalysisResponse_TechAnalysisItem::GetClassData() const {
  return &_class_data_;
}

void GetTechAnalysisResponse_TechAnalysisItem::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetTechAnalysisResponse_TechAnalysisItem*>(&to_msg);
  auto& from = static_cast<const GetTechAnalysisResponse_TechAnalysisItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_middle_band()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_middle_band());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_upper_band()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_upper_band());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_lower_band()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_lower_band());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_signal()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_signal());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_macd()->::tinkoff::public_::invest::api::contract::v1::Quotation::MergeFrom(
          from._internal_macd());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetTechAnalysisResponse_TechAnalysisItem::CopyFrom(const GetTechAnalysisResponse_TechAnalysisItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetTechAnalysisResponse_TechAnalysisItem::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetTechAnalysisResponse_TechAnalysisItem::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetTechAnalysisResponse_TechAnalysisItem::InternalSwap(GetTechAnalysisResponse_TechAnalysisItem* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTechAnalysisResponse_TechAnalysisItem, _impl_.macd_)
      + sizeof(GetTechAnalysisResponse_TechAnalysisItem::_impl_.macd_)
      - PROTOBUF_FIELD_OFFSET(GetTechAnalysisResponse_TechAnalysisItem, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata GetTechAnalysisResponse_TechAnalysisItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[50]);
}
// ===================================================================

class GetTechAnalysisResponse::_Internal {
 public:
};

GetTechAnalysisResponse::GetTechAnalysisResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetTechAnalysisResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : technical_indicators_{visibility, arena, from.technical_indicators_},
        _cached_size_{0} {}

GetTechAnalysisResponse::GetTechAnalysisResponse(
    ::google::protobuf::Arena* arena,
    const GetTechAnalysisResponse& from)
    : ::google::protobuf::Message(arena) {
  GetTechAnalysisResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetTechAnalysisResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : technical_indicators_{visibility, arena},
        _cached_size_{0} {}

inline void GetTechAnalysisResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetTechAnalysisResponse::~GetTechAnalysisResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetTechAnalysisResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetTechAnalysisResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.technical_indicators_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetTechAnalysisResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetTechAnalysisResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetTechAnalysisResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem technical_indicators = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetTechAnalysisResponse, _impl_.technical_indicators_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem technical_indicators = 1;
    {PROTOBUF_FIELD_OFFSET(GetTechAnalysisResponse, _impl_.technical_indicators_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem>()},
  }}, {{
  }},
};

::uint8_t* GetTechAnalysisResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem technical_indicators = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_technical_indicators_size()); i < n; i++) {
    const auto& repfield = this->_internal_technical_indicators().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse)
  return target;
}

::size_t GetTechAnalysisResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem technical_indicators = 1;
  total_size += 1UL * this->_internal_technical_indicators_size();
  for (const auto& msg : this->_internal_technical_indicators()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetTechAnalysisResponse::_class_data_ = {
    GetTechAnalysisResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetTechAnalysisResponse::GetClassData() const {
  return &_class_data_;
}

void GetTechAnalysisResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetTechAnalysisResponse*>(&to_msg);
  auto& from = static_cast<const GetTechAnalysisResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_technical_indicators()->MergeFrom(
      from._internal_technical_indicators());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetTechAnalysisResponse::CopyFrom(const GetTechAnalysisResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.GetTechAnalysisResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetTechAnalysisResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetTechAnalysisResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetTechAnalysisResponse::InternalSwap(GetTechAnalysisResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.technical_indicators_.InternalSwap(&other->_impl_.technical_indicators_);
}

::google::protobuf::Metadata GetTechAnalysisResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_marketdata_2eproto_getter, &descriptor_table_marketdata_2eproto_once,
      file_level_metadata_marketdata_2eproto[51]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
