// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: marketdata.proto
#ifndef GRPC_marketdata_2eproto__INCLUDED
#define GRPC_marketdata_2eproto__INCLUDED

#include "marketdata.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {

class MarketDataService final {
 public:
  static constexpr char const* service_full_name() {
    return "tinkoff.public_.invest.api.contract.v1.MarketDataService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Метод запроса исторических свечей по инструменту.
    virtual ::grpc::Status GetCandles(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse>> AsyncGetCandles(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse>>(AsyncGetCandlesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse>> PrepareAsyncGetCandles(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse>>(PrepareAsyncGetCandlesRaw(context, request, cq));
    }
    // Метод запроса цен последних сделок по инструментам.
    virtual ::grpc::Status GetLastPrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse>> AsyncGetLastPrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse>>(AsyncGetLastPricesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse>> PrepareAsyncGetLastPrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse>>(PrepareAsyncGetLastPricesRaw(context, request, cq));
    }
    // Метод получения стакана по инструменту.
    virtual ::grpc::Status GetOrderBook(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse>> AsyncGetOrderBook(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse>>(AsyncGetOrderBookRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse>> PrepareAsyncGetOrderBook(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse>>(PrepareAsyncGetOrderBookRaw(context, request, cq));
    }
    // Метод запроса статуса торгов по инструментам.
    virtual ::grpc::Status GetTradingStatus(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse>> AsyncGetTradingStatus(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse>>(AsyncGetTradingStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse>> PrepareAsyncGetTradingStatus(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse>>(PrepareAsyncGetTradingStatusRaw(context, request, cq));
    }
    // Метод запроса статуса торгов по инструментам.
    virtual ::grpc::Status GetTradingStatuses(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse>> AsyncGetTradingStatuses(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse>>(AsyncGetTradingStatusesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse>> PrepareAsyncGetTradingStatuses(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse>>(PrepareAsyncGetTradingStatusesRaw(context, request, cq));
    }
    // Метод запроса обезличенных сделок за последний час.
    virtual ::grpc::Status GetLastTrades(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse>> AsyncGetLastTrades(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse>>(AsyncGetLastTradesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse>> PrepareAsyncGetLastTrades(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse>>(PrepareAsyncGetLastTradesRaw(context, request, cq));
    }
    // Метод запроса цен закрытия торговой сессии по инструментам.
    virtual ::grpc::Status GetClosePrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse>> AsyncGetClosePrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse>>(AsyncGetClosePricesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse>> PrepareAsyncGetClosePrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse>>(PrepareAsyncGetClosePricesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Метод запроса исторических свечей по инструменту.
      virtual void GetCandles(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCandles(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Метод запроса цен последних сделок по инструментам.
      virtual void GetLastPrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLastPrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Метод получения стакана по инструменту.
      virtual void GetOrderBook(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOrderBook(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Метод запроса статуса торгов по инструментам.
      virtual void GetTradingStatus(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTradingStatus(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Метод запроса статуса торгов по инструментам.
      virtual void GetTradingStatuses(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTradingStatuses(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Метод запроса обезличенных сделок за последний час.
      virtual void GetLastTrades(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLastTrades(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Метод запроса цен закрытия торговой сессии по инструментам.
      virtual void GetClosePrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetClosePrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse>* AsyncGetCandlesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse>* PrepareAsyncGetCandlesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse>* AsyncGetLastPricesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse>* PrepareAsyncGetLastPricesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse>* AsyncGetOrderBookRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse>* PrepareAsyncGetOrderBookRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse>* AsyncGetTradingStatusRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse>* PrepareAsyncGetTradingStatusRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse>* AsyncGetTradingStatusesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse>* PrepareAsyncGetTradingStatusesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse>* AsyncGetLastTradesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse>* PrepareAsyncGetLastTradesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse>* AsyncGetClosePricesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse>* PrepareAsyncGetClosePricesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetCandles(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse>> AsyncGetCandles(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse>>(AsyncGetCandlesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse>> PrepareAsyncGetCandles(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse>>(PrepareAsyncGetCandlesRaw(context, request, cq));
    }
    ::grpc::Status GetLastPrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse>> AsyncGetLastPrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse>>(AsyncGetLastPricesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse>> PrepareAsyncGetLastPrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse>>(PrepareAsyncGetLastPricesRaw(context, request, cq));
    }
    ::grpc::Status GetOrderBook(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse>> AsyncGetOrderBook(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse>>(AsyncGetOrderBookRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse>> PrepareAsyncGetOrderBook(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse>>(PrepareAsyncGetOrderBookRaw(context, request, cq));
    }
    ::grpc::Status GetTradingStatus(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse>> AsyncGetTradingStatus(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse>>(AsyncGetTradingStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse>> PrepareAsyncGetTradingStatus(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse>>(PrepareAsyncGetTradingStatusRaw(context, request, cq));
    }
    ::grpc::Status GetTradingStatuses(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse>> AsyncGetTradingStatuses(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse>>(AsyncGetTradingStatusesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse>> PrepareAsyncGetTradingStatuses(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse>>(PrepareAsyncGetTradingStatusesRaw(context, request, cq));
    }
    ::grpc::Status GetLastTrades(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse>> AsyncGetLastTrades(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse>>(AsyncGetLastTradesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse>> PrepareAsyncGetLastTrades(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse>>(PrepareAsyncGetLastTradesRaw(context, request, cq));
    }
    ::grpc::Status GetClosePrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse>> AsyncGetClosePrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse>>(AsyncGetClosePricesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse>> PrepareAsyncGetClosePrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse>>(PrepareAsyncGetClosePricesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetCandles(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCandles(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLastPrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLastPrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetOrderBook(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOrderBook(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTradingStatus(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTradingStatus(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTradingStatuses(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTradingStatuses(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLastTrades(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLastTrades(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetClosePrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetClosePrices(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse>* AsyncGetCandlesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse>* PrepareAsyncGetCandlesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse>* AsyncGetLastPricesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse>* PrepareAsyncGetLastPricesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse>* AsyncGetOrderBookRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse>* PrepareAsyncGetOrderBookRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse>* AsyncGetTradingStatusRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse>* PrepareAsyncGetTradingStatusRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse>* AsyncGetTradingStatusesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse>* PrepareAsyncGetTradingStatusesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse>* AsyncGetLastTradesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse>* PrepareAsyncGetLastTradesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse>* AsyncGetClosePricesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse>* PrepareAsyncGetClosePricesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetCandles_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLastPrices_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOrderBook_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTradingStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTradingStatuses_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLastTrades_;
    const ::grpc::internal::RpcMethod rpcmethod_GetClosePrices_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Метод запроса исторических свечей по инструменту.
    virtual ::grpc::Status GetCandles(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse* response);
    // Метод запроса цен последних сделок по инструментам.
    virtual ::grpc::Status GetLastPrices(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse* response);
    // Метод получения стакана по инструменту.
    virtual ::grpc::Status GetOrderBook(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse* response);
    // Метод запроса статуса торгов по инструментам.
    virtual ::grpc::Status GetTradingStatus(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse* response);
    // Метод запроса статуса торгов по инструментам.
    virtual ::grpc::Status GetTradingStatuses(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse* response);
    // Метод запроса обезличенных сделок за последний час.
    virtual ::grpc::Status GetLastTrades(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse* response);
    // Метод запроса цен закрытия торговой сессии по инструментам.
    virtual ::grpc::Status GetClosePrices(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCandles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCandles() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetCandles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCandles(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCandles(::grpc::ServerContext* context, ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest* request, ::grpc::ServerAsyncResponseWriter< ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLastPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLastPrices() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetLastPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastPrices(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLastPrices(::grpc::ServerContext* context, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest* request, ::grpc::ServerAsyncResponseWriter< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOrderBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOrderBook() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetOrderBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderBook(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrderBook(::grpc::ServerContext* context, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest* request, ::grpc::ServerAsyncResponseWriter< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTradingStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTradingStatus() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetTradingStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTradingStatus(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTradingStatus(::grpc::ServerContext* context, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTradingStatuses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTradingStatuses() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetTradingStatuses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTradingStatuses(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTradingStatuses(::grpc::ServerContext* context, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest* request, ::grpc::ServerAsyncResponseWriter< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLastTrades : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLastTrades() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetLastTrades() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastTrades(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLastTrades(::grpc::ServerContext* context, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest* request, ::grpc::ServerAsyncResponseWriter< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetClosePrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetClosePrices() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetClosePrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClosePrices(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetClosePrices(::grpc::ServerContext* context, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest* request, ::grpc::ServerAsyncResponseWriter< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetCandles<WithAsyncMethod_GetLastPrices<WithAsyncMethod_GetOrderBook<WithAsyncMethod_GetTradingStatus<WithAsyncMethod_GetTradingStatuses<WithAsyncMethod_GetLastTrades<WithAsyncMethod_GetClosePrices<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetCandles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCandles() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse* response) { return this->GetCandles(context, request, response); }));}
    void SetMessageAllocatorFor_GetCandles(
        ::grpc::MessageAllocator< ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCandles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCandles(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCandles(
      ::grpc::CallbackServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLastPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLastPrices() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse* response) { return this->GetLastPrices(context, request, response); }));}
    void SetMessageAllocatorFor_GetLastPrices(
        ::grpc::MessageAllocator< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLastPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastPrices(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLastPrices(
      ::grpc::CallbackServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetOrderBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetOrderBook() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse* response) { return this->GetOrderBook(context, request, response); }));}
    void SetMessageAllocatorFor_GetOrderBook(
        ::grpc::MessageAllocator< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetOrderBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderBook(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOrderBook(
      ::grpc::CallbackServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTradingStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTradingStatus() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse* response) { return this->GetTradingStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetTradingStatus(
        ::grpc::MessageAllocator< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTradingStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTradingStatus(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTradingStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTradingStatuses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTradingStatuses() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse* response) { return this->GetTradingStatuses(context, request, response); }));}
    void SetMessageAllocatorFor_GetTradingStatuses(
        ::grpc::MessageAllocator< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTradingStatuses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTradingStatuses(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTradingStatuses(
      ::grpc::CallbackServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLastTrades : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLastTrades() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse* response) { return this->GetLastTrades(context, request, response); }));}
    void SetMessageAllocatorFor_GetLastTrades(
        ::grpc::MessageAllocator< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLastTrades() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastTrades(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLastTrades(
      ::grpc::CallbackServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetClosePrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetClosePrices() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse* response) { return this->GetClosePrices(context, request, response); }));}
    void SetMessageAllocatorFor_GetClosePrices(
        ::grpc::MessageAllocator< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetClosePrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClosePrices(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetClosePrices(
      ::grpc::CallbackServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetCandles<WithCallbackMethod_GetLastPrices<WithCallbackMethod_GetOrderBook<WithCallbackMethod_GetTradingStatus<WithCallbackMethod_GetTradingStatuses<WithCallbackMethod_GetLastTrades<WithCallbackMethod_GetClosePrices<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetCandles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCandles() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetCandles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCandles(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLastPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLastPrices() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetLastPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastPrices(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOrderBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOrderBook() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetOrderBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderBook(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTradingStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTradingStatus() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetTradingStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTradingStatus(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTradingStatuses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTradingStatuses() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetTradingStatuses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTradingStatuses(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLastTrades : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLastTrades() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetLastTrades() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastTrades(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetClosePrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetClosePrices() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetClosePrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClosePrices(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCandles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCandles() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetCandles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCandles(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCandles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLastPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLastPrices() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetLastPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastPrices(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLastPrices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOrderBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOrderBook() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetOrderBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderBook(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrderBook(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTradingStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTradingStatus() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetTradingStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTradingStatus(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTradingStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTradingStatuses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTradingStatuses() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetTradingStatuses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTradingStatuses(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTradingStatuses(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLastTrades : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLastTrades() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetLastTrades() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastTrades(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLastTrades(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetClosePrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetClosePrices() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetClosePrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClosePrices(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetClosePrices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCandles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCandles() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCandles(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCandles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCandles(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCandles(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLastPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLastPrices() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLastPrices(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLastPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastPrices(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLastPrices(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetOrderBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetOrderBook() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOrderBook(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetOrderBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderBook(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOrderBook(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTradingStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTradingStatus() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTradingStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTradingStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTradingStatus(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTradingStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTradingStatuses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTradingStatuses() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTradingStatuses(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTradingStatuses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTradingStatuses(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTradingStatuses(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLastTrades : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLastTrades() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLastTrades(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLastTrades() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastTrades(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLastTrades(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetClosePrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetClosePrices() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetClosePrices(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetClosePrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClosePrices(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetClosePrices(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCandles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCandles() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse>* streamer) {
                       return this->StreamedGetCandles(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCandles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCandles(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCandles(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tinkoff::public_::invest::api::contract::v1::GetCandlesRequest,::tinkoff::public_::invest::api::contract::v1::GetCandlesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLastPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLastPrices() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse>* streamer) {
                       return this->StreamedGetLastPrices(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLastPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLastPrices(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLastPrices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tinkoff::public_::invest::api::contract::v1::GetLastPricesRequest,::tinkoff::public_::invest::api::contract::v1::GetLastPricesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOrderBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOrderBook() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse>* streamer) {
                       return this->StreamedGetOrderBook(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetOrderBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOrderBook(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOrderBook(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tinkoff::public_::invest::api::contract::v1::GetOrderBookRequest,::tinkoff::public_::invest::api::contract::v1::GetOrderBookResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTradingStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTradingStatus() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse>* streamer) {
                       return this->StreamedGetTradingStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTradingStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTradingStatus(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTradingStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusRequest,::tinkoff::public_::invest::api::contract::v1::GetTradingStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTradingStatuses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTradingStatuses() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse>* streamer) {
                       return this->StreamedGetTradingStatuses(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTradingStatuses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTradingStatuses(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTradingStatuses(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesRequest,::tinkoff::public_::invest::api::contract::v1::GetTradingStatusesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLastTrades : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLastTrades() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse>* streamer) {
                       return this->StreamedGetLastTrades(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLastTrades() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLastTrades(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLastTrades(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tinkoff::public_::invest::api::contract::v1::GetLastTradesRequest,::tinkoff::public_::invest::api::contract::v1::GetLastTradesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetClosePrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetClosePrices() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse>* streamer) {
                       return this->StreamedGetClosePrices(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetClosePrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetClosePrices(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetClosePrices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tinkoff::public_::invest::api::contract::v1::GetClosePricesRequest,::tinkoff::public_::invest::api::contract::v1::GetClosePricesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetCandles<WithStreamedUnaryMethod_GetLastPrices<WithStreamedUnaryMethod_GetOrderBook<WithStreamedUnaryMethod_GetTradingStatus<WithStreamedUnaryMethod_GetTradingStatuses<WithStreamedUnaryMethod_GetLastTrades<WithStreamedUnaryMethod_GetClosePrices<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetCandles<WithStreamedUnaryMethod_GetLastPrices<WithStreamedUnaryMethod_GetOrderBook<WithStreamedUnaryMethod_GetTradingStatus<WithStreamedUnaryMethod_GetTradingStatuses<WithStreamedUnaryMethod_GetLastTrades<WithStreamedUnaryMethod_GetClosePrices<Service > > > > > > > StreamedService;
};
// Сервис получения биржевой информации:</br> **1**. свечи;</br> **2**. стаканы;</br> **3**. торговые статусы;</br> **4**. лента сделок.

class MarketDataStreamService final {
 public:
  static constexpr char const* service_full_name() {
    return "tinkoff.public_.invest.api.contract.v1.MarketDataStreamService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Bi-directional стрим предоставления биржевой информации.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>> MarketDataStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>>(MarketDataStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>> AsyncMarketDataStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>>(AsyncMarketDataStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>> PrepareAsyncMarketDataStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>>(PrepareAsyncMarketDataStreamRaw(context, cq));
    }
    // Server-side стрим предоставления биржевой информации.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>> MarketDataServerSideStream(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>>(MarketDataServerSideStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>> AsyncMarketDataServerSideStream(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>>(AsyncMarketDataServerSideStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>> PrepareAsyncMarketDataServerSideStream(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>>(PrepareAsyncMarketDataServerSideStreamRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Bi-directional стрим предоставления биржевой информации.
      virtual void MarketDataStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest,::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* reactor) = 0;
      // Server-side стрим предоставления биржевой информации.
      virtual void MarketDataServerSideStream(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest* request, ::grpc::ClientReadReactor< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* MarketDataStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* AsyncMarketDataStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* PrepareAsyncMarketDataStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* MarketDataServerSideStreamRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* AsyncMarketDataServerSideStreamRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* PrepareAsyncMarketDataServerSideStreamRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>> MarketDataStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>>(MarketDataStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>> AsyncMarketDataStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>>(AsyncMarketDataStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>> PrepareAsyncMarketDataStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>>(PrepareAsyncMarketDataStreamRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>> MarketDataServerSideStream(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>>(MarketDataServerSideStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>> AsyncMarketDataServerSideStream(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>>(AsyncMarketDataServerSideStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>> PrepareAsyncMarketDataServerSideStream(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>>(PrepareAsyncMarketDataServerSideStreamRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void MarketDataStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest,::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* reactor) override;
      void MarketDataServerSideStream(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest* request, ::grpc::ClientReadReactor< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* MarketDataStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* AsyncMarketDataStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* PrepareAsyncMarketDataStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* MarketDataServerSideStreamRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest& request) override;
    ::grpc::ClientAsyncReader< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* AsyncMarketDataServerSideStreamRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* PrepareAsyncMarketDataServerSideStreamRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_MarketDataStream_;
    const ::grpc::internal::RpcMethod rpcmethod_MarketDataServerSideStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Bi-directional стрим предоставления биржевой информации.
    virtual ::grpc::Status MarketDataStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse, ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest>* stream);
    // Server-side стрим предоставления биржевой информации.
    virtual ::grpc::Status MarketDataServerSideStream(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest* request, ::grpc::ServerWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_MarketDataStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MarketDataStream() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_MarketDataStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarketDataStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse, ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarketDataStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse, ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MarketDataServerSideStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MarketDataServerSideStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_MarketDataServerSideStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarketDataServerSideStream(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest* /*request*/, ::grpc::ServerWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarketDataServerSideStream(::grpc::ServerContext* context, ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest* request, ::grpc::ServerAsyncWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_MarketDataStream<WithAsyncMethod_MarketDataServerSideStream<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_MarketDataStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MarketDataStream() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->MarketDataStream(context); }));
    }
    ~WithCallbackMethod_MarketDataStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarketDataStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse, ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* MarketDataStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MarketDataServerSideStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MarketDataServerSideStream() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest* request) { return this->MarketDataServerSideStream(context, request); }));
    }
    ~WithCallbackMethod_MarketDataServerSideStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarketDataServerSideStream(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest* /*request*/, ::grpc::ServerWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* MarketDataServerSideStream(
      ::grpc::CallbackServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_MarketDataStream<WithCallbackMethod_MarketDataServerSideStream<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_MarketDataStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MarketDataStream() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_MarketDataStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarketDataStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse, ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MarketDataServerSideStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MarketDataServerSideStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_MarketDataServerSideStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarketDataServerSideStream(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest* /*request*/, ::grpc::ServerWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_MarketDataStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MarketDataStream() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_MarketDataStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarketDataStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse, ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarketDataStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MarketDataServerSideStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MarketDataServerSideStream() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_MarketDataServerSideStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarketDataServerSideStream(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest* /*request*/, ::grpc::ServerWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarketDataServerSideStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MarketDataStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MarketDataStream() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->MarketDataStream(context); }));
    }
    ~WithRawCallbackMethod_MarketDataStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarketDataStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse, ::tinkoff::public_::invest::api::contract::v1::MarketDataRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* MarketDataStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MarketDataServerSideStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MarketDataServerSideStream() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->MarketDataServerSideStream(context, request); }));
    }
    ~WithRawCallbackMethod_MarketDataServerSideStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarketDataServerSideStream(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest* /*request*/, ::grpc::ServerWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* MarketDataServerSideStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_MarketDataServerSideStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_MarketDataServerSideStream() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest, ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* streamer) {
                       return this->StreamedMarketDataServerSideStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_MarketDataServerSideStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MarketDataServerSideStream(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest* /*request*/, ::grpc::ServerWriter< ::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedMarketDataServerSideStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tinkoff::public_::invest::api::contract::v1::MarketDataServerSideStreamRequest,::tinkoff::public_::invest::api::contract::v1::MarketDataResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_MarketDataServerSideStream<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_MarketDataServerSideStream<Service > StreamedService;
};

}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff


#endif  // GRPC_marketdata_2eproto__INCLUDED
