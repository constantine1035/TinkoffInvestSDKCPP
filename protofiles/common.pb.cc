// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
PROTOBUF_CONSTEXPR MoneyValue::MoneyValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.units_)*/int64_t{0}
  , /*decltype(_impl_.nano_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MoneyValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoneyValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoneyValueDefaultTypeInternal() {}
  union {
    MoneyValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoneyValueDefaultTypeInternal _MoneyValue_default_instance_;
PROTOBUF_CONSTEXPR Quotation::Quotation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.units_)*/int64_t{0}
  , /*decltype(_impl_.nano_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuotationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuotationDefaultTypeInternal() {}
  union {
    Quotation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuotationDefaultTypeInternal _Quotation_default_instance_;
PROTOBUF_CONSTEXPR Ping::Ping(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stream_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PingDefaultTypeInternal() {}
  union {
    Ping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PingDefaultTypeInternal _Ping_default_instance_;
PROTOBUF_CONSTEXPR Page::Page(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_.page_number_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PageDefaultTypeInternal() {}
  union {
    Page _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PageDefaultTypeInternal _Page_default_instance_;
PROTOBUF_CONSTEXPR PageResponse::PageResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_.page_number_)*/0
  , /*decltype(_impl_.total_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PageResponseDefaultTypeInternal() {}
  union {
    PageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PageResponseDefaultTypeInternal _PageResponse_default_instance_;
PROTOBUF_CONSTEXPR ResponseMetadata::ResponseMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tracking_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_time_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseMetadataDefaultTypeInternal() {}
  union {
    ResponseMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseMetadataDefaultTypeInternal _ResponseMetadata_default_instance_;
PROTOBUF_CONSTEXPR BrandData::BrandData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.logo_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.logo_base_color_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_color_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BrandDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrandDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrandDataDefaultTypeInternal() {}
  union {
    BrandData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrandDataDefaultTypeInternal _BrandData_default_instance_;
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
static ::_pb::Metadata file_level_metadata_common_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_common_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_common_2eproto = nullptr;

const uint32_t TableStruct_common_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MoneyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MoneyValue, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MoneyValue, _impl_.units_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::MoneyValue, _impl_.nano_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Quotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Quotation, _impl_.units_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Quotation, _impl_.nano_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Ping, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Ping, _impl_.stream_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Page, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Page, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Page, _impl_.page_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PageResponse, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PageResponse, _impl_.page_number_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::PageResponse, _impl_.total_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::ResponseMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::ResponseMetadata, _impl_.tracking_id_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::ResponseMetadata, _impl_.server_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrandData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrandData, _impl_.logo_name_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrandData, _impl_.logo_base_color_),
  PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BrandData, _impl_.text_color_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::MoneyValue)},
  { 9, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Quotation)},
  { 17, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Ping)},
  { 25, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Page)},
  { 33, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::PageResponse)},
  { 42, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::ResponseMetadata)},
  { 50, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::BrandData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_Ping_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_Page_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_PageResponse_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_ResponseMetadata_default_instance_._instance,
  &::tinkoff::public_::invest::api::contract::v1::_BrandData_default_instance_._instance,
};

const char descriptor_table_protodef_common_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014common.proto\022&tinkoff.public_.invest.a"
  "pi.contract.v1\032\037google/protobuf/timestam"
  "p.proto\";\n\nMoneyValue\022\020\n\010currency\030\001 \001(\t\022"
  "\r\n\005units\030\002 \001(\003\022\014\n\004nano\030\003 \001(\005\"(\n\tQuotatio"
  "n\022\r\n\005units\030\001 \001(\003\022\014\n\004nano\030\002 \001(\005\"C\n\004Ping\022("
  "\n\004time\030\001 \001(\0132\032.google.protobuf.Timestamp"
  "\022\021\n\tstream_id\030\002 \001(\t\"*\n\004Page\022\r\n\005limit\030\001 \001"
  "(\005\022\023\n\013page_number\030\002 \001(\005\"G\n\014PageResponse\022"
  "\r\n\005limit\030\001 \001(\005\022\023\n\013page_number\030\002 \001(\005\022\023\n\013t"
  "otal_count\030\003 \001(\005\"X\n\020ResponseMetadata\022\023\n\013"
  "tracking_id\030* \001(\t\022/\n\013server_time\030+ \001(\0132\032"
  ".google.protobuf.Timestamp\"K\n\tBrandData\022"
  "\021\n\tlogo_name\030\001 \001(\t\022\027\n\017logo_base_color\030\002 "
  "\001(\t\022\022\n\ntext_color\030\003 \001(\t*\322\002\n\016InstrumentTy"
  "pe\022\037\n\033INSTRUMENT_TYPE_UNSPECIFIED\020\000\022\030\n\024I"
  "NSTRUMENT_TYPE_BOND\020\001\022\031\n\025INSTRUMENT_TYPE"
  "_SHARE\020\002\022\034\n\030INSTRUMENT_TYPE_CURRENCY\020\003\022\027"
  "\n\023INSTRUMENT_TYPE_ETF\020\004\022\033\n\027INSTRUMENT_TY"
  "PE_FUTURES\020\005\022\026\n\022INSTRUMENT_TYPE_SP\020\006\022\032\n\026"
  "INSTRUMENT_TYPE_OPTION\020\007\022(\n$INSTRUMENT_T"
  "YPE_CLEARING_CERTIFICATE\020\010\022\031\n\025INSTRUMENT"
  "_TYPE_INDEX\020\t\022\035\n\031INSTRUMENT_TYPE_COMMODI"
  "TY\020\n*\316\006\n\025SecurityTradingStatus\022\'\n#SECURI"
  "TY_TRADING_STATUS_UNSPECIFIED\020\000\0225\n1SECUR"
  "ITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRA"
  "DING\020\001\022*\n&SECURITY_TRADING_STATUS_OPENIN"
  "G_PERIOD\020\002\022*\n&SECURITY_TRADING_STATUS_CL"
  "OSING_PERIOD\020\003\022,\n(SECURITY_TRADING_STATU"
  "S_BREAK_IN_TRADING\020\004\022*\n&SECURITY_TRADING"
  "_STATUS_NORMAL_TRADING\020\005\022+\n\'SECURITY_TRA"
  "DING_STATUS_CLOSING_AUCTION\020\006\022-\n)SECURIT"
  "Y_TRADING_STATUS_DARK_POOL_AUCTION\020\007\022,\n("
  "SECURITY_TRADING_STATUS_DISCRETE_AUCTION"
  "\020\010\0222\n.SECURITY_TRADING_STATUS_OPENING_AU"
  "CTION_PERIOD\020\t\022<\n8SECURITY_TRADING_STATU"
  "S_TRADING_AT_CLOSING_AUCTION_PRICE\020\n\022,\n("
  "SECURITY_TRADING_STATUS_SESSION_ASSIGNED"
  "\020\013\022)\n%SECURITY_TRADING_STATUS_SESSION_CL"
  "OSE\020\014\022(\n$SECURITY_TRADING_STATUS_SESSION"
  "_OPEN\020\r\0221\n-SECURITY_TRADING_STATUS_DEALE"
  "R_NORMAL_TRADING\020\016\0223\n/SECURITY_TRADING_S"
  "TATUS_DEALER_BREAK_IN_TRADING\020\017\022<\n8SECUR"
  "ITY_TRADING_STATUS_DEALER_NOT_AVAILABLE_"
  "FOR_TRADING\020\020*V\n\tPriceType\022\032\n\026PRICE_TYPE"
  "_UNSPECIFIED\020\000\022\024\n\020PRICE_TYPE_POINT\020\001\022\027\n\023"
  "PRICE_TYPE_CURRENCY\020\002Ba\n\034ru.tinkoff.piap"
  "i.contract.v1P\001Z\014./;investapi\242\002\005TIAPI\252\002\024"
  "Tinkoff.InvestApi.V1\312\002\021Tinkoff\\Invest\\V1"
  "b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_common_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_common_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_common_2eproto = {
    false, false, 1928, descriptor_table_protodef_common_2eproto,
    "common.proto",
    &descriptor_table_common_2eproto_once, descriptor_table_common_2eproto_deps, 1, 7,
    schemas, file_default_instances, TableStruct_common_2eproto::offsets,
    file_level_metadata_common_2eproto, file_level_enum_descriptors_common_2eproto,
    file_level_service_descriptors_common_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_common_2eproto_getter() {
  return &descriptor_table_common_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_common_2eproto(&descriptor_table_common_2eproto);
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InstrumentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[0];
}
bool InstrumentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecurityTradingStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[1];
}
bool SecurityTradingStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PriceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[2];
}
bool PriceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MoneyValue::_Internal {
 public:
};

MoneyValue::MoneyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.MoneyValue)
}
MoneyValue::MoneyValue(const MoneyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MoneyValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.currency_){}
    , decltype(_impl_.units_){}
    , decltype(_impl_.nano_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency().empty()) {
    _this->_impl_.currency_.Set(from._internal_currency(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.units_, &from._impl_.units_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nano_) -
    reinterpret_cast<char*>(&_impl_.units_)) + sizeof(_impl_.nano_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.MoneyValue)
}

inline void MoneyValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.currency_){}
    , decltype(_impl_.units_){int64_t{0}}
    , decltype(_impl_.nano_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MoneyValue::~MoneyValue() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.MoneyValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoneyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.currency_.Destroy();
}

void MoneyValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MoneyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.MoneyValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.currency_.ClearToEmpty();
  ::memset(&_impl_.units_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nano_) -
      reinterpret_cast<char*>(&_impl_.units_)) + sizeof(_impl_.nano_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoneyValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.MoneyValue.currency"));
        } else
          goto handle_unusual;
        continue;
      // int64 units = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.units_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nano = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.nano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoneyValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.MoneyValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (!this->_internal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.MoneyValue.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // int64 units = 2;
  if (this->_internal_units() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_units(), target);
  }

  // int32 nano = 3;
  if (this->_internal_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_nano(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.MoneyValue)
  return target;
}

size_t MoneyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.MoneyValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (!this->_internal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // int64 units = 2;
  if (this->_internal_units() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_units());
  }

  // int32 nano = 3;
  if (this->_internal_nano() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nano());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoneyValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MoneyValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoneyValue::GetClassData() const { return &_class_data_; }


void MoneyValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MoneyValue*>(&to_msg);
  auto& from = static_cast<const MoneyValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.MoneyValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (from._internal_units() != 0) {
    _this->_internal_set_units(from._internal_units());
  }
  if (from._internal_nano() != 0) {
    _this->_internal_set_nano(from._internal_nano());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoneyValue::CopyFrom(const MoneyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.MoneyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyValue::IsInitialized() const {
  return true;
}

void MoneyValue::InternalSwap(MoneyValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_, lhs_arena,
      &other->_impl_.currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoneyValue, _impl_.nano_)
      + sizeof(MoneyValue::_impl_.nano_)
      - PROTOBUF_FIELD_OFFSET(MoneyValue, _impl_.units_)>(
          reinterpret_cast<char*>(&_impl_.units_),
          reinterpret_cast<char*>(&other->_impl_.units_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoneyValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[0]);
}

// ===================================================================

class Quotation::_Internal {
 public:
};

Quotation::Quotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Quotation)
}
Quotation::Quotation(const Quotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Quotation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.units_){}
    , decltype(_impl_.nano_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.units_, &from._impl_.units_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nano_) -
    reinterpret_cast<char*>(&_impl_.units_)) + sizeof(_impl_.nano_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Quotation)
}

inline void Quotation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.units_){int64_t{0}}
    , decltype(_impl_.nano_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Quotation::~Quotation() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Quotation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Quotation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Quotation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Quotation::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Quotation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.units_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nano_) -
      reinterpret_cast<char*>(&_impl_.units_)) + sizeof(_impl_.nano_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quotation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.units_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.nano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Quotation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Quotation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 units = 1;
  if (this->_internal_units() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_units(), target);
  }

  // int32 nano = 2;
  if (this->_internal_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_nano(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Quotation)
  return target;
}

size_t Quotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Quotation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 units = 1;
  if (this->_internal_units() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_units());
  }

  // int32 nano = 2;
  if (this->_internal_nano() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nano());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Quotation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Quotation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Quotation::GetClassData() const { return &_class_data_; }


void Quotation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Quotation*>(&to_msg);
  auto& from = static_cast<const Quotation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Quotation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_units() != 0) {
    _this->_internal_set_units(from._internal_units());
  }
  if (from._internal_nano() != 0) {
    _this->_internal_set_nano(from._internal_nano());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Quotation::CopyFrom(const Quotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Quotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quotation::IsInitialized() const {
  return true;
}

void Quotation::InternalSwap(Quotation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quotation, _impl_.nano_)
      + sizeof(Quotation::_impl_.nano_)
      - PROTOBUF_FIELD_OFFSET(Quotation, _impl_.units_)>(
          reinterpret_cast<char*>(&_impl_.units_),
          reinterpret_cast<char*>(&other->_impl_.units_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quotation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[1]);
}

// ===================================================================

class Ping::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const Ping* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Ping::_Internal::time(const Ping* msg) {
  return *msg->_impl_.time_;
}
void Ping::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
Ping::Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Ping)
}
Ping::Ping(const Ping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ping* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stream_id_){}
    , decltype(_impl_.time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stream_id().empty()) {
    _this->_impl_.stream_id_.Set(from._internal_stream_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Ping)
}

inline void Ping::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stream_id_){}
    , decltype(_impl_.time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Ping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stream_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_;
}

void Ping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Ping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stream_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string stream_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stream_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.Ping.stream_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Ping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // string stream_id = 2;
  if (!this->_internal_stream_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stream_id().data(), static_cast<int>(this->_internal_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.Ping.stream_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stream_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Ping)
  return target;
}

size_t Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Ping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stream_id = 2;
  if (!this->_internal_stream_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_id());
  }

  // .google.protobuf.Timestamp time = 1;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ping::GetClassData() const { return &_class_data_; }


void Ping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ping*>(&to_msg);
  auto& from = static_cast<const Ping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Ping)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stream_id().empty()) {
    _this->_internal_set_stream_id(from._internal_stream_id());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {
  return true;
}

void Ping::InternalSwap(Ping* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stream_id_, lhs_arena,
      &other->_impl_.stream_id_, rhs_arena
  );
  swap(_impl_.time_, other->_impl_.time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[2]);
}

// ===================================================================

class Page::_Internal {
 public:
};

Page::Page(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.Page)
}
Page::Page(const Page& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Page* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.limit_){}
    , decltype(_impl_.page_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.limit_, &from._impl_.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.page_number_) -
    reinterpret_cast<char*>(&_impl_.limit_)) + sizeof(_impl_.page_number_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.Page)
}

inline void Page::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.limit_){0}
    , decltype(_impl_.page_number_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Page::~Page() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.Page)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Page::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Page::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Page::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.Page)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.page_number_) -
      reinterpret_cast<char*>(&_impl_.limit_)) + sizeof(_impl_.page_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Page::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 page_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Page::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.Page)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 limit = 1;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_limit(), target);
  }

  // int32 page_number = 2;
  if (this->_internal_page_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_page_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.Page)
  return target;
}

size_t Page::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.Page)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 limit = 1;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());
  }

  // int32 page_number = 2;
  if (this->_internal_page_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Page::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Page::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Page::GetClassData() const { return &_class_data_; }


void Page::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Page*>(&to_msg);
  auto& from = static_cast<const Page&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.Page)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_page_number() != 0) {
    _this->_internal_set_page_number(from._internal_page_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Page::CopyFrom(const Page& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.Page)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Page::IsInitialized() const {
  return true;
}

void Page::InternalSwap(Page* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Page, _impl_.page_number_)
      + sizeof(Page::_impl_.page_number_)
      - PROTOBUF_FIELD_OFFSET(Page, _impl_.limit_)>(
          reinterpret_cast<char*>(&_impl_.limit_),
          reinterpret_cast<char*>(&other->_impl_.limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Page::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[3]);
}

// ===================================================================

class PageResponse::_Internal {
 public:
};

PageResponse::PageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.PageResponse)
}
PageResponse::PageResponse(const PageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PageResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.limit_){}
    , decltype(_impl_.page_number_){}
    , decltype(_impl_.total_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.limit_, &from._impl_.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_count_) -
    reinterpret_cast<char*>(&_impl_.limit_)) + sizeof(_impl_.total_count_));
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.PageResponse)
}

inline void PageResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.limit_){0}
    , decltype(_impl_.page_number_){0}
    , decltype(_impl_.total_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PageResponse::~PageResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.PageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PageResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.PageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_count_) -
      reinterpret_cast<char*>(&_impl_.limit_)) + sizeof(_impl_.total_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 page_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.PageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 limit = 1;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_limit(), target);
  }

  // int32 page_number = 2;
  if (this->_internal_page_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_page_number(), target);
  }

  // int32 total_count = 3;
  if (this->_internal_total_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.PageResponse)
  return target;
}

size_t PageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.PageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 limit = 1;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());
  }

  // int32 page_number = 2;
  if (this->_internal_page_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_number());
  }

  // int32 total_count = 3;
  if (this->_internal_total_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PageResponse::GetClassData() const { return &_class_data_; }


void PageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PageResponse*>(&to_msg);
  auto& from = static_cast<const PageResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.PageResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_page_number() != 0) {
    _this->_internal_set_page_number(from._internal_page_number());
  }
  if (from._internal_total_count() != 0) {
    _this->_internal_set_total_count(from._internal_total_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PageResponse::CopyFrom(const PageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.PageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageResponse::IsInitialized() const {
  return true;
}

void PageResponse::InternalSwap(PageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PageResponse, _impl_.total_count_)
      + sizeof(PageResponse::_impl_.total_count_)
      - PROTOBUF_FIELD_OFFSET(PageResponse, _impl_.limit_)>(
          reinterpret_cast<char*>(&_impl_.limit_),
          reinterpret_cast<char*>(&other->_impl_.limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[4]);
}

// ===================================================================

class ResponseMetadata::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& server_time(const ResponseMetadata* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ResponseMetadata::_Internal::server_time(const ResponseMetadata* msg) {
  return *msg->_impl_.server_time_;
}
void ResponseMetadata::clear_server_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.server_time_ != nullptr) {
    delete _impl_.server_time_;
  }
  _impl_.server_time_ = nullptr;
}
ResponseMetadata::ResponseMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.ResponseMetadata)
}
ResponseMetadata::ResponseMetadata(const ResponseMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tracking_id_){}
    , decltype(_impl_.server_time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tracking_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tracking_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tracking_id().empty()) {
    _this->_impl_.tracking_id_.Set(from._internal_tracking_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_server_time()) {
    _this->_impl_.server_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.server_time_);
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.ResponseMetadata)
}

inline void ResponseMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tracking_id_){}
    , decltype(_impl_.server_time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tracking_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tracking_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseMetadata::~ResponseMetadata() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.ResponseMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tracking_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.server_time_;
}

void ResponseMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.ResponseMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tracking_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.server_time_ != nullptr) {
    delete _impl_.server_time_;
  }
  _impl_.server_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tracking_id = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_tracking_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.ResponseMetadata.tracking_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp server_time = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.ResponseMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tracking_id = 42;
  if (!this->_internal_tracking_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tracking_id().data(), static_cast<int>(this->_internal_tracking_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.ResponseMetadata.tracking_id");
    target = stream->WriteStringMaybeAliased(
        42, this->_internal_tracking_id(), target);
  }

  // .google.protobuf.Timestamp server_time = 43;
  if (this->_internal_has_server_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, _Internal::server_time(this),
        _Internal::server_time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.ResponseMetadata)
  return target;
}

size_t ResponseMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.ResponseMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tracking_id = 42;
  if (!this->_internal_tracking_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tracking_id());
  }

  // .google.protobuf.Timestamp server_time = 43;
  if (this->_internal_has_server_time()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.server_time_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseMetadata::GetClassData() const { return &_class_data_; }


void ResponseMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseMetadata*>(&to_msg);
  auto& from = static_cast<const ResponseMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.ResponseMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tracking_id().empty()) {
    _this->_internal_set_tracking_id(from._internal_tracking_id());
  }
  if (from._internal_has_server_time()) {
    _this->_internal_mutable_server_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_server_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseMetadata::CopyFrom(const ResponseMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.ResponseMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseMetadata::IsInitialized() const {
  return true;
}

void ResponseMetadata::InternalSwap(ResponseMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tracking_id_, lhs_arena,
      &other->_impl_.tracking_id_, rhs_arena
  );
  swap(_impl_.server_time_, other->_impl_.server_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[5]);
}

// ===================================================================

class BrandData::_Internal {
 public:
};

BrandData::BrandData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public_.invest.api.contract.v1.BrandData)
}
BrandData::BrandData(const BrandData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BrandData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.logo_name_){}
    , decltype(_impl_.logo_base_color_){}
    , decltype(_impl_.text_color_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.logo_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logo_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_logo_name().empty()) {
    _this->_impl_.logo_name_.Set(from._internal_logo_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.logo_base_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logo_base_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_logo_base_color().empty()) {
    _this->_impl_.logo_base_color_.Set(from._internal_logo_base_color(), 
      _this->GetArenaForAllocation());
  }
  _impl_.text_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text_color().empty()) {
    _this->_impl_.text_color_.Set(from._internal_text_color(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tinkoff.public_.invest.api.contract.v1.BrandData)
}

inline void BrandData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.logo_name_){}
    , decltype(_impl_.logo_base_color_){}
    , decltype(_impl_.text_color_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.logo_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logo_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.logo_base_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logo_base_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BrandData::~BrandData() {
  // @@protoc_insertion_point(destructor:tinkoff.public_.invest.api.contract.v1.BrandData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BrandData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.logo_name_.Destroy();
  _impl_.logo_base_color_.Destroy();
  _impl_.text_color_.Destroy();
}

void BrandData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BrandData::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public_.invest.api.contract.v1.BrandData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.logo_name_.ClearToEmpty();
  _impl_.logo_base_color_.ClearToEmpty();
  _impl_.text_color_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BrandData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string logo_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_logo_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.BrandData.logo_name"));
        } else
          goto handle_unusual;
        continue;
      // string logo_base_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_logo_base_color();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.BrandData.logo_base_color"));
        } else
          goto handle_unusual;
        continue;
      // string text_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_text_color();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tinkoff.public_.invest.api.contract.v1.BrandData.text_color"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BrandData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public_.invest.api.contract.v1.BrandData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string logo_name = 1;
  if (!this->_internal_logo_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logo_name().data(), static_cast<int>(this->_internal_logo_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.BrandData.logo_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_logo_name(), target);
  }

  // string logo_base_color = 2;
  if (!this->_internal_logo_base_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logo_base_color().data(), static_cast<int>(this->_internal_logo_base_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.BrandData.logo_base_color");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_logo_base_color(), target);
  }

  // string text_color = 3;
  if (!this->_internal_text_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text_color().data(), static_cast<int>(this->_internal_text_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tinkoff.public_.invest.api.contract.v1.BrandData.text_color");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_text_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public_.invest.api.contract.v1.BrandData)
  return target;
}

size_t BrandData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinkoff.public_.invest.api.contract.v1.BrandData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string logo_name = 1;
  if (!this->_internal_logo_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logo_name());
  }

  // string logo_base_color = 2;
  if (!this->_internal_logo_base_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logo_base_color());
  }

  // string text_color = 3;
  if (!this->_internal_text_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text_color());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BrandData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BrandData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BrandData::GetClassData() const { return &_class_data_; }


void BrandData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BrandData*>(&to_msg);
  auto& from = static_cast<const BrandData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public_.invest.api.contract.v1.BrandData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_logo_name().empty()) {
    _this->_internal_set_logo_name(from._internal_logo_name());
  }
  if (!from._internal_logo_base_color().empty()) {
    _this->_internal_set_logo_base_color(from._internal_logo_base_color());
  }
  if (!from._internal_text_color().empty()) {
    _this->_internal_set_text_color(from._internal_text_color());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BrandData::CopyFrom(const BrandData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public_.invest.api.contract.v1.BrandData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrandData::IsInitialized() const {
  return true;
}

void BrandData::InternalSwap(BrandData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.logo_name_, lhs_arena,
      &other->_impl_.logo_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.logo_base_color_, lhs_arena,
      &other->_impl_.logo_base_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_color_, lhs_arena,
      &other->_impl_.text_color_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BrandData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::MoneyValue*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::MoneyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::MoneyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::Quotation*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::Quotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::Quotation >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::Ping*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::Ping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::Ping >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::Page*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::Page >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::Page >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::PageResponse*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::PageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::PageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::ResponseMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::tinkoff::public_::invest::api::contract::v1::BrandData*
Arena::CreateMaybeMessage< ::tinkoff::public_::invest::api::contract::v1::BrandData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinkoff::public_::invest::api::contract::v1::BrandData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
