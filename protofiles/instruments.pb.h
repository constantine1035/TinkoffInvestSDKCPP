// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: instruments.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_instruments_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_instruments_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "common.pb.h"
#include "google/api/field_behavior.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_instruments_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_instruments_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_instruments_2eproto;
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
class AccruedInterest;
struct AccruedInterestDefaultTypeInternal;
extern AccruedInterestDefaultTypeInternal _AccruedInterest_default_instance_;
class Asset;
struct AssetDefaultTypeInternal;
extern AssetDefaultTypeInternal _Asset_default_instance_;
class AssetBond;
struct AssetBondDefaultTypeInternal;
extern AssetBondDefaultTypeInternal _AssetBond_default_instance_;
class AssetClearingCertificate;
struct AssetClearingCertificateDefaultTypeInternal;
extern AssetClearingCertificateDefaultTypeInternal _AssetClearingCertificate_default_instance_;
class AssetCurrency;
struct AssetCurrencyDefaultTypeInternal;
extern AssetCurrencyDefaultTypeInternal _AssetCurrency_default_instance_;
class AssetEtf;
struct AssetEtfDefaultTypeInternal;
extern AssetEtfDefaultTypeInternal _AssetEtf_default_instance_;
class AssetFull;
struct AssetFullDefaultTypeInternal;
extern AssetFullDefaultTypeInternal _AssetFull_default_instance_;
class AssetInstrument;
struct AssetInstrumentDefaultTypeInternal;
extern AssetInstrumentDefaultTypeInternal _AssetInstrument_default_instance_;
class AssetRequest;
struct AssetRequestDefaultTypeInternal;
extern AssetRequestDefaultTypeInternal _AssetRequest_default_instance_;
class AssetResponse;
struct AssetResponseDefaultTypeInternal;
extern AssetResponseDefaultTypeInternal _AssetResponse_default_instance_;
class AssetSecurity;
struct AssetSecurityDefaultTypeInternal;
extern AssetSecurityDefaultTypeInternal _AssetSecurity_default_instance_;
class AssetShare;
struct AssetShareDefaultTypeInternal;
extern AssetShareDefaultTypeInternal _AssetShare_default_instance_;
class AssetStructuredProduct;
struct AssetStructuredProductDefaultTypeInternal;
extern AssetStructuredProductDefaultTypeInternal _AssetStructuredProduct_default_instance_;
class AssetsRequest;
struct AssetsRequestDefaultTypeInternal;
extern AssetsRequestDefaultTypeInternal _AssetsRequest_default_instance_;
class AssetsResponse;
struct AssetsResponseDefaultTypeInternal;
extern AssetsResponseDefaultTypeInternal _AssetsResponse_default_instance_;
class Bond;
struct BondDefaultTypeInternal;
extern BondDefaultTypeInternal _Bond_default_instance_;
class BondResponse;
struct BondResponseDefaultTypeInternal;
extern BondResponseDefaultTypeInternal _BondResponse_default_instance_;
class BondsResponse;
struct BondsResponseDefaultTypeInternal;
extern BondsResponseDefaultTypeInternal _BondsResponse_default_instance_;
class Brand;
struct BrandDefaultTypeInternal;
extern BrandDefaultTypeInternal _Brand_default_instance_;
class CountryResponse;
struct CountryResponseDefaultTypeInternal;
extern CountryResponseDefaultTypeInternal _CountryResponse_default_instance_;
class Coupon;
struct CouponDefaultTypeInternal;
extern CouponDefaultTypeInternal _Coupon_default_instance_;
class CurrenciesResponse;
struct CurrenciesResponseDefaultTypeInternal;
extern CurrenciesResponseDefaultTypeInternal _CurrenciesResponse_default_instance_;
class Currency;
struct CurrencyDefaultTypeInternal;
extern CurrencyDefaultTypeInternal _Currency_default_instance_;
class CurrencyResponse;
struct CurrencyResponseDefaultTypeInternal;
extern CurrencyResponseDefaultTypeInternal _CurrencyResponse_default_instance_;
class Dividend;
struct DividendDefaultTypeInternal;
extern DividendDefaultTypeInternal _Dividend_default_instance_;
class EditFavoritesRequest;
struct EditFavoritesRequestDefaultTypeInternal;
extern EditFavoritesRequestDefaultTypeInternal _EditFavoritesRequest_default_instance_;
class EditFavoritesRequestInstrument;
struct EditFavoritesRequestInstrumentDefaultTypeInternal;
extern EditFavoritesRequestInstrumentDefaultTypeInternal _EditFavoritesRequestInstrument_default_instance_;
class EditFavoritesResponse;
struct EditFavoritesResponseDefaultTypeInternal;
extern EditFavoritesResponseDefaultTypeInternal _EditFavoritesResponse_default_instance_;
class Etf;
struct EtfDefaultTypeInternal;
extern EtfDefaultTypeInternal _Etf_default_instance_;
class EtfResponse;
struct EtfResponseDefaultTypeInternal;
extern EtfResponseDefaultTypeInternal _EtfResponse_default_instance_;
class EtfsResponse;
struct EtfsResponseDefaultTypeInternal;
extern EtfsResponseDefaultTypeInternal _EtfsResponse_default_instance_;
class FavoriteInstrument;
struct FavoriteInstrumentDefaultTypeInternal;
extern FavoriteInstrumentDefaultTypeInternal _FavoriteInstrument_default_instance_;
class FilterOptionsRequest;
struct FilterOptionsRequestDefaultTypeInternal;
extern FilterOptionsRequestDefaultTypeInternal _FilterOptionsRequest_default_instance_;
class FindInstrumentRequest;
struct FindInstrumentRequestDefaultTypeInternal;
extern FindInstrumentRequestDefaultTypeInternal _FindInstrumentRequest_default_instance_;
class FindInstrumentResponse;
struct FindInstrumentResponseDefaultTypeInternal;
extern FindInstrumentResponseDefaultTypeInternal _FindInstrumentResponse_default_instance_;
class Future;
struct FutureDefaultTypeInternal;
extern FutureDefaultTypeInternal _Future_default_instance_;
class FutureResponse;
struct FutureResponseDefaultTypeInternal;
extern FutureResponseDefaultTypeInternal _FutureResponse_default_instance_;
class FuturesResponse;
struct FuturesResponseDefaultTypeInternal;
extern FuturesResponseDefaultTypeInternal _FuturesResponse_default_instance_;
class GetAccruedInterestsRequest;
struct GetAccruedInterestsRequestDefaultTypeInternal;
extern GetAccruedInterestsRequestDefaultTypeInternal _GetAccruedInterestsRequest_default_instance_;
class GetAccruedInterestsResponse;
struct GetAccruedInterestsResponseDefaultTypeInternal;
extern GetAccruedInterestsResponseDefaultTypeInternal _GetAccruedInterestsResponse_default_instance_;
class GetAssetFundamentalsRequest;
struct GetAssetFundamentalsRequestDefaultTypeInternal;
extern GetAssetFundamentalsRequestDefaultTypeInternal _GetAssetFundamentalsRequest_default_instance_;
class GetAssetFundamentalsResponse;
struct GetAssetFundamentalsResponseDefaultTypeInternal;
extern GetAssetFundamentalsResponseDefaultTypeInternal _GetAssetFundamentalsResponse_default_instance_;
class GetAssetFundamentalsResponse_StatisticResponse;
struct GetAssetFundamentalsResponse_StatisticResponseDefaultTypeInternal;
extern GetAssetFundamentalsResponse_StatisticResponseDefaultTypeInternal _GetAssetFundamentalsResponse_StatisticResponse_default_instance_;
class GetAssetReportsRequest;
struct GetAssetReportsRequestDefaultTypeInternal;
extern GetAssetReportsRequestDefaultTypeInternal _GetAssetReportsRequest_default_instance_;
class GetAssetReportsResponse;
struct GetAssetReportsResponseDefaultTypeInternal;
extern GetAssetReportsResponseDefaultTypeInternal _GetAssetReportsResponse_default_instance_;
class GetAssetReportsResponse_GetAssetReportsEvent;
struct GetAssetReportsResponse_GetAssetReportsEventDefaultTypeInternal;
extern GetAssetReportsResponse_GetAssetReportsEventDefaultTypeInternal _GetAssetReportsResponse_GetAssetReportsEvent_default_instance_;
class GetBondCouponsRequest;
struct GetBondCouponsRequestDefaultTypeInternal;
extern GetBondCouponsRequestDefaultTypeInternal _GetBondCouponsRequest_default_instance_;
class GetBondCouponsResponse;
struct GetBondCouponsResponseDefaultTypeInternal;
extern GetBondCouponsResponseDefaultTypeInternal _GetBondCouponsResponse_default_instance_;
class GetBondEventsRequest;
struct GetBondEventsRequestDefaultTypeInternal;
extern GetBondEventsRequestDefaultTypeInternal _GetBondEventsRequest_default_instance_;
class GetBondEventsResponse;
struct GetBondEventsResponseDefaultTypeInternal;
extern GetBondEventsResponseDefaultTypeInternal _GetBondEventsResponse_default_instance_;
class GetBondEventsResponse_BondEvent;
struct GetBondEventsResponse_BondEventDefaultTypeInternal;
extern GetBondEventsResponse_BondEventDefaultTypeInternal _GetBondEventsResponse_BondEvent_default_instance_;
class GetBrandRequest;
struct GetBrandRequestDefaultTypeInternal;
extern GetBrandRequestDefaultTypeInternal _GetBrandRequest_default_instance_;
class GetBrandsRequest;
struct GetBrandsRequestDefaultTypeInternal;
extern GetBrandsRequestDefaultTypeInternal _GetBrandsRequest_default_instance_;
class GetBrandsResponse;
struct GetBrandsResponseDefaultTypeInternal;
extern GetBrandsResponseDefaultTypeInternal _GetBrandsResponse_default_instance_;
class GetConsensusForecastsRequest;
struct GetConsensusForecastsRequestDefaultTypeInternal;
extern GetConsensusForecastsRequestDefaultTypeInternal _GetConsensusForecastsRequest_default_instance_;
class GetConsensusForecastsResponse;
struct GetConsensusForecastsResponseDefaultTypeInternal;
extern GetConsensusForecastsResponseDefaultTypeInternal _GetConsensusForecastsResponse_default_instance_;
class GetConsensusForecastsResponse_ConsensusForecastsItem;
struct GetConsensusForecastsResponse_ConsensusForecastsItemDefaultTypeInternal;
extern GetConsensusForecastsResponse_ConsensusForecastsItemDefaultTypeInternal _GetConsensusForecastsResponse_ConsensusForecastsItem_default_instance_;
class GetCountriesRequest;
struct GetCountriesRequestDefaultTypeInternal;
extern GetCountriesRequestDefaultTypeInternal _GetCountriesRequest_default_instance_;
class GetCountriesResponse;
struct GetCountriesResponseDefaultTypeInternal;
extern GetCountriesResponseDefaultTypeInternal _GetCountriesResponse_default_instance_;
class GetDividendsRequest;
struct GetDividendsRequestDefaultTypeInternal;
extern GetDividendsRequestDefaultTypeInternal _GetDividendsRequest_default_instance_;
class GetDividendsResponse;
struct GetDividendsResponseDefaultTypeInternal;
extern GetDividendsResponseDefaultTypeInternal _GetDividendsResponse_default_instance_;
class GetFavoritesRequest;
struct GetFavoritesRequestDefaultTypeInternal;
extern GetFavoritesRequestDefaultTypeInternal _GetFavoritesRequest_default_instance_;
class GetFavoritesResponse;
struct GetFavoritesResponseDefaultTypeInternal;
extern GetFavoritesResponseDefaultTypeInternal _GetFavoritesResponse_default_instance_;
class GetForecastRequest;
struct GetForecastRequestDefaultTypeInternal;
extern GetForecastRequestDefaultTypeInternal _GetForecastRequest_default_instance_;
class GetForecastResponse;
struct GetForecastResponseDefaultTypeInternal;
extern GetForecastResponseDefaultTypeInternal _GetForecastResponse_default_instance_;
class GetForecastResponse_ConsensusItem;
struct GetForecastResponse_ConsensusItemDefaultTypeInternal;
extern GetForecastResponse_ConsensusItemDefaultTypeInternal _GetForecastResponse_ConsensusItem_default_instance_;
class GetForecastResponse_TargetItem;
struct GetForecastResponse_TargetItemDefaultTypeInternal;
extern GetForecastResponse_TargetItemDefaultTypeInternal _GetForecastResponse_TargetItem_default_instance_;
class GetFuturesMarginRequest;
struct GetFuturesMarginRequestDefaultTypeInternal;
extern GetFuturesMarginRequestDefaultTypeInternal _GetFuturesMarginRequest_default_instance_;
class GetFuturesMarginResponse;
struct GetFuturesMarginResponseDefaultTypeInternal;
extern GetFuturesMarginResponseDefaultTypeInternal _GetFuturesMarginResponse_default_instance_;
class IndicativeResponse;
struct IndicativeResponseDefaultTypeInternal;
extern IndicativeResponseDefaultTypeInternal _IndicativeResponse_default_instance_;
class IndicativesRequest;
struct IndicativesRequestDefaultTypeInternal;
extern IndicativesRequestDefaultTypeInternal _IndicativesRequest_default_instance_;
class IndicativesResponse;
struct IndicativesResponseDefaultTypeInternal;
extern IndicativesResponseDefaultTypeInternal _IndicativesResponse_default_instance_;
class Instrument;
struct InstrumentDefaultTypeInternal;
extern InstrumentDefaultTypeInternal _Instrument_default_instance_;
class InstrumentLink;
struct InstrumentLinkDefaultTypeInternal;
extern InstrumentLinkDefaultTypeInternal _InstrumentLink_default_instance_;
class InstrumentRequest;
struct InstrumentRequestDefaultTypeInternal;
extern InstrumentRequestDefaultTypeInternal _InstrumentRequest_default_instance_;
class InstrumentResponse;
struct InstrumentResponseDefaultTypeInternal;
extern InstrumentResponseDefaultTypeInternal _InstrumentResponse_default_instance_;
class InstrumentShort;
struct InstrumentShortDefaultTypeInternal;
extern InstrumentShortDefaultTypeInternal _InstrumentShort_default_instance_;
class InstrumentsRequest;
struct InstrumentsRequestDefaultTypeInternal;
extern InstrumentsRequestDefaultTypeInternal _InstrumentsRequest_default_instance_;
class Option;
struct OptionDefaultTypeInternal;
extern OptionDefaultTypeInternal _Option_default_instance_;
class OptionResponse;
struct OptionResponseDefaultTypeInternal;
extern OptionResponseDefaultTypeInternal _OptionResponse_default_instance_;
class OptionsResponse;
struct OptionsResponseDefaultTypeInternal;
extern OptionsResponseDefaultTypeInternal _OptionsResponse_default_instance_;
class Share;
struct ShareDefaultTypeInternal;
extern ShareDefaultTypeInternal _Share_default_instance_;
class ShareResponse;
struct ShareResponseDefaultTypeInternal;
extern ShareResponseDefaultTypeInternal _ShareResponse_default_instance_;
class SharesResponse;
struct SharesResponseDefaultTypeInternal;
extern SharesResponseDefaultTypeInternal _SharesResponse_default_instance_;
class TradingDay;
struct TradingDayDefaultTypeInternal;
extern TradingDayDefaultTypeInternal _TradingDay_default_instance_;
class TradingInterval;
struct TradingIntervalDefaultTypeInternal;
extern TradingIntervalDefaultTypeInternal _TradingInterval_default_instance_;
class TradingInterval_TimeInterval;
struct TradingInterval_TimeIntervalDefaultTypeInternal;
extern TradingInterval_TimeIntervalDefaultTypeInternal _TradingInterval_TimeInterval_default_instance_;
class TradingSchedule;
struct TradingScheduleDefaultTypeInternal;
extern TradingScheduleDefaultTypeInternal _TradingSchedule_default_instance_;
class TradingSchedulesRequest;
struct TradingSchedulesRequestDefaultTypeInternal;
extern TradingSchedulesRequestDefaultTypeInternal _TradingSchedulesRequest_default_instance_;
class TradingSchedulesResponse;
struct TradingSchedulesResponseDefaultTypeInternal;
extern TradingSchedulesResponseDefaultTypeInternal _TradingSchedulesResponse_default_instance_;
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
enum GetBondEventsRequest_EventType : int {
  GetBondEventsRequest_EventType_EVENT_TYPE_UNSPECIFIED = 0,
  GetBondEventsRequest_EventType_EVENT_TYPE_CPN = 1,
  GetBondEventsRequest_EventType_EVENT_TYPE_CALL = 2,
  GetBondEventsRequest_EventType_EVENT_TYPE_MTY = 3,
  GetBondEventsRequest_EventType_EVENT_TYPE_CONV = 4,
  GetBondEventsRequest_EventType_GetBondEventsRequest_EventType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GetBondEventsRequest_EventType_GetBondEventsRequest_EventType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GetBondEventsRequest_EventType_IsValid(int value);
extern const uint32_t GetBondEventsRequest_EventType_internal_data_[];
constexpr GetBondEventsRequest_EventType GetBondEventsRequest_EventType_EventType_MIN = static_cast<GetBondEventsRequest_EventType>(0);
constexpr GetBondEventsRequest_EventType GetBondEventsRequest_EventType_EventType_MAX = static_cast<GetBondEventsRequest_EventType>(4);
constexpr int GetBondEventsRequest_EventType_EventType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
GetBondEventsRequest_EventType_descriptor();
template <typename T>
const std::string& GetBondEventsRequest_EventType_Name(T value) {
  static_assert(std::is_same<T, GetBondEventsRequest_EventType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EventType_Name().");
  return GetBondEventsRequest_EventType_Name(static_cast<GetBondEventsRequest_EventType>(value));
}
template <>
inline const std::string& GetBondEventsRequest_EventType_Name(GetBondEventsRequest_EventType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GetBondEventsRequest_EventType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool GetBondEventsRequest_EventType_Parse(absl::string_view name, GetBondEventsRequest_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetBondEventsRequest_EventType>(
      GetBondEventsRequest_EventType_descriptor(), name, value);
}
enum GetAssetReportsResponse_AssetReportPeriodType : int {
  GetAssetReportsResponse_AssetReportPeriodType_PERIOD_TYPE_UNSPECIFIED = 0,
  GetAssetReportsResponse_AssetReportPeriodType_PERIOD_TYPE_QUARTER = 1,
  GetAssetReportsResponse_AssetReportPeriodType_PERIOD_TYPE_SEMIANNUAL = 2,
  GetAssetReportsResponse_AssetReportPeriodType_PERIOD_TYPE_ANNUAL = 3,
  GetAssetReportsResponse_AssetReportPeriodType_GetAssetReportsResponse_AssetReportPeriodType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GetAssetReportsResponse_AssetReportPeriodType_GetAssetReportsResponse_AssetReportPeriodType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GetAssetReportsResponse_AssetReportPeriodType_IsValid(int value);
extern const uint32_t GetAssetReportsResponse_AssetReportPeriodType_internal_data_[];
constexpr GetAssetReportsResponse_AssetReportPeriodType GetAssetReportsResponse_AssetReportPeriodType_AssetReportPeriodType_MIN = static_cast<GetAssetReportsResponse_AssetReportPeriodType>(0);
constexpr GetAssetReportsResponse_AssetReportPeriodType GetAssetReportsResponse_AssetReportPeriodType_AssetReportPeriodType_MAX = static_cast<GetAssetReportsResponse_AssetReportPeriodType>(3);
constexpr int GetAssetReportsResponse_AssetReportPeriodType_AssetReportPeriodType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
GetAssetReportsResponse_AssetReportPeriodType_descriptor();
template <typename T>
const std::string& GetAssetReportsResponse_AssetReportPeriodType_Name(T value) {
  static_assert(std::is_same<T, GetAssetReportsResponse_AssetReportPeriodType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AssetReportPeriodType_Name().");
  return GetAssetReportsResponse_AssetReportPeriodType_Name(static_cast<GetAssetReportsResponse_AssetReportPeriodType>(value));
}
template <>
inline const std::string& GetAssetReportsResponse_AssetReportPeriodType_Name(GetAssetReportsResponse_AssetReportPeriodType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GetAssetReportsResponse_AssetReportPeriodType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool GetAssetReportsResponse_AssetReportPeriodType_Parse(absl::string_view name, GetAssetReportsResponse_AssetReportPeriodType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetAssetReportsResponse_AssetReportPeriodType>(
      GetAssetReportsResponse_AssetReportPeriodType_descriptor(), name, value);
}
enum CouponType : int {
  COUPON_TYPE_UNSPECIFIED = 0,
  COUPON_TYPE_CONSTANT = 1,
  COUPON_TYPE_FLOATING = 2,
  COUPON_TYPE_DISCOUNT = 3,
  COUPON_TYPE_MORTGAGE = 4,
  COUPON_TYPE_FIX = 5,
  COUPON_TYPE_VARIABLE = 6,
  COUPON_TYPE_OTHER = 7,
  CouponType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CouponType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CouponType_IsValid(int value);
extern const uint32_t CouponType_internal_data_[];
constexpr CouponType CouponType_MIN = static_cast<CouponType>(0);
constexpr CouponType CouponType_MAX = static_cast<CouponType>(7);
constexpr int CouponType_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
CouponType_descriptor();
template <typename T>
const std::string& CouponType_Name(T value) {
  static_assert(std::is_same<T, CouponType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CouponType_Name().");
  return CouponType_Name(static_cast<CouponType>(value));
}
template <>
inline const std::string& CouponType_Name(CouponType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CouponType_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool CouponType_Parse(absl::string_view name, CouponType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CouponType>(
      CouponType_descriptor(), name, value);
}
enum OptionDirection : int {
  OPTION_DIRECTION_UNSPECIFIED = 0,
  OPTION_DIRECTION_PUT = 1,
  OPTION_DIRECTION_CALL = 2,
  OptionDirection_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  OptionDirection_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool OptionDirection_IsValid(int value);
extern const uint32_t OptionDirection_internal_data_[];
constexpr OptionDirection OptionDirection_MIN = static_cast<OptionDirection>(0);
constexpr OptionDirection OptionDirection_MAX = static_cast<OptionDirection>(2);
constexpr int OptionDirection_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
OptionDirection_descriptor();
template <typename T>
const std::string& OptionDirection_Name(T value) {
  static_assert(std::is_same<T, OptionDirection>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OptionDirection_Name().");
  return OptionDirection_Name(static_cast<OptionDirection>(value));
}
template <>
inline const std::string& OptionDirection_Name(OptionDirection value) {
  return ::google::protobuf::internal::NameOfDenseEnum<OptionDirection_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool OptionDirection_Parse(absl::string_view name, OptionDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OptionDirection>(
      OptionDirection_descriptor(), name, value);
}
enum OptionPaymentType : int {
  OPTION_PAYMENT_TYPE_UNSPECIFIED = 0,
  OPTION_PAYMENT_TYPE_PREMIUM = 1,
  OPTION_PAYMENT_TYPE_MARGINAL = 2,
  OptionPaymentType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  OptionPaymentType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool OptionPaymentType_IsValid(int value);
extern const uint32_t OptionPaymentType_internal_data_[];
constexpr OptionPaymentType OptionPaymentType_MIN = static_cast<OptionPaymentType>(0);
constexpr OptionPaymentType OptionPaymentType_MAX = static_cast<OptionPaymentType>(2);
constexpr int OptionPaymentType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
OptionPaymentType_descriptor();
template <typename T>
const std::string& OptionPaymentType_Name(T value) {
  static_assert(std::is_same<T, OptionPaymentType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OptionPaymentType_Name().");
  return OptionPaymentType_Name(static_cast<OptionPaymentType>(value));
}
template <>
inline const std::string& OptionPaymentType_Name(OptionPaymentType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<OptionPaymentType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool OptionPaymentType_Parse(absl::string_view name, OptionPaymentType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OptionPaymentType>(
      OptionPaymentType_descriptor(), name, value);
}
enum OptionStyle : int {
  OPTION_STYLE_UNSPECIFIED = 0,
  OPTION_STYLE_AMERICAN = 1,
  OPTION_STYLE_EUROPEAN = 2,
  OptionStyle_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  OptionStyle_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool OptionStyle_IsValid(int value);
extern const uint32_t OptionStyle_internal_data_[];
constexpr OptionStyle OptionStyle_MIN = static_cast<OptionStyle>(0);
constexpr OptionStyle OptionStyle_MAX = static_cast<OptionStyle>(2);
constexpr int OptionStyle_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
OptionStyle_descriptor();
template <typename T>
const std::string& OptionStyle_Name(T value) {
  static_assert(std::is_same<T, OptionStyle>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OptionStyle_Name().");
  return OptionStyle_Name(static_cast<OptionStyle>(value));
}
template <>
inline const std::string& OptionStyle_Name(OptionStyle value) {
  return ::google::protobuf::internal::NameOfDenseEnum<OptionStyle_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool OptionStyle_Parse(absl::string_view name, OptionStyle* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OptionStyle>(
      OptionStyle_descriptor(), name, value);
}
enum OptionSettlementType : int {
  OPTION_EXECUTION_TYPE_UNSPECIFIED = 0,
  OPTION_EXECUTION_TYPE_PHYSICAL_DELIVERY = 1,
  OPTION_EXECUTION_TYPE_CASH_SETTLEMENT = 2,
  OptionSettlementType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  OptionSettlementType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool OptionSettlementType_IsValid(int value);
extern const uint32_t OptionSettlementType_internal_data_[];
constexpr OptionSettlementType OptionSettlementType_MIN = static_cast<OptionSettlementType>(0);
constexpr OptionSettlementType OptionSettlementType_MAX = static_cast<OptionSettlementType>(2);
constexpr int OptionSettlementType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
OptionSettlementType_descriptor();
template <typename T>
const std::string& OptionSettlementType_Name(T value) {
  static_assert(std::is_same<T, OptionSettlementType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OptionSettlementType_Name().");
  return OptionSettlementType_Name(static_cast<OptionSettlementType>(value));
}
template <>
inline const std::string& OptionSettlementType_Name(OptionSettlementType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<OptionSettlementType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool OptionSettlementType_Parse(absl::string_view name, OptionSettlementType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OptionSettlementType>(
      OptionSettlementType_descriptor(), name, value);
}
enum InstrumentIdType : int {
  INSTRUMENT_ID_UNSPECIFIED = 0,
  INSTRUMENT_ID_TYPE_FIGI = 1,
  INSTRUMENT_ID_TYPE_TICKER = 2,
  INSTRUMENT_ID_TYPE_UID = 3,
  INSTRUMENT_ID_TYPE_POSITION_UID = 4,
  InstrumentIdType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  InstrumentIdType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool InstrumentIdType_IsValid(int value);
extern const uint32_t InstrumentIdType_internal_data_[];
constexpr InstrumentIdType InstrumentIdType_MIN = static_cast<InstrumentIdType>(0);
constexpr InstrumentIdType InstrumentIdType_MAX = static_cast<InstrumentIdType>(4);
constexpr int InstrumentIdType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
InstrumentIdType_descriptor();
template <typename T>
const std::string& InstrumentIdType_Name(T value) {
  static_assert(std::is_same<T, InstrumentIdType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to InstrumentIdType_Name().");
  return InstrumentIdType_Name(static_cast<InstrumentIdType>(value));
}
template <>
inline const std::string& InstrumentIdType_Name(InstrumentIdType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<InstrumentIdType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool InstrumentIdType_Parse(absl::string_view name, InstrumentIdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InstrumentIdType>(
      InstrumentIdType_descriptor(), name, value);
}
enum InstrumentStatus : int {
  INSTRUMENT_STATUS_UNSPECIFIED = 0,
  INSTRUMENT_STATUS_BASE = 1,
  INSTRUMENT_STATUS_ALL = 2,
  InstrumentStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  InstrumentStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool InstrumentStatus_IsValid(int value);
extern const uint32_t InstrumentStatus_internal_data_[];
constexpr InstrumentStatus InstrumentStatus_MIN = static_cast<InstrumentStatus>(0);
constexpr InstrumentStatus InstrumentStatus_MAX = static_cast<InstrumentStatus>(2);
constexpr int InstrumentStatus_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
InstrumentStatus_descriptor();
template <typename T>
const std::string& InstrumentStatus_Name(T value) {
  static_assert(std::is_same<T, InstrumentStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to InstrumentStatus_Name().");
  return InstrumentStatus_Name(static_cast<InstrumentStatus>(value));
}
template <>
inline const std::string& InstrumentStatus_Name(InstrumentStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<InstrumentStatus_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool InstrumentStatus_Parse(absl::string_view name, InstrumentStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InstrumentStatus>(
      InstrumentStatus_descriptor(), name, value);
}
enum ShareType : int {
  SHARE_TYPE_UNSPECIFIED = 0,
  SHARE_TYPE_COMMON = 1,
  SHARE_TYPE_PREFERRED = 2,
  SHARE_TYPE_ADR = 3,
  SHARE_TYPE_GDR = 4,
  SHARE_TYPE_MLP = 5,
  SHARE_TYPE_NY_REG_SHRS = 6,
  SHARE_TYPE_CLOSED_END_FUND = 7,
  SHARE_TYPE_REIT = 8,
  ShareType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ShareType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ShareType_IsValid(int value);
extern const uint32_t ShareType_internal_data_[];
constexpr ShareType ShareType_MIN = static_cast<ShareType>(0);
constexpr ShareType ShareType_MAX = static_cast<ShareType>(8);
constexpr int ShareType_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
ShareType_descriptor();
template <typename T>
const std::string& ShareType_Name(T value) {
  static_assert(std::is_same<T, ShareType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ShareType_Name().");
  return ShareType_Name(static_cast<ShareType>(value));
}
template <>
inline const std::string& ShareType_Name(ShareType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ShareType_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool ShareType_Parse(absl::string_view name, ShareType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ShareType>(
      ShareType_descriptor(), name, value);
}
enum AssetType : int {
  ASSET_TYPE_UNSPECIFIED = 0,
  ASSET_TYPE_CURRENCY = 1,
  ASSET_TYPE_COMMODITY = 2,
  ASSET_TYPE_INDEX = 3,
  ASSET_TYPE_SECURITY = 4,
  AssetType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AssetType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AssetType_IsValid(int value);
extern const uint32_t AssetType_internal_data_[];
constexpr AssetType AssetType_MIN = static_cast<AssetType>(0);
constexpr AssetType AssetType_MAX = static_cast<AssetType>(4);
constexpr int AssetType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
AssetType_descriptor();
template <typename T>
const std::string& AssetType_Name(T value) {
  static_assert(std::is_same<T, AssetType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AssetType_Name().");
  return AssetType_Name(static_cast<AssetType>(value));
}
template <>
inline const std::string& AssetType_Name(AssetType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AssetType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool AssetType_Parse(absl::string_view name, AssetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AssetType>(
      AssetType_descriptor(), name, value);
}
enum StructuredProductType : int {
  SP_TYPE_UNSPECIFIED = 0,
  SP_TYPE_DELIVERABLE = 1,
  SP_TYPE_NON_DELIVERABLE = 2,
  StructuredProductType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StructuredProductType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StructuredProductType_IsValid(int value);
extern const uint32_t StructuredProductType_internal_data_[];
constexpr StructuredProductType StructuredProductType_MIN = static_cast<StructuredProductType>(0);
constexpr StructuredProductType StructuredProductType_MAX = static_cast<StructuredProductType>(2);
constexpr int StructuredProductType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
StructuredProductType_descriptor();
template <typename T>
const std::string& StructuredProductType_Name(T value) {
  static_assert(std::is_same<T, StructuredProductType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StructuredProductType_Name().");
  return StructuredProductType_Name(static_cast<StructuredProductType>(value));
}
template <>
inline const std::string& StructuredProductType_Name(StructuredProductType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<StructuredProductType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool StructuredProductType_Parse(absl::string_view name, StructuredProductType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StructuredProductType>(
      StructuredProductType_descriptor(), name, value);
}
enum EditFavoritesActionType : int {
  EDIT_FAVORITES_ACTION_TYPE_UNSPECIFIED = 0,
  EDIT_FAVORITES_ACTION_TYPE_ADD = 1,
  EDIT_FAVORITES_ACTION_TYPE_DEL = 2,
  EditFavoritesActionType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EditFavoritesActionType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EditFavoritesActionType_IsValid(int value);
extern const uint32_t EditFavoritesActionType_internal_data_[];
constexpr EditFavoritesActionType EditFavoritesActionType_MIN = static_cast<EditFavoritesActionType>(0);
constexpr EditFavoritesActionType EditFavoritesActionType_MAX = static_cast<EditFavoritesActionType>(2);
constexpr int EditFavoritesActionType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
EditFavoritesActionType_descriptor();
template <typename T>
const std::string& EditFavoritesActionType_Name(T value) {
  static_assert(std::is_same<T, EditFavoritesActionType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EditFavoritesActionType_Name().");
  return EditFavoritesActionType_Name(static_cast<EditFavoritesActionType>(value));
}
template <>
inline const std::string& EditFavoritesActionType_Name(EditFavoritesActionType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EditFavoritesActionType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool EditFavoritesActionType_Parse(absl::string_view name, EditFavoritesActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EditFavoritesActionType>(
      EditFavoritesActionType_descriptor(), name, value);
}
enum RealExchange : int {
  REAL_EXCHANGE_UNSPECIFIED = 0,
  REAL_EXCHANGE_MOEX = 1,
  REAL_EXCHANGE_RTS = 2,
  REAL_EXCHANGE_OTC = 3,
  RealExchange_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RealExchange_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RealExchange_IsValid(int value);
extern const uint32_t RealExchange_internal_data_[];
constexpr RealExchange RealExchange_MIN = static_cast<RealExchange>(0);
constexpr RealExchange RealExchange_MAX = static_cast<RealExchange>(3);
constexpr int RealExchange_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
RealExchange_descriptor();
template <typename T>
const std::string& RealExchange_Name(T value) {
  static_assert(std::is_same<T, RealExchange>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RealExchange_Name().");
  return RealExchange_Name(static_cast<RealExchange>(value));
}
template <>
inline const std::string& RealExchange_Name(RealExchange value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RealExchange_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool RealExchange_Parse(absl::string_view name, RealExchange* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RealExchange>(
      RealExchange_descriptor(), name, value);
}
enum Recommendation : int {
  RECOMMENDATION_UNSPECIFIED = 0,
  RECOMMENDATION_BUY = 1,
  RECOMMENDATION_HOLD = 2,
  RECOMMENDATION_SELL = 3,
  Recommendation_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Recommendation_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Recommendation_IsValid(int value);
extern const uint32_t Recommendation_internal_data_[];
constexpr Recommendation Recommendation_MIN = static_cast<Recommendation>(0);
constexpr Recommendation Recommendation_MAX = static_cast<Recommendation>(3);
constexpr int Recommendation_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
Recommendation_descriptor();
template <typename T>
const std::string& Recommendation_Name(T value) {
  static_assert(std::is_same<T, Recommendation>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Recommendation_Name().");
  return Recommendation_Name(static_cast<Recommendation>(value));
}
template <>
inline const std::string& Recommendation_Name(Recommendation value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Recommendation_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool Recommendation_Parse(absl::string_view name, Recommendation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Recommendation>(
      Recommendation_descriptor(), name, value);
}
enum RiskLevel : int {
  RISK_LEVEL_UNSPECIFIED = 0,
  RISK_LEVEL_LOW = 1,
  RISK_LEVEL_MODERATE = 2,
  RISK_LEVEL_HIGH = 3,
  RiskLevel_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RiskLevel_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RiskLevel_IsValid(int value);
extern const uint32_t RiskLevel_internal_data_[];
constexpr RiskLevel RiskLevel_MIN = static_cast<RiskLevel>(0);
constexpr RiskLevel RiskLevel_MAX = static_cast<RiskLevel>(3);
constexpr int RiskLevel_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
RiskLevel_descriptor();
template <typename T>
const std::string& RiskLevel_Name(T value) {
  static_assert(std::is_same<T, RiskLevel>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RiskLevel_Name().");
  return RiskLevel_Name(static_cast<RiskLevel>(value));
}
template <>
inline const std::string& RiskLevel_Name(RiskLevel value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RiskLevel_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool RiskLevel_Parse(absl::string_view name, RiskLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RiskLevel>(
      RiskLevel_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class InstrumentsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.InstrumentsRequest) */ {
 public:
  inline InstrumentsRequest() : InstrumentsRequest(nullptr) {}
  ~InstrumentsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InstrumentsRequest(::google::protobuf::internal::ConstantInitialized);

  inline InstrumentsRequest(const InstrumentsRequest& from)
      : InstrumentsRequest(nullptr, from) {}
  InstrumentsRequest(InstrumentsRequest&& from) noexcept
    : InstrumentsRequest() {
    *this = ::std::move(from);
  }

  inline InstrumentsRequest& operator=(const InstrumentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentsRequest& operator=(InstrumentsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstrumentsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstrumentsRequest* internal_default_instance() {
    return reinterpret_cast<const InstrumentsRequest*>(
               &_InstrumentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InstrumentsRequest& a, InstrumentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstrumentsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstrumentsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InstrumentsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const InstrumentsRequest& from) {
    InstrumentsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(InstrumentsRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.InstrumentsRequest";
  }
  protected:
  explicit InstrumentsRequest(::google::protobuf::Arena* arena);
  InstrumentsRequest(::google::protobuf::Arena* arena, const InstrumentsRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentStatusFieldNumber = 1,
  };
  // optional .tinkoff.public_.invest.api.contract.v1.InstrumentStatus instrument_status = 1;
  bool has_instrument_status() const;
  void clear_instrument_status() ;
  ::tinkoff::public_::invest::api::contract::v1::InstrumentStatus instrument_status() const;
  void set_instrument_status(::tinkoff::public_::invest::api::contract::v1::InstrumentStatus value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::InstrumentStatus _internal_instrument_status() const;
  void _internal_set_instrument_status(::tinkoff::public_::invest::api::contract::v1::InstrumentStatus value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.InstrumentsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int instrument_status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class InstrumentRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.InstrumentRequest) */ {
 public:
  inline InstrumentRequest() : InstrumentRequest(nullptr) {}
  ~InstrumentRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InstrumentRequest(::google::protobuf::internal::ConstantInitialized);

  inline InstrumentRequest(const InstrumentRequest& from)
      : InstrumentRequest(nullptr, from) {}
  InstrumentRequest(InstrumentRequest&& from) noexcept
    : InstrumentRequest() {
    *this = ::std::move(from);
  }

  inline InstrumentRequest& operator=(const InstrumentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentRequest& operator=(InstrumentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstrumentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstrumentRequest* internal_default_instance() {
    return reinterpret_cast<const InstrumentRequest*>(
               &_InstrumentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InstrumentRequest& a, InstrumentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstrumentRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstrumentRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InstrumentRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const InstrumentRequest& from) {
    InstrumentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(InstrumentRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.InstrumentRequest";
  }
  protected:
  explicit InstrumentRequest(::google::protobuf::Arena* arena);
  InstrumentRequest(::google::protobuf::Arena* arena, const InstrumentRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassCodeFieldNumber = 2,
    kIdFieldNumber = 3,
    kIdTypeFieldNumber = 1,
  };
  // optional string class_code = 2;
  bool has_class_code() const;
  void clear_class_code() ;
  const std::string& class_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_code(Arg_&& arg, Args_... args);
  std::string* mutable_class_code();
  PROTOBUF_NODISCARD std::string* release_class_code();
  void set_allocated_class_code(std::string* value);

  private:
  const std::string& _internal_class_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_code(
      const std::string& value);
  std::string* _internal_mutable_class_code();

  public:
  // string id = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // .tinkoff.public_.invest.api.contract.v1.InstrumentIdType id_type = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_id_type() ;
  ::tinkoff::public_::invest::api::contract::v1::InstrumentIdType id_type() const;
  void set_id_type(::tinkoff::public_::invest::api::contract::v1::InstrumentIdType value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::InstrumentIdType _internal_id_type() const;
  void _internal_set_id_type(::tinkoff::public_::invest::api::contract::v1::InstrumentIdType value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.InstrumentRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      77, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr class_code_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    int id_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class InstrumentLink final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.InstrumentLink) */ {
 public:
  inline InstrumentLink() : InstrumentLink(nullptr) {}
  ~InstrumentLink() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InstrumentLink(::google::protobuf::internal::ConstantInitialized);

  inline InstrumentLink(const InstrumentLink& from)
      : InstrumentLink(nullptr, from) {}
  InstrumentLink(InstrumentLink&& from) noexcept
    : InstrumentLink() {
    *this = ::std::move(from);
  }

  inline InstrumentLink& operator=(const InstrumentLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentLink& operator=(InstrumentLink&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstrumentLink& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstrumentLink* internal_default_instance() {
    return reinterpret_cast<const InstrumentLink*>(
               &_InstrumentLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(InstrumentLink& a, InstrumentLink& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentLink* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentLink* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstrumentLink* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstrumentLink>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InstrumentLink& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const InstrumentLink& from) {
    InstrumentLink::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(InstrumentLink* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.InstrumentLink";
  }
  protected:
  explicit InstrumentLink(::google::protobuf::Arena* arena);
  InstrumentLink(::google::protobuf::Arena* arena, const InstrumentLink& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kInstrumentUidFieldNumber = 2,
  };
  // string type = 1;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // string instrument_uid = 2;
  void clear_instrument_uid() ;
  const std::string& instrument_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_uid(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* value);

  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
      const std::string& value);
  std::string* _internal_mutable_instrument_uid();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.InstrumentLink)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      80, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::internal::ArenaStringPtr instrument_uid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class IndicativesRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.IndicativesRequest) */ {
 public:
  inline IndicativesRequest() : IndicativesRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IndicativesRequest(::google::protobuf::internal::ConstantInitialized);

  inline IndicativesRequest(const IndicativesRequest& from)
      : IndicativesRequest(nullptr, from) {}
  IndicativesRequest(IndicativesRequest&& from) noexcept
    : IndicativesRequest() {
    *this = ::std::move(from);
  }

  inline IndicativesRequest& operator=(const IndicativesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndicativesRequest& operator=(IndicativesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndicativesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndicativesRequest* internal_default_instance() {
    return reinterpret_cast<const IndicativesRequest*>(
               &_IndicativesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(IndicativesRequest& a, IndicativesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IndicativesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndicativesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndicativesRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndicativesRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const IndicativesRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const IndicativesRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.IndicativesRequest";
  }
  protected:
  explicit IndicativesRequest(::google::protobuf::Arena* arena);
  IndicativesRequest(::google::protobuf::Arena* arena, const IndicativesRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.IndicativesRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class IndicativeResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.IndicativeResponse) */ {
 public:
  inline IndicativeResponse() : IndicativeResponse(nullptr) {}
  ~IndicativeResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IndicativeResponse(::google::protobuf::internal::ConstantInitialized);

  inline IndicativeResponse(const IndicativeResponse& from)
      : IndicativeResponse(nullptr, from) {}
  IndicativeResponse(IndicativeResponse&& from) noexcept
    : IndicativeResponse() {
    *this = ::std::move(from);
  }

  inline IndicativeResponse& operator=(const IndicativeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndicativeResponse& operator=(IndicativeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndicativeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndicativeResponse* internal_default_instance() {
    return reinterpret_cast<const IndicativeResponse*>(
               &_IndicativeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(IndicativeResponse& a, IndicativeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IndicativeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndicativeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndicativeResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndicativeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IndicativeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IndicativeResponse& from) {
    IndicativeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IndicativeResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.IndicativeResponse";
  }
  protected:
  explicit IndicativeResponse(::google::protobuf::Arena* arena);
  IndicativeResponse(::google::protobuf::Arena* arena, const IndicativeResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFigiFieldNumber = 1,
    kTickerFieldNumber = 2,
    kClassCodeFieldNumber = 3,
    kCurrencyFieldNumber = 4,
    kNameFieldNumber = 12,
    kExchangeFieldNumber = 13,
    kUidFieldNumber = 14,
    kInstrumentKindFieldNumber = 10,
    kBuyAvailableFlagFieldNumber = 404,
    kSellAvailableFlagFieldNumber = 405,
  };
  // string figi = 1;
  void clear_figi() ;
  const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_figi(Arg_&& arg, Args_... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string ticker = 2;
  void clear_ticker() ;
  const std::string& ticker() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ticker(Arg_&& arg, Args_... args);
  std::string* mutable_ticker();
  PROTOBUF_NODISCARD std::string* release_ticker();
  void set_allocated_ticker(std::string* value);

  private:
  const std::string& _internal_ticker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticker(
      const std::string& value);
  std::string* _internal_mutable_ticker();

  public:
  // string class_code = 3;
  void clear_class_code() ;
  const std::string& class_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_code(Arg_&& arg, Args_... args);
  std::string* mutable_class_code();
  PROTOBUF_NODISCARD std::string* release_class_code();
  void set_allocated_class_code(std::string* value);

  private:
  const std::string& _internal_class_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_code(
      const std::string& value);
  std::string* _internal_mutable_class_code();

  public:
  // string currency = 4;
  void clear_currency() ;
  const std::string& currency() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_currency(Arg_&& arg, Args_... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* value);

  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(
      const std::string& value);
  std::string* _internal_mutable_currency();

  public:
  // string name = 12;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string exchange = 13;
  void clear_exchange() ;
  const std::string& exchange() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange(Arg_&& arg, Args_... args);
  std::string* mutable_exchange();
  PROTOBUF_NODISCARD std::string* release_exchange();
  void set_allocated_exchange(std::string* value);

  private:
  const std::string& _internal_exchange() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange(
      const std::string& value);
  std::string* _internal_mutable_exchange();

  public:
  // string uid = 14;
  void clear_uid() ;
  const std::string& uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uid(Arg_&& arg, Args_... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* value);

  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(
      const std::string& value);
  std::string* _internal_mutable_uid();

  public:
  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
  void clear_instrument_kind() ;
  ::tinkoff::public_::invest::api::contract::v1::InstrumentType instrument_kind() const;
  void set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::InstrumentType _internal_instrument_kind() const;
  void _internal_set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value);

  public:
  // bool buy_available_flag = 404;
  void clear_buy_available_flag() ;
  bool buy_available_flag() const;
  void set_buy_available_flag(bool value);

  private:
  bool _internal_buy_available_flag() const;
  void _internal_set_buy_available_flag(bool value);

  public:
  // bool sell_available_flag = 405;
  void clear_sell_available_flag() ;
  bool sell_available_flag() const;
  void set_sell_available_flag(bool value);

  private:
  bool _internal_sell_available_flag() const;
  void _internal_set_sell_available_flag(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.IndicativeResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 0,
      117, 7>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr ticker_;
    ::google::protobuf::internal::ArenaStringPtr class_code_;
    ::google::protobuf::internal::ArenaStringPtr currency_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr exchange_;
    ::google::protobuf::internal::ArenaStringPtr uid_;
    int instrument_kind_;
    bool buy_available_flag_;
    bool sell_available_flag_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetFuturesMarginRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest) */ {
 public:
  inline GetFuturesMarginRequest() : GetFuturesMarginRequest(nullptr) {}
  ~GetFuturesMarginRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetFuturesMarginRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetFuturesMarginRequest(const GetFuturesMarginRequest& from)
      : GetFuturesMarginRequest(nullptr, from) {}
  GetFuturesMarginRequest(GetFuturesMarginRequest&& from) noexcept
    : GetFuturesMarginRequest() {
    *this = ::std::move(from);
  }

  inline GetFuturesMarginRequest& operator=(const GetFuturesMarginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFuturesMarginRequest& operator=(GetFuturesMarginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFuturesMarginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFuturesMarginRequest* internal_default_instance() {
    return reinterpret_cast<const GetFuturesMarginRequest*>(
               &_GetFuturesMarginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GetFuturesMarginRequest& a, GetFuturesMarginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFuturesMarginRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFuturesMarginRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFuturesMarginRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFuturesMarginRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetFuturesMarginRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetFuturesMarginRequest& from) {
    GetFuturesMarginRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetFuturesMarginRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest";
  }
  protected:
  explicit GetFuturesMarginRequest(::google::protobuf::Arena* arena);
  GetFuturesMarginRequest(::google::protobuf::Arena* arena, const GetFuturesMarginRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentIdFieldNumber = 4,
  };
  // string figi = 1 [deprecated = true];
  [[deprecated]]  void clear_figi() ;
  [[deprecated]] const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_figi(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_figi();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_figi();
  [[deprecated]] void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
  void clear_instrument_id() ;
  const std::string& instrument_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_id(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* value);

  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(
      const std::string& value);
  std::string* _internal_mutable_instrument_id();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      88, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetForecastRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetForecastRequest) */ {
 public:
  inline GetForecastRequest() : GetForecastRequest(nullptr) {}
  ~GetForecastRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetForecastRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetForecastRequest(const GetForecastRequest& from)
      : GetForecastRequest(nullptr, from) {}
  GetForecastRequest(GetForecastRequest&& from) noexcept
    : GetForecastRequest() {
    *this = ::std::move(from);
  }

  inline GetForecastRequest& operator=(const GetForecastRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetForecastRequest& operator=(GetForecastRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetForecastRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetForecastRequest* internal_default_instance() {
    return reinterpret_cast<const GetForecastRequest*>(
               &_GetForecastRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(GetForecastRequest& a, GetForecastRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetForecastRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetForecastRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetForecastRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetForecastRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetForecastRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetForecastRequest& from) {
    GetForecastRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetForecastRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetForecastRequest";
  }
  protected:
  explicit GetForecastRequest(::google::protobuf::Arena* arena);
  GetForecastRequest(::google::protobuf::Arena* arena, const GetForecastRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentIdFieldNumber = 1,
  };
  // string instrument_id = 1;
  void clear_instrument_id() ;
  const std::string& instrument_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_id(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* value);

  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(
      const std::string& value);
  std::string* _internal_mutable_instrument_id();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetForecastRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      79, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr instrument_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetFavoritesRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetFavoritesRequest) */ {
 public:
  inline GetFavoritesRequest() : GetFavoritesRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetFavoritesRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetFavoritesRequest(const GetFavoritesRequest& from)
      : GetFavoritesRequest(nullptr, from) {}
  GetFavoritesRequest(GetFavoritesRequest&& from) noexcept
    : GetFavoritesRequest() {
    *this = ::std::move(from);
  }

  inline GetFavoritesRequest& operator=(const GetFavoritesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFavoritesRequest& operator=(GetFavoritesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFavoritesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFavoritesRequest* internal_default_instance() {
    return reinterpret_cast<const GetFavoritesRequest*>(
               &_GetFavoritesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(GetFavoritesRequest& a, GetFavoritesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFavoritesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFavoritesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFavoritesRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFavoritesRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetFavoritesRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetFavoritesRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetFavoritesRequest";
  }
  protected:
  explicit GetFavoritesRequest(::google::protobuf::Arena* arena);
  GetFavoritesRequest(::google::protobuf::Arena* arena, const GetFavoritesRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetFavoritesRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetCountriesRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetCountriesRequest) */ {
 public:
  inline GetCountriesRequest() : GetCountriesRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetCountriesRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetCountriesRequest(const GetCountriesRequest& from)
      : GetCountriesRequest(nullptr, from) {}
  GetCountriesRequest(GetCountriesRequest&& from) noexcept
    : GetCountriesRequest() {
    *this = ::std::move(from);
  }

  inline GetCountriesRequest& operator=(const GetCountriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCountriesRequest& operator=(GetCountriesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCountriesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCountriesRequest* internal_default_instance() {
    return reinterpret_cast<const GetCountriesRequest*>(
               &_GetCountriesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(GetCountriesRequest& a, GetCountriesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCountriesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCountriesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCountriesRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCountriesRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetCountriesRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetCountriesRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetCountriesRequest";
  }
  protected:
  explicit GetCountriesRequest(::google::protobuf::Arena* arena);
  GetCountriesRequest(::google::protobuf::Arena* arena, const GetCountriesRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetCountriesRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetBrandRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetBrandRequest) */ {
 public:
  inline GetBrandRequest() : GetBrandRequest(nullptr) {}
  ~GetBrandRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetBrandRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetBrandRequest(const GetBrandRequest& from)
      : GetBrandRequest(nullptr, from) {}
  GetBrandRequest(GetBrandRequest&& from) noexcept
    : GetBrandRequest() {
    *this = ::std::move(from);
  }

  inline GetBrandRequest& operator=(const GetBrandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBrandRequest& operator=(GetBrandRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBrandRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBrandRequest* internal_default_instance() {
    return reinterpret_cast<const GetBrandRequest*>(
               &_GetBrandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(GetBrandRequest& a, GetBrandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBrandRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBrandRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBrandRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBrandRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetBrandRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetBrandRequest& from) {
    GetBrandRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetBrandRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetBrandRequest";
  }
  protected:
  explicit GetBrandRequest(::google::protobuf::Arena* arena);
  GetBrandRequest(::google::protobuf::Arena* arena, const GetBrandRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetBrandRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      65, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetAssetFundamentalsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest) */ {
 public:
  inline GetAssetFundamentalsRequest() : GetAssetFundamentalsRequest(nullptr) {}
  ~GetAssetFundamentalsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetAssetFundamentalsRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetAssetFundamentalsRequest(const GetAssetFundamentalsRequest& from)
      : GetAssetFundamentalsRequest(nullptr, from) {}
  GetAssetFundamentalsRequest(GetAssetFundamentalsRequest&& from) noexcept
    : GetAssetFundamentalsRequest() {
    *this = ::std::move(from);
  }

  inline GetAssetFundamentalsRequest& operator=(const GetAssetFundamentalsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAssetFundamentalsRequest& operator=(GetAssetFundamentalsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAssetFundamentalsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAssetFundamentalsRequest* internal_default_instance() {
    return reinterpret_cast<const GetAssetFundamentalsRequest*>(
               &_GetAssetFundamentalsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(GetAssetFundamentalsRequest& a, GetAssetFundamentalsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAssetFundamentalsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAssetFundamentalsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAssetFundamentalsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAssetFundamentalsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetAssetFundamentalsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetAssetFundamentalsRequest& from) {
    GetAssetFundamentalsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetAssetFundamentalsRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest";
  }
  protected:
  explicit GetAssetFundamentalsRequest(::google::protobuf::Arena* arena);
  GetAssetFundamentalsRequest(::google::protobuf::Arena* arena, const GetAssetFundamentalsRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetsFieldNumber = 1,
  };
  // repeated string assets = 1 [(.google.api.field_behavior) = REQUIRED];
  int assets_size() const;
  private:
  int _internal_assets_size() const;

  public:
  void clear_assets() ;
  const std::string& assets(int index) const;
  std::string* mutable_assets(int index);
  void set_assets(int index, const std::string& value);
  void set_assets(int index, std::string&& value);
  void set_assets(int index, const char* value);
  void set_assets(int index, const char* value, std::size_t size);
  void set_assets(int index, absl::string_view value);
  std::string* add_assets();
  void add_assets(const std::string& value);
  void add_assets(std::string&& value);
  void add_assets(const char* value);
  void add_assets(const char* value, std::size_t size);
  void add_assets(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& assets() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_assets();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_assets() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_assets();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      81, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> assets_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class FindInstrumentRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest) */ {
 public:
  inline FindInstrumentRequest() : FindInstrumentRequest(nullptr) {}
  ~FindInstrumentRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FindInstrumentRequest(::google::protobuf::internal::ConstantInitialized);

  inline FindInstrumentRequest(const FindInstrumentRequest& from)
      : FindInstrumentRequest(nullptr, from) {}
  FindInstrumentRequest(FindInstrumentRequest&& from) noexcept
    : FindInstrumentRequest() {
    *this = ::std::move(from);
  }

  inline FindInstrumentRequest& operator=(const FindInstrumentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindInstrumentRequest& operator=(FindInstrumentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindInstrumentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindInstrumentRequest* internal_default_instance() {
    return reinterpret_cast<const FindInstrumentRequest*>(
               &_FindInstrumentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(FindInstrumentRequest& a, FindInstrumentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindInstrumentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindInstrumentRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindInstrumentRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindInstrumentRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FindInstrumentRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FindInstrumentRequest& from) {
    FindInstrumentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FindInstrumentRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest";
  }
  protected:
  explicit FindInstrumentRequest(::google::protobuf::Arena* arena);
  FindInstrumentRequest(::google::protobuf::Arena* arena, const FindInstrumentRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
    kInstrumentKindFieldNumber = 2,
    kApiTradeAvailableFlagFieldNumber = 3,
  };
  // string query = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_query() ;
  const std::string& query() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_query(Arg_&& arg, Args_... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* value);

  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(
      const std::string& value);
  std::string* _internal_mutable_query();

  public:
  // optional .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 2;
  bool has_instrument_kind() const;
  void clear_instrument_kind() ;
  ::tinkoff::public_::invest::api::contract::v1::InstrumentType instrument_kind() const;
  void set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::InstrumentType _internal_instrument_kind() const;
  void _internal_set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value);

  public:
  // optional bool api_trade_available_flag = 3;
  bool has_api_trade_available_flag() const;
  void clear_api_trade_available_flag() ;
  bool api_trade_available_flag() const;
  void set_api_trade_available_flag(bool value);

  private:
  bool _internal_api_trade_available_flag() const;
  void _internal_set_api_trade_available_flag(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      74, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr query_;
    int instrument_kind_;
    bool api_trade_available_flag_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class FilterOptionsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest) */ {
 public:
  inline FilterOptionsRequest() : FilterOptionsRequest(nullptr) {}
  ~FilterOptionsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FilterOptionsRequest(::google::protobuf::internal::ConstantInitialized);

  inline FilterOptionsRequest(const FilterOptionsRequest& from)
      : FilterOptionsRequest(nullptr, from) {}
  FilterOptionsRequest(FilterOptionsRequest&& from) noexcept
    : FilterOptionsRequest() {
    *this = ::std::move(from);
  }

  inline FilterOptionsRequest& operator=(const FilterOptionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterOptionsRequest& operator=(FilterOptionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FilterOptionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilterOptionsRequest* internal_default_instance() {
    return reinterpret_cast<const FilterOptionsRequest*>(
               &_FilterOptionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FilterOptionsRequest& a, FilterOptionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterOptionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterOptionsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FilterOptionsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FilterOptionsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FilterOptionsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FilterOptionsRequest& from) {
    FilterOptionsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FilterOptionsRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest";
  }
  protected:
  explicit FilterOptionsRequest(::google::protobuf::Arena* arena);
  FilterOptionsRequest(::google::protobuf::Arena* arena, const FilterOptionsRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasicAssetUidFieldNumber = 1,
    kBasicAssetPositionUidFieldNumber = 2,
  };
  // optional string basic_asset_uid = 1;
  bool has_basic_asset_uid() const;
  void clear_basic_asset_uid() ;
  const std::string& basic_asset_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_basic_asset_uid(Arg_&& arg, Args_... args);
  std::string* mutable_basic_asset_uid();
  PROTOBUF_NODISCARD std::string* release_basic_asset_uid();
  void set_allocated_basic_asset_uid(std::string* value);

  private:
  const std::string& _internal_basic_asset_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_basic_asset_uid(
      const std::string& value);
  std::string* _internal_mutable_basic_asset_uid();

  public:
  // optional string basic_asset_position_uid = 2;
  bool has_basic_asset_position_uid() const;
  void clear_basic_asset_position_uid() ;
  const std::string& basic_asset_position_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_basic_asset_position_uid(Arg_&& arg, Args_... args);
  std::string* mutable_basic_asset_position_uid();
  PROTOBUF_NODISCARD std::string* release_basic_asset_position_uid();
  void set_allocated_basic_asset_position_uid(std::string* value);

  private:
  const std::string& _internal_basic_asset_position_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_basic_asset_position_uid(
      const std::string& value);
  std::string* _internal_mutable_basic_asset_position_uid();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      107, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr basic_asset_uid_;
    ::google::protobuf::internal::ArenaStringPtr basic_asset_position_uid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class FavoriteInstrument final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument) */ {
 public:
  inline FavoriteInstrument() : FavoriteInstrument(nullptr) {}
  ~FavoriteInstrument() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FavoriteInstrument(::google::protobuf::internal::ConstantInitialized);

  inline FavoriteInstrument(const FavoriteInstrument& from)
      : FavoriteInstrument(nullptr, from) {}
  FavoriteInstrument(FavoriteInstrument&& from) noexcept
    : FavoriteInstrument() {
    *this = ::std::move(from);
  }

  inline FavoriteInstrument& operator=(const FavoriteInstrument& from) {
    CopyFrom(from);
    return *this;
  }
  inline FavoriteInstrument& operator=(FavoriteInstrument&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FavoriteInstrument& default_instance() {
    return *internal_default_instance();
  }
  static inline const FavoriteInstrument* internal_default_instance() {
    return reinterpret_cast<const FavoriteInstrument*>(
               &_FavoriteInstrument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(FavoriteInstrument& a, FavoriteInstrument& b) {
    a.Swap(&b);
  }
  inline void Swap(FavoriteInstrument* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FavoriteInstrument* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FavoriteInstrument* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FavoriteInstrument>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FavoriteInstrument& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FavoriteInstrument& from) {
    FavoriteInstrument::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FavoriteInstrument* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.FavoriteInstrument";
  }
  protected:
  explicit FavoriteInstrument(::google::protobuf::Arena* arena);
  FavoriteInstrument(::google::protobuf::Arena* arena, const FavoriteInstrument& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFigiFieldNumber = 1,
    kTickerFieldNumber = 2,
    kClassCodeFieldNumber = 3,
    kIsinFieldNumber = 4,
    kInstrumentTypeFieldNumber = 11,
    kNameFieldNumber = 12,
    kUidFieldNumber = 13,
    kOtcFlagFieldNumber = 16,
    kApiTradeAvailableFlagFieldNumber = 17,
    kInstrumentKindFieldNumber = 18,
  };
  // string figi = 1;
  void clear_figi() ;
  const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_figi(Arg_&& arg, Args_... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string ticker = 2;
  void clear_ticker() ;
  const std::string& ticker() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ticker(Arg_&& arg, Args_... args);
  std::string* mutable_ticker();
  PROTOBUF_NODISCARD std::string* release_ticker();
  void set_allocated_ticker(std::string* value);

  private:
  const std::string& _internal_ticker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticker(
      const std::string& value);
  std::string* _internal_mutable_ticker();

  public:
  // string class_code = 3;
  void clear_class_code() ;
  const std::string& class_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_code(Arg_&& arg, Args_... args);
  std::string* mutable_class_code();
  PROTOBUF_NODISCARD std::string* release_class_code();
  void set_allocated_class_code(std::string* value);

  private:
  const std::string& _internal_class_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_code(
      const std::string& value);
  std::string* _internal_mutable_class_code();

  public:
  // string isin = 4;
  void clear_isin() ;
  const std::string& isin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_isin(Arg_&& arg, Args_... args);
  std::string* mutable_isin();
  PROTOBUF_NODISCARD std::string* release_isin();
  void set_allocated_isin(std::string* value);

  private:
  const std::string& _internal_isin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_isin(
      const std::string& value);
  std::string* _internal_mutable_isin();

  public:
  // string instrument_type = 11;
  void clear_instrument_type() ;
  const std::string& instrument_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_type(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_type();
  PROTOBUF_NODISCARD std::string* release_instrument_type();
  void set_allocated_instrument_type(std::string* value);

  private:
  const std::string& _internal_instrument_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_type(
      const std::string& value);
  std::string* _internal_mutable_instrument_type();

  public:
  // string name = 12;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string uid = 13;
  void clear_uid() ;
  const std::string& uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uid(Arg_&& arg, Args_... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* value);

  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(
      const std::string& value);
  std::string* _internal_mutable_uid();

  public:
  // bool otc_flag = 16;
  void clear_otc_flag() ;
  bool otc_flag() const;
  void set_otc_flag(bool value);

  private:
  bool _internal_otc_flag() const;
  void _internal_set_otc_flag(bool value);

  public:
  // bool api_trade_available_flag = 17;
  void clear_api_trade_available_flag() ;
  bool api_trade_available_flag() const;
  void set_api_trade_available_flag(bool value);

  private:
  bool _internal_api_trade_available_flag() const;
  void _internal_set_api_trade_available_flag(bool value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 18;
  void clear_instrument_kind() ;
  ::tinkoff::public_::invest::api::contract::v1::InstrumentType instrument_kind() const;
  void set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::InstrumentType _internal_instrument_kind() const;
  void _internal_set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 0,
      120, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr ticker_;
    ::google::protobuf::internal::ArenaStringPtr class_code_;
    ::google::protobuf::internal::ArenaStringPtr isin_;
    ::google::protobuf::internal::ArenaStringPtr instrument_type_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr uid_;
    bool otc_flag_;
    bool api_trade_available_flag_;
    int instrument_kind_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class EditFavoritesRequestInstrument final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument) */ {
 public:
  inline EditFavoritesRequestInstrument() : EditFavoritesRequestInstrument(nullptr) {}
  ~EditFavoritesRequestInstrument() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EditFavoritesRequestInstrument(::google::protobuf::internal::ConstantInitialized);

  inline EditFavoritesRequestInstrument(const EditFavoritesRequestInstrument& from)
      : EditFavoritesRequestInstrument(nullptr, from) {}
  EditFavoritesRequestInstrument(EditFavoritesRequestInstrument&& from) noexcept
    : EditFavoritesRequestInstrument() {
    *this = ::std::move(from);
  }

  inline EditFavoritesRequestInstrument& operator=(const EditFavoritesRequestInstrument& from) {
    CopyFrom(from);
    return *this;
  }
  inline EditFavoritesRequestInstrument& operator=(EditFavoritesRequestInstrument&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EditFavoritesRequestInstrument& default_instance() {
    return *internal_default_instance();
  }
  static inline const EditFavoritesRequestInstrument* internal_default_instance() {
    return reinterpret_cast<const EditFavoritesRequestInstrument*>(
               &_EditFavoritesRequestInstrument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(EditFavoritesRequestInstrument& a, EditFavoritesRequestInstrument& b) {
    a.Swap(&b);
  }
  inline void Swap(EditFavoritesRequestInstrument* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EditFavoritesRequestInstrument* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EditFavoritesRequestInstrument* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EditFavoritesRequestInstrument>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EditFavoritesRequestInstrument& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EditFavoritesRequestInstrument& from) {
    EditFavoritesRequestInstrument::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EditFavoritesRequestInstrument* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument";
  }
  protected:
  explicit EditFavoritesRequestInstrument(::google::protobuf::Arena* arena);
  EditFavoritesRequestInstrument(::google::protobuf::Arena* arena, const EditFavoritesRequestInstrument& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentIdFieldNumber = 2,
  };
  // optional string figi = 1 [deprecated = true];
  [[deprecated]]  bool has_figi() const;
  [[deprecated]]  void clear_figi() ;
  [[deprecated]] const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_figi(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_figi();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_figi();
  [[deprecated]] void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string instrument_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_instrument_id() ;
  const std::string& instrument_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_id(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* value);

  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(
      const std::string& value);
  std::string* _internal_mutable_instrument_id();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      95, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class CountryResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.CountryResponse) */ {
 public:
  inline CountryResponse() : CountryResponse(nullptr) {}
  ~CountryResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CountryResponse(::google::protobuf::internal::ConstantInitialized);

  inline CountryResponse(const CountryResponse& from)
      : CountryResponse(nullptr, from) {}
  CountryResponse(CountryResponse&& from) noexcept
    : CountryResponse() {
    *this = ::std::move(from);
  }

  inline CountryResponse& operator=(const CountryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CountryResponse& operator=(CountryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CountryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CountryResponse* internal_default_instance() {
    return reinterpret_cast<const CountryResponse*>(
               &_CountryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(CountryResponse& a, CountryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CountryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CountryResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CountryResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CountryResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CountryResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CountryResponse& from) {
    CountryResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CountryResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.CountryResponse";
  }
  protected:
  explicit CountryResponse(::google::protobuf::Arena* arena);
  CountryResponse(::google::protobuf::Arena* arena, const CountryResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlfaTwoFieldNumber = 1,
    kAlfaThreeFieldNumber = 2,
    kNameFieldNumber = 3,
    kNameBriefFieldNumber = 4,
  };
  // string alfa_two = 1;
  void clear_alfa_two() ;
  const std::string& alfa_two() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_alfa_two(Arg_&& arg, Args_... args);
  std::string* mutable_alfa_two();
  PROTOBUF_NODISCARD std::string* release_alfa_two();
  void set_allocated_alfa_two(std::string* value);

  private:
  const std::string& _internal_alfa_two() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alfa_two(
      const std::string& value);
  std::string* _internal_mutable_alfa_two();

  public:
  // string alfa_three = 2;
  void clear_alfa_three() ;
  const std::string& alfa_three() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_alfa_three(Arg_&& arg, Args_... args);
  std::string* mutable_alfa_three();
  PROTOBUF_NODISCARD std::string* release_alfa_three();
  void set_allocated_alfa_three(std::string* value);

  private:
  const std::string& _internal_alfa_three() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alfa_three(
      const std::string& value);
  std::string* _internal_mutable_alfa_three();

  public:
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string name_brief = 4;
  void clear_name_brief() ;
  const std::string& name_brief() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name_brief(Arg_&& arg, Args_... args);
  std::string* mutable_name_brief();
  PROTOBUF_NODISCARD std::string* release_name_brief();
  void set_allocated_name_brief(std::string* value);

  private:
  const std::string& _internal_name_brief() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_brief(
      const std::string& value);
  std::string* _internal_mutable_name_brief();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.CountryResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      95, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr alfa_two_;
    ::google::protobuf::internal::ArenaStringPtr alfa_three_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr name_brief_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class Brand final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.Brand) */ {
 public:
  inline Brand() : Brand(nullptr) {}
  ~Brand() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Brand(::google::protobuf::internal::ConstantInitialized);

  inline Brand(const Brand& from)
      : Brand(nullptr, from) {}
  Brand(Brand&& from) noexcept
    : Brand() {
    *this = ::std::move(from);
  }

  inline Brand& operator=(const Brand& from) {
    CopyFrom(from);
    return *this;
  }
  inline Brand& operator=(Brand&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Brand& default_instance() {
    return *internal_default_instance();
  }
  static inline const Brand* internal_default_instance() {
    return reinterpret_cast<const Brand*>(
               &_Brand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(Brand& a, Brand& b) {
    a.Swap(&b);
  }
  inline void Swap(Brand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Brand* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Brand* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Brand>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Brand& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Brand& from) {
    Brand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Brand* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.Brand";
  }
  protected:
  explicit Brand(::google::protobuf::Arena* arena);
  Brand(::google::protobuf::Arena* arena, const Brand& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kInfoFieldNumber = 4,
    kCompanyFieldNumber = 5,
    kSectorFieldNumber = 6,
    kCountryOfRiskFieldNumber = 7,
    kCountryOfRiskNameFieldNumber = 8,
  };
  // string uid = 1;
  void clear_uid() ;
  const std::string& uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uid(Arg_&& arg, Args_... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* value);

  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(
      const std::string& value);
  std::string* _internal_mutable_uid();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string description = 3;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string info = 4;
  void clear_info() ;
  const std::string& info() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_info(Arg_&& arg, Args_... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* value);

  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(
      const std::string& value);
  std::string* _internal_mutable_info();

  public:
  // string company = 5;
  void clear_company() ;
  const std::string& company() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_company(Arg_&& arg, Args_... args);
  std::string* mutable_company();
  PROTOBUF_NODISCARD std::string* release_company();
  void set_allocated_company(std::string* value);

  private:
  const std::string& _internal_company() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_company(
      const std::string& value);
  std::string* _internal_mutable_company();

  public:
  // string sector = 6;
  void clear_sector() ;
  const std::string& sector() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sector(Arg_&& arg, Args_... args);
  std::string* mutable_sector();
  PROTOBUF_NODISCARD std::string* release_sector();
  void set_allocated_sector(std::string* value);

  private:
  const std::string& _internal_sector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sector(
      const std::string& value);
  std::string* _internal_mutable_sector();

  public:
  // string country_of_risk = 7;
  void clear_country_of_risk() ;
  const std::string& country_of_risk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_country_of_risk(Arg_&& arg, Args_... args);
  std::string* mutable_country_of_risk();
  PROTOBUF_NODISCARD std::string* release_country_of_risk();
  void set_allocated_country_of_risk(std::string* value);

  private:
  const std::string& _internal_country_of_risk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_of_risk(
      const std::string& value);
  std::string* _internal_mutable_country_of_risk();

  public:
  // string country_of_risk_name = 8;
  void clear_country_of_risk_name() ;
  const std::string& country_of_risk_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_country_of_risk_name(Arg_&& arg, Args_... args);
  std::string* mutable_country_of_risk_name();
  PROTOBUF_NODISCARD std::string* release_country_of_risk_name();
  void set_allocated_country_of_risk_name(std::string* value);

  private:
  const std::string& _internal_country_of_risk_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_of_risk_name(
      const std::string& value);
  std::string* _internal_mutable_country_of_risk_name();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.Brand)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      131, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr uid_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr info_;
    ::google::protobuf::internal::ArenaStringPtr company_;
    ::google::protobuf::internal::ArenaStringPtr sector_;
    ::google::protobuf::internal::ArenaStringPtr country_of_risk_;
    ::google::protobuf::internal::ArenaStringPtr country_of_risk_name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class AssetsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.AssetsRequest) */ {
 public:
  inline AssetsRequest() : AssetsRequest(nullptr) {}
  ~AssetsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AssetsRequest(::google::protobuf::internal::ConstantInitialized);

  inline AssetsRequest(const AssetsRequest& from)
      : AssetsRequest(nullptr, from) {}
  AssetsRequest(AssetsRequest&& from) noexcept
    : AssetsRequest() {
    *this = ::std::move(from);
  }

  inline AssetsRequest& operator=(const AssetsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetsRequest& operator=(AssetsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssetsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssetsRequest* internal_default_instance() {
    return reinterpret_cast<const AssetsRequest*>(
               &_AssetsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(AssetsRequest& a, AssetsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssetsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssetsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AssetsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AssetsRequest& from) {
    AssetsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AssetsRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.AssetsRequest";
  }
  protected:
  explicit AssetsRequest(::google::protobuf::Arena* arena);
  AssetsRequest(::google::protobuf::Arena* arena, const AssetsRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentTypeFieldNumber = 1,
  };
  // optional .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_type = 1;
  bool has_instrument_type() const;
  void clear_instrument_type() ;
  ::tinkoff::public_::invest::api::contract::v1::InstrumentType instrument_type() const;
  void set_instrument_type(::tinkoff::public_::invest::api::contract::v1::InstrumentType value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::InstrumentType _internal_instrument_type() const;
  void _internal_set_instrument_type(::tinkoff::public_::invest::api::contract::v1::InstrumentType value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.AssetsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int instrument_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class AssetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.AssetRequest) */ {
 public:
  inline AssetRequest() : AssetRequest(nullptr) {}
  ~AssetRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AssetRequest(::google::protobuf::internal::ConstantInitialized);

  inline AssetRequest(const AssetRequest& from)
      : AssetRequest(nullptr, from) {}
  AssetRequest(AssetRequest&& from) noexcept
    : AssetRequest() {
    *this = ::std::move(from);
  }

  inline AssetRequest& operator=(const AssetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetRequest& operator=(AssetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssetRequest* internal_default_instance() {
    return reinterpret_cast<const AssetRequest*>(
               &_AssetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(AssetRequest& a, AssetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssetRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssetRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AssetRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AssetRequest& from) {
    AssetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AssetRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.AssetRequest";
  }
  protected:
  explicit AssetRequest(::google::protobuf::Arena* arena);
  AssetRequest(::google::protobuf::Arena* arena, const AssetRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.AssetRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      62, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class AssetCurrency final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.AssetCurrency) */ {
 public:
  inline AssetCurrency() : AssetCurrency(nullptr) {}
  ~AssetCurrency() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AssetCurrency(::google::protobuf::internal::ConstantInitialized);

  inline AssetCurrency(const AssetCurrency& from)
      : AssetCurrency(nullptr, from) {}
  AssetCurrency(AssetCurrency&& from) noexcept
    : AssetCurrency() {
    *this = ::std::move(from);
  }

  inline AssetCurrency& operator=(const AssetCurrency& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetCurrency& operator=(AssetCurrency&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssetCurrency& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssetCurrency* internal_default_instance() {
    return reinterpret_cast<const AssetCurrency*>(
               &_AssetCurrency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(AssetCurrency& a, AssetCurrency& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetCurrency* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetCurrency* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssetCurrency* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssetCurrency>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AssetCurrency& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AssetCurrency& from) {
    AssetCurrency::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AssetCurrency* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.AssetCurrency";
  }
  protected:
  explicit AssetCurrency(::google::protobuf::Arena* arena);
  AssetCurrency(::google::protobuf::Arena* arena, const AssetCurrency& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseCurrencyFieldNumber = 1,
  };
  // string base_currency = 1;
  void clear_base_currency() ;
  const std::string& base_currency() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_base_currency(Arg_&& arg, Args_... args);
  std::string* mutable_base_currency();
  PROTOBUF_NODISCARD std::string* release_base_currency();
  void set_allocated_base_currency(std::string* value);

  private:
  const std::string& _internal_base_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base_currency(
      const std::string& value);
  std::string* _internal_mutable_base_currency();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.AssetCurrency)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      74, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr base_currency_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class TradingSchedulesRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest) */ {
 public:
  inline TradingSchedulesRequest() : TradingSchedulesRequest(nullptr) {}
  ~TradingSchedulesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TradingSchedulesRequest(::google::protobuf::internal::ConstantInitialized);

  inline TradingSchedulesRequest(const TradingSchedulesRequest& from)
      : TradingSchedulesRequest(nullptr, from) {}
  TradingSchedulesRequest(TradingSchedulesRequest&& from) noexcept
    : TradingSchedulesRequest() {
    *this = ::std::move(from);
  }

  inline TradingSchedulesRequest& operator=(const TradingSchedulesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradingSchedulesRequest& operator=(TradingSchedulesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TradingSchedulesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TradingSchedulesRequest* internal_default_instance() {
    return reinterpret_cast<const TradingSchedulesRequest*>(
               &_TradingSchedulesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TradingSchedulesRequest& a, TradingSchedulesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TradingSchedulesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradingSchedulesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TradingSchedulesRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TradingSchedulesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TradingSchedulesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TradingSchedulesRequest& from) {
    TradingSchedulesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TradingSchedulesRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest";
  }
  protected:
  explicit TradingSchedulesRequest(::google::protobuf::Arena* arena);
  TradingSchedulesRequest(::google::protobuf::Arena* arena, const TradingSchedulesRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangeFieldNumber = 1,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
  };
  // optional string exchange = 1;
  bool has_exchange() const;
  void clear_exchange() ;
  const std::string& exchange() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange(Arg_&& arg, Args_... args);
  std::string* mutable_exchange();
  PROTOBUF_NODISCARD std::string* release_exchange();
  void set_allocated_exchange(std::string* value);

  private:
  const std::string& _internal_exchange() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange(
      const std::string& value);
  std::string* _internal_mutable_exchange();

  public:
  // optional .google.protobuf.Timestamp from = 2;
  bool has_from() const;
  void clear_from() ;
  const ::google::protobuf::Timestamp& from() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_from();
  ::google::protobuf::Timestamp* mutable_from();
  void set_allocated_from(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_from();

  private:
  const ::google::protobuf::Timestamp& _internal_from() const;
  ::google::protobuf::Timestamp* _internal_mutable_from();

  public:
  // optional .google.protobuf.Timestamp to = 3;
  bool has_to() const;
  void clear_to() ;
  const ::google::protobuf::Timestamp& to() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_to();
  ::google::protobuf::Timestamp* mutable_to();
  void set_allocated_to(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_to();

  private:
  const ::google::protobuf::Timestamp& _internal_to() const;
  ::google::protobuf::Timestamp* _internal_mutable_to();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      79, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr exchange_;
    ::google::protobuf::Timestamp* from_;
    ::google::protobuf::Timestamp* to_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class TradingInterval_TimeInterval final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval) */ {
 public:
  inline TradingInterval_TimeInterval() : TradingInterval_TimeInterval(nullptr) {}
  ~TradingInterval_TimeInterval() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TradingInterval_TimeInterval(::google::protobuf::internal::ConstantInitialized);

  inline TradingInterval_TimeInterval(const TradingInterval_TimeInterval& from)
      : TradingInterval_TimeInterval(nullptr, from) {}
  TradingInterval_TimeInterval(TradingInterval_TimeInterval&& from) noexcept
    : TradingInterval_TimeInterval() {
    *this = ::std::move(from);
  }

  inline TradingInterval_TimeInterval& operator=(const TradingInterval_TimeInterval& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradingInterval_TimeInterval& operator=(TradingInterval_TimeInterval&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TradingInterval_TimeInterval& default_instance() {
    return *internal_default_instance();
  }
  static inline const TradingInterval_TimeInterval* internal_default_instance() {
    return reinterpret_cast<const TradingInterval_TimeInterval*>(
               &_TradingInterval_TimeInterval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(TradingInterval_TimeInterval& a, TradingInterval_TimeInterval& b) {
    a.Swap(&b);
  }
  inline void Swap(TradingInterval_TimeInterval* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradingInterval_TimeInterval* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TradingInterval_TimeInterval* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TradingInterval_TimeInterval>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TradingInterval_TimeInterval& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TradingInterval_TimeInterval& from) {
    TradingInterval_TimeInterval::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TradingInterval_TimeInterval* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval";
  }
  protected:
  explicit TradingInterval_TimeInterval(::google::protobuf::Arena* arena);
  TradingInterval_TimeInterval(::google::protobuf::Arena* arena, const TradingInterval_TimeInterval& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTsFieldNumber = 1,
    kEndTsFieldNumber = 2,
  };
  // .google.protobuf.Timestamp start_ts = 1;
  bool has_start_ts() const;
  void clear_start_ts() ;
  const ::google::protobuf::Timestamp& start_ts() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_start_ts();
  ::google::protobuf::Timestamp* mutable_start_ts();
  void set_allocated_start_ts(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_start_ts(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_start_ts();

  private:
  const ::google::protobuf::Timestamp& _internal_start_ts() const;
  ::google::protobuf::Timestamp* _internal_mutable_start_ts();

  public:
  // .google.protobuf.Timestamp end_ts = 2;
  bool has_end_ts() const;
  void clear_end_ts() ;
  const ::google::protobuf::Timestamp& end_ts() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_end_ts();
  ::google::protobuf::Timestamp* mutable_end_ts();
  void set_allocated_end_ts(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_end_ts(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_end_ts();

  private:
  const ::google::protobuf::Timestamp& _internal_end_ts() const;
  ::google::protobuf::Timestamp* _internal_mutable_end_ts();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Timestamp* start_ts_;
    ::google::protobuf::Timestamp* end_ts_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class Share final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.Share) */ {
 public:
  inline Share() : Share(nullptr) {}
  ~Share() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Share(::google::protobuf::internal::ConstantInitialized);

  inline Share(const Share& from)
      : Share(nullptr, from) {}
  Share(Share&& from) noexcept
    : Share() {
    *this = ::std::move(from);
  }

  inline Share& operator=(const Share& from) {
    CopyFrom(from);
    return *this;
  }
  inline Share& operator=(Share&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Share& default_instance() {
    return *internal_default_instance();
  }
  static inline const Share* internal_default_instance() {
    return reinterpret_cast<const Share*>(
               &_Share_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Share& a, Share& b) {
    a.Swap(&b);
  }
  inline void Swap(Share* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Share* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Share* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Share>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Share& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Share& from) {
    Share::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Share* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.Share";
  }
  protected:
  explicit Share(::google::protobuf::Arena* arena);
  Share(::google::protobuf::Arena* arena, const Share& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFigiFieldNumber = 1,
    kTickerFieldNumber = 2,
    kClassCodeFieldNumber = 3,
    kIsinFieldNumber = 4,
    kCurrencyFieldNumber = 6,
    kNameFieldNumber = 15,
    kExchangeFieldNumber = 16,
    kCountryOfRiskFieldNumber = 19,
    kCountryOfRiskNameFieldNumber = 20,
    kSectorFieldNumber = 21,
    kUidFieldNumber = 33,
    kPositionUidFieldNumber = 35,
    kAssetUidFieldNumber = 36,
    kKlongFieldNumber = 7,
    kKshortFieldNumber = 8,
    kDlongFieldNumber = 9,
    kDshortFieldNumber = 10,
    kDlongMinFieldNumber = 11,
    kDshortMinFieldNumber = 12,
    kIpoDateFieldNumber = 17,
    kNominalFieldNumber = 23,
    kMinPriceIncrementFieldNumber = 31,
    kFirst1MinCandleDateFieldNumber = 56,
    kFirst1DayCandleDateFieldNumber = 57,
    kBrandFieldNumber = 60,
    kIssueSizeFieldNumber = 18,
    kLotFieldNumber = 5,
    kShortEnabledFlagFieldNumber = 13,
    kOtcFlagFieldNumber = 26,
    kBuyAvailableFlagFieldNumber = 27,
    kSellAvailableFlagFieldNumber = 28,
    kIssueSizePlanFieldNumber = 22,
    kTradingStatusFieldNumber = 25,
    kShareTypeFieldNumber = 30,
    kRealExchangeFieldNumber = 34,
    kDivYieldFlagFieldNumber = 29,
    kApiTradeAvailableFlagFieldNumber = 32,
    kForIisFlagFieldNumber = 46,
    kForQualInvestorFlagFieldNumber = 47,
    kWeekendFlagFieldNumber = 48,
    kBlockedTcaFlagFieldNumber = 49,
    kLiquidityFlagFieldNumber = 50,
  };
  // string figi = 1;
  void clear_figi() ;
  const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_figi(Arg_&& arg, Args_... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string ticker = 2;
  void clear_ticker() ;
  const std::string& ticker() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ticker(Arg_&& arg, Args_... args);
  std::string* mutable_ticker();
  PROTOBUF_NODISCARD std::string* release_ticker();
  void set_allocated_ticker(std::string* value);

  private:
  const std::string& _internal_ticker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticker(
      const std::string& value);
  std::string* _internal_mutable_ticker();

  public:
  // string class_code = 3;
  void clear_class_code() ;
  const std::string& class_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_code(Arg_&& arg, Args_... args);
  std::string* mutable_class_code();
  PROTOBUF_NODISCARD std::string* release_class_code();
  void set_allocated_class_code(std::string* value);

  private:
  const std::string& _internal_class_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_code(
      const std::string& value);
  std::string* _internal_mutable_class_code();

  public:
  // string isin = 4;
  void clear_isin() ;
  const std::string& isin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_isin(Arg_&& arg, Args_... args);
  std::string* mutable_isin();
  PROTOBUF_NODISCARD std::string* release_isin();
  void set_allocated_isin(std::string* value);

  private:
  const std::string& _internal_isin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_isin(
      const std::string& value);
  std::string* _internal_mutable_isin();

  public:
  // string currency = 6;
  void clear_currency() ;
  const std::string& currency() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_currency(Arg_&& arg, Args_... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* value);

  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(
      const std::string& value);
  std::string* _internal_mutable_currency();

  public:
  // string name = 15;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string exchange = 16;
  void clear_exchange() ;
  const std::string& exchange() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange(Arg_&& arg, Args_... args);
  std::string* mutable_exchange();
  PROTOBUF_NODISCARD std::string* release_exchange();
  void set_allocated_exchange(std::string* value);

  private:
  const std::string& _internal_exchange() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange(
      const std::string& value);
  std::string* _internal_mutable_exchange();

  public:
  // string country_of_risk = 19;
  void clear_country_of_risk() ;
  const std::string& country_of_risk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_country_of_risk(Arg_&& arg, Args_... args);
  std::string* mutable_country_of_risk();
  PROTOBUF_NODISCARD std::string* release_country_of_risk();
  void set_allocated_country_of_risk(std::string* value);

  private:
  const std::string& _internal_country_of_risk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_of_risk(
      const std::string& value);
  std::string* _internal_mutable_country_of_risk();

  public:
  // string country_of_risk_name = 20;
  void clear_country_of_risk_name() ;
  const std::string& country_of_risk_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_country_of_risk_name(Arg_&& arg, Args_... args);
  std::string* mutable_country_of_risk_name();
  PROTOBUF_NODISCARD std::string* release_country_of_risk_name();
  void set_allocated_country_of_risk_name(std::string* value);

  private:
  const std::string& _internal_country_of_risk_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_of_risk_name(
      const std::string& value);
  std::string* _internal_mutable_country_of_risk_name();

  public:
  // string sector = 21;
  void clear_sector() ;
  const std::string& sector() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sector(Arg_&& arg, Args_... args);
  std::string* mutable_sector();
  PROTOBUF_NODISCARD std::string* release_sector();
  void set_allocated_sector(std::string* value);

  private:
  const std::string& _internal_sector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sector(
      const std::string& value);
  std::string* _internal_mutable_sector();

  public:
  // string uid = 33;
  void clear_uid() ;
  const std::string& uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uid(Arg_&& arg, Args_... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* value);

  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(
      const std::string& value);
  std::string* _internal_mutable_uid();

  public:
  // string position_uid = 35;
  void clear_position_uid() ;
  const std::string& position_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_position_uid(Arg_&& arg, Args_... args);
  std::string* mutable_position_uid();
  PROTOBUF_NODISCARD std::string* release_position_uid();
  void set_allocated_position_uid(std::string* value);

  private:
  const std::string& _internal_position_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_uid(
      const std::string& value);
  std::string* _internal_mutable_position_uid();

  public:
  // string asset_uid = 36;
  void clear_asset_uid() ;
  const std::string& asset_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_asset_uid(Arg_&& arg, Args_... args);
  std::string* mutable_asset_uid();
  PROTOBUF_NODISCARD std::string* release_asset_uid();
  void set_allocated_asset_uid(std::string* value);

  private:
  const std::string& _internal_asset_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_uid(
      const std::string& value);
  std::string* _internal_mutable_asset_uid();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
  bool has_klong() const;
  void clear_klong() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& klong() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_klong();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_klong();
  void set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_klong();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_klong() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_klong();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
  bool has_kshort() const;
  void clear_kshort() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& kshort() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_kshort();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_kshort();
  void set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_kshort();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_kshort() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_kshort();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
  bool has_dlong() const;
  void clear_dlong() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dlong();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dlong();
  void set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dlong();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dlong() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dlong();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
  bool has_dshort() const;
  void clear_dshort() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dshort();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dshort();
  void set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dshort();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dshort() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dshort();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
  bool has_dlong_min() const;
  void clear_dlong_min() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong_min() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dlong_min();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dlong_min();
  void set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dlong_min();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dlong_min() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dlong_min();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
  bool has_dshort_min() const;
  void clear_dshort_min() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort_min() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dshort_min();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dshort_min();
  void set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dshort_min();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dshort_min() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dshort_min();

  public:
  // .google.protobuf.Timestamp ipo_date = 17;
  bool has_ipo_date() const;
  void clear_ipo_date() ;
  const ::google::protobuf::Timestamp& ipo_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_ipo_date();
  ::google::protobuf::Timestamp* mutable_ipo_date();
  void set_allocated_ipo_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_ipo_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_ipo_date();

  private:
  const ::google::protobuf::Timestamp& _internal_ipo_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_ipo_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 23;
  bool has_nominal() const;
  void clear_nominal() ;
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& nominal() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_nominal();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_nominal();
  void set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  void unsafe_arena_set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_nominal();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_nominal() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_nominal();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 31;
  bool has_min_price_increment() const;
  void clear_min_price_increment() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_min_price_increment();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_min_price_increment();
  void set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_min_price_increment();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_min_price_increment() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_min_price_increment();

  public:
  // .google.protobuf.Timestamp first_1min_candle_date = 56;
  bool has_first_1min_candle_date() const;
  void clear_first_1min_candle_date() ;
  const ::google::protobuf::Timestamp& first_1min_candle_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_first_1min_candle_date();
  ::google::protobuf::Timestamp* mutable_first_1min_candle_date();
  void set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_first_1min_candle_date();

  private:
  const ::google::protobuf::Timestamp& _internal_first_1min_candle_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_first_1min_candle_date();

  public:
  // .google.protobuf.Timestamp first_1day_candle_date = 57;
  bool has_first_1day_candle_date() const;
  void clear_first_1day_candle_date() ;
  const ::google::protobuf::Timestamp& first_1day_candle_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_first_1day_candle_date();
  ::google::protobuf::Timestamp* mutable_first_1day_candle_date();
  void set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_first_1day_candle_date();

  private:
  const ::google::protobuf::Timestamp& _internal_first_1day_candle_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_first_1day_candle_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
  bool has_brand() const;
  void clear_brand() ;
  const ::tinkoff::public_::invest::api::contract::v1::BrandData& brand() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::BrandData* release_brand();
  ::tinkoff::public_::invest::api::contract::v1::BrandData* mutable_brand();
  void set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value);
  void unsafe_arena_set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value);
  ::tinkoff::public_::invest::api::contract::v1::BrandData* unsafe_arena_release_brand();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::BrandData& _internal_brand() const;
  ::tinkoff::public_::invest::api::contract::v1::BrandData* _internal_mutable_brand();

  public:
  // int64 issue_size = 18;
  void clear_issue_size() ;
  ::int64_t issue_size() const;
  void set_issue_size(::int64_t value);

  private:
  ::int64_t _internal_issue_size() const;
  void _internal_set_issue_size(::int64_t value);

  public:
  // int32 lot = 5;
  void clear_lot() ;
  ::int32_t lot() const;
  void set_lot(::int32_t value);

  private:
  ::int32_t _internal_lot() const;
  void _internal_set_lot(::int32_t value);

  public:
  // bool short_enabled_flag = 13;
  void clear_short_enabled_flag() ;
  bool short_enabled_flag() const;
  void set_short_enabled_flag(bool value);

  private:
  bool _internal_short_enabled_flag() const;
  void _internal_set_short_enabled_flag(bool value);

  public:
  // bool otc_flag = 26;
  void clear_otc_flag() ;
  bool otc_flag() const;
  void set_otc_flag(bool value);

  private:
  bool _internal_otc_flag() const;
  void _internal_set_otc_flag(bool value);

  public:
  // bool buy_available_flag = 27;
  void clear_buy_available_flag() ;
  bool buy_available_flag() const;
  void set_buy_available_flag(bool value);

  private:
  bool _internal_buy_available_flag() const;
  void _internal_set_buy_available_flag(bool value);

  public:
  // bool sell_available_flag = 28;
  void clear_sell_available_flag() ;
  bool sell_available_flag() const;
  void set_sell_available_flag(bool value);

  private:
  bool _internal_sell_available_flag() const;
  void _internal_set_sell_available_flag(bool value);

  public:
  // int64 issue_size_plan = 22;
  void clear_issue_size_plan() ;
  ::int64_t issue_size_plan() const;
  void set_issue_size_plan(::int64_t value);

  private:
  ::int64_t _internal_issue_size_plan() const;
  void _internal_set_issue_size_plan(::int64_t value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
  void clear_trading_status() ;
  ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus trading_status() const;
  void set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus _internal_trading_status() const;
  void _internal_set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.ShareType share_type = 30;
  void clear_share_type() ;
  ::tinkoff::public_::invest::api::contract::v1::ShareType share_type() const;
  void set_share_type(::tinkoff::public_::invest::api::contract::v1::ShareType value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::ShareType _internal_share_type() const;
  void _internal_set_share_type(::tinkoff::public_::invest::api::contract::v1::ShareType value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 34;
  void clear_real_exchange() ;
  ::tinkoff::public_::invest::api::contract::v1::RealExchange real_exchange() const;
  void set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::RealExchange _internal_real_exchange() const;
  void _internal_set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value);

  public:
  // bool div_yield_flag = 29;
  void clear_div_yield_flag() ;
  bool div_yield_flag() const;
  void set_div_yield_flag(bool value);

  private:
  bool _internal_div_yield_flag() const;
  void _internal_set_div_yield_flag(bool value);

  public:
  // bool api_trade_available_flag = 32;
  void clear_api_trade_available_flag() ;
  bool api_trade_available_flag() const;
  void set_api_trade_available_flag(bool value);

  private:
  bool _internal_api_trade_available_flag() const;
  void _internal_set_api_trade_available_flag(bool value);

  public:
  // bool for_iis_flag = 46;
  void clear_for_iis_flag() ;
  bool for_iis_flag() const;
  void set_for_iis_flag(bool value);

  private:
  bool _internal_for_iis_flag() const;
  void _internal_set_for_iis_flag(bool value);

  public:
  // bool for_qual_investor_flag = 47;
  void clear_for_qual_investor_flag() ;
  bool for_qual_investor_flag() const;
  void set_for_qual_investor_flag(bool value);

  private:
  bool _internal_for_qual_investor_flag() const;
  void _internal_set_for_qual_investor_flag(bool value);

  public:
  // bool weekend_flag = 48;
  void clear_weekend_flag() ;
  bool weekend_flag() const;
  void set_weekend_flag(bool value);

  private:
  bool _internal_weekend_flag() const;
  void _internal_set_weekend_flag(bool value);

  public:
  // bool blocked_tca_flag = 49;
  void clear_blocked_tca_flag() ;
  bool blocked_tca_flag() const;
  void set_blocked_tca_flag(bool value);

  private:
  bool _internal_blocked_tca_flag() const;
  void _internal_set_blocked_tca_flag(bool value);

  public:
  // bool liquidity_flag = 50;
  void clear_liquidity_flag() ;
  bool liquidity_flag() const;
  void set_liquidity_flag(bool value);

  private:
  bool _internal_liquidity_flag() const;
  void _internal_set_liquidity_flag(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.Share)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 42, 12,
      202, 9>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr ticker_;
    ::google::protobuf::internal::ArenaStringPtr class_code_;
    ::google::protobuf::internal::ArenaStringPtr isin_;
    ::google::protobuf::internal::ArenaStringPtr currency_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr exchange_;
    ::google::protobuf::internal::ArenaStringPtr country_of_risk_;
    ::google::protobuf::internal::ArenaStringPtr country_of_risk_name_;
    ::google::protobuf::internal::ArenaStringPtr sector_;
    ::google::protobuf::internal::ArenaStringPtr uid_;
    ::google::protobuf::internal::ArenaStringPtr position_uid_;
    ::google::protobuf::internal::ArenaStringPtr asset_uid_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* klong_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* kshort_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dlong_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dshort_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dlong_min_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dshort_min_;
    ::google::protobuf::Timestamp* ipo_date_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* nominal_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* min_price_increment_;
    ::google::protobuf::Timestamp* first_1min_candle_date_;
    ::google::protobuf::Timestamp* first_1day_candle_date_;
    ::tinkoff::public_::invest::api::contract::v1::BrandData* brand_;
    ::int64_t issue_size_;
    ::int32_t lot_;
    bool short_enabled_flag_;
    bool otc_flag_;
    bool buy_available_flag_;
    bool sell_available_flag_;
    ::int64_t issue_size_plan_;
    int trading_status_;
    int share_type_;
    int real_exchange_;
    bool div_yield_flag_;
    bool api_trade_available_flag_;
    bool for_iis_flag_;
    bool for_qual_investor_flag_;
    bool weekend_flag_;
    bool blocked_tca_flag_;
    bool liquidity_flag_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class Option final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.Option) */ {
 public:
  inline Option() : Option(nullptr) {}
  ~Option() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Option(::google::protobuf::internal::ConstantInitialized);

  inline Option(const Option& from)
      : Option(nullptr, from) {}
  Option(Option&& from) noexcept
    : Option() {
    *this = ::std::move(from);
  }

  inline Option& operator=(const Option& from) {
    CopyFrom(from);
    return *this;
  }
  inline Option& operator=(Option&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Option& default_instance() {
    return *internal_default_instance();
  }
  static inline const Option* internal_default_instance() {
    return reinterpret_cast<const Option*>(
               &_Option_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Option& a, Option& b) {
    a.Swap(&b);
  }
  inline void Swap(Option* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Option* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Option* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Option>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Option& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Option& from) {
    Option::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Option* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.Option";
  }
  protected:
  explicit Option(::google::protobuf::Arena* arena);
  Option(::google::protobuf::Arena* arena, const Option& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kPositionUidFieldNumber = 2,
    kTickerFieldNumber = 3,
    kClassCodeFieldNumber = 4,
    kBasicAssetPositionUidFieldNumber = 5,
    kNameFieldNumber = 101,
    kCurrencyFieldNumber = 111,
    kSettlementCurrencyFieldNumber = 112,
    kAssetTypeFieldNumber = 131,
    kBasicAssetFieldNumber = 132,
    kExchangeFieldNumber = 141,
    kCountryOfRiskFieldNumber = 151,
    kCountryOfRiskNameFieldNumber = 152,
    kSectorFieldNumber = 161,
    kBrandFieldNumber = 162,
    kBasicAssetSizeFieldNumber = 211,
    kKlongFieldNumber = 221,
    kKshortFieldNumber = 222,
    kDlongFieldNumber = 223,
    kDshortFieldNumber = 224,
    kDlongMinFieldNumber = 225,
    kDshortMinFieldNumber = 226,
    kMinPriceIncrementFieldNumber = 231,
    kStrikePriceFieldNumber = 241,
    kExpirationDateFieldNumber = 301,
    kFirstTradeDateFieldNumber = 311,
    kLastTradeDateFieldNumber = 312,
    kFirst1MinCandleDateFieldNumber = 321,
    kFirst1DayCandleDateFieldNumber = 322,
    kTradingStatusFieldNumber = 21,
    kRealExchangeFieldNumber = 31,
    kDirectionFieldNumber = 41,
    kPaymentTypeFieldNumber = 42,
    kStyleFieldNumber = 43,
    kSettlementTypeFieldNumber = 44,
    kLotFieldNumber = 201,
    kShortEnabledFlagFieldNumber = 401,
    kForIisFlagFieldNumber = 402,
    kOtcFlagFieldNumber = 403,
    kBuyAvailableFlagFieldNumber = 404,
    kSellAvailableFlagFieldNumber = 405,
    kForQualInvestorFlagFieldNumber = 406,
    kWeekendFlagFieldNumber = 407,
    kBlockedTcaFlagFieldNumber = 408,
    kApiTradeAvailableFlagFieldNumber = 409,
  };
  // string uid = 1;
  void clear_uid() ;
  const std::string& uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uid(Arg_&& arg, Args_... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* value);

  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(
      const std::string& value);
  std::string* _internal_mutable_uid();

  public:
  // string position_uid = 2;
  void clear_position_uid() ;
  const std::string& position_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_position_uid(Arg_&& arg, Args_... args);
  std::string* mutable_position_uid();
  PROTOBUF_NODISCARD std::string* release_position_uid();
  void set_allocated_position_uid(std::string* value);

  private:
  const std::string& _internal_position_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_uid(
      const std::string& value);
  std::string* _internal_mutable_position_uid();

  public:
  // string ticker = 3;
  void clear_ticker() ;
  const std::string& ticker() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ticker(Arg_&& arg, Args_... args);
  std::string* mutable_ticker();
  PROTOBUF_NODISCARD std::string* release_ticker();
  void set_allocated_ticker(std::string* value);

  private:
  const std::string& _internal_ticker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticker(
      const std::string& value);
  std::string* _internal_mutable_ticker();

  public:
  // string class_code = 4;
  void clear_class_code() ;
  const std::string& class_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_code(Arg_&& arg, Args_... args);
  std::string* mutable_class_code();
  PROTOBUF_NODISCARD std::string* release_class_code();
  void set_allocated_class_code(std::string* value);

  private:
  const std::string& _internal_class_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_code(
      const std::string& value);
  std::string* _internal_mutable_class_code();

  public:
  // string basic_asset_position_uid = 5;
  void clear_basic_asset_position_uid() ;
  const std::string& basic_asset_position_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_basic_asset_position_uid(Arg_&& arg, Args_... args);
  std::string* mutable_basic_asset_position_uid();
  PROTOBUF_NODISCARD std::string* release_basic_asset_position_uid();
  void set_allocated_basic_asset_position_uid(std::string* value);

  private:
  const std::string& _internal_basic_asset_position_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_basic_asset_position_uid(
      const std::string& value);
  std::string* _internal_mutable_basic_asset_position_uid();

  public:
  // string name = 101;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string currency = 111;
  void clear_currency() ;
  const std::string& currency() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_currency(Arg_&& arg, Args_... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* value);

  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(
      const std::string& value);
  std::string* _internal_mutable_currency();

  public:
  // string settlement_currency = 112;
  void clear_settlement_currency() ;
  const std::string& settlement_currency() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_settlement_currency(Arg_&& arg, Args_... args);
  std::string* mutable_settlement_currency();
  PROTOBUF_NODISCARD std::string* release_settlement_currency();
  void set_allocated_settlement_currency(std::string* value);

  private:
  const std::string& _internal_settlement_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_settlement_currency(
      const std::string& value);
  std::string* _internal_mutable_settlement_currency();

  public:
  // string asset_type = 131;
  void clear_asset_type() ;
  const std::string& asset_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_asset_type(Arg_&& arg, Args_... args);
  std::string* mutable_asset_type();
  PROTOBUF_NODISCARD std::string* release_asset_type();
  void set_allocated_asset_type(std::string* value);

  private:
  const std::string& _internal_asset_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_type(
      const std::string& value);
  std::string* _internal_mutable_asset_type();

  public:
  // string basic_asset = 132;
  void clear_basic_asset() ;
  const std::string& basic_asset() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_basic_asset(Arg_&& arg, Args_... args);
  std::string* mutable_basic_asset();
  PROTOBUF_NODISCARD std::string* release_basic_asset();
  void set_allocated_basic_asset(std::string* value);

  private:
  const std::string& _internal_basic_asset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_basic_asset(
      const std::string& value);
  std::string* _internal_mutable_basic_asset();

  public:
  // string exchange = 141;
  void clear_exchange() ;
  const std::string& exchange() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange(Arg_&& arg, Args_... args);
  std::string* mutable_exchange();
  PROTOBUF_NODISCARD std::string* release_exchange();
  void set_allocated_exchange(std::string* value);

  private:
  const std::string& _internal_exchange() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange(
      const std::string& value);
  std::string* _internal_mutable_exchange();

  public:
  // string country_of_risk = 151;
  void clear_country_of_risk() ;
  const std::string& country_of_risk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_country_of_risk(Arg_&& arg, Args_... args);
  std::string* mutable_country_of_risk();
  PROTOBUF_NODISCARD std::string* release_country_of_risk();
  void set_allocated_country_of_risk(std::string* value);

  private:
  const std::string& _internal_country_of_risk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_of_risk(
      const std::string& value);
  std::string* _internal_mutable_country_of_risk();

  public:
  // string country_of_risk_name = 152;
  void clear_country_of_risk_name() ;
  const std::string& country_of_risk_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_country_of_risk_name(Arg_&& arg, Args_... args);
  std::string* mutable_country_of_risk_name();
  PROTOBUF_NODISCARD std::string* release_country_of_risk_name();
  void set_allocated_country_of_risk_name(std::string* value);

  private:
  const std::string& _internal_country_of_risk_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_of_risk_name(
      const std::string& value);
  std::string* _internal_mutable_country_of_risk_name();

  public:
  // string sector = 161;
  void clear_sector() ;
  const std::string& sector() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sector(Arg_&& arg, Args_... args);
  std::string* mutable_sector();
  PROTOBUF_NODISCARD std::string* release_sector();
  void set_allocated_sector(std::string* value);

  private:
  const std::string& _internal_sector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sector(
      const std::string& value);
  std::string* _internal_mutable_sector();

  public:
  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 162;
  bool has_brand() const;
  void clear_brand() ;
  const ::tinkoff::public_::invest::api::contract::v1::BrandData& brand() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::BrandData* release_brand();
  ::tinkoff::public_::invest::api::contract::v1::BrandData* mutable_brand();
  void set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value);
  void unsafe_arena_set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value);
  ::tinkoff::public_::invest::api::contract::v1::BrandData* unsafe_arena_release_brand();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::BrandData& _internal_brand() const;
  ::tinkoff::public_::invest::api::contract::v1::BrandData* _internal_mutable_brand();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation basic_asset_size = 211;
  bool has_basic_asset_size() const;
  void clear_basic_asset_size() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& basic_asset_size() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_basic_asset_size();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_basic_asset_size();
  void set_allocated_basic_asset_size(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_basic_asset_size(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_basic_asset_size();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_basic_asset_size() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_basic_asset_size();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 221;
  bool has_klong() const;
  void clear_klong() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& klong() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_klong();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_klong();
  void set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_klong();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_klong() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_klong();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 222;
  bool has_kshort() const;
  void clear_kshort() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& kshort() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_kshort();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_kshort();
  void set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_kshort();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_kshort() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_kshort();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 223;
  bool has_dlong() const;
  void clear_dlong() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dlong();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dlong();
  void set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dlong();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dlong() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dlong();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 224;
  bool has_dshort() const;
  void clear_dshort() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dshort();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dshort();
  void set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dshort();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dshort() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dshort();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 225;
  bool has_dlong_min() const;
  void clear_dlong_min() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong_min() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dlong_min();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dlong_min();
  void set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dlong_min();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dlong_min() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dlong_min();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 226;
  bool has_dshort_min() const;
  void clear_dshort_min() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort_min() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dshort_min();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dshort_min();
  void set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dshort_min();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dshort_min() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dshort_min();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 231;
  bool has_min_price_increment() const;
  void clear_min_price_increment() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_min_price_increment();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_min_price_increment();
  void set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_min_price_increment();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_min_price_increment() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_min_price_increment();

  public:
  // .tinkoff.public_.invest.api.contract.v1.MoneyValue strike_price = 241;
  bool has_strike_price() const;
  void clear_strike_price() ;
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& strike_price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_strike_price();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_strike_price();
  void set_allocated_strike_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  void unsafe_arena_set_allocated_strike_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_strike_price();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_strike_price() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_strike_price();

  public:
  // .google.protobuf.Timestamp expiration_date = 301;
  bool has_expiration_date() const;
  void clear_expiration_date() ;
  const ::google::protobuf::Timestamp& expiration_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_expiration_date();
  ::google::protobuf::Timestamp* mutable_expiration_date();
  void set_allocated_expiration_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_expiration_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_expiration_date();

  private:
  const ::google::protobuf::Timestamp& _internal_expiration_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_expiration_date();

  public:
  // .google.protobuf.Timestamp first_trade_date = 311;
  bool has_first_trade_date() const;
  void clear_first_trade_date() ;
  const ::google::protobuf::Timestamp& first_trade_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_first_trade_date();
  ::google::protobuf::Timestamp* mutable_first_trade_date();
  void set_allocated_first_trade_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_first_trade_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_first_trade_date();

  private:
  const ::google::protobuf::Timestamp& _internal_first_trade_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_first_trade_date();

  public:
  // .google.protobuf.Timestamp last_trade_date = 312;
  bool has_last_trade_date() const;
  void clear_last_trade_date() ;
  const ::google::protobuf::Timestamp& last_trade_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_last_trade_date();
  ::google::protobuf::Timestamp* mutable_last_trade_date();
  void set_allocated_last_trade_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_last_trade_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_last_trade_date();

  private:
  const ::google::protobuf::Timestamp& _internal_last_trade_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_last_trade_date();

  public:
  // .google.protobuf.Timestamp first_1min_candle_date = 321;
  bool has_first_1min_candle_date() const;
  void clear_first_1min_candle_date() ;
  const ::google::protobuf::Timestamp& first_1min_candle_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_first_1min_candle_date();
  ::google::protobuf::Timestamp* mutable_first_1min_candle_date();
  void set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_first_1min_candle_date();

  private:
  const ::google::protobuf::Timestamp& _internal_first_1min_candle_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_first_1min_candle_date();

  public:
  // .google.protobuf.Timestamp first_1day_candle_date = 322;
  bool has_first_1day_candle_date() const;
  void clear_first_1day_candle_date() ;
  const ::google::protobuf::Timestamp& first_1day_candle_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_first_1day_candle_date();
  ::google::protobuf::Timestamp* mutable_first_1day_candle_date();
  void set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_first_1day_candle_date();

  private:
  const ::google::protobuf::Timestamp& _internal_first_1day_candle_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_first_1day_candle_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 21;
  void clear_trading_status() ;
  ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus trading_status() const;
  void set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus _internal_trading_status() const;
  void _internal_set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 31;
  void clear_real_exchange() ;
  ::tinkoff::public_::invest::api::contract::v1::RealExchange real_exchange() const;
  void set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::RealExchange _internal_real_exchange() const;
  void _internal_set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.OptionDirection direction = 41;
  void clear_direction() ;
  ::tinkoff::public_::invest::api::contract::v1::OptionDirection direction() const;
  void set_direction(::tinkoff::public_::invest::api::contract::v1::OptionDirection value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::OptionDirection _internal_direction() const;
  void _internal_set_direction(::tinkoff::public_::invest::api::contract::v1::OptionDirection value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.OptionPaymentType payment_type = 42;
  void clear_payment_type() ;
  ::tinkoff::public_::invest::api::contract::v1::OptionPaymentType payment_type() const;
  void set_payment_type(::tinkoff::public_::invest::api::contract::v1::OptionPaymentType value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::OptionPaymentType _internal_payment_type() const;
  void _internal_set_payment_type(::tinkoff::public_::invest::api::contract::v1::OptionPaymentType value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.OptionStyle style = 43;
  void clear_style() ;
  ::tinkoff::public_::invest::api::contract::v1::OptionStyle style() const;
  void set_style(::tinkoff::public_::invest::api::contract::v1::OptionStyle value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::OptionStyle _internal_style() const;
  void _internal_set_style(::tinkoff::public_::invest::api::contract::v1::OptionStyle value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.OptionSettlementType settlement_type = 44;
  void clear_settlement_type() ;
  ::tinkoff::public_::invest::api::contract::v1::OptionSettlementType settlement_type() const;
  void set_settlement_type(::tinkoff::public_::invest::api::contract::v1::OptionSettlementType value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::OptionSettlementType _internal_settlement_type() const;
  void _internal_set_settlement_type(::tinkoff::public_::invest::api::contract::v1::OptionSettlementType value);

  public:
  // int32 lot = 201;
  void clear_lot() ;
  ::int32_t lot() const;
  void set_lot(::int32_t value);

  private:
  ::int32_t _internal_lot() const;
  void _internal_set_lot(::int32_t value);

  public:
  // bool short_enabled_flag = 401;
  void clear_short_enabled_flag() ;
  bool short_enabled_flag() const;
  void set_short_enabled_flag(bool value);

  private:
  bool _internal_short_enabled_flag() const;
  void _internal_set_short_enabled_flag(bool value);

  public:
  // bool for_iis_flag = 402;
  void clear_for_iis_flag() ;
  bool for_iis_flag() const;
  void set_for_iis_flag(bool value);

  private:
  bool _internal_for_iis_flag() const;
  void _internal_set_for_iis_flag(bool value);

  public:
  // bool otc_flag = 403;
  void clear_otc_flag() ;
  bool otc_flag() const;
  void set_otc_flag(bool value);

  private:
  bool _internal_otc_flag() const;
  void _internal_set_otc_flag(bool value);

  public:
  // bool buy_available_flag = 404;
  void clear_buy_available_flag() ;
  bool buy_available_flag() const;
  void set_buy_available_flag(bool value);

  private:
  bool _internal_buy_available_flag() const;
  void _internal_set_buy_available_flag(bool value);

  public:
  // bool sell_available_flag = 405;
  void clear_sell_available_flag() ;
  bool sell_available_flag() const;
  void set_sell_available_flag(bool value);

  private:
  bool _internal_sell_available_flag() const;
  void _internal_set_sell_available_flag(bool value);

  public:
  // bool for_qual_investor_flag = 406;
  void clear_for_qual_investor_flag() ;
  bool for_qual_investor_flag() const;
  void set_for_qual_investor_flag(bool value);

  private:
  bool _internal_for_qual_investor_flag() const;
  void _internal_set_for_qual_investor_flag(bool value);

  public:
  // bool weekend_flag = 407;
  void clear_weekend_flag() ;
  bool weekend_flag() const;
  void set_weekend_flag(bool value);

  private:
  bool _internal_weekend_flag() const;
  void _internal_set_weekend_flag(bool value);

  public:
  // bool blocked_tca_flag = 408;
  void clear_blocked_tca_flag() ;
  bool blocked_tca_flag() const;
  void set_blocked_tca_flag(bool value);

  private:
  bool _internal_blocked_tca_flag() const;
  void _internal_set_blocked_tca_flag(bool value);

  public:
  // bool api_trade_available_flag = 409;
  void clear_api_trade_available_flag() ;
  bool api_trade_available_flag() const;
  void set_api_trade_available_flag(bool value);

  private:
  bool _internal_api_trade_available_flag() const;
  void _internal_set_api_trade_available_flag(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.Option)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 45, 15,
      250, 53>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr uid_;
    ::google::protobuf::internal::ArenaStringPtr position_uid_;
    ::google::protobuf::internal::ArenaStringPtr ticker_;
    ::google::protobuf::internal::ArenaStringPtr class_code_;
    ::google::protobuf::internal::ArenaStringPtr basic_asset_position_uid_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr currency_;
    ::google::protobuf::internal::ArenaStringPtr settlement_currency_;
    ::google::protobuf::internal::ArenaStringPtr asset_type_;
    ::google::protobuf::internal::ArenaStringPtr basic_asset_;
    ::google::protobuf::internal::ArenaStringPtr exchange_;
    ::google::protobuf::internal::ArenaStringPtr country_of_risk_;
    ::google::protobuf::internal::ArenaStringPtr country_of_risk_name_;
    ::google::protobuf::internal::ArenaStringPtr sector_;
    ::tinkoff::public_::invest::api::contract::v1::BrandData* brand_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* basic_asset_size_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* klong_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* kshort_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dlong_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dshort_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dlong_min_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dshort_min_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* min_price_increment_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* strike_price_;
    ::google::protobuf::Timestamp* expiration_date_;
    ::google::protobuf::Timestamp* first_trade_date_;
    ::google::protobuf::Timestamp* last_trade_date_;
    ::google::protobuf::Timestamp* first_1min_candle_date_;
    ::google::protobuf::Timestamp* first_1day_candle_date_;
    int trading_status_;
    int real_exchange_;
    int direction_;
    int payment_type_;
    int style_;
    int settlement_type_;
    ::int32_t lot_;
    bool short_enabled_flag_;
    bool for_iis_flag_;
    bool otc_flag_;
    bool buy_available_flag_;
    bool sell_available_flag_;
    bool for_qual_investor_flag_;
    bool weekend_flag_;
    bool blocked_tca_flag_;
    bool api_trade_available_flag_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class InstrumentShort final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.InstrumentShort) */ {
 public:
  inline InstrumentShort() : InstrumentShort(nullptr) {}
  ~InstrumentShort() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InstrumentShort(::google::protobuf::internal::ConstantInitialized);

  inline InstrumentShort(const InstrumentShort& from)
      : InstrumentShort(nullptr, from) {}
  InstrumentShort(InstrumentShort&& from) noexcept
    : InstrumentShort() {
    *this = ::std::move(from);
  }

  inline InstrumentShort& operator=(const InstrumentShort& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentShort& operator=(InstrumentShort&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstrumentShort& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstrumentShort* internal_default_instance() {
    return reinterpret_cast<const InstrumentShort*>(
               &_InstrumentShort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(InstrumentShort& a, InstrumentShort& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentShort* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentShort* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstrumentShort* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstrumentShort>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InstrumentShort& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const InstrumentShort& from) {
    InstrumentShort::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(InstrumentShort* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.InstrumentShort";
  }
  protected:
  explicit InstrumentShort(::google::protobuf::Arena* arena);
  InstrumentShort(::google::protobuf::Arena* arena, const InstrumentShort& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsinFieldNumber = 1,
    kFigiFieldNumber = 2,
    kTickerFieldNumber = 3,
    kClassCodeFieldNumber = 4,
    kInstrumentTypeFieldNumber = 5,
    kNameFieldNumber = 6,
    kUidFieldNumber = 7,
    kPositionUidFieldNumber = 8,
    kFirst1MinCandleDateFieldNumber = 26,
    kFirst1DayCandleDateFieldNumber = 27,
    kInstrumentKindFieldNumber = 10,
    kApiTradeAvailableFlagFieldNumber = 11,
    kForIisFlagFieldNumber = 12,
    kForQualInvestorFlagFieldNumber = 28,
    kWeekendFlagFieldNumber = 29,
    kBlockedTcaFlagFieldNumber = 30,
  };
  // string isin = 1;
  void clear_isin() ;
  const std::string& isin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_isin(Arg_&& arg, Args_... args);
  std::string* mutable_isin();
  PROTOBUF_NODISCARD std::string* release_isin();
  void set_allocated_isin(std::string* value);

  private:
  const std::string& _internal_isin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_isin(
      const std::string& value);
  std::string* _internal_mutable_isin();

  public:
  // string figi = 2;
  void clear_figi() ;
  const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_figi(Arg_&& arg, Args_... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string ticker = 3;
  void clear_ticker() ;
  const std::string& ticker() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ticker(Arg_&& arg, Args_... args);
  std::string* mutable_ticker();
  PROTOBUF_NODISCARD std::string* release_ticker();
  void set_allocated_ticker(std::string* value);

  private:
  const std::string& _internal_ticker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticker(
      const std::string& value);
  std::string* _internal_mutable_ticker();

  public:
  // string class_code = 4;
  void clear_class_code() ;
  const std::string& class_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_code(Arg_&& arg, Args_... args);
  std::string* mutable_class_code();
  PROTOBUF_NODISCARD std::string* release_class_code();
  void set_allocated_class_code(std::string* value);

  private:
  const std::string& _internal_class_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_code(
      const std::string& value);
  std::string* _internal_mutable_class_code();

  public:
  // string instrument_type = 5;
  void clear_instrument_type() ;
  const std::string& instrument_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_type(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_type();
  PROTOBUF_NODISCARD std::string* release_instrument_type();
  void set_allocated_instrument_type(std::string* value);

  private:
  const std::string& _internal_instrument_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_type(
      const std::string& value);
  std::string* _internal_mutable_instrument_type();

  public:
  // string name = 6;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string uid = 7;
  void clear_uid() ;
  const std::string& uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uid(Arg_&& arg, Args_... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* value);

  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(
      const std::string& value);
  std::string* _internal_mutable_uid();

  public:
  // string position_uid = 8;
  void clear_position_uid() ;
  const std::string& position_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_position_uid(Arg_&& arg, Args_... args);
  std::string* mutable_position_uid();
  PROTOBUF_NODISCARD std::string* release_position_uid();
  void set_allocated_position_uid(std::string* value);

  private:
  const std::string& _internal_position_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_uid(
      const std::string& value);
  std::string* _internal_mutable_position_uid();

  public:
  // .google.protobuf.Timestamp first_1min_candle_date = 26;
  bool has_first_1min_candle_date() const;
  void clear_first_1min_candle_date() ;
  const ::google::protobuf::Timestamp& first_1min_candle_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_first_1min_candle_date();
  ::google::protobuf::Timestamp* mutable_first_1min_candle_date();
  void set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_first_1min_candle_date();

  private:
  const ::google::protobuf::Timestamp& _internal_first_1min_candle_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_first_1min_candle_date();

  public:
  // .google.protobuf.Timestamp first_1day_candle_date = 27;
  bool has_first_1day_candle_date() const;
  void clear_first_1day_candle_date() ;
  const ::google::protobuf::Timestamp& first_1day_candle_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_first_1day_candle_date();
  ::google::protobuf::Timestamp* mutable_first_1day_candle_date();
  void set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_first_1day_candle_date();

  private:
  const ::google::protobuf::Timestamp& _internal_first_1day_candle_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_first_1day_candle_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
  void clear_instrument_kind() ;
  ::tinkoff::public_::invest::api::contract::v1::InstrumentType instrument_kind() const;
  void set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::InstrumentType _internal_instrument_kind() const;
  void _internal_set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value);

  public:
  // bool api_trade_available_flag = 11;
  void clear_api_trade_available_flag() ;
  bool api_trade_available_flag() const;
  void set_api_trade_available_flag(bool value);

  private:
  bool _internal_api_trade_available_flag() const;
  void _internal_set_api_trade_available_flag(bool value);

  public:
  // bool for_iis_flag = 12;
  void clear_for_iis_flag() ;
  bool for_iis_flag() const;
  void set_for_iis_flag(bool value);

  private:
  bool _internal_for_iis_flag() const;
  void _internal_set_for_iis_flag(bool value);

  public:
  // bool for_qual_investor_flag = 28;
  void clear_for_qual_investor_flag() ;
  bool for_qual_investor_flag() const;
  void set_for_qual_investor_flag(bool value);

  private:
  bool _internal_for_qual_investor_flag() const;
  void _internal_set_for_qual_investor_flag(bool value);

  public:
  // bool weekend_flag = 29;
  void clear_weekend_flag() ;
  bool weekend_flag() const;
  void set_weekend_flag(bool value);

  private:
  bool _internal_weekend_flag() const;
  void _internal_set_weekend_flag(bool value);

  public:
  // bool blocked_tca_flag = 30;
  void clear_blocked_tca_flag() ;
  bool blocked_tca_flag() const;
  void set_blocked_tca_flag(bool value);

  private:
  bool _internal_blocked_tca_flag() const;
  void _internal_set_blocked_tca_flag(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.InstrumentShort)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 16, 2,
      137, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr isin_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr ticker_;
    ::google::protobuf::internal::ArenaStringPtr class_code_;
    ::google::protobuf::internal::ArenaStringPtr instrument_type_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr uid_;
    ::google::protobuf::internal::ArenaStringPtr position_uid_;
    ::google::protobuf::Timestamp* first_1min_candle_date_;
    ::google::protobuf::Timestamp* first_1day_candle_date_;
    int instrument_kind_;
    bool api_trade_available_flag_;
    bool for_iis_flag_;
    bool for_qual_investor_flag_;
    bool weekend_flag_;
    bool blocked_tca_flag_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class Instrument final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.Instrument) */ {
 public:
  inline Instrument() : Instrument(nullptr) {}
  ~Instrument() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Instrument(::google::protobuf::internal::ConstantInitialized);

  inline Instrument(const Instrument& from)
      : Instrument(nullptr, from) {}
  Instrument(Instrument&& from) noexcept
    : Instrument() {
    *this = ::std::move(from);
  }

  inline Instrument& operator=(const Instrument& from) {
    CopyFrom(from);
    return *this;
  }
  inline Instrument& operator=(Instrument&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Instrument& default_instance() {
    return *internal_default_instance();
  }
  static inline const Instrument* internal_default_instance() {
    return reinterpret_cast<const Instrument*>(
               &_Instrument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(Instrument& a, Instrument& b) {
    a.Swap(&b);
  }
  inline void Swap(Instrument* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Instrument* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Instrument* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Instrument>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Instrument& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Instrument& from) {
    Instrument::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Instrument* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.Instrument";
  }
  protected:
  explicit Instrument(::google::protobuf::Arena* arena);
  Instrument(::google::protobuf::Arena* arena, const Instrument& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFigiFieldNumber = 1,
    kTickerFieldNumber = 2,
    kClassCodeFieldNumber = 3,
    kIsinFieldNumber = 4,
    kCurrencyFieldNumber = 6,
    kNameFieldNumber = 14,
    kExchangeFieldNumber = 15,
    kCountryOfRiskFieldNumber = 16,
    kCountryOfRiskNameFieldNumber = 17,
    kInstrumentTypeFieldNumber = 18,
    kUidFieldNumber = 25,
    kPositionUidFieldNumber = 27,
    kAssetUidFieldNumber = 28,
    kKlongFieldNumber = 7,
    kKshortFieldNumber = 8,
    kDlongFieldNumber = 9,
    kDshortFieldNumber = 10,
    kDlongMinFieldNumber = 11,
    kDshortMinFieldNumber = 12,
    kMinPriceIncrementFieldNumber = 23,
    kFirst1MinCandleDateFieldNumber = 56,
    kFirst1DayCandleDateFieldNumber = 57,
    kBrandFieldNumber = 60,
    kLotFieldNumber = 5,
    kTradingStatusFieldNumber = 19,
    kShortEnabledFlagFieldNumber = 13,
    kOtcFlagFieldNumber = 20,
    kBuyAvailableFlagFieldNumber = 21,
    kSellAvailableFlagFieldNumber = 22,
    kRealExchangeFieldNumber = 26,
    kApiTradeAvailableFlagFieldNumber = 24,
    kForIisFlagFieldNumber = 36,
    kForQualInvestorFlagFieldNumber = 37,
    kWeekendFlagFieldNumber = 38,
    kBlockedTcaFlagFieldNumber = 39,
    kInstrumentKindFieldNumber = 40,
  };
  // string figi = 1;
  void clear_figi() ;
  const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_figi(Arg_&& arg, Args_... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string ticker = 2;
  void clear_ticker() ;
  const std::string& ticker() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ticker(Arg_&& arg, Args_... args);
  std::string* mutable_ticker();
  PROTOBUF_NODISCARD std::string* release_ticker();
  void set_allocated_ticker(std::string* value);

  private:
  const std::string& _internal_ticker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticker(
      const std::string& value);
  std::string* _internal_mutable_ticker();

  public:
  // string class_code = 3;
  void clear_class_code() ;
  const std::string& class_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_code(Arg_&& arg, Args_... args);
  std::string* mutable_class_code();
  PROTOBUF_NODISCARD std::string* release_class_code();
  void set_allocated_class_code(std::string* value);

  private:
  const std::string& _internal_class_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_code(
      const std::string& value);
  std::string* _internal_mutable_class_code();

  public:
  // string isin = 4;
  void clear_isin() ;
  const std::string& isin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_isin(Arg_&& arg, Args_... args);
  std::string* mutable_isin();
  PROTOBUF_NODISCARD std::string* release_isin();
  void set_allocated_isin(std::string* value);

  private:
  const std::string& _internal_isin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_isin(
      const std::string& value);
  std::string* _internal_mutable_isin();

  public:
  // string currency = 6;
  void clear_currency() ;
  const std::string& currency() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_currency(Arg_&& arg, Args_... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* value);

  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(
      const std::string& value);
  std::string* _internal_mutable_currency();

  public:
  // string name = 14;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string exchange = 15;
  void clear_exchange() ;
  const std::string& exchange() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange(Arg_&& arg, Args_... args);
  std::string* mutable_exchange();
  PROTOBUF_NODISCARD std::string* release_exchange();
  void set_allocated_exchange(std::string* value);

  private:
  const std::string& _internal_exchange() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange(
      const std::string& value);
  std::string* _internal_mutable_exchange();

  public:
  // string country_of_risk = 16;
  void clear_country_of_risk() ;
  const std::string& country_of_risk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_country_of_risk(Arg_&& arg, Args_... args);
  std::string* mutable_country_of_risk();
  PROTOBUF_NODISCARD std::string* release_country_of_risk();
  void set_allocated_country_of_risk(std::string* value);

  private:
  const std::string& _internal_country_of_risk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_of_risk(
      const std::string& value);
  std::string* _internal_mutable_country_of_risk();

  public:
  // string country_of_risk_name = 17;
  void clear_country_of_risk_name() ;
  const std::string& country_of_risk_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_country_of_risk_name(Arg_&& arg, Args_... args);
  std::string* mutable_country_of_risk_name();
  PROTOBUF_NODISCARD std::string* release_country_of_risk_name();
  void set_allocated_country_of_risk_name(std::string* value);

  private:
  const std::string& _internal_country_of_risk_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_of_risk_name(
      const std::string& value);
  std::string* _internal_mutable_country_of_risk_name();

  public:
  // string instrument_type = 18;
  void clear_instrument_type() ;
  const std::string& instrument_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_type(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_type();
  PROTOBUF_NODISCARD std::string* release_instrument_type();
  void set_allocated_instrument_type(std::string* value);

  private:
  const std::string& _internal_instrument_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_type(
      const std::string& value);
  std::string* _internal_mutable_instrument_type();

  public:
  // string uid = 25;
  void clear_uid() ;
  const std::string& uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uid(Arg_&& arg, Args_... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* value);

  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(
      const std::string& value);
  std::string* _internal_mutable_uid();

  public:
  // string position_uid = 27;
  void clear_position_uid() ;
  const std::string& position_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_position_uid(Arg_&& arg, Args_... args);
  std::string* mutable_position_uid();
  PROTOBUF_NODISCARD std::string* release_position_uid();
  void set_allocated_position_uid(std::string* value);

  private:
  const std::string& _internal_position_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_uid(
      const std::string& value);
  std::string* _internal_mutable_position_uid();

  public:
  // string asset_uid = 28;
  void clear_asset_uid() ;
  const std::string& asset_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_asset_uid(Arg_&& arg, Args_... args);
  std::string* mutable_asset_uid();
  PROTOBUF_NODISCARD std::string* release_asset_uid();
  void set_allocated_asset_uid(std::string* value);

  private:
  const std::string& _internal_asset_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_uid(
      const std::string& value);
  std::string* _internal_mutable_asset_uid();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
  bool has_klong() const;
  void clear_klong() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& klong() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_klong();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_klong();
  void set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_klong();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_klong() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_klong();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
  bool has_kshort() const;
  void clear_kshort() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& kshort() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_kshort();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_kshort();
  void set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_kshort();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_kshort() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_kshort();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
  bool has_dlong() const;
  void clear_dlong() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dlong();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dlong();
  void set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dlong();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dlong() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dlong();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
  bool has_dshort() const;
  void clear_dshort() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dshort();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dshort();
  void set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dshort();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dshort() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dshort();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
  bool has_dlong_min() const;
  void clear_dlong_min() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong_min() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dlong_min();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dlong_min();
  void set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dlong_min();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dlong_min() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dlong_min();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
  bool has_dshort_min() const;
  void clear_dshort_min() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort_min() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dshort_min();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dshort_min();
  void set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dshort_min();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dshort_min() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dshort_min();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 23;
  bool has_min_price_increment() const;
  void clear_min_price_increment() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_min_price_increment();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_min_price_increment();
  void set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_min_price_increment();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_min_price_increment() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_min_price_increment();

  public:
  // .google.protobuf.Timestamp first_1min_candle_date = 56;
  bool has_first_1min_candle_date() const;
  void clear_first_1min_candle_date() ;
  const ::google::protobuf::Timestamp& first_1min_candle_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_first_1min_candle_date();
  ::google::protobuf::Timestamp* mutable_first_1min_candle_date();
  void set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_first_1min_candle_date();

  private:
  const ::google::protobuf::Timestamp& _internal_first_1min_candle_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_first_1min_candle_date();

  public:
  // .google.protobuf.Timestamp first_1day_candle_date = 57;
  bool has_first_1day_candle_date() const;
  void clear_first_1day_candle_date() ;
  const ::google::protobuf::Timestamp& first_1day_candle_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_first_1day_candle_date();
  ::google::protobuf::Timestamp* mutable_first_1day_candle_date();
  void set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_first_1day_candle_date();

  private:
  const ::google::protobuf::Timestamp& _internal_first_1day_candle_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_first_1day_candle_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
  bool has_brand() const;
  void clear_brand() ;
  const ::tinkoff::public_::invest::api::contract::v1::BrandData& brand() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::BrandData* release_brand();
  ::tinkoff::public_::invest::api::contract::v1::BrandData* mutable_brand();
  void set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value);
  void unsafe_arena_set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value);
  ::tinkoff::public_::invest::api::contract::v1::BrandData* unsafe_arena_release_brand();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::BrandData& _internal_brand() const;
  ::tinkoff::public_::invest::api::contract::v1::BrandData* _internal_mutable_brand();

  public:
  // int32 lot = 5;
  void clear_lot() ;
  ::int32_t lot() const;
  void set_lot(::int32_t value);

  private:
  ::int32_t _internal_lot() const;
  void _internal_set_lot(::int32_t value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 19;
  void clear_trading_status() ;
  ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus trading_status() const;
  void set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus _internal_trading_status() const;
  void _internal_set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value);

  public:
  // bool short_enabled_flag = 13;
  void clear_short_enabled_flag() ;
  bool short_enabled_flag() const;
  void set_short_enabled_flag(bool value);

  private:
  bool _internal_short_enabled_flag() const;
  void _internal_set_short_enabled_flag(bool value);

  public:
  // bool otc_flag = 20;
  void clear_otc_flag() ;
  bool otc_flag() const;
  void set_otc_flag(bool value);

  private:
  bool _internal_otc_flag() const;
  void _internal_set_otc_flag(bool value);

  public:
  // bool buy_available_flag = 21;
  void clear_buy_available_flag() ;
  bool buy_available_flag() const;
  void set_buy_available_flag(bool value);

  private:
  bool _internal_buy_available_flag() const;
  void _internal_set_buy_available_flag(bool value);

  public:
  // bool sell_available_flag = 22;
  void clear_sell_available_flag() ;
  bool sell_available_flag() const;
  void set_sell_available_flag(bool value);

  private:
  bool _internal_sell_available_flag() const;
  void _internal_set_sell_available_flag(bool value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 26;
  void clear_real_exchange() ;
  ::tinkoff::public_::invest::api::contract::v1::RealExchange real_exchange() const;
  void set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::RealExchange _internal_real_exchange() const;
  void _internal_set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value);

  public:
  // bool api_trade_available_flag = 24;
  void clear_api_trade_available_flag() ;
  bool api_trade_available_flag() const;
  void set_api_trade_available_flag(bool value);

  private:
  bool _internal_api_trade_available_flag() const;
  void _internal_set_api_trade_available_flag(bool value);

  public:
  // bool for_iis_flag = 36;
  void clear_for_iis_flag() ;
  bool for_iis_flag() const;
  void set_for_iis_flag(bool value);

  private:
  bool _internal_for_iis_flag() const;
  void _internal_set_for_iis_flag(bool value);

  public:
  // bool for_qual_investor_flag = 37;
  void clear_for_qual_investor_flag() ;
  bool for_qual_investor_flag() const;
  void set_for_qual_investor_flag(bool value);

  private:
  bool _internal_for_qual_investor_flag() const;
  void _internal_set_for_qual_investor_flag(bool value);

  public:
  // bool weekend_flag = 38;
  void clear_weekend_flag() ;
  bool weekend_flag() const;
  void set_weekend_flag(bool value);

  private:
  bool _internal_weekend_flag() const;
  void _internal_set_weekend_flag(bool value);

  public:
  // bool blocked_tca_flag = 39;
  void clear_blocked_tca_flag() ;
  bool blocked_tca_flag() const;
  void set_blocked_tca_flag(bool value);

  private:
  bool _internal_blocked_tca_flag() const;
  void _internal_set_blocked_tca_flag(bool value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 40;
  void clear_instrument_kind() ;
  ::tinkoff::public_::invest::api::contract::v1::InstrumentType instrument_kind() const;
  void set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::InstrumentType _internal_instrument_kind() const;
  void _internal_set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.Instrument)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 36, 10,
      208, 9>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr ticker_;
    ::google::protobuf::internal::ArenaStringPtr class_code_;
    ::google::protobuf::internal::ArenaStringPtr isin_;
    ::google::protobuf::internal::ArenaStringPtr currency_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr exchange_;
    ::google::protobuf::internal::ArenaStringPtr country_of_risk_;
    ::google::protobuf::internal::ArenaStringPtr country_of_risk_name_;
    ::google::protobuf::internal::ArenaStringPtr instrument_type_;
    ::google::protobuf::internal::ArenaStringPtr uid_;
    ::google::protobuf::internal::ArenaStringPtr position_uid_;
    ::google::protobuf::internal::ArenaStringPtr asset_uid_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* klong_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* kshort_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dlong_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dshort_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dlong_min_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dshort_min_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* min_price_increment_;
    ::google::protobuf::Timestamp* first_1min_candle_date_;
    ::google::protobuf::Timestamp* first_1day_candle_date_;
    ::tinkoff::public_::invest::api::contract::v1::BrandData* brand_;
    ::int32_t lot_;
    int trading_status_;
    bool short_enabled_flag_;
    bool otc_flag_;
    bool buy_available_flag_;
    bool sell_available_flag_;
    int real_exchange_;
    bool api_trade_available_flag_;
    bool for_iis_flag_;
    bool for_qual_investor_flag_;
    bool weekend_flag_;
    bool blocked_tca_flag_;
    int instrument_kind_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class IndicativesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.IndicativesResponse) */ {
 public:
  inline IndicativesResponse() : IndicativesResponse(nullptr) {}
  ~IndicativesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IndicativesResponse(::google::protobuf::internal::ConstantInitialized);

  inline IndicativesResponse(const IndicativesResponse& from)
      : IndicativesResponse(nullptr, from) {}
  IndicativesResponse(IndicativesResponse&& from) noexcept
    : IndicativesResponse() {
    *this = ::std::move(from);
  }

  inline IndicativesResponse& operator=(const IndicativesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndicativesResponse& operator=(IndicativesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndicativesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndicativesResponse* internal_default_instance() {
    return reinterpret_cast<const IndicativesResponse*>(
               &_IndicativesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(IndicativesResponse& a, IndicativesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IndicativesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndicativesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndicativesResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndicativesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IndicativesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IndicativesResponse& from) {
    IndicativesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IndicativesResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.IndicativesResponse";
  }
  protected:
  explicit IndicativesResponse(::google::protobuf::Arena* arena);
  IndicativesResponse(::google::protobuf::Arena* arena, const IndicativesResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentsFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.IndicativeResponse instruments = 1;
  int instruments_size() const;
  private:
  int _internal_instruments_size() const;

  public:
  void clear_instruments() ;
  ::tinkoff::public_::invest::api::contract::v1::IndicativeResponse* mutable_instruments(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::IndicativeResponse >*
      mutable_instruments();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::IndicativeResponse>& _internal_instruments() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::IndicativeResponse>* _internal_mutable_instruments();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::IndicativeResponse& instruments(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::IndicativeResponse* add_instruments();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::IndicativeResponse >&
      instruments() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.IndicativesResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::IndicativeResponse > instruments_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetFuturesMarginResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse) */ {
 public:
  inline GetFuturesMarginResponse() : GetFuturesMarginResponse(nullptr) {}
  ~GetFuturesMarginResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetFuturesMarginResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetFuturesMarginResponse(const GetFuturesMarginResponse& from)
      : GetFuturesMarginResponse(nullptr, from) {}
  GetFuturesMarginResponse(GetFuturesMarginResponse&& from) noexcept
    : GetFuturesMarginResponse() {
    *this = ::std::move(from);
  }

  inline GetFuturesMarginResponse& operator=(const GetFuturesMarginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFuturesMarginResponse& operator=(GetFuturesMarginResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFuturesMarginResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFuturesMarginResponse* internal_default_instance() {
    return reinterpret_cast<const GetFuturesMarginResponse*>(
               &_GetFuturesMarginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetFuturesMarginResponse& a, GetFuturesMarginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFuturesMarginResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFuturesMarginResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFuturesMarginResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFuturesMarginResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetFuturesMarginResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetFuturesMarginResponse& from) {
    GetFuturesMarginResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetFuturesMarginResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse";
  }
  protected:
  explicit GetFuturesMarginResponse(::google::protobuf::Arena* arena);
  GetFuturesMarginResponse(::google::protobuf::Arena* arena, const GetFuturesMarginResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitialMarginOnBuyFieldNumber = 1,
    kInitialMarginOnSellFieldNumber = 2,
    kMinPriceIncrementFieldNumber = 3,
    kMinPriceIncrementAmountFieldNumber = 4,
  };
  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_buy = 1;
  bool has_initial_margin_on_buy() const;
  void clear_initial_margin_on_buy() ;
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_margin_on_buy() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_initial_margin_on_buy();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_initial_margin_on_buy();
  void set_allocated_initial_margin_on_buy(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  void unsafe_arena_set_allocated_initial_margin_on_buy(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_initial_margin_on_buy();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_initial_margin_on_buy() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_initial_margin_on_buy();

  public:
  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_sell = 2;
  bool has_initial_margin_on_sell() const;
  void clear_initial_margin_on_sell() ;
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_margin_on_sell() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_initial_margin_on_sell();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_initial_margin_on_sell();
  void set_allocated_initial_margin_on_sell(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  void unsafe_arena_set_allocated_initial_margin_on_sell(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_initial_margin_on_sell();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_initial_margin_on_sell() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_initial_margin_on_sell();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 3;
  bool has_min_price_increment() const;
  void clear_min_price_increment() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_min_price_increment();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_min_price_increment();
  void set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_min_price_increment();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_min_price_increment() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_min_price_increment();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment_amount = 4;
  bool has_min_price_increment_amount() const;
  void clear_min_price_increment_amount() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment_amount() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_min_price_increment_amount();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_min_price_increment_amount();
  void set_allocated_min_price_increment_amount(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_min_price_increment_amount(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_min_price_increment_amount();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_min_price_increment_amount() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_min_price_increment_amount();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 4,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_margin_on_buy_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_margin_on_sell_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* min_price_increment_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* min_price_increment_amount_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetForecastResponse_TargetItem final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem) */ {
 public:
  inline GetForecastResponse_TargetItem() : GetForecastResponse_TargetItem(nullptr) {}
  ~GetForecastResponse_TargetItem() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetForecastResponse_TargetItem(::google::protobuf::internal::ConstantInitialized);

  inline GetForecastResponse_TargetItem(const GetForecastResponse_TargetItem& from)
      : GetForecastResponse_TargetItem(nullptr, from) {}
  GetForecastResponse_TargetItem(GetForecastResponse_TargetItem&& from) noexcept
    : GetForecastResponse_TargetItem() {
    *this = ::std::move(from);
  }

  inline GetForecastResponse_TargetItem& operator=(const GetForecastResponse_TargetItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetForecastResponse_TargetItem& operator=(GetForecastResponse_TargetItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetForecastResponse_TargetItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetForecastResponse_TargetItem* internal_default_instance() {
    return reinterpret_cast<const GetForecastResponse_TargetItem*>(
               &_GetForecastResponse_TargetItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(GetForecastResponse_TargetItem& a, GetForecastResponse_TargetItem& b) {
    a.Swap(&b);
  }
  inline void Swap(GetForecastResponse_TargetItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetForecastResponse_TargetItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetForecastResponse_TargetItem* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetForecastResponse_TargetItem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetForecastResponse_TargetItem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetForecastResponse_TargetItem& from) {
    GetForecastResponse_TargetItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetForecastResponse_TargetItem* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem";
  }
  protected:
  explicit GetForecastResponse_TargetItem(::google::protobuf::Arena* arena);
  GetForecastResponse_TargetItem(::google::protobuf::Arena* arena, const GetForecastResponse_TargetItem& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kTickerFieldNumber = 2,
    kCompanyFieldNumber = 3,
    kCurrencyFieldNumber = 6,
    kShowNameFieldNumber = 11,
    kRecommendationDateFieldNumber = 5,
    kCurrentPriceFieldNumber = 7,
    kTargetPriceFieldNumber = 8,
    kPriceChangeFieldNumber = 9,
    kPriceChangeRelFieldNumber = 10,
    kRecommendationFieldNumber = 4,
  };
  // string uid = 1;
  void clear_uid() ;
  const std::string& uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uid(Arg_&& arg, Args_... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* value);

  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(
      const std::string& value);
  std::string* _internal_mutable_uid();

  public:
  // string ticker = 2;
  void clear_ticker() ;
  const std::string& ticker() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ticker(Arg_&& arg, Args_... args);
  std::string* mutable_ticker();
  PROTOBUF_NODISCARD std::string* release_ticker();
  void set_allocated_ticker(std::string* value);

  private:
  const std::string& _internal_ticker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticker(
      const std::string& value);
  std::string* _internal_mutable_ticker();

  public:
  // string company = 3;
  void clear_company() ;
  const std::string& company() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_company(Arg_&& arg, Args_... args);
  std::string* mutable_company();
  PROTOBUF_NODISCARD std::string* release_company();
  void set_allocated_company(std::string* value);

  private:
  const std::string& _internal_company() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_company(
      const std::string& value);
  std::string* _internal_mutable_company();

  public:
  // string currency = 6;
  void clear_currency() ;
  const std::string& currency() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_currency(Arg_&& arg, Args_... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* value);

  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(
      const std::string& value);
  std::string* _internal_mutable_currency();

  public:
  // string show_name = 11;
  void clear_show_name() ;
  const std::string& show_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_show_name(Arg_&& arg, Args_... args);
  std::string* mutable_show_name();
  PROTOBUF_NODISCARD std::string* release_show_name();
  void set_allocated_show_name(std::string* value);

  private:
  const std::string& _internal_show_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_show_name(
      const std::string& value);
  std::string* _internal_mutable_show_name();

  public:
  // .google.protobuf.Timestamp recommendation_date = 5;
  bool has_recommendation_date() const;
  void clear_recommendation_date() ;
  const ::google::protobuf::Timestamp& recommendation_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_recommendation_date();
  ::google::protobuf::Timestamp* mutable_recommendation_date();
  void set_allocated_recommendation_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_recommendation_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_recommendation_date();

  private:
  const ::google::protobuf::Timestamp& _internal_recommendation_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_recommendation_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation current_price = 7;
  bool has_current_price() const;
  void clear_current_price() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& current_price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_current_price();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_current_price();
  void set_allocated_current_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_current_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_current_price();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_current_price() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_current_price();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation target_price = 8;
  bool has_target_price() const;
  void clear_target_price() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& target_price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_target_price();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_target_price();
  void set_allocated_target_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_target_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_target_price();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_target_price() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_target_price();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation price_change = 9;
  bool has_price_change() const;
  void clear_price_change() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& price_change() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_price_change();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_price_change();
  void set_allocated_price_change(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_price_change(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_price_change();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_price_change() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_price_change();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation price_change_rel = 10;
  bool has_price_change_rel() const;
  void clear_price_change_rel() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& price_change_rel() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_price_change_rel();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_price_change_rel();
  void set_allocated_price_change_rel(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_price_change_rel(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_price_change_rel();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_price_change_rel() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_price_change_rel();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Recommendation recommendation = 4;
  void clear_recommendation() ;
  ::tinkoff::public_::invest::api::contract::v1::Recommendation recommendation() const;
  void set_recommendation(::tinkoff::public_::invest::api::contract::v1::Recommendation value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::Recommendation _internal_recommendation() const;
  void _internal_set_recommendation(::tinkoff::public_::invest::api::contract::v1::Recommendation value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 5,
      119, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr uid_;
    ::google::protobuf::internal::ArenaStringPtr ticker_;
    ::google::protobuf::internal::ArenaStringPtr company_;
    ::google::protobuf::internal::ArenaStringPtr currency_;
    ::google::protobuf::internal::ArenaStringPtr show_name_;
    ::google::protobuf::Timestamp* recommendation_date_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* current_price_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* target_price_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* price_change_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* price_change_rel_;
    int recommendation_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetForecastResponse_ConsensusItem final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem) */ {
 public:
  inline GetForecastResponse_ConsensusItem() : GetForecastResponse_ConsensusItem(nullptr) {}
  ~GetForecastResponse_ConsensusItem() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetForecastResponse_ConsensusItem(::google::protobuf::internal::ConstantInitialized);

  inline GetForecastResponse_ConsensusItem(const GetForecastResponse_ConsensusItem& from)
      : GetForecastResponse_ConsensusItem(nullptr, from) {}
  GetForecastResponse_ConsensusItem(GetForecastResponse_ConsensusItem&& from) noexcept
    : GetForecastResponse_ConsensusItem() {
    *this = ::std::move(from);
  }

  inline GetForecastResponse_ConsensusItem& operator=(const GetForecastResponse_ConsensusItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetForecastResponse_ConsensusItem& operator=(GetForecastResponse_ConsensusItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetForecastResponse_ConsensusItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetForecastResponse_ConsensusItem* internal_default_instance() {
    return reinterpret_cast<const GetForecastResponse_ConsensusItem*>(
               &_GetForecastResponse_ConsensusItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(GetForecastResponse_ConsensusItem& a, GetForecastResponse_ConsensusItem& b) {
    a.Swap(&b);
  }
  inline void Swap(GetForecastResponse_ConsensusItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetForecastResponse_ConsensusItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetForecastResponse_ConsensusItem* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetForecastResponse_ConsensusItem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetForecastResponse_ConsensusItem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetForecastResponse_ConsensusItem& from) {
    GetForecastResponse_ConsensusItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetForecastResponse_ConsensusItem* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem";
  }
  protected:
  explicit GetForecastResponse_ConsensusItem(::google::protobuf::Arena* arena);
  GetForecastResponse_ConsensusItem(::google::protobuf::Arena* arena, const GetForecastResponse_ConsensusItem& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kTickerFieldNumber = 2,
    kCurrencyFieldNumber = 4,
    kCurrentPriceFieldNumber = 5,
    kConsensusFieldNumber = 6,
    kMinTargetFieldNumber = 7,
    kMaxTargetFieldNumber = 8,
    kPriceChangeFieldNumber = 9,
    kPriceChangeRelFieldNumber = 10,
    kRecommendationFieldNumber = 3,
  };
  // string uid = 1;
  void clear_uid() ;
  const std::string& uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uid(Arg_&& arg, Args_... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* value);

  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(
      const std::string& value);
  std::string* _internal_mutable_uid();

  public:
  // string ticker = 2;
  void clear_ticker() ;
  const std::string& ticker() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ticker(Arg_&& arg, Args_... args);
  std::string* mutable_ticker();
  PROTOBUF_NODISCARD std::string* release_ticker();
  void set_allocated_ticker(std::string* value);

  private:
  const std::string& _internal_ticker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticker(
      const std::string& value);
  std::string* _internal_mutable_ticker();

  public:
  // string currency = 4;
  void clear_currency() ;
  const std::string& currency() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_currency(Arg_&& arg, Args_... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* value);

  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(
      const std::string& value);
  std::string* _internal_mutable_currency();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation current_price = 5;
  bool has_current_price() const;
  void clear_current_price() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& current_price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_current_price();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_current_price();
  void set_allocated_current_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_current_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_current_price();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_current_price() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_current_price();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation consensus = 6;
  bool has_consensus() const;
  void clear_consensus() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& consensus() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_consensus();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_consensus();
  void set_allocated_consensus(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_consensus(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_consensus();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_consensus() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_consensus();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation min_target = 7;
  bool has_min_target() const;
  void clear_min_target() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_target() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_min_target();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_min_target();
  void set_allocated_min_target(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_min_target(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_min_target();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_min_target() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_min_target();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation max_target = 8;
  bool has_max_target() const;
  void clear_max_target() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& max_target() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_max_target();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_max_target();
  void set_allocated_max_target(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_max_target(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_max_target();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_max_target() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_max_target();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation price_change = 9;
  bool has_price_change() const;
  void clear_price_change() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& price_change() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_price_change();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_price_change();
  void set_allocated_price_change(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_price_change(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_price_change();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_price_change() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_price_change();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation price_change_rel = 10;
  bool has_price_change_rel() const;
  void clear_price_change_rel() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& price_change_rel() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_price_change_rel();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_price_change_rel();
  void set_allocated_price_change_rel(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_price_change_rel(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_price_change_rel();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_price_change_rel() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_price_change_rel();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Recommendation recommendation = 3;
  void clear_recommendation() ;
  ::tinkoff::public_::invest::api::contract::v1::Recommendation recommendation() const;
  void set_recommendation(::tinkoff::public_::invest::api::contract::v1::Recommendation value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::Recommendation _internal_recommendation() const;
  void _internal_set_recommendation(::tinkoff::public_::invest::api::contract::v1::Recommendation value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 6,
      106, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr uid_;
    ::google::protobuf::internal::ArenaStringPtr ticker_;
    ::google::protobuf::internal::ArenaStringPtr currency_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* current_price_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* consensus_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* min_target_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* max_target_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* price_change_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* price_change_rel_;
    int recommendation_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetFavoritesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse) */ {
 public:
  inline GetFavoritesResponse() : GetFavoritesResponse(nullptr) {}
  ~GetFavoritesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetFavoritesResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetFavoritesResponse(const GetFavoritesResponse& from)
      : GetFavoritesResponse(nullptr, from) {}
  GetFavoritesResponse(GetFavoritesResponse&& from) noexcept
    : GetFavoritesResponse() {
    *this = ::std::move(from);
  }

  inline GetFavoritesResponse& operator=(const GetFavoritesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFavoritesResponse& operator=(GetFavoritesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFavoritesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFavoritesResponse* internal_default_instance() {
    return reinterpret_cast<const GetFavoritesResponse*>(
               &_GetFavoritesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(GetFavoritesResponse& a, GetFavoritesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFavoritesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFavoritesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFavoritesResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFavoritesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetFavoritesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetFavoritesResponse& from) {
    GetFavoritesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetFavoritesResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse";
  }
  protected:
  explicit GetFavoritesResponse(::google::protobuf::Arena* arena);
  GetFavoritesResponse(::google::protobuf::Arena* arena, const GetFavoritesResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFavoriteInstrumentsFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
  int favorite_instruments_size() const;
  private:
  int _internal_favorite_instruments_size() const;

  public:
  void clear_favorite_instruments() ;
  ::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument* mutable_favorite_instruments(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument >*
      mutable_favorite_instruments();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument>& _internal_favorite_instruments() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument>* _internal_mutable_favorite_instruments();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument& favorite_instruments(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument* add_favorite_instruments();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument >&
      favorite_instruments() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument > favorite_instruments_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetDividendsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest) */ {
 public:
  inline GetDividendsRequest() : GetDividendsRequest(nullptr) {}
  ~GetDividendsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetDividendsRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetDividendsRequest(const GetDividendsRequest& from)
      : GetDividendsRequest(nullptr, from) {}
  GetDividendsRequest(GetDividendsRequest&& from) noexcept
    : GetDividendsRequest() {
    *this = ::std::move(from);
  }

  inline GetDividendsRequest& operator=(const GetDividendsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDividendsRequest& operator=(GetDividendsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDividendsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDividendsRequest* internal_default_instance() {
    return reinterpret_cast<const GetDividendsRequest*>(
               &_GetDividendsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(GetDividendsRequest& a, GetDividendsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDividendsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDividendsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDividendsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDividendsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetDividendsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetDividendsRequest& from) {
    GetDividendsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetDividendsRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetDividendsRequest";
  }
  protected:
  explicit GetDividendsRequest(::google::protobuf::Arena* arena);
  GetDividendsRequest(::google::protobuf::Arena* arena, const GetDividendsRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentIdFieldNumber = 4,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
  };
  // string figi = 1 [deprecated = true];
  [[deprecated]]  void clear_figi() ;
  [[deprecated]] const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_figi(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_figi();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_figi();
  [[deprecated]] void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
  void clear_instrument_id() ;
  const std::string& instrument_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_id(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* value);

  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(
      const std::string& value);
  std::string* _internal_mutable_instrument_id();

  public:
  // optional .google.protobuf.Timestamp from = 2;
  bool has_from() const;
  void clear_from() ;
  const ::google::protobuf::Timestamp& from() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_from();
  ::google::protobuf::Timestamp* mutable_from();
  void set_allocated_from(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_from();

  private:
  const ::google::protobuf::Timestamp& _internal_from() const;
  ::google::protobuf::Timestamp* _internal_mutable_from();

  public:
  // optional .google.protobuf.Timestamp to = 3;
  bool has_to() const;
  void clear_to() ;
  const ::google::protobuf::Timestamp& to() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_to();
  ::google::protobuf::Timestamp* mutable_to();
  void set_allocated_to(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_to();

  private:
  const ::google::protobuf::Timestamp& _internal_to() const;
  ::google::protobuf::Timestamp* _internal_mutable_to();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      84, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_id_;
    ::google::protobuf::Timestamp* from_;
    ::google::protobuf::Timestamp* to_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetCountriesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetCountriesResponse) */ {
 public:
  inline GetCountriesResponse() : GetCountriesResponse(nullptr) {}
  ~GetCountriesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetCountriesResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetCountriesResponse(const GetCountriesResponse& from)
      : GetCountriesResponse(nullptr, from) {}
  GetCountriesResponse(GetCountriesResponse&& from) noexcept
    : GetCountriesResponse() {
    *this = ::std::move(from);
  }

  inline GetCountriesResponse& operator=(const GetCountriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCountriesResponse& operator=(GetCountriesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCountriesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCountriesResponse* internal_default_instance() {
    return reinterpret_cast<const GetCountriesResponse*>(
               &_GetCountriesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(GetCountriesResponse& a, GetCountriesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCountriesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCountriesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCountriesResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCountriesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetCountriesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetCountriesResponse& from) {
    GetCountriesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetCountriesResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetCountriesResponse";
  }
  protected:
  explicit GetCountriesResponse(::google::protobuf::Arena* arena);
  GetCountriesResponse(::google::protobuf::Arena* arena, const GetCountriesResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountriesFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.CountryResponse countries = 1;
  int countries_size() const;
  private:
  int _internal_countries_size() const;

  public:
  void clear_countries() ;
  ::tinkoff::public_::invest::api::contract::v1::CountryResponse* mutable_countries(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::CountryResponse >*
      mutable_countries();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::CountryResponse>& _internal_countries() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::CountryResponse>* _internal_mutable_countries();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::CountryResponse& countries(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::CountryResponse* add_countries();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::CountryResponse >&
      countries() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetCountriesResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::CountryResponse > countries_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetConsensusForecastsResponse_ConsensusForecastsItem final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem) */ {
 public:
  inline GetConsensusForecastsResponse_ConsensusForecastsItem() : GetConsensusForecastsResponse_ConsensusForecastsItem(nullptr) {}
  ~GetConsensusForecastsResponse_ConsensusForecastsItem() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetConsensusForecastsResponse_ConsensusForecastsItem(::google::protobuf::internal::ConstantInitialized);

  inline GetConsensusForecastsResponse_ConsensusForecastsItem(const GetConsensusForecastsResponse_ConsensusForecastsItem& from)
      : GetConsensusForecastsResponse_ConsensusForecastsItem(nullptr, from) {}
  GetConsensusForecastsResponse_ConsensusForecastsItem(GetConsensusForecastsResponse_ConsensusForecastsItem&& from) noexcept
    : GetConsensusForecastsResponse_ConsensusForecastsItem() {
    *this = ::std::move(from);
  }

  inline GetConsensusForecastsResponse_ConsensusForecastsItem& operator=(const GetConsensusForecastsResponse_ConsensusForecastsItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConsensusForecastsResponse_ConsensusForecastsItem& operator=(GetConsensusForecastsResponse_ConsensusForecastsItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConsensusForecastsResponse_ConsensusForecastsItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConsensusForecastsResponse_ConsensusForecastsItem* internal_default_instance() {
    return reinterpret_cast<const GetConsensusForecastsResponse_ConsensusForecastsItem*>(
               &_GetConsensusForecastsResponse_ConsensusForecastsItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(GetConsensusForecastsResponse_ConsensusForecastsItem& a, GetConsensusForecastsResponse_ConsensusForecastsItem& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConsensusForecastsResponse_ConsensusForecastsItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConsensusForecastsResponse_ConsensusForecastsItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConsensusForecastsResponse_ConsensusForecastsItem* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConsensusForecastsResponse_ConsensusForecastsItem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetConsensusForecastsResponse_ConsensusForecastsItem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetConsensusForecastsResponse_ConsensusForecastsItem& from) {
    GetConsensusForecastsResponse_ConsensusForecastsItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetConsensusForecastsResponse_ConsensusForecastsItem* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem";
  }
  protected:
  explicit GetConsensusForecastsResponse_ConsensusForecastsItem(::google::protobuf::Arena* arena);
  GetConsensusForecastsResponse_ConsensusForecastsItem(::google::protobuf::Arena* arena, const GetConsensusForecastsResponse_ConsensusForecastsItem& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kAssetUidFieldNumber = 2,
    kCurrencyFieldNumber = 10,
    kCreatedAtFieldNumber = 3,
    kBestTargetPriceFieldNumber = 4,
    kBestTargetLowFieldNumber = 5,
    kBestTargetHighFieldNumber = 6,
    kPrognosisDateFieldNumber = 12,
    kTotalBuyRecommendFieldNumber = 7,
    kTotalHoldRecommendFieldNumber = 8,
    kTotalSellRecommendFieldNumber = 9,
    kConsensusFieldNumber = 11,
  };
  // string uid = 1;
  void clear_uid() ;
  const std::string& uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uid(Arg_&& arg, Args_... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* value);

  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(
      const std::string& value);
  std::string* _internal_mutable_uid();

  public:
  // string asset_uid = 2;
  void clear_asset_uid() ;
  const std::string& asset_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_asset_uid(Arg_&& arg, Args_... args);
  std::string* mutable_asset_uid();
  PROTOBUF_NODISCARD std::string* release_asset_uid();
  void set_allocated_asset_uid(std::string* value);

  private:
  const std::string& _internal_asset_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_uid(
      const std::string& value);
  std::string* _internal_mutable_asset_uid();

  public:
  // string currency = 10;
  void clear_currency() ;
  const std::string& currency() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_currency(Arg_&& arg, Args_... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* value);

  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(
      const std::string& value);
  std::string* _internal_mutable_currency();

  public:
  // .google.protobuf.Timestamp created_at = 3;
  bool has_created_at() const;
  void clear_created_at() ;
  const ::google::protobuf::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_created_at();
  ::google::protobuf::Timestamp* mutable_created_at();
  void set_allocated_created_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_created_at();

  private:
  const ::google::protobuf::Timestamp& _internal_created_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_created_at();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation best_target_price = 4;
  bool has_best_target_price() const;
  void clear_best_target_price() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& best_target_price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_best_target_price();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_best_target_price();
  void set_allocated_best_target_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_best_target_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_best_target_price();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_best_target_price() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_best_target_price();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation best_target_low = 5;
  bool has_best_target_low() const;
  void clear_best_target_low() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& best_target_low() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_best_target_low();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_best_target_low();
  void set_allocated_best_target_low(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_best_target_low(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_best_target_low();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_best_target_low() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_best_target_low();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation best_target_high = 6;
  bool has_best_target_high() const;
  void clear_best_target_high() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& best_target_high() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_best_target_high();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_best_target_high();
  void set_allocated_best_target_high(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_best_target_high(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_best_target_high();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_best_target_high() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_best_target_high();

  public:
  // .google.protobuf.Timestamp prognosis_date = 12;
  bool has_prognosis_date() const;
  void clear_prognosis_date() ;
  const ::google::protobuf::Timestamp& prognosis_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_prognosis_date();
  ::google::protobuf::Timestamp* mutable_prognosis_date();
  void set_allocated_prognosis_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_prognosis_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_prognosis_date();

  private:
  const ::google::protobuf::Timestamp& _internal_prognosis_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_prognosis_date();

  public:
  // int32 total_buy_recommend = 7;
  void clear_total_buy_recommend() ;
  ::int32_t total_buy_recommend() const;
  void set_total_buy_recommend(::int32_t value);

  private:
  ::int32_t _internal_total_buy_recommend() const;
  void _internal_set_total_buy_recommend(::int32_t value);

  public:
  // int32 total_hold_recommend = 8;
  void clear_total_hold_recommend() ;
  ::int32_t total_hold_recommend() const;
  void set_total_hold_recommend(::int32_t value);

  private:
  ::int32_t _internal_total_hold_recommend() const;
  void _internal_set_total_hold_recommend(::int32_t value);

  public:
  // int32 total_sell_recommend = 9;
  void clear_total_sell_recommend() ;
  ::int32_t total_sell_recommend() const;
  void set_total_sell_recommend(::int32_t value);

  private:
  ::int32_t _internal_total_sell_recommend() const;
  void _internal_set_total_sell_recommend(::int32_t value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.Recommendation consensus = 11;
  void clear_consensus() ;
  ::tinkoff::public_::invest::api::contract::v1::Recommendation consensus() const;
  void set_consensus(::tinkoff::public_::invest::api::contract::v1::Recommendation value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::Recommendation _internal_consensus() const;
  void _internal_set_consensus(::tinkoff::public_::invest::api::contract::v1::Recommendation value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 5,
      128, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr uid_;
    ::google::protobuf::internal::ArenaStringPtr asset_uid_;
    ::google::protobuf::internal::ArenaStringPtr currency_;
    ::google::protobuf::Timestamp* created_at_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* best_target_price_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* best_target_low_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* best_target_high_;
    ::google::protobuf::Timestamp* prognosis_date_;
    ::int32_t total_buy_recommend_;
    ::int32_t total_hold_recommend_;
    ::int32_t total_sell_recommend_;
    int consensus_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetConsensusForecastsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest) */ {
 public:
  inline GetConsensusForecastsRequest() : GetConsensusForecastsRequest(nullptr) {}
  ~GetConsensusForecastsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetConsensusForecastsRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetConsensusForecastsRequest(const GetConsensusForecastsRequest& from)
      : GetConsensusForecastsRequest(nullptr, from) {}
  GetConsensusForecastsRequest(GetConsensusForecastsRequest&& from) noexcept
    : GetConsensusForecastsRequest() {
    *this = ::std::move(from);
  }

  inline GetConsensusForecastsRequest& operator=(const GetConsensusForecastsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConsensusForecastsRequest& operator=(GetConsensusForecastsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConsensusForecastsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConsensusForecastsRequest* internal_default_instance() {
    return reinterpret_cast<const GetConsensusForecastsRequest*>(
               &_GetConsensusForecastsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(GetConsensusForecastsRequest& a, GetConsensusForecastsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConsensusForecastsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConsensusForecastsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConsensusForecastsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConsensusForecastsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetConsensusForecastsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetConsensusForecastsRequest& from) {
    GetConsensusForecastsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetConsensusForecastsRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest";
  }
  protected:
  explicit GetConsensusForecastsRequest(::google::protobuf::Arena* arena);
  GetConsensusForecastsRequest(::google::protobuf::Arena* arena, const GetConsensusForecastsRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPagingFieldNumber = 1,
  };
  // optional .tinkoff.public_.invest.api.contract.v1.Page paging = 1;
  bool has_paging() const;
  void clear_paging() ;
  const ::tinkoff::public_::invest::api::contract::v1::Page& paging() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Page* release_paging();
  ::tinkoff::public_::invest::api::contract::v1::Page* mutable_paging();
  void set_allocated_paging(::tinkoff::public_::invest::api::contract::v1::Page* value);
  void unsafe_arena_set_allocated_paging(::tinkoff::public_::invest::api::contract::v1::Page* value);
  ::tinkoff::public_::invest::api::contract::v1::Page* unsafe_arena_release_paging();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Page& _internal_paging() const;
  ::tinkoff::public_::invest::api::contract::v1::Page* _internal_mutable_paging();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tinkoff::public_::invest::api::contract::v1::Page* paging_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetBrandsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse) */ {
 public:
  inline GetBrandsResponse() : GetBrandsResponse(nullptr) {}
  ~GetBrandsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetBrandsResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetBrandsResponse(const GetBrandsResponse& from)
      : GetBrandsResponse(nullptr, from) {}
  GetBrandsResponse(GetBrandsResponse&& from) noexcept
    : GetBrandsResponse() {
    *this = ::std::move(from);
  }

  inline GetBrandsResponse& operator=(const GetBrandsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBrandsResponse& operator=(GetBrandsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBrandsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBrandsResponse* internal_default_instance() {
    return reinterpret_cast<const GetBrandsResponse*>(
               &_GetBrandsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(GetBrandsResponse& a, GetBrandsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBrandsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBrandsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBrandsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBrandsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetBrandsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetBrandsResponse& from) {
    GetBrandsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetBrandsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetBrandsResponse";
  }
  protected:
  explicit GetBrandsResponse(::google::protobuf::Arena* arena);
  GetBrandsResponse(::google::protobuf::Arena* arena, const GetBrandsResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrandsFieldNumber = 1,
    kPagingFieldNumber = 2,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.Brand brands = 1;
  int brands_size() const;
  private:
  int _internal_brands_size() const;

  public:
  void clear_brands() ;
  ::tinkoff::public_::invest::api::contract::v1::Brand* mutable_brands(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Brand >*
      mutable_brands();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Brand>& _internal_brands() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Brand>* _internal_mutable_brands();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::Brand& brands(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::Brand* add_brands();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Brand >&
      brands() const;
  // .tinkoff.public_.invest.api.contract.v1.PageResponse paging = 2;
  bool has_paging() const;
  void clear_paging() ;
  const ::tinkoff::public_::invest::api::contract::v1::PageResponse& paging() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::PageResponse* release_paging();
  ::tinkoff::public_::invest::api::contract::v1::PageResponse* mutable_paging();
  void set_allocated_paging(::tinkoff::public_::invest::api::contract::v1::PageResponse* value);
  void unsafe_arena_set_allocated_paging(::tinkoff::public_::invest::api::contract::v1::PageResponse* value);
  ::tinkoff::public_::invest::api::contract::v1::PageResponse* unsafe_arena_release_paging();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::PageResponse& _internal_paging() const;
  ::tinkoff::public_::invest::api::contract::v1::PageResponse* _internal_mutable_paging();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Brand > brands_;
    ::tinkoff::public_::invest::api::contract::v1::PageResponse* paging_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetBrandsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetBrandsRequest) */ {
 public:
  inline GetBrandsRequest() : GetBrandsRequest(nullptr) {}
  ~GetBrandsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetBrandsRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetBrandsRequest(const GetBrandsRequest& from)
      : GetBrandsRequest(nullptr, from) {}
  GetBrandsRequest(GetBrandsRequest&& from) noexcept
    : GetBrandsRequest() {
    *this = ::std::move(from);
  }

  inline GetBrandsRequest& operator=(const GetBrandsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBrandsRequest& operator=(GetBrandsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBrandsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBrandsRequest* internal_default_instance() {
    return reinterpret_cast<const GetBrandsRequest*>(
               &_GetBrandsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(GetBrandsRequest& a, GetBrandsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBrandsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBrandsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBrandsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBrandsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetBrandsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetBrandsRequest& from) {
    GetBrandsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetBrandsRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetBrandsRequest";
  }
  protected:
  explicit GetBrandsRequest(::google::protobuf::Arena* arena);
  GetBrandsRequest(::google::protobuf::Arena* arena, const GetBrandsRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPagingFieldNumber = 1,
  };
  // .tinkoff.public_.invest.api.contract.v1.Page paging = 1;
  bool has_paging() const;
  void clear_paging() ;
  const ::tinkoff::public_::invest::api::contract::v1::Page& paging() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Page* release_paging();
  ::tinkoff::public_::invest::api::contract::v1::Page* mutable_paging();
  void set_allocated_paging(::tinkoff::public_::invest::api::contract::v1::Page* value);
  void unsafe_arena_set_allocated_paging(::tinkoff::public_::invest::api::contract::v1::Page* value);
  ::tinkoff::public_::invest::api::contract::v1::Page* unsafe_arena_release_paging();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Page& _internal_paging() const;
  ::tinkoff::public_::invest::api::contract::v1::Page* _internal_mutable_paging();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetBrandsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tinkoff::public_::invest::api::contract::v1::Page* paging_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetBondEventsResponse_BondEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent) */ {
 public:
  inline GetBondEventsResponse_BondEvent() : GetBondEventsResponse_BondEvent(nullptr) {}
  ~GetBondEventsResponse_BondEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetBondEventsResponse_BondEvent(::google::protobuf::internal::ConstantInitialized);

  inline GetBondEventsResponse_BondEvent(const GetBondEventsResponse_BondEvent& from)
      : GetBondEventsResponse_BondEvent(nullptr, from) {}
  GetBondEventsResponse_BondEvent(GetBondEventsResponse_BondEvent&& from) noexcept
    : GetBondEventsResponse_BondEvent() {
    *this = ::std::move(from);
  }

  inline GetBondEventsResponse_BondEvent& operator=(const GetBondEventsResponse_BondEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBondEventsResponse_BondEvent& operator=(GetBondEventsResponse_BondEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBondEventsResponse_BondEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBondEventsResponse_BondEvent* internal_default_instance() {
    return reinterpret_cast<const GetBondEventsResponse_BondEvent*>(
               &_GetBondEventsResponse_BondEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetBondEventsResponse_BondEvent& a, GetBondEventsResponse_BondEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBondEventsResponse_BondEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBondEventsResponse_BondEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBondEventsResponse_BondEvent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBondEventsResponse_BondEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetBondEventsResponse_BondEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetBondEventsResponse_BondEvent& from) {
    GetBondEventsResponse_BondEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetBondEventsResponse_BondEvent* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent";
  }
  protected:
  explicit GetBondEventsResponse_BondEvent(::google::protobuf::Arena* arena);
  GetBondEventsResponse_BondEvent(::google::protobuf::Arena* arena, const GetBondEventsResponse_BondEvent& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentIdFieldNumber = 2,
    kExecutionFieldNumber = 14,
    kOperationTypeFieldNumber = 15,
    kNoteFieldNumber = 17,
    kConvertToFinToolIdFieldNumber = 18,
    kEventDateFieldNumber = 4,
    kEventTotalVolFieldNumber = 6,
    kFixDateFieldNumber = 7,
    kRateDateFieldNumber = 8,
    kDefaultDateFieldNumber = 9,
    kRealPayDateFieldNumber = 10,
    kPayDateFieldNumber = 11,
    kPayOneBondFieldNumber = 12,
    kMoneyFlowValFieldNumber = 13,
    kValueFieldNumber = 16,
    kCouponStartDateFieldNumber = 19,
    kCouponEndDateFieldNumber = 20,
    kCouponInterestRateFieldNumber = 22,
    kEventNumberFieldNumber = 3,
    kEventTypeFieldNumber = 5,
    kCouponPeriodFieldNumber = 21,
  };
  // string instrument_id = 2;
  void clear_instrument_id() ;
  const std::string& instrument_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_id(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* value);

  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(
      const std::string& value);
  std::string* _internal_mutable_instrument_id();

  public:
  // string execution = 14;
  void clear_execution() ;
  const std::string& execution() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_execution(Arg_&& arg, Args_... args);
  std::string* mutable_execution();
  PROTOBUF_NODISCARD std::string* release_execution();
  void set_allocated_execution(std::string* value);

  private:
  const std::string& _internal_execution() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_execution(
      const std::string& value);
  std::string* _internal_mutable_execution();

  public:
  // string operation_type = 15;
  void clear_operation_type() ;
  const std::string& operation_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_operation_type(Arg_&& arg, Args_... args);
  std::string* mutable_operation_type();
  PROTOBUF_NODISCARD std::string* release_operation_type();
  void set_allocated_operation_type(std::string* value);

  private:
  const std::string& _internal_operation_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operation_type(
      const std::string& value);
  std::string* _internal_mutable_operation_type();

  public:
  // string note = 17;
  void clear_note() ;
  const std::string& note() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_note(Arg_&& arg, Args_... args);
  std::string* mutable_note();
  PROTOBUF_NODISCARD std::string* release_note();
  void set_allocated_note(std::string* value);

  private:
  const std::string& _internal_note() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_note(
      const std::string& value);
  std::string* _internal_mutable_note();

  public:
  // string convert_to_fin_tool_id = 18;
  void clear_convert_to_fin_tool_id() ;
  const std::string& convert_to_fin_tool_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_convert_to_fin_tool_id(Arg_&& arg, Args_... args);
  std::string* mutable_convert_to_fin_tool_id();
  PROTOBUF_NODISCARD std::string* release_convert_to_fin_tool_id();
  void set_allocated_convert_to_fin_tool_id(std::string* value);

  private:
  const std::string& _internal_convert_to_fin_tool_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_convert_to_fin_tool_id(
      const std::string& value);
  std::string* _internal_mutable_convert_to_fin_tool_id();

  public:
  // .google.protobuf.Timestamp event_date = 4;
  bool has_event_date() const;
  void clear_event_date() ;
  const ::google::protobuf::Timestamp& event_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_event_date();
  ::google::protobuf::Timestamp* mutable_event_date();
  void set_allocated_event_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_event_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_event_date();

  private:
  const ::google::protobuf::Timestamp& _internal_event_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_event_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation event_total_vol = 6;
  bool has_event_total_vol() const;
  void clear_event_total_vol() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& event_total_vol() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_event_total_vol();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_event_total_vol();
  void set_allocated_event_total_vol(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_event_total_vol(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_event_total_vol();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_event_total_vol() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_event_total_vol();

  public:
  // .google.protobuf.Timestamp fix_date = 7;
  bool has_fix_date() const;
  void clear_fix_date() ;
  const ::google::protobuf::Timestamp& fix_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_fix_date();
  ::google::protobuf::Timestamp* mutable_fix_date();
  void set_allocated_fix_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_fix_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_fix_date();

  private:
  const ::google::protobuf::Timestamp& _internal_fix_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_fix_date();

  public:
  // .google.protobuf.Timestamp rate_date = 8;
  bool has_rate_date() const;
  void clear_rate_date() ;
  const ::google::protobuf::Timestamp& rate_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_rate_date();
  ::google::protobuf::Timestamp* mutable_rate_date();
  void set_allocated_rate_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_rate_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_rate_date();

  private:
  const ::google::protobuf::Timestamp& _internal_rate_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_rate_date();

  public:
  // .google.protobuf.Timestamp default_date = 9;
  bool has_default_date() const;
  void clear_default_date() ;
  const ::google::protobuf::Timestamp& default_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_default_date();
  ::google::protobuf::Timestamp* mutable_default_date();
  void set_allocated_default_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_default_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_default_date();

  private:
  const ::google::protobuf::Timestamp& _internal_default_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_default_date();

  public:
  // .google.protobuf.Timestamp real_pay_date = 10;
  bool has_real_pay_date() const;
  void clear_real_pay_date() ;
  const ::google::protobuf::Timestamp& real_pay_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_real_pay_date();
  ::google::protobuf::Timestamp* mutable_real_pay_date();
  void set_allocated_real_pay_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_real_pay_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_real_pay_date();

  private:
  const ::google::protobuf::Timestamp& _internal_real_pay_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_real_pay_date();

  public:
  // .google.protobuf.Timestamp pay_date = 11;
  bool has_pay_date() const;
  void clear_pay_date() ;
  const ::google::protobuf::Timestamp& pay_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_pay_date();
  ::google::protobuf::Timestamp* mutable_pay_date();
  void set_allocated_pay_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_pay_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_pay_date();

  private:
  const ::google::protobuf::Timestamp& _internal_pay_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_pay_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.MoneyValue pay_one_bond = 12;
  bool has_pay_one_bond() const;
  void clear_pay_one_bond() ;
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& pay_one_bond() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_pay_one_bond();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_pay_one_bond();
  void set_allocated_pay_one_bond(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  void unsafe_arena_set_allocated_pay_one_bond(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_pay_one_bond();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_pay_one_bond() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_pay_one_bond();

  public:
  // .tinkoff.public_.invest.api.contract.v1.MoneyValue money_flow_val = 13;
  bool has_money_flow_val() const;
  void clear_money_flow_val() ;
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& money_flow_val() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_money_flow_val();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_money_flow_val();
  void set_allocated_money_flow_val(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  void unsafe_arena_set_allocated_money_flow_val(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_money_flow_val();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_money_flow_val() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_money_flow_val();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation value = 16;
  bool has_value() const;
  void clear_value() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& value() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_value();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_value();
  void set_allocated_value(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_value(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_value();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_value() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_value();

  public:
  // .google.protobuf.Timestamp coupon_start_date = 19;
  bool has_coupon_start_date() const;
  void clear_coupon_start_date() ;
  const ::google::protobuf::Timestamp& coupon_start_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_coupon_start_date();
  ::google::protobuf::Timestamp* mutable_coupon_start_date();
  void set_allocated_coupon_start_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_coupon_start_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_coupon_start_date();

  private:
  const ::google::protobuf::Timestamp& _internal_coupon_start_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_coupon_start_date();

  public:
  // .google.protobuf.Timestamp coupon_end_date = 20;
  bool has_coupon_end_date() const;
  void clear_coupon_end_date() ;
  const ::google::protobuf::Timestamp& coupon_end_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_coupon_end_date();
  ::google::protobuf::Timestamp* mutable_coupon_end_date();
  void set_allocated_coupon_end_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_coupon_end_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_coupon_end_date();

  private:
  const ::google::protobuf::Timestamp& _internal_coupon_end_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_coupon_end_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation coupon_interest_rate = 22;
  bool has_coupon_interest_rate() const;
  void clear_coupon_interest_rate() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& coupon_interest_rate() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_coupon_interest_rate();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_coupon_interest_rate();
  void set_allocated_coupon_interest_rate(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_coupon_interest_rate(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_coupon_interest_rate();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_coupon_interest_rate() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_coupon_interest_rate();

  public:
  // int32 event_number = 3;
  void clear_event_number() ;
  ::int32_t event_number() const;
  void set_event_number(::int32_t value);

  private:
  ::int32_t _internal_event_number() const;
  void _internal_set_event_number(::int32_t value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.EventType event_type = 5;
  void clear_event_type() ;
  ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType event_type() const;
  void set_event_type(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType _internal_event_type() const;
  void _internal_set_event_type(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType value);

  public:
  // int32 coupon_period = 21;
  void clear_coupon_period() ;
  ::int32_t coupon_period() const;
  void set_coupon_period(::int32_t value);

  private:
  ::int32_t _internal_coupon_period() const;
  void _internal_set_coupon_period(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 21, 13,
      157, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr instrument_id_;
    ::google::protobuf::internal::ArenaStringPtr execution_;
    ::google::protobuf::internal::ArenaStringPtr operation_type_;
    ::google::protobuf::internal::ArenaStringPtr note_;
    ::google::protobuf::internal::ArenaStringPtr convert_to_fin_tool_id_;
    ::google::protobuf::Timestamp* event_date_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* event_total_vol_;
    ::google::protobuf::Timestamp* fix_date_;
    ::google::protobuf::Timestamp* rate_date_;
    ::google::protobuf::Timestamp* default_date_;
    ::google::protobuf::Timestamp* real_pay_date_;
    ::google::protobuf::Timestamp* pay_date_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* pay_one_bond_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* money_flow_val_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* value_;
    ::google::protobuf::Timestamp* coupon_start_date_;
    ::google::protobuf::Timestamp* coupon_end_date_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* coupon_interest_rate_;
    ::int32_t event_number_;
    int event_type_;
    ::int32_t coupon_period_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetBondEventsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest) */ {
 public:
  inline GetBondEventsRequest() : GetBondEventsRequest(nullptr) {}
  ~GetBondEventsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetBondEventsRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetBondEventsRequest(const GetBondEventsRequest& from)
      : GetBondEventsRequest(nullptr, from) {}
  GetBondEventsRequest(GetBondEventsRequest&& from) noexcept
    : GetBondEventsRequest() {
    *this = ::std::move(from);
  }

  inline GetBondEventsRequest& operator=(const GetBondEventsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBondEventsRequest& operator=(GetBondEventsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBondEventsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBondEventsRequest* internal_default_instance() {
    return reinterpret_cast<const GetBondEventsRequest*>(
               &_GetBondEventsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetBondEventsRequest& a, GetBondEventsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBondEventsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBondEventsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBondEventsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBondEventsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetBondEventsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetBondEventsRequest& from) {
    GetBondEventsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetBondEventsRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest";
  }
  protected:
  explicit GetBondEventsRequest(::google::protobuf::Arena* arena);
  GetBondEventsRequest(::google::protobuf::Arena* arena, const GetBondEventsRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using EventType = GetBondEventsRequest_EventType;
  static constexpr EventType EVENT_TYPE_UNSPECIFIED = GetBondEventsRequest_EventType_EVENT_TYPE_UNSPECIFIED;
  static constexpr EventType EVENT_TYPE_CPN = GetBondEventsRequest_EventType_EVENT_TYPE_CPN;
  static constexpr EventType EVENT_TYPE_CALL = GetBondEventsRequest_EventType_EVENT_TYPE_CALL;
  static constexpr EventType EVENT_TYPE_MTY = GetBondEventsRequest_EventType_EVENT_TYPE_MTY;
  static constexpr EventType EVENT_TYPE_CONV = GetBondEventsRequest_EventType_EVENT_TYPE_CONV;
  static inline bool EventType_IsValid(int value) {
    return GetBondEventsRequest_EventType_IsValid(value);
  }
  static constexpr EventType EventType_MIN = GetBondEventsRequest_EventType_EventType_MIN;
  static constexpr EventType EventType_MAX = GetBondEventsRequest_EventType_EventType_MAX;
  static constexpr int EventType_ARRAYSIZE = GetBondEventsRequest_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* EventType_descriptor() {
    return GetBondEventsRequest_EventType_descriptor();
  }
  template <typename T>
  static inline const std::string& EventType_Name(T value) {
    return GetBondEventsRequest_EventType_Name(value);
  }
  static inline bool EventType_Parse(absl::string_view name, EventType* value) {
    return GetBondEventsRequest_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentIdFieldNumber = 4,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
    kTypeFieldNumber = 5,
  };
  // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
  void clear_instrument_id() ;
  const std::string& instrument_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_id(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* value);

  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(
      const std::string& value);
  std::string* _internal_mutable_instrument_id();

  public:
  // optional .google.protobuf.Timestamp from = 2;
  bool has_from() const;
  void clear_from() ;
  const ::google::protobuf::Timestamp& from() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_from();
  ::google::protobuf::Timestamp* mutable_from();
  void set_allocated_from(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_from();

  private:
  const ::google::protobuf::Timestamp& _internal_from() const;
  ::google::protobuf::Timestamp* _internal_mutable_from();

  public:
  // optional .google.protobuf.Timestamp to = 3;
  bool has_to() const;
  void clear_to() ;
  const ::google::protobuf::Timestamp& to() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_to();
  ::google::protobuf::Timestamp* mutable_to();
  void set_allocated_to(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_to();

  private:
  const ::google::protobuf::Timestamp& _internal_to() const;
  ::google::protobuf::Timestamp* _internal_mutable_to();

  public:
  // .tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.EventType type = 5;
  void clear_type() ;
  ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType type() const;
  void set_type(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType _internal_type() const;
  void _internal_set_type(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      81, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr instrument_id_;
    ::google::protobuf::Timestamp* from_;
    ::google::protobuf::Timestamp* to_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetBondCouponsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest) */ {
 public:
  inline GetBondCouponsRequest() : GetBondCouponsRequest(nullptr) {}
  ~GetBondCouponsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetBondCouponsRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetBondCouponsRequest(const GetBondCouponsRequest& from)
      : GetBondCouponsRequest(nullptr, from) {}
  GetBondCouponsRequest(GetBondCouponsRequest&& from) noexcept
    : GetBondCouponsRequest() {
    *this = ::std::move(from);
  }

  inline GetBondCouponsRequest& operator=(const GetBondCouponsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBondCouponsRequest& operator=(GetBondCouponsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBondCouponsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBondCouponsRequest* internal_default_instance() {
    return reinterpret_cast<const GetBondCouponsRequest*>(
               &_GetBondCouponsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetBondCouponsRequest& a, GetBondCouponsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBondCouponsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBondCouponsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBondCouponsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBondCouponsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetBondCouponsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetBondCouponsRequest& from) {
    GetBondCouponsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetBondCouponsRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest";
  }
  protected:
  explicit GetBondCouponsRequest(::google::protobuf::Arena* arena);
  GetBondCouponsRequest(::google::protobuf::Arena* arena, const GetBondCouponsRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentIdFieldNumber = 4,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
  };
  // string figi = 1 [deprecated = true];
  [[deprecated]]  void clear_figi() ;
  [[deprecated]] const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_figi(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_figi();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_figi();
  [[deprecated]] void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
  void clear_instrument_id() ;
  const std::string& instrument_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_id(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* value);

  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(
      const std::string& value);
  std::string* _internal_mutable_instrument_id();

  public:
  // optional .google.protobuf.Timestamp from = 2;
  bool has_from() const;
  void clear_from() ;
  const ::google::protobuf::Timestamp& from() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_from();
  ::google::protobuf::Timestamp* mutable_from();
  void set_allocated_from(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_from();

  private:
  const ::google::protobuf::Timestamp& _internal_from() const;
  ::google::protobuf::Timestamp* _internal_mutable_from();

  public:
  // optional .google.protobuf.Timestamp to = 3;
  bool has_to() const;
  void clear_to() ;
  const ::google::protobuf::Timestamp& to() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_to();
  ::google::protobuf::Timestamp* mutable_to();
  void set_allocated_to(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_to();

  private:
  const ::google::protobuf::Timestamp& _internal_to() const;
  ::google::protobuf::Timestamp* _internal_mutable_to();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      86, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_id_;
    ::google::protobuf::Timestamp* from_;
    ::google::protobuf::Timestamp* to_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetAssetReportsResponse_GetAssetReportsEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent) */ {
 public:
  inline GetAssetReportsResponse_GetAssetReportsEvent() : GetAssetReportsResponse_GetAssetReportsEvent(nullptr) {}
  ~GetAssetReportsResponse_GetAssetReportsEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetAssetReportsResponse_GetAssetReportsEvent(::google::protobuf::internal::ConstantInitialized);

  inline GetAssetReportsResponse_GetAssetReportsEvent(const GetAssetReportsResponse_GetAssetReportsEvent& from)
      : GetAssetReportsResponse_GetAssetReportsEvent(nullptr, from) {}
  GetAssetReportsResponse_GetAssetReportsEvent(GetAssetReportsResponse_GetAssetReportsEvent&& from) noexcept
    : GetAssetReportsResponse_GetAssetReportsEvent() {
    *this = ::std::move(from);
  }

  inline GetAssetReportsResponse_GetAssetReportsEvent& operator=(const GetAssetReportsResponse_GetAssetReportsEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAssetReportsResponse_GetAssetReportsEvent& operator=(GetAssetReportsResponse_GetAssetReportsEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAssetReportsResponse_GetAssetReportsEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAssetReportsResponse_GetAssetReportsEvent* internal_default_instance() {
    return reinterpret_cast<const GetAssetReportsResponse_GetAssetReportsEvent*>(
               &_GetAssetReportsResponse_GetAssetReportsEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(GetAssetReportsResponse_GetAssetReportsEvent& a, GetAssetReportsResponse_GetAssetReportsEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAssetReportsResponse_GetAssetReportsEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAssetReportsResponse_GetAssetReportsEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAssetReportsResponse_GetAssetReportsEvent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAssetReportsResponse_GetAssetReportsEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetAssetReportsResponse_GetAssetReportsEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetAssetReportsResponse_GetAssetReportsEvent& from) {
    GetAssetReportsResponse_GetAssetReportsEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetAssetReportsResponse_GetAssetReportsEvent* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent";
  }
  protected:
  explicit GetAssetReportsResponse_GetAssetReportsEvent(::google::protobuf::Arena* arena);
  GetAssetReportsResponse_GetAssetReportsEvent(::google::protobuf::Arena* arena, const GetAssetReportsResponse_GetAssetReportsEvent& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentIdFieldNumber = 1,
    kReportDateFieldNumber = 2,
    kCreatedAtFieldNumber = 6,
    kPeriodYearFieldNumber = 3,
    kPeriodNumFieldNumber = 4,
    kPeriodTypeFieldNumber = 5,
  };
  // string instrument_id = 1;
  void clear_instrument_id() ;
  const std::string& instrument_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_id(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* value);

  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(
      const std::string& value);
  std::string* _internal_mutable_instrument_id();

  public:
  // .google.protobuf.Timestamp report_date = 2;
  bool has_report_date() const;
  void clear_report_date() ;
  const ::google::protobuf::Timestamp& report_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_report_date();
  ::google::protobuf::Timestamp* mutable_report_date();
  void set_allocated_report_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_report_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_report_date();

  private:
  const ::google::protobuf::Timestamp& _internal_report_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_report_date();

  public:
  // .google.protobuf.Timestamp created_at = 6;
  bool has_created_at() const;
  void clear_created_at() ;
  const ::google::protobuf::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_created_at();
  ::google::protobuf::Timestamp* mutable_created_at();
  void set_allocated_created_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_created_at();

  private:
  const ::google::protobuf::Timestamp& _internal_created_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_created_at();

  public:
  // int32 period_year = 3;
  void clear_period_year() ;
  ::int32_t period_year() const;
  void set_period_year(::int32_t value);

  private:
  ::int32_t _internal_period_year() const;
  void _internal_set_period_year(::int32_t value);

  public:
  // int32 period_num = 4;
  void clear_period_num() ;
  ::int32_t period_num() const;
  void set_period_num(::int32_t value);

  private:
  ::int32_t _internal_period_num() const;
  void _internal_set_period_num(::int32_t value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.AssetReportPeriodType period_type = 5;
  void clear_period_type() ;
  ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_AssetReportPeriodType period_type() const;
  void set_period_type(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_AssetReportPeriodType value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_AssetReportPeriodType _internal_period_type() const;
  void _internal_set_period_type(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_AssetReportPeriodType value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      105, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr instrument_id_;
    ::google::protobuf::Timestamp* report_date_;
    ::google::protobuf::Timestamp* created_at_;
    ::int32_t period_year_;
    ::int32_t period_num_;
    int period_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetAssetReportsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest) */ {
 public:
  inline GetAssetReportsRequest() : GetAssetReportsRequest(nullptr) {}
  ~GetAssetReportsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetAssetReportsRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetAssetReportsRequest(const GetAssetReportsRequest& from)
      : GetAssetReportsRequest(nullptr, from) {}
  GetAssetReportsRequest(GetAssetReportsRequest&& from) noexcept
    : GetAssetReportsRequest() {
    *this = ::std::move(from);
  }

  inline GetAssetReportsRequest& operator=(const GetAssetReportsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAssetReportsRequest& operator=(GetAssetReportsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAssetReportsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAssetReportsRequest* internal_default_instance() {
    return reinterpret_cast<const GetAssetReportsRequest*>(
               &_GetAssetReportsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(GetAssetReportsRequest& a, GetAssetReportsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAssetReportsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAssetReportsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAssetReportsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAssetReportsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetAssetReportsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetAssetReportsRequest& from) {
    GetAssetReportsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetAssetReportsRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest";
  }
  protected:
  explicit GetAssetReportsRequest(::google::protobuf::Arena* arena);
  GetAssetReportsRequest(::google::protobuf::Arena* arena, const GetAssetReportsRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentIdFieldNumber = 1,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
  };
  // string instrument_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_instrument_id() ;
  const std::string& instrument_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_id(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* value);

  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(
      const std::string& value);
  std::string* _internal_mutable_instrument_id();

  public:
  // optional .google.protobuf.Timestamp from = 2;
  bool has_from() const;
  void clear_from() ;
  const ::google::protobuf::Timestamp& from() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_from();
  ::google::protobuf::Timestamp* mutable_from();
  void set_allocated_from(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_from();

  private:
  const ::google::protobuf::Timestamp& _internal_from() const;
  ::google::protobuf::Timestamp* _internal_mutable_from();

  public:
  // optional .google.protobuf.Timestamp to = 3;
  bool has_to() const;
  void clear_to() ;
  const ::google::protobuf::Timestamp& to() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_to();
  ::google::protobuf::Timestamp* mutable_to();
  void set_allocated_to(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_to();

  private:
  const ::google::protobuf::Timestamp& _internal_to() const;
  ::google::protobuf::Timestamp* _internal_mutable_to();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      83, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr instrument_id_;
    ::google::protobuf::Timestamp* from_;
    ::google::protobuf::Timestamp* to_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetAssetFundamentalsResponse_StatisticResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse) */ {
 public:
  inline GetAssetFundamentalsResponse_StatisticResponse() : GetAssetFundamentalsResponse_StatisticResponse(nullptr) {}
  ~GetAssetFundamentalsResponse_StatisticResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetAssetFundamentalsResponse_StatisticResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetAssetFundamentalsResponse_StatisticResponse(const GetAssetFundamentalsResponse_StatisticResponse& from)
      : GetAssetFundamentalsResponse_StatisticResponse(nullptr, from) {}
  GetAssetFundamentalsResponse_StatisticResponse(GetAssetFundamentalsResponse_StatisticResponse&& from) noexcept
    : GetAssetFundamentalsResponse_StatisticResponse() {
    *this = ::std::move(from);
  }

  inline GetAssetFundamentalsResponse_StatisticResponse& operator=(const GetAssetFundamentalsResponse_StatisticResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAssetFundamentalsResponse_StatisticResponse& operator=(GetAssetFundamentalsResponse_StatisticResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAssetFundamentalsResponse_StatisticResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAssetFundamentalsResponse_StatisticResponse* internal_default_instance() {
    return reinterpret_cast<const GetAssetFundamentalsResponse_StatisticResponse*>(
               &_GetAssetFundamentalsResponse_StatisticResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(GetAssetFundamentalsResponse_StatisticResponse& a, GetAssetFundamentalsResponse_StatisticResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAssetFundamentalsResponse_StatisticResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAssetFundamentalsResponse_StatisticResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAssetFundamentalsResponse_StatisticResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAssetFundamentalsResponse_StatisticResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetAssetFundamentalsResponse_StatisticResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetAssetFundamentalsResponse_StatisticResponse& from) {
    GetAssetFundamentalsResponse_StatisticResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetAssetFundamentalsResponse_StatisticResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse";
  }
  protected:
  explicit GetAssetFundamentalsResponse_StatisticResponse(::google::protobuf::Arena* arena);
  GetAssetFundamentalsResponse_StatisticResponse(::google::protobuf::Arena* arena, const GetAssetFundamentalsResponse_StatisticResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetUidFieldNumber = 1,
    kCurrencyFieldNumber = 2,
    kDomicileIndicatorCodeFieldNumber = 46,
    kExDividendDateFieldNumber = 49,
    kFiscalPeriodStartDateFieldNumber = 50,
    kFiscalPeriodEndDateFieldNumber = 51,
    kMarketCapitalizationFieldNumber = 3,
    kHighPriceLast52WeeksFieldNumber = 4,
    kLowPriceLast52WeeksFieldNumber = 5,
    kAverageDailyVolumeLast10DaysFieldNumber = 6,
    kAverageDailyVolumeLast4WeeksFieldNumber = 7,
    kBetaFieldNumber = 8,
    kFreeFloatFieldNumber = 9,
    kForwardAnnualDividendYieldFieldNumber = 10,
    kSharesOutstandingFieldNumber = 11,
    kRevenueTtmFieldNumber = 12,
    kEbitdaTtmFieldNumber = 13,
    kNetIncomeTtmFieldNumber = 14,
    kEpsTtmFieldNumber = 15,
    kDilutedEpsTtmFieldNumber = 16,
    kFreeCashFlowTtmFieldNumber = 17,
    kFiveYearAnnualRevenueGrowthRateFieldNumber = 18,
    kThreeYearAnnualRevenueGrowthRateFieldNumber = 19,
    kPeRatioTtmFieldNumber = 20,
    kPriceToSalesTtmFieldNumber = 21,
    kPriceToBookTtmFieldNumber = 22,
    kPriceToFreeCashFlowTtmFieldNumber = 23,
    kTotalEnterpriseValueMrqFieldNumber = 24,
    kEvToEbitdaMrqFieldNumber = 25,
    kNetMarginMrqFieldNumber = 26,
    kNetInterestMarginMrqFieldNumber = 27,
    kRoeFieldNumber = 28,
    kRoaFieldNumber = 29,
    kRoicFieldNumber = 30,
    kTotalDebtMrqFieldNumber = 31,
    kTotalDebtToEquityMrqFieldNumber = 32,
    kTotalDebtToEbitdaMrqFieldNumber = 33,
    kFreeCashFlowToPriceFieldNumber = 34,
    kNetDebtToEbitdaFieldNumber = 35,
    kCurrentRatioMrqFieldNumber = 36,
    kFixedChargeCoverageRatioFyFieldNumber = 37,
    kDividendYieldDailyTtmFieldNumber = 38,
    kDividendRateTtmFieldNumber = 39,
    kDividendsPerShareFieldNumber = 40,
    kFiveYearsAverageDividendYieldFieldNumber = 41,
    kFiveYearAnnualDividendGrowthRateFieldNumber = 42,
    kDividendPayoutRatioFyFieldNumber = 43,
    kBuyBackTtmFieldNumber = 44,
    kOneYearAnnualRevenueGrowthRateFieldNumber = 45,
    kAdrToCommonShareRatioFieldNumber = 47,
    kNumberOfEmployeesFieldNumber = 48,
    kRevenueChangeFiveYearsFieldNumber = 53,
    kEpsChangeFiveYearsFieldNumber = 54,
    kEbitdaChangeFiveYearsFieldNumber = 55,
    kTotalDebtChangeFiveYearsFieldNumber = 56,
    kEvToSalesFieldNumber = 57,
  };
  // string asset_uid = 1;
  void clear_asset_uid() ;
  const std::string& asset_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_asset_uid(Arg_&& arg, Args_... args);
  std::string* mutable_asset_uid();
  PROTOBUF_NODISCARD std::string* release_asset_uid();
  void set_allocated_asset_uid(std::string* value);

  private:
  const std::string& _internal_asset_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_uid(
      const std::string& value);
  std::string* _internal_mutable_asset_uid();

  public:
  // string currency = 2;
  void clear_currency() ;
  const std::string& currency() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_currency(Arg_&& arg, Args_... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* value);

  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(
      const std::string& value);
  std::string* _internal_mutable_currency();

  public:
  // string domicile_indicator_code = 46;
  void clear_domicile_indicator_code() ;
  const std::string& domicile_indicator_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_domicile_indicator_code(Arg_&& arg, Args_... args);
  std::string* mutable_domicile_indicator_code();
  PROTOBUF_NODISCARD std::string* release_domicile_indicator_code();
  void set_allocated_domicile_indicator_code(std::string* value);

  private:
  const std::string& _internal_domicile_indicator_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domicile_indicator_code(
      const std::string& value);
  std::string* _internal_mutable_domicile_indicator_code();

  public:
  // .google.protobuf.Timestamp ex_dividend_date = 49;
  bool has_ex_dividend_date() const;
  void clear_ex_dividend_date() ;
  const ::google::protobuf::Timestamp& ex_dividend_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_ex_dividend_date();
  ::google::protobuf::Timestamp* mutable_ex_dividend_date();
  void set_allocated_ex_dividend_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_ex_dividend_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_ex_dividend_date();

  private:
  const ::google::protobuf::Timestamp& _internal_ex_dividend_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_ex_dividend_date();

  public:
  // .google.protobuf.Timestamp fiscal_period_start_date = 50;
  bool has_fiscal_period_start_date() const;
  void clear_fiscal_period_start_date() ;
  const ::google::protobuf::Timestamp& fiscal_period_start_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_fiscal_period_start_date();
  ::google::protobuf::Timestamp* mutable_fiscal_period_start_date();
  void set_allocated_fiscal_period_start_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_fiscal_period_start_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_fiscal_period_start_date();

  private:
  const ::google::protobuf::Timestamp& _internal_fiscal_period_start_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_fiscal_period_start_date();

  public:
  // .google.protobuf.Timestamp fiscal_period_end_date = 51;
  bool has_fiscal_period_end_date() const;
  void clear_fiscal_period_end_date() ;
  const ::google::protobuf::Timestamp& fiscal_period_end_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_fiscal_period_end_date();
  ::google::protobuf::Timestamp* mutable_fiscal_period_end_date();
  void set_allocated_fiscal_period_end_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_fiscal_period_end_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_fiscal_period_end_date();

  private:
  const ::google::protobuf::Timestamp& _internal_fiscal_period_end_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_fiscal_period_end_date();

  public:
  // double market_capitalization = 3;
  void clear_market_capitalization() ;
  double market_capitalization() const;
  void set_market_capitalization(double value);

  private:
  double _internal_market_capitalization() const;
  void _internal_set_market_capitalization(double value);

  public:
  // double high_price_last_52_weeks = 4;
  void clear_high_price_last_52_weeks() ;
  double high_price_last_52_weeks() const;
  void set_high_price_last_52_weeks(double value);

  private:
  double _internal_high_price_last_52_weeks() const;
  void _internal_set_high_price_last_52_weeks(double value);

  public:
  // double low_price_last_52_weeks = 5;
  void clear_low_price_last_52_weeks() ;
  double low_price_last_52_weeks() const;
  void set_low_price_last_52_weeks(double value);

  private:
  double _internal_low_price_last_52_weeks() const;
  void _internal_set_low_price_last_52_weeks(double value);

  public:
  // double average_daily_volume_last_10_days = 6;
  void clear_average_daily_volume_last_10_days() ;
  double average_daily_volume_last_10_days() const;
  void set_average_daily_volume_last_10_days(double value);

  private:
  double _internal_average_daily_volume_last_10_days() const;
  void _internal_set_average_daily_volume_last_10_days(double value);

  public:
  // double average_daily_volume_last_4_weeks = 7;
  void clear_average_daily_volume_last_4_weeks() ;
  double average_daily_volume_last_4_weeks() const;
  void set_average_daily_volume_last_4_weeks(double value);

  private:
  double _internal_average_daily_volume_last_4_weeks() const;
  void _internal_set_average_daily_volume_last_4_weeks(double value);

  public:
  // double beta = 8;
  void clear_beta() ;
  double beta() const;
  void set_beta(double value);

  private:
  double _internal_beta() const;
  void _internal_set_beta(double value);

  public:
  // double free_float = 9;
  void clear_free_float() ;
  double free_float() const;
  void set_free_float(double value);

  private:
  double _internal_free_float() const;
  void _internal_set_free_float(double value);

  public:
  // double forward_annual_dividend_yield = 10;
  void clear_forward_annual_dividend_yield() ;
  double forward_annual_dividend_yield() const;
  void set_forward_annual_dividend_yield(double value);

  private:
  double _internal_forward_annual_dividend_yield() const;
  void _internal_set_forward_annual_dividend_yield(double value);

  public:
  // double shares_outstanding = 11;
  void clear_shares_outstanding() ;
  double shares_outstanding() const;
  void set_shares_outstanding(double value);

  private:
  double _internal_shares_outstanding() const;
  void _internal_set_shares_outstanding(double value);

  public:
  // double revenue_ttm = 12;
  void clear_revenue_ttm() ;
  double revenue_ttm() const;
  void set_revenue_ttm(double value);

  private:
  double _internal_revenue_ttm() const;
  void _internal_set_revenue_ttm(double value);

  public:
  // double ebitda_ttm = 13;
  void clear_ebitda_ttm() ;
  double ebitda_ttm() const;
  void set_ebitda_ttm(double value);

  private:
  double _internal_ebitda_ttm() const;
  void _internal_set_ebitda_ttm(double value);

  public:
  // double net_income_ttm = 14;
  void clear_net_income_ttm() ;
  double net_income_ttm() const;
  void set_net_income_ttm(double value);

  private:
  double _internal_net_income_ttm() const;
  void _internal_set_net_income_ttm(double value);

  public:
  // double eps_ttm = 15;
  void clear_eps_ttm() ;
  double eps_ttm() const;
  void set_eps_ttm(double value);

  private:
  double _internal_eps_ttm() const;
  void _internal_set_eps_ttm(double value);

  public:
  // double diluted_eps_ttm = 16;
  void clear_diluted_eps_ttm() ;
  double diluted_eps_ttm() const;
  void set_diluted_eps_ttm(double value);

  private:
  double _internal_diluted_eps_ttm() const;
  void _internal_set_diluted_eps_ttm(double value);

  public:
  // double free_cash_flow_ttm = 17;
  void clear_free_cash_flow_ttm() ;
  double free_cash_flow_ttm() const;
  void set_free_cash_flow_ttm(double value);

  private:
  double _internal_free_cash_flow_ttm() const;
  void _internal_set_free_cash_flow_ttm(double value);

  public:
  // double five_year_annual_revenue_growth_rate = 18;
  void clear_five_year_annual_revenue_growth_rate() ;
  double five_year_annual_revenue_growth_rate() const;
  void set_five_year_annual_revenue_growth_rate(double value);

  private:
  double _internal_five_year_annual_revenue_growth_rate() const;
  void _internal_set_five_year_annual_revenue_growth_rate(double value);

  public:
  // double three_year_annual_revenue_growth_rate = 19;
  void clear_three_year_annual_revenue_growth_rate() ;
  double three_year_annual_revenue_growth_rate() const;
  void set_three_year_annual_revenue_growth_rate(double value);

  private:
  double _internal_three_year_annual_revenue_growth_rate() const;
  void _internal_set_three_year_annual_revenue_growth_rate(double value);

  public:
  // double pe_ratio_ttm = 20;
  void clear_pe_ratio_ttm() ;
  double pe_ratio_ttm() const;
  void set_pe_ratio_ttm(double value);

  private:
  double _internal_pe_ratio_ttm() const;
  void _internal_set_pe_ratio_ttm(double value);

  public:
  // double price_to_sales_ttm = 21;
  void clear_price_to_sales_ttm() ;
  double price_to_sales_ttm() const;
  void set_price_to_sales_ttm(double value);

  private:
  double _internal_price_to_sales_ttm() const;
  void _internal_set_price_to_sales_ttm(double value);

  public:
  // double price_to_book_ttm = 22;
  void clear_price_to_book_ttm() ;
  double price_to_book_ttm() const;
  void set_price_to_book_ttm(double value);

  private:
  double _internal_price_to_book_ttm() const;
  void _internal_set_price_to_book_ttm(double value);

  public:
  // double price_to_free_cash_flow_ttm = 23;
  void clear_price_to_free_cash_flow_ttm() ;
  double price_to_free_cash_flow_ttm() const;
  void set_price_to_free_cash_flow_ttm(double value);

  private:
  double _internal_price_to_free_cash_flow_ttm() const;
  void _internal_set_price_to_free_cash_flow_ttm(double value);

  public:
  // double total_enterprise_value_mrq = 24;
  void clear_total_enterprise_value_mrq() ;
  double total_enterprise_value_mrq() const;
  void set_total_enterprise_value_mrq(double value);

  private:
  double _internal_total_enterprise_value_mrq() const;
  void _internal_set_total_enterprise_value_mrq(double value);

  public:
  // double ev_to_ebitda_mrq = 25;
  void clear_ev_to_ebitda_mrq() ;
  double ev_to_ebitda_mrq() const;
  void set_ev_to_ebitda_mrq(double value);

  private:
  double _internal_ev_to_ebitda_mrq() const;
  void _internal_set_ev_to_ebitda_mrq(double value);

  public:
  // double net_margin_mrq = 26;
  void clear_net_margin_mrq() ;
  double net_margin_mrq() const;
  void set_net_margin_mrq(double value);

  private:
  double _internal_net_margin_mrq() const;
  void _internal_set_net_margin_mrq(double value);

  public:
  // double net_interest_margin_mrq = 27;
  void clear_net_interest_margin_mrq() ;
  double net_interest_margin_mrq() const;
  void set_net_interest_margin_mrq(double value);

  private:
  double _internal_net_interest_margin_mrq() const;
  void _internal_set_net_interest_margin_mrq(double value);

  public:
  // double roe = 28;
  void clear_roe() ;
  double roe() const;
  void set_roe(double value);

  private:
  double _internal_roe() const;
  void _internal_set_roe(double value);

  public:
  // double roa = 29;
  void clear_roa() ;
  double roa() const;
  void set_roa(double value);

  private:
  double _internal_roa() const;
  void _internal_set_roa(double value);

  public:
  // double roic = 30;
  void clear_roic() ;
  double roic() const;
  void set_roic(double value);

  private:
  double _internal_roic() const;
  void _internal_set_roic(double value);

  public:
  // double total_debt_mrq = 31;
  void clear_total_debt_mrq() ;
  double total_debt_mrq() const;
  void set_total_debt_mrq(double value);

  private:
  double _internal_total_debt_mrq() const;
  void _internal_set_total_debt_mrq(double value);

  public:
  // double total_debt_to_equity_mrq = 32;
  void clear_total_debt_to_equity_mrq() ;
  double total_debt_to_equity_mrq() const;
  void set_total_debt_to_equity_mrq(double value);

  private:
  double _internal_total_debt_to_equity_mrq() const;
  void _internal_set_total_debt_to_equity_mrq(double value);

  public:
  // double total_debt_to_ebitda_mrq = 33;
  void clear_total_debt_to_ebitda_mrq() ;
  double total_debt_to_ebitda_mrq() const;
  void set_total_debt_to_ebitda_mrq(double value);

  private:
  double _internal_total_debt_to_ebitda_mrq() const;
  void _internal_set_total_debt_to_ebitda_mrq(double value);

  public:
  // double free_cash_flow_to_price = 34;
  void clear_free_cash_flow_to_price() ;
  double free_cash_flow_to_price() const;
  void set_free_cash_flow_to_price(double value);

  private:
  double _internal_free_cash_flow_to_price() const;
  void _internal_set_free_cash_flow_to_price(double value);

  public:
  // double net_debt_to_ebitda = 35;
  void clear_net_debt_to_ebitda() ;
  double net_debt_to_ebitda() const;
  void set_net_debt_to_ebitda(double value);

  private:
  double _internal_net_debt_to_ebitda() const;
  void _internal_set_net_debt_to_ebitda(double value);

  public:
  // double current_ratio_mrq = 36;
  void clear_current_ratio_mrq() ;
  double current_ratio_mrq() const;
  void set_current_ratio_mrq(double value);

  private:
  double _internal_current_ratio_mrq() const;
  void _internal_set_current_ratio_mrq(double value);

  public:
  // double fixed_charge_coverage_ratio_fy = 37;
  void clear_fixed_charge_coverage_ratio_fy() ;
  double fixed_charge_coverage_ratio_fy() const;
  void set_fixed_charge_coverage_ratio_fy(double value);

  private:
  double _internal_fixed_charge_coverage_ratio_fy() const;
  void _internal_set_fixed_charge_coverage_ratio_fy(double value);

  public:
  // double dividend_yield_daily_ttm = 38;
  void clear_dividend_yield_daily_ttm() ;
  double dividend_yield_daily_ttm() const;
  void set_dividend_yield_daily_ttm(double value);

  private:
  double _internal_dividend_yield_daily_ttm() const;
  void _internal_set_dividend_yield_daily_ttm(double value);

  public:
  // double dividend_rate_ttm = 39;
  void clear_dividend_rate_ttm() ;
  double dividend_rate_ttm() const;
  void set_dividend_rate_ttm(double value);

  private:
  double _internal_dividend_rate_ttm() const;
  void _internal_set_dividend_rate_ttm(double value);

  public:
  // double dividends_per_share = 40;
  void clear_dividends_per_share() ;
  double dividends_per_share() const;
  void set_dividends_per_share(double value);

  private:
  double _internal_dividends_per_share() const;
  void _internal_set_dividends_per_share(double value);

  public:
  // double five_years_average_dividend_yield = 41;
  void clear_five_years_average_dividend_yield() ;
  double five_years_average_dividend_yield() const;
  void set_five_years_average_dividend_yield(double value);

  private:
  double _internal_five_years_average_dividend_yield() const;
  void _internal_set_five_years_average_dividend_yield(double value);

  public:
  // double five_year_annual_dividend_growth_rate = 42;
  void clear_five_year_annual_dividend_growth_rate() ;
  double five_year_annual_dividend_growth_rate() const;
  void set_five_year_annual_dividend_growth_rate(double value);

  private:
  double _internal_five_year_annual_dividend_growth_rate() const;
  void _internal_set_five_year_annual_dividend_growth_rate(double value);

  public:
  // double dividend_payout_ratio_fy = 43;
  void clear_dividend_payout_ratio_fy() ;
  double dividend_payout_ratio_fy() const;
  void set_dividend_payout_ratio_fy(double value);

  private:
  double _internal_dividend_payout_ratio_fy() const;
  void _internal_set_dividend_payout_ratio_fy(double value);

  public:
  // double buy_back_ttm = 44;
  void clear_buy_back_ttm() ;
  double buy_back_ttm() const;
  void set_buy_back_ttm(double value);

  private:
  double _internal_buy_back_ttm() const;
  void _internal_set_buy_back_ttm(double value);

  public:
  // double one_year_annual_revenue_growth_rate = 45;
  void clear_one_year_annual_revenue_growth_rate() ;
  double one_year_annual_revenue_growth_rate() const;
  void set_one_year_annual_revenue_growth_rate(double value);

  private:
  double _internal_one_year_annual_revenue_growth_rate() const;
  void _internal_set_one_year_annual_revenue_growth_rate(double value);

  public:
  // double adr_to_common_share_ratio = 47;
  void clear_adr_to_common_share_ratio() ;
  double adr_to_common_share_ratio() const;
  void set_adr_to_common_share_ratio(double value);

  private:
  double _internal_adr_to_common_share_ratio() const;
  void _internal_set_adr_to_common_share_ratio(double value);

  public:
  // double number_of_employees = 48;
  void clear_number_of_employees() ;
  double number_of_employees() const;
  void set_number_of_employees(double value);

  private:
  double _internal_number_of_employees() const;
  void _internal_set_number_of_employees(double value);

  public:
  // double revenue_change_five_years = 53;
  void clear_revenue_change_five_years() ;
  double revenue_change_five_years() const;
  void set_revenue_change_five_years(double value);

  private:
  double _internal_revenue_change_five_years() const;
  void _internal_set_revenue_change_five_years(double value);

  public:
  // double eps_change_five_years = 54;
  void clear_eps_change_five_years() ;
  double eps_change_five_years() const;
  void set_eps_change_five_years(double value);

  private:
  double _internal_eps_change_five_years() const;
  void _internal_set_eps_change_five_years(double value);

  public:
  // double ebitda_change_five_years = 55;
  void clear_ebitda_change_five_years() ;
  double ebitda_change_five_years() const;
  void set_ebitda_change_five_years(double value);

  private:
  double _internal_ebitda_change_five_years() const;
  void _internal_set_ebitda_change_five_years(double value);

  public:
  // double total_debt_change_five_years = 56;
  void clear_total_debt_change_five_years() ;
  double total_debt_change_five_years() const;
  void set_total_debt_change_five_years(double value);

  private:
  double _internal_total_debt_change_five_years() const;
  void _internal_set_total_debt_change_five_years(double value);

  public:
  // double ev_to_sales = 57;
  void clear_ev_to_sales() ;
  double ev_to_sales() const;
  void set_ev_to_sales(double value);

  private:
  double _internal_ev_to_sales() const;
  void _internal_set_ev_to_sales(double value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 56, 3,
      190, 9>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr asset_uid_;
    ::google::protobuf::internal::ArenaStringPtr currency_;
    ::google::protobuf::internal::ArenaStringPtr domicile_indicator_code_;
    ::google::protobuf::Timestamp* ex_dividend_date_;
    ::google::protobuf::Timestamp* fiscal_period_start_date_;
    ::google::protobuf::Timestamp* fiscal_period_end_date_;
    double market_capitalization_;
    double high_price_last_52_weeks_;
    double low_price_last_52_weeks_;
    double average_daily_volume_last_10_days_;
    double average_daily_volume_last_4_weeks_;
    double beta_;
    double free_float_;
    double forward_annual_dividend_yield_;
    double shares_outstanding_;
    double revenue_ttm_;
    double ebitda_ttm_;
    double net_income_ttm_;
    double eps_ttm_;
    double diluted_eps_ttm_;
    double free_cash_flow_ttm_;
    double five_year_annual_revenue_growth_rate_;
    double three_year_annual_revenue_growth_rate_;
    double pe_ratio_ttm_;
    double price_to_sales_ttm_;
    double price_to_book_ttm_;
    double price_to_free_cash_flow_ttm_;
    double total_enterprise_value_mrq_;
    double ev_to_ebitda_mrq_;
    double net_margin_mrq_;
    double net_interest_margin_mrq_;
    double roe_;
    double roa_;
    double roic_;
    double total_debt_mrq_;
    double total_debt_to_equity_mrq_;
    double total_debt_to_ebitda_mrq_;
    double free_cash_flow_to_price_;
    double net_debt_to_ebitda_;
    double current_ratio_mrq_;
    double fixed_charge_coverage_ratio_fy_;
    double dividend_yield_daily_ttm_;
    double dividend_rate_ttm_;
    double dividends_per_share_;
    double five_years_average_dividend_yield_;
    double five_year_annual_dividend_growth_rate_;
    double dividend_payout_ratio_fy_;
    double buy_back_ttm_;
    double one_year_annual_revenue_growth_rate_;
    double adr_to_common_share_ratio_;
    double number_of_employees_;
    double revenue_change_five_years_;
    double eps_change_five_years_;
    double ebitda_change_five_years_;
    double total_debt_change_five_years_;
    double ev_to_sales_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetAccruedInterestsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest) */ {
 public:
  inline GetAccruedInterestsRequest() : GetAccruedInterestsRequest(nullptr) {}
  ~GetAccruedInterestsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetAccruedInterestsRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetAccruedInterestsRequest(const GetAccruedInterestsRequest& from)
      : GetAccruedInterestsRequest(nullptr, from) {}
  GetAccruedInterestsRequest(GetAccruedInterestsRequest&& from) noexcept
    : GetAccruedInterestsRequest() {
    *this = ::std::move(from);
  }

  inline GetAccruedInterestsRequest& operator=(const GetAccruedInterestsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccruedInterestsRequest& operator=(GetAccruedInterestsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAccruedInterestsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAccruedInterestsRequest* internal_default_instance() {
    return reinterpret_cast<const GetAccruedInterestsRequest*>(
               &_GetAccruedInterestsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetAccruedInterestsRequest& a, GetAccruedInterestsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAccruedInterestsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAccruedInterestsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAccruedInterestsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAccruedInterestsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetAccruedInterestsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetAccruedInterestsRequest& from) {
    GetAccruedInterestsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetAccruedInterestsRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest";
  }
  protected:
  explicit GetAccruedInterestsRequest(::google::protobuf::Arena* arena);
  GetAccruedInterestsRequest(::google::protobuf::Arena* arena, const GetAccruedInterestsRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentIdFieldNumber = 4,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
  };
  // string figi = 1 [deprecated = true];
  [[deprecated]]  void clear_figi() ;
  [[deprecated]] const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_figi(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_figi();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_figi();
  [[deprecated]] void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
  void clear_instrument_id() ;
  const std::string& instrument_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_id(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* value);

  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(
      const std::string& value);
  std::string* _internal_mutable_instrument_id();

  public:
  // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_from() const;
  void clear_from() ;
  const ::google::protobuf::Timestamp& from() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_from();
  ::google::protobuf::Timestamp* mutable_from();
  void set_allocated_from(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_from();

  private:
  const ::google::protobuf::Timestamp& _internal_from() const;
  ::google::protobuf::Timestamp* _internal_mutable_from();

  public:
  // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_to() const;
  void clear_to() ;
  const ::google::protobuf::Timestamp& to() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_to();
  ::google::protobuf::Timestamp* mutable_to();
  void set_allocated_to(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_to();

  private:
  const ::google::protobuf::Timestamp& _internal_to() const;
  ::google::protobuf::Timestamp* _internal_mutable_to();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      91, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_id_;
    ::google::protobuf::Timestamp* from_;
    ::google::protobuf::Timestamp* to_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class Future final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.Future) */ {
 public:
  inline Future() : Future(nullptr) {}
  ~Future() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Future(::google::protobuf::internal::ConstantInitialized);

  inline Future(const Future& from)
      : Future(nullptr, from) {}
  Future(Future&& from) noexcept
    : Future() {
    *this = ::std::move(from);
  }

  inline Future& operator=(const Future& from) {
    CopyFrom(from);
    return *this;
  }
  inline Future& operator=(Future&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Future& default_instance() {
    return *internal_default_instance();
  }
  static inline const Future* internal_default_instance() {
    return reinterpret_cast<const Future*>(
               &_Future_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Future& a, Future& b) {
    a.Swap(&b);
  }
  inline void Swap(Future* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Future* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Future* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Future>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Future& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Future& from) {
    Future::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Future* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.Future";
  }
  protected:
  explicit Future(::google::protobuf::Arena* arena);
  Future(::google::protobuf::Arena* arena, const Future& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFigiFieldNumber = 1,
    kTickerFieldNumber = 2,
    kClassCodeFieldNumber = 3,
    kCurrencyFieldNumber = 5,
    kNameFieldNumber = 13,
    kExchangeFieldNumber = 14,
    kFuturesTypeFieldNumber = 17,
    kAssetTypeFieldNumber = 18,
    kBasicAssetFieldNumber = 19,
    kCountryOfRiskFieldNumber = 21,
    kCountryOfRiskNameFieldNumber = 22,
    kSectorFieldNumber = 23,
    kUidFieldNumber = 31,
    kPositionUidFieldNumber = 33,
    kBasicAssetPositionUidFieldNumber = 34,
    kKlongFieldNumber = 6,
    kKshortFieldNumber = 7,
    kDlongFieldNumber = 8,
    kDshortFieldNumber = 9,
    kDlongMinFieldNumber = 10,
    kDshortMinFieldNumber = 11,
    kFirstTradeDateFieldNumber = 15,
    kLastTradeDateFieldNumber = 16,
    kBasicAssetSizeFieldNumber = 20,
    kExpirationDateFieldNumber = 24,
    kMinPriceIncrementFieldNumber = 29,
    kFirst1MinCandleDateFieldNumber = 56,
    kFirst1DayCandleDateFieldNumber = 57,
    kInitialMarginOnBuyFieldNumber = 61,
    kInitialMarginOnSellFieldNumber = 62,
    kMinPriceIncrementAmountFieldNumber = 63,
    kBrandFieldNumber = 64,
    kLotFieldNumber = 4,
    kShortEnabledFlagFieldNumber = 12,
    kOtcFlagFieldNumber = 26,
    kBuyAvailableFlagFieldNumber = 27,
    kSellAvailableFlagFieldNumber = 28,
    kTradingStatusFieldNumber = 25,
    kRealExchangeFieldNumber = 32,
    kApiTradeAvailableFlagFieldNumber = 30,
    kForIisFlagFieldNumber = 41,
    kForQualInvestorFlagFieldNumber = 42,
    kWeekendFlagFieldNumber = 43,
    kBlockedTcaFlagFieldNumber = 44,
  };
  // string figi = 1;
  void clear_figi() ;
  const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_figi(Arg_&& arg, Args_... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string ticker = 2;
  void clear_ticker() ;
  const std::string& ticker() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ticker(Arg_&& arg, Args_... args);
  std::string* mutable_ticker();
  PROTOBUF_NODISCARD std::string* release_ticker();
  void set_allocated_ticker(std::string* value);

  private:
  const std::string& _internal_ticker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticker(
      const std::string& value);
  std::string* _internal_mutable_ticker();

  public:
  // string class_code = 3;
  void clear_class_code() ;
  const std::string& class_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_code(Arg_&& arg, Args_... args);
  std::string* mutable_class_code();
  PROTOBUF_NODISCARD std::string* release_class_code();
  void set_allocated_class_code(std::string* value);

  private:
  const std::string& _internal_class_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_code(
      const std::string& value);
  std::string* _internal_mutable_class_code();

  public:
  // string currency = 5;
  void clear_currency() ;
  const std::string& currency() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_currency(Arg_&& arg, Args_... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* value);

  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(
      const std::string& value);
  std::string* _internal_mutable_currency();

  public:
  // string name = 13;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string exchange = 14;
  void clear_exchange() ;
  const std::string& exchange() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange(Arg_&& arg, Args_... args);
  std::string* mutable_exchange();
  PROTOBUF_NODISCARD std::string* release_exchange();
  void set_allocated_exchange(std::string* value);

  private:
  const std::string& _internal_exchange() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange(
      const std::string& value);
  std::string* _internal_mutable_exchange();

  public:
  // string futures_type = 17;
  void clear_futures_type() ;
  const std::string& futures_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_futures_type(Arg_&& arg, Args_... args);
  std::string* mutable_futures_type();
  PROTOBUF_NODISCARD std::string* release_futures_type();
  void set_allocated_futures_type(std::string* value);

  private:
  const std::string& _internal_futures_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_futures_type(
      const std::string& value);
  std::string* _internal_mutable_futures_type();

  public:
  // string asset_type = 18;
  void clear_asset_type() ;
  const std::string& asset_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_asset_type(Arg_&& arg, Args_... args);
  std::string* mutable_asset_type();
  PROTOBUF_NODISCARD std::string* release_asset_type();
  void set_allocated_asset_type(std::string* value);

  private:
  const std::string& _internal_asset_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_type(
      const std::string& value);
  std::string* _internal_mutable_asset_type();

  public:
  // string basic_asset = 19;
  void clear_basic_asset() ;
  const std::string& basic_asset() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_basic_asset(Arg_&& arg, Args_... args);
  std::string* mutable_basic_asset();
  PROTOBUF_NODISCARD std::string* release_basic_asset();
  void set_allocated_basic_asset(std::string* value);

  private:
  const std::string& _internal_basic_asset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_basic_asset(
      const std::string& value);
  std::string* _internal_mutable_basic_asset();

  public:
  // string country_of_risk = 21;
  void clear_country_of_risk() ;
  const std::string& country_of_risk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_country_of_risk(Arg_&& arg, Args_... args);
  std::string* mutable_country_of_risk();
  PROTOBUF_NODISCARD std::string* release_country_of_risk();
  void set_allocated_country_of_risk(std::string* value);

  private:
  const std::string& _internal_country_of_risk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_of_risk(
      const std::string& value);
  std::string* _internal_mutable_country_of_risk();

  public:
  // string country_of_risk_name = 22;
  void clear_country_of_risk_name() ;
  const std::string& country_of_risk_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_country_of_risk_name(Arg_&& arg, Args_... args);
  std::string* mutable_country_of_risk_name();
  PROTOBUF_NODISCARD std::string* release_country_of_risk_name();
  void set_allocated_country_of_risk_name(std::string* value);

  private:
  const std::string& _internal_country_of_risk_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_of_risk_name(
      const std::string& value);
  std::string* _internal_mutable_country_of_risk_name();

  public:
  // string sector = 23;
  void clear_sector() ;
  const std::string& sector() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sector(Arg_&& arg, Args_... args);
  std::string* mutable_sector();
  PROTOBUF_NODISCARD std::string* release_sector();
  void set_allocated_sector(std::string* value);

  private:
  const std::string& _internal_sector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sector(
      const std::string& value);
  std::string* _internal_mutable_sector();

  public:
  // string uid = 31;
  void clear_uid() ;
  const std::string& uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uid(Arg_&& arg, Args_... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* value);

  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(
      const std::string& value);
  std::string* _internal_mutable_uid();

  public:
  // string position_uid = 33;
  void clear_position_uid() ;
  const std::string& position_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_position_uid(Arg_&& arg, Args_... args);
  std::string* mutable_position_uid();
  PROTOBUF_NODISCARD std::string* release_position_uid();
  void set_allocated_position_uid(std::string* value);

  private:
  const std::string& _internal_position_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_uid(
      const std::string& value);
  std::string* _internal_mutable_position_uid();

  public:
  // string basic_asset_position_uid = 34;
  void clear_basic_asset_position_uid() ;
  const std::string& basic_asset_position_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_basic_asset_position_uid(Arg_&& arg, Args_... args);
  std::string* mutable_basic_asset_position_uid();
  PROTOBUF_NODISCARD std::string* release_basic_asset_position_uid();
  void set_allocated_basic_asset_position_uid(std::string* value);

  private:
  const std::string& _internal_basic_asset_position_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_basic_asset_position_uid(
      const std::string& value);
  std::string* _internal_mutable_basic_asset_position_uid();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 6;
  bool has_klong() const;
  void clear_klong() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& klong() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_klong();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_klong();
  void set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_klong();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_klong() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_klong();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 7;
  bool has_kshort() const;
  void clear_kshort() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& kshort() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_kshort();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_kshort();
  void set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_kshort();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_kshort() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_kshort();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 8;
  bool has_dlong() const;
  void clear_dlong() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dlong();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dlong();
  void set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dlong();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dlong() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dlong();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 9;
  bool has_dshort() const;
  void clear_dshort() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dshort();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dshort();
  void set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dshort();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dshort() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dshort();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 10;
  bool has_dlong_min() const;
  void clear_dlong_min() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong_min() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dlong_min();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dlong_min();
  void set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dlong_min();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dlong_min() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dlong_min();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 11;
  bool has_dshort_min() const;
  void clear_dshort_min() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort_min() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dshort_min();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dshort_min();
  void set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dshort_min();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dshort_min() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dshort_min();

  public:
  // .google.protobuf.Timestamp first_trade_date = 15;
  bool has_first_trade_date() const;
  void clear_first_trade_date() ;
  const ::google::protobuf::Timestamp& first_trade_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_first_trade_date();
  ::google::protobuf::Timestamp* mutable_first_trade_date();
  void set_allocated_first_trade_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_first_trade_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_first_trade_date();

  private:
  const ::google::protobuf::Timestamp& _internal_first_trade_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_first_trade_date();

  public:
  // .google.protobuf.Timestamp last_trade_date = 16;
  bool has_last_trade_date() const;
  void clear_last_trade_date() ;
  const ::google::protobuf::Timestamp& last_trade_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_last_trade_date();
  ::google::protobuf::Timestamp* mutable_last_trade_date();
  void set_allocated_last_trade_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_last_trade_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_last_trade_date();

  private:
  const ::google::protobuf::Timestamp& _internal_last_trade_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_last_trade_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation basic_asset_size = 20;
  bool has_basic_asset_size() const;
  void clear_basic_asset_size() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& basic_asset_size() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_basic_asset_size();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_basic_asset_size();
  void set_allocated_basic_asset_size(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_basic_asset_size(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_basic_asset_size();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_basic_asset_size() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_basic_asset_size();

  public:
  // .google.protobuf.Timestamp expiration_date = 24;
  bool has_expiration_date() const;
  void clear_expiration_date() ;
  const ::google::protobuf::Timestamp& expiration_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_expiration_date();
  ::google::protobuf::Timestamp* mutable_expiration_date();
  void set_allocated_expiration_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_expiration_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_expiration_date();

  private:
  const ::google::protobuf::Timestamp& _internal_expiration_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_expiration_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 29;
  bool has_min_price_increment() const;
  void clear_min_price_increment() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_min_price_increment();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_min_price_increment();
  void set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_min_price_increment();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_min_price_increment() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_min_price_increment();

  public:
  // .google.protobuf.Timestamp first_1min_candle_date = 56;
  bool has_first_1min_candle_date() const;
  void clear_first_1min_candle_date() ;
  const ::google::protobuf::Timestamp& first_1min_candle_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_first_1min_candle_date();
  ::google::protobuf::Timestamp* mutable_first_1min_candle_date();
  void set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_first_1min_candle_date();

  private:
  const ::google::protobuf::Timestamp& _internal_first_1min_candle_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_first_1min_candle_date();

  public:
  // .google.protobuf.Timestamp first_1day_candle_date = 57;
  bool has_first_1day_candle_date() const;
  void clear_first_1day_candle_date() ;
  const ::google::protobuf::Timestamp& first_1day_candle_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_first_1day_candle_date();
  ::google::protobuf::Timestamp* mutable_first_1day_candle_date();
  void set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_first_1day_candle_date();

  private:
  const ::google::protobuf::Timestamp& _internal_first_1day_candle_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_first_1day_candle_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_buy = 61;
  bool has_initial_margin_on_buy() const;
  void clear_initial_margin_on_buy() ;
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_margin_on_buy() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_initial_margin_on_buy();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_initial_margin_on_buy();
  void set_allocated_initial_margin_on_buy(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  void unsafe_arena_set_allocated_initial_margin_on_buy(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_initial_margin_on_buy();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_initial_margin_on_buy() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_initial_margin_on_buy();

  public:
  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_sell = 62;
  bool has_initial_margin_on_sell() const;
  void clear_initial_margin_on_sell() ;
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_margin_on_sell() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_initial_margin_on_sell();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_initial_margin_on_sell();
  void set_allocated_initial_margin_on_sell(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  void unsafe_arena_set_allocated_initial_margin_on_sell(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_initial_margin_on_sell();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_initial_margin_on_sell() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_initial_margin_on_sell();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment_amount = 63;
  bool has_min_price_increment_amount() const;
  void clear_min_price_increment_amount() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment_amount() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_min_price_increment_amount();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_min_price_increment_amount();
  void set_allocated_min_price_increment_amount(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_min_price_increment_amount(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_min_price_increment_amount();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_min_price_increment_amount() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_min_price_increment_amount();

  public:
  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 64;
  bool has_brand() const;
  void clear_brand() ;
  const ::tinkoff::public_::invest::api::contract::v1::BrandData& brand() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::BrandData* release_brand();
  ::tinkoff::public_::invest::api::contract::v1::BrandData* mutable_brand();
  void set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value);
  void unsafe_arena_set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value);
  ::tinkoff::public_::invest::api::contract::v1::BrandData* unsafe_arena_release_brand();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::BrandData& _internal_brand() const;
  ::tinkoff::public_::invest::api::contract::v1::BrandData* _internal_mutable_brand();

  public:
  // int32 lot = 4;
  void clear_lot() ;
  ::int32_t lot() const;
  void set_lot(::int32_t value);

  private:
  ::int32_t _internal_lot() const;
  void _internal_set_lot(::int32_t value);

  public:
  // bool short_enabled_flag = 12;
  void clear_short_enabled_flag() ;
  bool short_enabled_flag() const;
  void set_short_enabled_flag(bool value);

  private:
  bool _internal_short_enabled_flag() const;
  void _internal_set_short_enabled_flag(bool value);

  public:
  // bool otc_flag = 26;
  void clear_otc_flag() ;
  bool otc_flag() const;
  void set_otc_flag(bool value);

  private:
  bool _internal_otc_flag() const;
  void _internal_set_otc_flag(bool value);

  public:
  // bool buy_available_flag = 27;
  void clear_buy_available_flag() ;
  bool buy_available_flag() const;
  void set_buy_available_flag(bool value);

  private:
  bool _internal_buy_available_flag() const;
  void _internal_set_buy_available_flag(bool value);

  public:
  // bool sell_available_flag = 28;
  void clear_sell_available_flag() ;
  bool sell_available_flag() const;
  void set_sell_available_flag(bool value);

  private:
  bool _internal_sell_available_flag() const;
  void _internal_set_sell_available_flag(bool value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
  void clear_trading_status() ;
  ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus trading_status() const;
  void set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus _internal_trading_status() const;
  void _internal_set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 32;
  void clear_real_exchange() ;
  ::tinkoff::public_::invest::api::contract::v1::RealExchange real_exchange() const;
  void set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::RealExchange _internal_real_exchange() const;
  void _internal_set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value);

  public:
  // bool api_trade_available_flag = 30;
  void clear_api_trade_available_flag() ;
  bool api_trade_available_flag() const;
  void set_api_trade_available_flag(bool value);

  private:
  bool _internal_api_trade_available_flag() const;
  void _internal_set_api_trade_available_flag(bool value);

  public:
  // bool for_iis_flag = 41;
  void clear_for_iis_flag() ;
  bool for_iis_flag() const;
  void set_for_iis_flag(bool value);

  private:
  bool _internal_for_iis_flag() const;
  void _internal_set_for_iis_flag(bool value);

  public:
  // bool for_qual_investor_flag = 42;
  void clear_for_qual_investor_flag() ;
  bool for_qual_investor_flag() const;
  void set_for_qual_investor_flag(bool value);

  private:
  bool _internal_for_qual_investor_flag() const;
  void _internal_set_for_qual_investor_flag(bool value);

  public:
  // bool weekend_flag = 43;
  void clear_weekend_flag() ;
  bool weekend_flag() const;
  void set_weekend_flag(bool value);

  private:
  bool _internal_weekend_flag() const;
  void _internal_set_weekend_flag(bool value);

  public:
  // bool blocked_tca_flag = 44;
  void clear_blocked_tca_flag() ;
  bool blocked_tca_flag() const;
  void set_blocked_tca_flag(bool value);

  private:
  bool _internal_blocked_tca_flag() const;
  void _internal_set_blocked_tca_flag(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.Future)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 44, 17,
      247, 9>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr ticker_;
    ::google::protobuf::internal::ArenaStringPtr class_code_;
    ::google::protobuf::internal::ArenaStringPtr currency_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr exchange_;
    ::google::protobuf::internal::ArenaStringPtr futures_type_;
    ::google::protobuf::internal::ArenaStringPtr asset_type_;
    ::google::protobuf::internal::ArenaStringPtr basic_asset_;
    ::google::protobuf::internal::ArenaStringPtr country_of_risk_;
    ::google::protobuf::internal::ArenaStringPtr country_of_risk_name_;
    ::google::protobuf::internal::ArenaStringPtr sector_;
    ::google::protobuf::internal::ArenaStringPtr uid_;
    ::google::protobuf::internal::ArenaStringPtr position_uid_;
    ::google::protobuf::internal::ArenaStringPtr basic_asset_position_uid_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* klong_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* kshort_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dlong_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dshort_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dlong_min_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dshort_min_;
    ::google::protobuf::Timestamp* first_trade_date_;
    ::google::protobuf::Timestamp* last_trade_date_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* basic_asset_size_;
    ::google::protobuf::Timestamp* expiration_date_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* min_price_increment_;
    ::google::protobuf::Timestamp* first_1min_candle_date_;
    ::google::protobuf::Timestamp* first_1day_candle_date_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_margin_on_buy_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_margin_on_sell_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* min_price_increment_amount_;
    ::tinkoff::public_::invest::api::contract::v1::BrandData* brand_;
    ::int32_t lot_;
    bool short_enabled_flag_;
    bool otc_flag_;
    bool buy_available_flag_;
    bool sell_available_flag_;
    int trading_status_;
    int real_exchange_;
    bool api_trade_available_flag_;
    bool for_iis_flag_;
    bool for_qual_investor_flag_;
    bool weekend_flag_;
    bool blocked_tca_flag_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class Etf final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.Etf) */ {
 public:
  inline Etf() : Etf(nullptr) {}
  ~Etf() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Etf(::google::protobuf::internal::ConstantInitialized);

  inline Etf(const Etf& from)
      : Etf(nullptr, from) {}
  Etf(Etf&& from) noexcept
    : Etf() {
    *this = ::std::move(from);
  }

  inline Etf& operator=(const Etf& from) {
    CopyFrom(from);
    return *this;
  }
  inline Etf& operator=(Etf&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Etf& default_instance() {
    return *internal_default_instance();
  }
  static inline const Etf* internal_default_instance() {
    return reinterpret_cast<const Etf*>(
               &_Etf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Etf& a, Etf& b) {
    a.Swap(&b);
  }
  inline void Swap(Etf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Etf* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Etf* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Etf>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Etf& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Etf& from) {
    Etf::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Etf* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.Etf";
  }
  protected:
  explicit Etf(::google::protobuf::Arena* arena);
  Etf(::google::protobuf::Arena* arena, const Etf& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFigiFieldNumber = 1,
    kTickerFieldNumber = 2,
    kClassCodeFieldNumber = 3,
    kIsinFieldNumber = 4,
    kCurrencyFieldNumber = 6,
    kNameFieldNumber = 15,
    kExchangeFieldNumber = 16,
    kFocusTypeFieldNumber = 18,
    kCountryOfRiskFieldNumber = 21,
    kCountryOfRiskNameFieldNumber = 22,
    kSectorFieldNumber = 23,
    kRebalancingFreqFieldNumber = 24,
    kUidFieldNumber = 31,
    kPositionUidFieldNumber = 33,
    kAssetUidFieldNumber = 34,
    kKlongFieldNumber = 7,
    kKshortFieldNumber = 8,
    kDlongFieldNumber = 9,
    kDshortFieldNumber = 10,
    kDlongMinFieldNumber = 11,
    kDshortMinFieldNumber = 12,
    kFixedCommissionFieldNumber = 17,
    kReleasedDateFieldNumber = 19,
    kNumSharesFieldNumber = 20,
    kMinPriceIncrementFieldNumber = 29,
    kFirst1MinCandleDateFieldNumber = 56,
    kFirst1DayCandleDateFieldNumber = 57,
    kBrandFieldNumber = 60,
    kLotFieldNumber = 5,
    kShortEnabledFlagFieldNumber = 13,
    kOtcFlagFieldNumber = 26,
    kBuyAvailableFlagFieldNumber = 27,
    kSellAvailableFlagFieldNumber = 28,
    kTradingStatusFieldNumber = 25,
    kRealExchangeFieldNumber = 32,
    kApiTradeAvailableFlagFieldNumber = 30,
    kForIisFlagFieldNumber = 41,
    kForQualInvestorFlagFieldNumber = 42,
    kWeekendFlagFieldNumber = 43,
    kBlockedTcaFlagFieldNumber = 44,
    kLiquidityFlagFieldNumber = 45,
  };
  // string figi = 1;
  void clear_figi() ;
  const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_figi(Arg_&& arg, Args_... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string ticker = 2;
  void clear_ticker() ;
  const std::string& ticker() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ticker(Arg_&& arg, Args_... args);
  std::string* mutable_ticker();
  PROTOBUF_NODISCARD std::string* release_ticker();
  void set_allocated_ticker(std::string* value);

  private:
  const std::string& _internal_ticker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticker(
      const std::string& value);
  std::string* _internal_mutable_ticker();

  public:
  // string class_code = 3;
  void clear_class_code() ;
  const std::string& class_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_code(Arg_&& arg, Args_... args);
  std::string* mutable_class_code();
  PROTOBUF_NODISCARD std::string* release_class_code();
  void set_allocated_class_code(std::string* value);

  private:
  const std::string& _internal_class_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_code(
      const std::string& value);
  std::string* _internal_mutable_class_code();

  public:
  // string isin = 4;
  void clear_isin() ;
  const std::string& isin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_isin(Arg_&& arg, Args_... args);
  std::string* mutable_isin();
  PROTOBUF_NODISCARD std::string* release_isin();
  void set_allocated_isin(std::string* value);

  private:
  const std::string& _internal_isin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_isin(
      const std::string& value);
  std::string* _internal_mutable_isin();

  public:
  // string currency = 6;
  void clear_currency() ;
  const std::string& currency() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_currency(Arg_&& arg, Args_... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* value);

  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(
      const std::string& value);
  std::string* _internal_mutable_currency();

  public:
  // string name = 15;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string exchange = 16;
  void clear_exchange() ;
  const std::string& exchange() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange(Arg_&& arg, Args_... args);
  std::string* mutable_exchange();
  PROTOBUF_NODISCARD std::string* release_exchange();
  void set_allocated_exchange(std::string* value);

  private:
  const std::string& _internal_exchange() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange(
      const std::string& value);
  std::string* _internal_mutable_exchange();

  public:
  // string focus_type = 18;
  void clear_focus_type() ;
  const std::string& focus_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_focus_type(Arg_&& arg, Args_... args);
  std::string* mutable_focus_type();
  PROTOBUF_NODISCARD std::string* release_focus_type();
  void set_allocated_focus_type(std::string* value);

  private:
  const std::string& _internal_focus_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_focus_type(
      const std::string& value);
  std::string* _internal_mutable_focus_type();

  public:
  // string country_of_risk = 21;
  void clear_country_of_risk() ;
  const std::string& country_of_risk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_country_of_risk(Arg_&& arg, Args_... args);
  std::string* mutable_country_of_risk();
  PROTOBUF_NODISCARD std::string* release_country_of_risk();
  void set_allocated_country_of_risk(std::string* value);

  private:
  const std::string& _internal_country_of_risk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_of_risk(
      const std::string& value);
  std::string* _internal_mutable_country_of_risk();

  public:
  // string country_of_risk_name = 22;
  void clear_country_of_risk_name() ;
  const std::string& country_of_risk_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_country_of_risk_name(Arg_&& arg, Args_... args);
  std::string* mutable_country_of_risk_name();
  PROTOBUF_NODISCARD std::string* release_country_of_risk_name();
  void set_allocated_country_of_risk_name(std::string* value);

  private:
  const std::string& _internal_country_of_risk_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_of_risk_name(
      const std::string& value);
  std::string* _internal_mutable_country_of_risk_name();

  public:
  // string sector = 23;
  void clear_sector() ;
  const std::string& sector() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sector(Arg_&& arg, Args_... args);
  std::string* mutable_sector();
  PROTOBUF_NODISCARD std::string* release_sector();
  void set_allocated_sector(std::string* value);

  private:
  const std::string& _internal_sector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sector(
      const std::string& value);
  std::string* _internal_mutable_sector();

  public:
  // string rebalancing_freq = 24;
  void clear_rebalancing_freq() ;
  const std::string& rebalancing_freq() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rebalancing_freq(Arg_&& arg, Args_... args);
  std::string* mutable_rebalancing_freq();
  PROTOBUF_NODISCARD std::string* release_rebalancing_freq();
  void set_allocated_rebalancing_freq(std::string* value);

  private:
  const std::string& _internal_rebalancing_freq() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rebalancing_freq(
      const std::string& value);
  std::string* _internal_mutable_rebalancing_freq();

  public:
  // string uid = 31;
  void clear_uid() ;
  const std::string& uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uid(Arg_&& arg, Args_... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* value);

  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(
      const std::string& value);
  std::string* _internal_mutable_uid();

  public:
  // string position_uid = 33;
  void clear_position_uid() ;
  const std::string& position_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_position_uid(Arg_&& arg, Args_... args);
  std::string* mutable_position_uid();
  PROTOBUF_NODISCARD std::string* release_position_uid();
  void set_allocated_position_uid(std::string* value);

  private:
  const std::string& _internal_position_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_uid(
      const std::string& value);
  std::string* _internal_mutable_position_uid();

  public:
  // string asset_uid = 34;
  void clear_asset_uid() ;
  const std::string& asset_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_asset_uid(Arg_&& arg, Args_... args);
  std::string* mutable_asset_uid();
  PROTOBUF_NODISCARD std::string* release_asset_uid();
  void set_allocated_asset_uid(std::string* value);

  private:
  const std::string& _internal_asset_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_uid(
      const std::string& value);
  std::string* _internal_mutable_asset_uid();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
  bool has_klong() const;
  void clear_klong() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& klong() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_klong();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_klong();
  void set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_klong();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_klong() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_klong();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
  bool has_kshort() const;
  void clear_kshort() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& kshort() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_kshort();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_kshort();
  void set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_kshort();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_kshort() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_kshort();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
  bool has_dlong() const;
  void clear_dlong() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dlong();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dlong();
  void set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dlong();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dlong() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dlong();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
  bool has_dshort() const;
  void clear_dshort() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dshort();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dshort();
  void set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dshort();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dshort() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dshort();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
  bool has_dlong_min() const;
  void clear_dlong_min() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong_min() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dlong_min();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dlong_min();
  void set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dlong_min();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dlong_min() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dlong_min();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
  bool has_dshort_min() const;
  void clear_dshort_min() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort_min() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dshort_min();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dshort_min();
  void set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dshort_min();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dshort_min() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dshort_min();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation fixed_commission = 17;
  bool has_fixed_commission() const;
  void clear_fixed_commission() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& fixed_commission() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_fixed_commission();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_fixed_commission();
  void set_allocated_fixed_commission(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_fixed_commission(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_fixed_commission();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_fixed_commission() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_fixed_commission();

  public:
  // .google.protobuf.Timestamp released_date = 19;
  bool has_released_date() const;
  void clear_released_date() ;
  const ::google::protobuf::Timestamp& released_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_released_date();
  ::google::protobuf::Timestamp* mutable_released_date();
  void set_allocated_released_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_released_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_released_date();

  private:
  const ::google::protobuf::Timestamp& _internal_released_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_released_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation num_shares = 20;
  bool has_num_shares() const;
  void clear_num_shares() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& num_shares() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_num_shares();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_num_shares();
  void set_allocated_num_shares(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_num_shares(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_num_shares();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_num_shares() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_num_shares();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 29;
  bool has_min_price_increment() const;
  void clear_min_price_increment() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_min_price_increment();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_min_price_increment();
  void set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_min_price_increment();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_min_price_increment() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_min_price_increment();

  public:
  // .google.protobuf.Timestamp first_1min_candle_date = 56;
  bool has_first_1min_candle_date() const;
  void clear_first_1min_candle_date() ;
  const ::google::protobuf::Timestamp& first_1min_candle_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_first_1min_candle_date();
  ::google::protobuf::Timestamp* mutable_first_1min_candle_date();
  void set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_first_1min_candle_date();

  private:
  const ::google::protobuf::Timestamp& _internal_first_1min_candle_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_first_1min_candle_date();

  public:
  // .google.protobuf.Timestamp first_1day_candle_date = 57;
  bool has_first_1day_candle_date() const;
  void clear_first_1day_candle_date() ;
  const ::google::protobuf::Timestamp& first_1day_candle_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_first_1day_candle_date();
  ::google::protobuf::Timestamp* mutable_first_1day_candle_date();
  void set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_first_1day_candle_date();

  private:
  const ::google::protobuf::Timestamp& _internal_first_1day_candle_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_first_1day_candle_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
  bool has_brand() const;
  void clear_brand() ;
  const ::tinkoff::public_::invest::api::contract::v1::BrandData& brand() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::BrandData* release_brand();
  ::tinkoff::public_::invest::api::contract::v1::BrandData* mutable_brand();
  void set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value);
  void unsafe_arena_set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value);
  ::tinkoff::public_::invest::api::contract::v1::BrandData* unsafe_arena_release_brand();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::BrandData& _internal_brand() const;
  ::tinkoff::public_::invest::api::contract::v1::BrandData* _internal_mutable_brand();

  public:
  // int32 lot = 5;
  void clear_lot() ;
  ::int32_t lot() const;
  void set_lot(::int32_t value);

  private:
  ::int32_t _internal_lot() const;
  void _internal_set_lot(::int32_t value);

  public:
  // bool short_enabled_flag = 13;
  void clear_short_enabled_flag() ;
  bool short_enabled_flag() const;
  void set_short_enabled_flag(bool value);

  private:
  bool _internal_short_enabled_flag() const;
  void _internal_set_short_enabled_flag(bool value);

  public:
  // bool otc_flag = 26;
  void clear_otc_flag() ;
  bool otc_flag() const;
  void set_otc_flag(bool value);

  private:
  bool _internal_otc_flag() const;
  void _internal_set_otc_flag(bool value);

  public:
  // bool buy_available_flag = 27;
  void clear_buy_available_flag() ;
  bool buy_available_flag() const;
  void set_buy_available_flag(bool value);

  private:
  bool _internal_buy_available_flag() const;
  void _internal_set_buy_available_flag(bool value);

  public:
  // bool sell_available_flag = 28;
  void clear_sell_available_flag() ;
  bool sell_available_flag() const;
  void set_sell_available_flag(bool value);

  private:
  bool _internal_sell_available_flag() const;
  void _internal_set_sell_available_flag(bool value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
  void clear_trading_status() ;
  ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus trading_status() const;
  void set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus _internal_trading_status() const;
  void _internal_set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 32;
  void clear_real_exchange() ;
  ::tinkoff::public_::invest::api::contract::v1::RealExchange real_exchange() const;
  void set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::RealExchange _internal_real_exchange() const;
  void _internal_set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value);

  public:
  // bool api_trade_available_flag = 30;
  void clear_api_trade_available_flag() ;
  bool api_trade_available_flag() const;
  void set_api_trade_available_flag(bool value);

  private:
  bool _internal_api_trade_available_flag() const;
  void _internal_set_api_trade_available_flag(bool value);

  public:
  // bool for_iis_flag = 41;
  void clear_for_iis_flag() ;
  bool for_iis_flag() const;
  void set_for_iis_flag(bool value);

  private:
  bool _internal_for_iis_flag() const;
  void _internal_set_for_iis_flag(bool value);

  public:
  // bool for_qual_investor_flag = 42;
  void clear_for_qual_investor_flag() ;
  bool for_qual_investor_flag() const;
  void set_for_qual_investor_flag(bool value);

  private:
  bool _internal_for_qual_investor_flag() const;
  void _internal_set_for_qual_investor_flag(bool value);

  public:
  // bool weekend_flag = 43;
  void clear_weekend_flag() ;
  bool weekend_flag() const;
  void set_weekend_flag(bool value);

  private:
  bool _internal_weekend_flag() const;
  void _internal_set_weekend_flag(bool value);

  public:
  // bool blocked_tca_flag = 44;
  void clear_blocked_tca_flag() ;
  bool blocked_tca_flag() const;
  void set_blocked_tca_flag(bool value);

  private:
  bool _internal_blocked_tca_flag() const;
  void _internal_set_blocked_tca_flag(bool value);

  public:
  // bool liquidity_flag = 45;
  void clear_liquidity_flag() ;
  bool liquidity_flag() const;
  void set_liquidity_flag(bool value);

  private:
  bool _internal_liquidity_flag() const;
  void _internal_set_liquidity_flag(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.Etf)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 41, 13,
      226, 9>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr ticker_;
    ::google::protobuf::internal::ArenaStringPtr class_code_;
    ::google::protobuf::internal::ArenaStringPtr isin_;
    ::google::protobuf::internal::ArenaStringPtr currency_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr exchange_;
    ::google::protobuf::internal::ArenaStringPtr focus_type_;
    ::google::protobuf::internal::ArenaStringPtr country_of_risk_;
    ::google::protobuf::internal::ArenaStringPtr country_of_risk_name_;
    ::google::protobuf::internal::ArenaStringPtr sector_;
    ::google::protobuf::internal::ArenaStringPtr rebalancing_freq_;
    ::google::protobuf::internal::ArenaStringPtr uid_;
    ::google::protobuf::internal::ArenaStringPtr position_uid_;
    ::google::protobuf::internal::ArenaStringPtr asset_uid_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* klong_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* kshort_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dlong_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dshort_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dlong_min_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dshort_min_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* fixed_commission_;
    ::google::protobuf::Timestamp* released_date_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* num_shares_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* min_price_increment_;
    ::google::protobuf::Timestamp* first_1min_candle_date_;
    ::google::protobuf::Timestamp* first_1day_candle_date_;
    ::tinkoff::public_::invest::api::contract::v1::BrandData* brand_;
    ::int32_t lot_;
    bool short_enabled_flag_;
    bool otc_flag_;
    bool buy_available_flag_;
    bool sell_available_flag_;
    int trading_status_;
    int real_exchange_;
    bool api_trade_available_flag_;
    bool for_iis_flag_;
    bool for_qual_investor_flag_;
    bool weekend_flag_;
    bool blocked_tca_flag_;
    bool liquidity_flag_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class EditFavoritesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse) */ {
 public:
  inline EditFavoritesResponse() : EditFavoritesResponse(nullptr) {}
  ~EditFavoritesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EditFavoritesResponse(::google::protobuf::internal::ConstantInitialized);

  inline EditFavoritesResponse(const EditFavoritesResponse& from)
      : EditFavoritesResponse(nullptr, from) {}
  EditFavoritesResponse(EditFavoritesResponse&& from) noexcept
    : EditFavoritesResponse() {
    *this = ::std::move(from);
  }

  inline EditFavoritesResponse& operator=(const EditFavoritesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EditFavoritesResponse& operator=(EditFavoritesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EditFavoritesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EditFavoritesResponse* internal_default_instance() {
    return reinterpret_cast<const EditFavoritesResponse*>(
               &_EditFavoritesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(EditFavoritesResponse& a, EditFavoritesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EditFavoritesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EditFavoritesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EditFavoritesResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EditFavoritesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EditFavoritesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EditFavoritesResponse& from) {
    EditFavoritesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EditFavoritesResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse";
  }
  protected:
  explicit EditFavoritesResponse(::google::protobuf::Arena* arena);
  EditFavoritesResponse(::google::protobuf::Arena* arena, const EditFavoritesResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFavoriteInstrumentsFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
  int favorite_instruments_size() const;
  private:
  int _internal_favorite_instruments_size() const;

  public:
  void clear_favorite_instruments() ;
  ::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument* mutable_favorite_instruments(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument >*
      mutable_favorite_instruments();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument>& _internal_favorite_instruments() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument>* _internal_mutable_favorite_instruments();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument& favorite_instruments(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument* add_favorite_instruments();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument >&
      favorite_instruments() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument > favorite_instruments_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class EditFavoritesRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest) */ {
 public:
  inline EditFavoritesRequest() : EditFavoritesRequest(nullptr) {}
  ~EditFavoritesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EditFavoritesRequest(::google::protobuf::internal::ConstantInitialized);

  inline EditFavoritesRequest(const EditFavoritesRequest& from)
      : EditFavoritesRequest(nullptr, from) {}
  EditFavoritesRequest(EditFavoritesRequest&& from) noexcept
    : EditFavoritesRequest() {
    *this = ::std::move(from);
  }

  inline EditFavoritesRequest& operator=(const EditFavoritesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EditFavoritesRequest& operator=(EditFavoritesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EditFavoritesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EditFavoritesRequest* internal_default_instance() {
    return reinterpret_cast<const EditFavoritesRequest*>(
               &_EditFavoritesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(EditFavoritesRequest& a, EditFavoritesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EditFavoritesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EditFavoritesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EditFavoritesRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EditFavoritesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EditFavoritesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EditFavoritesRequest& from) {
    EditFavoritesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EditFavoritesRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest";
  }
  protected:
  explicit EditFavoritesRequest(::google::protobuf::Arena* arena);
  EditFavoritesRequest(::google::protobuf::Arena* arena, const EditFavoritesRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentsFieldNumber = 1,
    kActionTypeFieldNumber = 6,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument instruments = 1 [(.google.api.field_behavior) = REQUIRED];
  int instruments_size() const;
  private:
  int _internal_instruments_size() const;

  public:
  void clear_instruments() ;
  ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument* mutable_instruments(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument >*
      mutable_instruments();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument>& _internal_instruments() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument>* _internal_mutable_instruments();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument& instruments(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument* add_instruments();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument >&
      instruments() const;
  // .tinkoff.public_.invest.api.contract.v1.EditFavoritesActionType action_type = 6 [(.google.api.field_behavior) = REQUIRED];
  void clear_action_type() ;
  ::tinkoff::public_::invest::api::contract::v1::EditFavoritesActionType action_type() const;
  void set_action_type(::tinkoff::public_::invest::api::contract::v1::EditFavoritesActionType value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::EditFavoritesActionType _internal_action_type() const;
  void _internal_set_action_type(::tinkoff::public_::invest::api::contract::v1::EditFavoritesActionType value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument > instruments_;
    int action_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class Dividend final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.Dividend) */ {
 public:
  inline Dividend() : Dividend(nullptr) {}
  ~Dividend() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Dividend(::google::protobuf::internal::ConstantInitialized);

  inline Dividend(const Dividend& from)
      : Dividend(nullptr, from) {}
  Dividend(Dividend&& from) noexcept
    : Dividend() {
    *this = ::std::move(from);
  }

  inline Dividend& operator=(const Dividend& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dividend& operator=(Dividend&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Dividend& default_instance() {
    return *internal_default_instance();
  }
  static inline const Dividend* internal_default_instance() {
    return reinterpret_cast<const Dividend*>(
               &_Dividend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(Dividend& a, Dividend& b) {
    a.Swap(&b);
  }
  inline void Swap(Dividend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dividend* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Dividend* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Dividend>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Dividend& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Dividend& from) {
    Dividend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Dividend* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.Dividend";
  }
  protected:
  explicit Dividend(::google::protobuf::Arena* arena);
  Dividend(::google::protobuf::Arena* arena, const Dividend& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDividendTypeFieldNumber = 5,
    kRegularityFieldNumber = 7,
    kDividendNetFieldNumber = 1,
    kPaymentDateFieldNumber = 2,
    kDeclaredDateFieldNumber = 3,
    kLastBuyDateFieldNumber = 4,
    kRecordDateFieldNumber = 6,
    kClosePriceFieldNumber = 8,
    kYieldValueFieldNumber = 9,
    kCreatedAtFieldNumber = 10,
  };
  // string dividend_type = 5;
  void clear_dividend_type() ;
  const std::string& dividend_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dividend_type(Arg_&& arg, Args_... args);
  std::string* mutable_dividend_type();
  PROTOBUF_NODISCARD std::string* release_dividend_type();
  void set_allocated_dividend_type(std::string* value);

  private:
  const std::string& _internal_dividend_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dividend_type(
      const std::string& value);
  std::string* _internal_mutable_dividend_type();

  public:
  // string regularity = 7;
  void clear_regularity() ;
  const std::string& regularity() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_regularity(Arg_&& arg, Args_... args);
  std::string* mutable_regularity();
  PROTOBUF_NODISCARD std::string* release_regularity();
  void set_allocated_regularity(std::string* value);

  private:
  const std::string& _internal_regularity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_regularity(
      const std::string& value);
  std::string* _internal_mutable_regularity();

  public:
  // .tinkoff.public_.invest.api.contract.v1.MoneyValue dividend_net = 1;
  bool has_dividend_net() const;
  void clear_dividend_net() ;
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& dividend_net() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_dividend_net();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_dividend_net();
  void set_allocated_dividend_net(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  void unsafe_arena_set_allocated_dividend_net(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_dividend_net();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_dividend_net() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_dividend_net();

  public:
  // .google.protobuf.Timestamp payment_date = 2;
  bool has_payment_date() const;
  void clear_payment_date() ;
  const ::google::protobuf::Timestamp& payment_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_payment_date();
  ::google::protobuf::Timestamp* mutable_payment_date();
  void set_allocated_payment_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_payment_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_payment_date();

  private:
  const ::google::protobuf::Timestamp& _internal_payment_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_payment_date();

  public:
  // .google.protobuf.Timestamp declared_date = 3;
  bool has_declared_date() const;
  void clear_declared_date() ;
  const ::google::protobuf::Timestamp& declared_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_declared_date();
  ::google::protobuf::Timestamp* mutable_declared_date();
  void set_allocated_declared_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_declared_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_declared_date();

  private:
  const ::google::protobuf::Timestamp& _internal_declared_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_declared_date();

  public:
  // .google.protobuf.Timestamp last_buy_date = 4;
  bool has_last_buy_date() const;
  void clear_last_buy_date() ;
  const ::google::protobuf::Timestamp& last_buy_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_last_buy_date();
  ::google::protobuf::Timestamp* mutable_last_buy_date();
  void set_allocated_last_buy_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_last_buy_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_last_buy_date();

  private:
  const ::google::protobuf::Timestamp& _internal_last_buy_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_last_buy_date();

  public:
  // .google.protobuf.Timestamp record_date = 6;
  bool has_record_date() const;
  void clear_record_date() ;
  const ::google::protobuf::Timestamp& record_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_record_date();
  ::google::protobuf::Timestamp* mutable_record_date();
  void set_allocated_record_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_record_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_record_date();

  private:
  const ::google::protobuf::Timestamp& _internal_record_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_record_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.MoneyValue close_price = 8;
  bool has_close_price() const;
  void clear_close_price() ;
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& close_price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_close_price();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_close_price();
  void set_allocated_close_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  void unsafe_arena_set_allocated_close_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_close_price();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_close_price() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_close_price();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation yield_value = 9;
  bool has_yield_value() const;
  void clear_yield_value() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& yield_value() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_yield_value();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_yield_value();
  void set_allocated_yield_value(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_yield_value(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_yield_value();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_yield_value() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_yield_value();

  public:
  // .google.protobuf.Timestamp created_at = 10;
  bool has_created_at() const;
  void clear_created_at() ;
  const ::google::protobuf::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_created_at();
  ::google::protobuf::Timestamp* mutable_created_at();
  void set_allocated_created_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_created_at();

  private:
  const ::google::protobuf::Timestamp& _internal_created_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_created_at();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.Dividend)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 8,
      87, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr dividend_type_;
    ::google::protobuf::internal::ArenaStringPtr regularity_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* dividend_net_;
    ::google::protobuf::Timestamp* payment_date_;
    ::google::protobuf::Timestamp* declared_date_;
    ::google::protobuf::Timestamp* last_buy_date_;
    ::google::protobuf::Timestamp* record_date_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* close_price_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* yield_value_;
    ::google::protobuf::Timestamp* created_at_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class Currency final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.Currency) */ {
 public:
  inline Currency() : Currency(nullptr) {}
  ~Currency() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Currency(::google::protobuf::internal::ConstantInitialized);

  inline Currency(const Currency& from)
      : Currency(nullptr, from) {}
  Currency(Currency&& from) noexcept
    : Currency() {
    *this = ::std::move(from);
  }

  inline Currency& operator=(const Currency& from) {
    CopyFrom(from);
    return *this;
  }
  inline Currency& operator=(Currency&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Currency& default_instance() {
    return *internal_default_instance();
  }
  static inline const Currency* internal_default_instance() {
    return reinterpret_cast<const Currency*>(
               &_Currency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Currency& a, Currency& b) {
    a.Swap(&b);
  }
  inline void Swap(Currency* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Currency* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Currency* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Currency>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Currency& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Currency& from) {
    Currency::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Currency* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.Currency";
  }
  protected:
  explicit Currency(::google::protobuf::Arena* arena);
  Currency(::google::protobuf::Arena* arena, const Currency& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFigiFieldNumber = 1,
    kTickerFieldNumber = 2,
    kClassCodeFieldNumber = 3,
    kIsinFieldNumber = 4,
    kCurrencyFieldNumber = 6,
    kNameFieldNumber = 15,
    kExchangeFieldNumber = 16,
    kCountryOfRiskFieldNumber = 18,
    kCountryOfRiskNameFieldNumber = 19,
    kIsoCurrencyNameFieldNumber = 24,
    kUidFieldNumber = 27,
    kPositionUidFieldNumber = 29,
    kKlongFieldNumber = 7,
    kKshortFieldNumber = 8,
    kDlongFieldNumber = 9,
    kDshortFieldNumber = 10,
    kDlongMinFieldNumber = 11,
    kDshortMinFieldNumber = 12,
    kNominalFieldNumber = 17,
    kMinPriceIncrementFieldNumber = 25,
    kFirst1MinCandleDateFieldNumber = 56,
    kFirst1DayCandleDateFieldNumber = 57,
    kBrandFieldNumber = 60,
    kLotFieldNumber = 5,
    kShortEnabledFlagFieldNumber = 13,
    kOtcFlagFieldNumber = 21,
    kBuyAvailableFlagFieldNumber = 22,
    kSellAvailableFlagFieldNumber = 23,
    kTradingStatusFieldNumber = 20,
    kRealExchangeFieldNumber = 28,
    kApiTradeAvailableFlagFieldNumber = 26,
    kForIisFlagFieldNumber = 41,
    kForQualInvestorFlagFieldNumber = 52,
    kWeekendFlagFieldNumber = 53,
    kBlockedTcaFlagFieldNumber = 54,
  };
  // string figi = 1;
  void clear_figi() ;
  const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_figi(Arg_&& arg, Args_... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string ticker = 2;
  void clear_ticker() ;
  const std::string& ticker() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ticker(Arg_&& arg, Args_... args);
  std::string* mutable_ticker();
  PROTOBUF_NODISCARD std::string* release_ticker();
  void set_allocated_ticker(std::string* value);

  private:
  const std::string& _internal_ticker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticker(
      const std::string& value);
  std::string* _internal_mutable_ticker();

  public:
  // string class_code = 3;
  void clear_class_code() ;
  const std::string& class_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_code(Arg_&& arg, Args_... args);
  std::string* mutable_class_code();
  PROTOBUF_NODISCARD std::string* release_class_code();
  void set_allocated_class_code(std::string* value);

  private:
  const std::string& _internal_class_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_code(
      const std::string& value);
  std::string* _internal_mutable_class_code();

  public:
  // string isin = 4;
  void clear_isin() ;
  const std::string& isin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_isin(Arg_&& arg, Args_... args);
  std::string* mutable_isin();
  PROTOBUF_NODISCARD std::string* release_isin();
  void set_allocated_isin(std::string* value);

  private:
  const std::string& _internal_isin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_isin(
      const std::string& value);
  std::string* _internal_mutable_isin();

  public:
  // string currency = 6;
  void clear_currency() ;
  const std::string& currency() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_currency(Arg_&& arg, Args_... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* value);

  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(
      const std::string& value);
  std::string* _internal_mutable_currency();

  public:
  // string name = 15;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string exchange = 16;
  void clear_exchange() ;
  const std::string& exchange() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange(Arg_&& arg, Args_... args);
  std::string* mutable_exchange();
  PROTOBUF_NODISCARD std::string* release_exchange();
  void set_allocated_exchange(std::string* value);

  private:
  const std::string& _internal_exchange() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange(
      const std::string& value);
  std::string* _internal_mutable_exchange();

  public:
  // string country_of_risk = 18;
  void clear_country_of_risk() ;
  const std::string& country_of_risk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_country_of_risk(Arg_&& arg, Args_... args);
  std::string* mutable_country_of_risk();
  PROTOBUF_NODISCARD std::string* release_country_of_risk();
  void set_allocated_country_of_risk(std::string* value);

  private:
  const std::string& _internal_country_of_risk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_of_risk(
      const std::string& value);
  std::string* _internal_mutable_country_of_risk();

  public:
  // string country_of_risk_name = 19;
  void clear_country_of_risk_name() ;
  const std::string& country_of_risk_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_country_of_risk_name(Arg_&& arg, Args_... args);
  std::string* mutable_country_of_risk_name();
  PROTOBUF_NODISCARD std::string* release_country_of_risk_name();
  void set_allocated_country_of_risk_name(std::string* value);

  private:
  const std::string& _internal_country_of_risk_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_of_risk_name(
      const std::string& value);
  std::string* _internal_mutable_country_of_risk_name();

  public:
  // string iso_currency_name = 24;
  void clear_iso_currency_name() ;
  const std::string& iso_currency_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_iso_currency_name(Arg_&& arg, Args_... args);
  std::string* mutable_iso_currency_name();
  PROTOBUF_NODISCARD std::string* release_iso_currency_name();
  void set_allocated_iso_currency_name(std::string* value);

  private:
  const std::string& _internal_iso_currency_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_iso_currency_name(
      const std::string& value);
  std::string* _internal_mutable_iso_currency_name();

  public:
  // string uid = 27;
  void clear_uid() ;
  const std::string& uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uid(Arg_&& arg, Args_... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* value);

  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(
      const std::string& value);
  std::string* _internal_mutable_uid();

  public:
  // string position_uid = 29;
  void clear_position_uid() ;
  const std::string& position_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_position_uid(Arg_&& arg, Args_... args);
  std::string* mutable_position_uid();
  PROTOBUF_NODISCARD std::string* release_position_uid();
  void set_allocated_position_uid(std::string* value);

  private:
  const std::string& _internal_position_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_uid(
      const std::string& value);
  std::string* _internal_mutable_position_uid();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
  bool has_klong() const;
  void clear_klong() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& klong() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_klong();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_klong();
  void set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_klong();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_klong() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_klong();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
  bool has_kshort() const;
  void clear_kshort() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& kshort() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_kshort();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_kshort();
  void set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_kshort();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_kshort() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_kshort();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
  bool has_dlong() const;
  void clear_dlong() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dlong();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dlong();
  void set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dlong();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dlong() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dlong();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
  bool has_dshort() const;
  void clear_dshort() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dshort();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dshort();
  void set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dshort();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dshort() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dshort();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
  bool has_dlong_min() const;
  void clear_dlong_min() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong_min() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dlong_min();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dlong_min();
  void set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dlong_min();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dlong_min() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dlong_min();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
  bool has_dshort_min() const;
  void clear_dshort_min() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort_min() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dshort_min();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dshort_min();
  void set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dshort_min();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dshort_min() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dshort_min();

  public:
  // .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 17;
  bool has_nominal() const;
  void clear_nominal() ;
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& nominal() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_nominal();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_nominal();
  void set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  void unsafe_arena_set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_nominal();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_nominal() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_nominal();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 25;
  bool has_min_price_increment() const;
  void clear_min_price_increment() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_min_price_increment();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_min_price_increment();
  void set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_min_price_increment();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_min_price_increment() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_min_price_increment();

  public:
  // .google.protobuf.Timestamp first_1min_candle_date = 56;
  bool has_first_1min_candle_date() const;
  void clear_first_1min_candle_date() ;
  const ::google::protobuf::Timestamp& first_1min_candle_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_first_1min_candle_date();
  ::google::protobuf::Timestamp* mutable_first_1min_candle_date();
  void set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_first_1min_candle_date();

  private:
  const ::google::protobuf::Timestamp& _internal_first_1min_candle_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_first_1min_candle_date();

  public:
  // .google.protobuf.Timestamp first_1day_candle_date = 57;
  bool has_first_1day_candle_date() const;
  void clear_first_1day_candle_date() ;
  const ::google::protobuf::Timestamp& first_1day_candle_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_first_1day_candle_date();
  ::google::protobuf::Timestamp* mutable_first_1day_candle_date();
  void set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_first_1day_candle_date();

  private:
  const ::google::protobuf::Timestamp& _internal_first_1day_candle_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_first_1day_candle_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
  bool has_brand() const;
  void clear_brand() ;
  const ::tinkoff::public_::invest::api::contract::v1::BrandData& brand() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::BrandData* release_brand();
  ::tinkoff::public_::invest::api::contract::v1::BrandData* mutable_brand();
  void set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value);
  void unsafe_arena_set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value);
  ::tinkoff::public_::invest::api::contract::v1::BrandData* unsafe_arena_release_brand();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::BrandData& _internal_brand() const;
  ::tinkoff::public_::invest::api::contract::v1::BrandData* _internal_mutable_brand();

  public:
  // int32 lot = 5;
  void clear_lot() ;
  ::int32_t lot() const;
  void set_lot(::int32_t value);

  private:
  ::int32_t _internal_lot() const;
  void _internal_set_lot(::int32_t value);

  public:
  // bool short_enabled_flag = 13;
  void clear_short_enabled_flag() ;
  bool short_enabled_flag() const;
  void set_short_enabled_flag(bool value);

  private:
  bool _internal_short_enabled_flag() const;
  void _internal_set_short_enabled_flag(bool value);

  public:
  // bool otc_flag = 21;
  void clear_otc_flag() ;
  bool otc_flag() const;
  void set_otc_flag(bool value);

  private:
  bool _internal_otc_flag() const;
  void _internal_set_otc_flag(bool value);

  public:
  // bool buy_available_flag = 22;
  void clear_buy_available_flag() ;
  bool buy_available_flag() const;
  void set_buy_available_flag(bool value);

  private:
  bool _internal_buy_available_flag() const;
  void _internal_set_buy_available_flag(bool value);

  public:
  // bool sell_available_flag = 23;
  void clear_sell_available_flag() ;
  bool sell_available_flag() const;
  void set_sell_available_flag(bool value);

  private:
  bool _internal_sell_available_flag() const;
  void _internal_set_sell_available_flag(bool value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 20;
  void clear_trading_status() ;
  ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus trading_status() const;
  void set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus _internal_trading_status() const;
  void _internal_set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 28;
  void clear_real_exchange() ;
  ::tinkoff::public_::invest::api::contract::v1::RealExchange real_exchange() const;
  void set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::RealExchange _internal_real_exchange() const;
  void _internal_set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value);

  public:
  // bool api_trade_available_flag = 26;
  void clear_api_trade_available_flag() ;
  bool api_trade_available_flag() const;
  void set_api_trade_available_flag(bool value);

  private:
  bool _internal_api_trade_available_flag() const;
  void _internal_set_api_trade_available_flag(bool value);

  public:
  // bool for_iis_flag = 41;
  void clear_for_iis_flag() ;
  bool for_iis_flag() const;
  void set_for_iis_flag(bool value);

  private:
  bool _internal_for_iis_flag() const;
  void _internal_set_for_iis_flag(bool value);

  public:
  // bool for_qual_investor_flag = 52;
  void clear_for_qual_investor_flag() ;
  bool for_qual_investor_flag() const;
  void set_for_qual_investor_flag(bool value);

  private:
  bool _internal_for_qual_investor_flag() const;
  void _internal_set_for_qual_investor_flag(bool value);

  public:
  // bool weekend_flag = 53;
  void clear_weekend_flag() ;
  bool weekend_flag() const;
  void set_weekend_flag(bool value);

  private:
  bool _internal_weekend_flag() const;
  void _internal_set_weekend_flag(bool value);

  public:
  // bool blocked_tca_flag = 54;
  void clear_blocked_tca_flag() ;
  bool blocked_tca_flag() const;
  void set_blocked_tca_flag(bool value);

  private:
  bool _internal_blocked_tca_flag() const;
  void _internal_set_blocked_tca_flag(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.Currency)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 35, 11,
      199, 9>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr ticker_;
    ::google::protobuf::internal::ArenaStringPtr class_code_;
    ::google::protobuf::internal::ArenaStringPtr isin_;
    ::google::protobuf::internal::ArenaStringPtr currency_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr exchange_;
    ::google::protobuf::internal::ArenaStringPtr country_of_risk_;
    ::google::protobuf::internal::ArenaStringPtr country_of_risk_name_;
    ::google::protobuf::internal::ArenaStringPtr iso_currency_name_;
    ::google::protobuf::internal::ArenaStringPtr uid_;
    ::google::protobuf::internal::ArenaStringPtr position_uid_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* klong_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* kshort_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dlong_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dshort_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dlong_min_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dshort_min_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* nominal_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* min_price_increment_;
    ::google::protobuf::Timestamp* first_1min_candle_date_;
    ::google::protobuf::Timestamp* first_1day_candle_date_;
    ::tinkoff::public_::invest::api::contract::v1::BrandData* brand_;
    ::int32_t lot_;
    bool short_enabled_flag_;
    bool otc_flag_;
    bool buy_available_flag_;
    bool sell_available_flag_;
    int trading_status_;
    int real_exchange_;
    bool api_trade_available_flag_;
    bool for_iis_flag_;
    bool for_qual_investor_flag_;
    bool weekend_flag_;
    bool blocked_tca_flag_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class Coupon final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.Coupon) */ {
 public:
  inline Coupon() : Coupon(nullptr) {}
  ~Coupon() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Coupon(::google::protobuf::internal::ConstantInitialized);

  inline Coupon(const Coupon& from)
      : Coupon(nullptr, from) {}
  Coupon(Coupon&& from) noexcept
    : Coupon() {
    *this = ::std::move(from);
  }

  inline Coupon& operator=(const Coupon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coupon& operator=(Coupon&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coupon& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coupon* internal_default_instance() {
    return reinterpret_cast<const Coupon*>(
               &_Coupon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Coupon& a, Coupon& b) {
    a.Swap(&b);
  }
  inline void Swap(Coupon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coupon* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coupon* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Coupon>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Coupon& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Coupon& from) {
    Coupon::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Coupon* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.Coupon";
  }
  protected:
  explicit Coupon(::google::protobuf::Arena* arena);
  Coupon(::google::protobuf::Arena* arena, const Coupon& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFigiFieldNumber = 1,
    kCouponDateFieldNumber = 2,
    kFixDateFieldNumber = 4,
    kPayOneBondFieldNumber = 5,
    kCouponStartDateFieldNumber = 7,
    kCouponEndDateFieldNumber = 8,
    kCouponNumberFieldNumber = 3,
    kCouponTypeFieldNumber = 6,
    kCouponPeriodFieldNumber = 9,
  };
  // string figi = 1;
  void clear_figi() ;
  const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_figi(Arg_&& arg, Args_... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // .google.protobuf.Timestamp coupon_date = 2;
  bool has_coupon_date() const;
  void clear_coupon_date() ;
  const ::google::protobuf::Timestamp& coupon_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_coupon_date();
  ::google::protobuf::Timestamp* mutable_coupon_date();
  void set_allocated_coupon_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_coupon_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_coupon_date();

  private:
  const ::google::protobuf::Timestamp& _internal_coupon_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_coupon_date();

  public:
  // .google.protobuf.Timestamp fix_date = 4;
  bool has_fix_date() const;
  void clear_fix_date() ;
  const ::google::protobuf::Timestamp& fix_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_fix_date();
  ::google::protobuf::Timestamp* mutable_fix_date();
  void set_allocated_fix_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_fix_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_fix_date();

  private:
  const ::google::protobuf::Timestamp& _internal_fix_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_fix_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.MoneyValue pay_one_bond = 5;
  bool has_pay_one_bond() const;
  void clear_pay_one_bond() ;
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& pay_one_bond() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_pay_one_bond();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_pay_one_bond();
  void set_allocated_pay_one_bond(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  void unsafe_arena_set_allocated_pay_one_bond(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_pay_one_bond();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_pay_one_bond() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_pay_one_bond();

  public:
  // .google.protobuf.Timestamp coupon_start_date = 7;
  bool has_coupon_start_date() const;
  void clear_coupon_start_date() ;
  const ::google::protobuf::Timestamp& coupon_start_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_coupon_start_date();
  ::google::protobuf::Timestamp* mutable_coupon_start_date();
  void set_allocated_coupon_start_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_coupon_start_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_coupon_start_date();

  private:
  const ::google::protobuf::Timestamp& _internal_coupon_start_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_coupon_start_date();

  public:
  // .google.protobuf.Timestamp coupon_end_date = 8;
  bool has_coupon_end_date() const;
  void clear_coupon_end_date() ;
  const ::google::protobuf::Timestamp& coupon_end_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_coupon_end_date();
  ::google::protobuf::Timestamp* mutable_coupon_end_date();
  void set_allocated_coupon_end_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_coupon_end_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_coupon_end_date();

  private:
  const ::google::protobuf::Timestamp& _internal_coupon_end_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_coupon_end_date();

  public:
  // int64 coupon_number = 3;
  void clear_coupon_number() ;
  ::int64_t coupon_number() const;
  void set_coupon_number(::int64_t value);

  private:
  ::int64_t _internal_coupon_number() const;
  void _internal_set_coupon_number(::int64_t value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.CouponType coupon_type = 6;
  void clear_coupon_type() ;
  ::tinkoff::public_::invest::api::contract::v1::CouponType coupon_type() const;
  void set_coupon_type(::tinkoff::public_::invest::api::contract::v1::CouponType value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::CouponType _internal_coupon_type() const;
  void _internal_set_coupon_type(::tinkoff::public_::invest::api::contract::v1::CouponType value);

  public:
  // int32 coupon_period = 9;
  void clear_coupon_period() ;
  ::int32_t coupon_period() const;
  void set_coupon_period(::int32_t value);

  private:
  ::int32_t _internal_coupon_period() const;
  void _internal_set_coupon_period(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.Coupon)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 5,
      66, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::Timestamp* coupon_date_;
    ::google::protobuf::Timestamp* fix_date_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* pay_one_bond_;
    ::google::protobuf::Timestamp* coupon_start_date_;
    ::google::protobuf::Timestamp* coupon_end_date_;
    ::int64_t coupon_number_;
    int coupon_type_;
    ::int32_t coupon_period_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class Bond final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.Bond) */ {
 public:
  inline Bond() : Bond(nullptr) {}
  ~Bond() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Bond(::google::protobuf::internal::ConstantInitialized);

  inline Bond(const Bond& from)
      : Bond(nullptr, from) {}
  Bond(Bond&& from) noexcept
    : Bond() {
    *this = ::std::move(from);
  }

  inline Bond& operator=(const Bond& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bond& operator=(Bond&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bond& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bond* internal_default_instance() {
    return reinterpret_cast<const Bond*>(
               &_Bond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Bond& a, Bond& b) {
    a.Swap(&b);
  }
  inline void Swap(Bond* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bond* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bond* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bond>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Bond& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Bond& from) {
    Bond::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Bond* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.Bond";
  }
  protected:
  explicit Bond(::google::protobuf::Arena* arena);
  Bond(::google::protobuf::Arena* arena, const Bond& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFigiFieldNumber = 1,
    kTickerFieldNumber = 2,
    kClassCodeFieldNumber = 3,
    kIsinFieldNumber = 4,
    kCurrencyFieldNumber = 6,
    kNameFieldNumber = 15,
    kExchangeFieldNumber = 16,
    kCountryOfRiskFieldNumber = 25,
    kCountryOfRiskNameFieldNumber = 26,
    kSectorFieldNumber = 27,
    kIssueKindFieldNumber = 28,
    kUidFieldNumber = 40,
    kPositionUidFieldNumber = 42,
    kAssetUidFieldNumber = 43,
    kKlongFieldNumber = 7,
    kKshortFieldNumber = 8,
    kDlongFieldNumber = 9,
    kDshortFieldNumber = 10,
    kDlongMinFieldNumber = 11,
    kDshortMinFieldNumber = 12,
    kMaturityDateFieldNumber = 18,
    kNominalFieldNumber = 19,
    kInitialNominalFieldNumber = 20,
    kStateRegDateFieldNumber = 21,
    kPlacementDateFieldNumber = 22,
    kPlacementPriceFieldNumber = 23,
    kAciValueFieldNumber = 24,
    kMinPriceIncrementFieldNumber = 38,
    kFirst1MinCandleDateFieldNumber = 61,
    kFirst1DayCandleDateFieldNumber = 62,
    kBrandFieldNumber = 64,
    kLotFieldNumber = 5,
    kCouponQuantityPerYearFieldNumber = 17,
    kShortEnabledFlagFieldNumber = 13,
    kOtcFlagFieldNumber = 32,
    kBuyAvailableFlagFieldNumber = 33,
    kSellAvailableFlagFieldNumber = 34,
    kTradingStatusFieldNumber = 31,
    kIssueSizeFieldNumber = 29,
    kIssueSizePlanFieldNumber = 30,
    kFloatingCouponFlagFieldNumber = 35,
    kPerpetualFlagFieldNumber = 36,
    kAmortizationFlagFieldNumber = 37,
    kApiTradeAvailableFlagFieldNumber = 39,
    kRealExchangeFieldNumber = 41,
    kForIisFlagFieldNumber = 51,
    kForQualInvestorFlagFieldNumber = 52,
    kWeekendFlagFieldNumber = 53,
    kBlockedTcaFlagFieldNumber = 54,
    kSubordinatedFlagFieldNumber = 55,
    kLiquidityFlagFieldNumber = 56,
    kRiskLevelFieldNumber = 63,
  };
  // string figi = 1;
  void clear_figi() ;
  const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_figi(Arg_&& arg, Args_... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string ticker = 2;
  void clear_ticker() ;
  const std::string& ticker() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ticker(Arg_&& arg, Args_... args);
  std::string* mutable_ticker();
  PROTOBUF_NODISCARD std::string* release_ticker();
  void set_allocated_ticker(std::string* value);

  private:
  const std::string& _internal_ticker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticker(
      const std::string& value);
  std::string* _internal_mutable_ticker();

  public:
  // string class_code = 3;
  void clear_class_code() ;
  const std::string& class_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_code(Arg_&& arg, Args_... args);
  std::string* mutable_class_code();
  PROTOBUF_NODISCARD std::string* release_class_code();
  void set_allocated_class_code(std::string* value);

  private:
  const std::string& _internal_class_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_code(
      const std::string& value);
  std::string* _internal_mutable_class_code();

  public:
  // string isin = 4;
  void clear_isin() ;
  const std::string& isin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_isin(Arg_&& arg, Args_... args);
  std::string* mutable_isin();
  PROTOBUF_NODISCARD std::string* release_isin();
  void set_allocated_isin(std::string* value);

  private:
  const std::string& _internal_isin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_isin(
      const std::string& value);
  std::string* _internal_mutable_isin();

  public:
  // string currency = 6;
  void clear_currency() ;
  const std::string& currency() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_currency(Arg_&& arg, Args_... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* value);

  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(
      const std::string& value);
  std::string* _internal_mutable_currency();

  public:
  // string name = 15;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string exchange = 16;
  void clear_exchange() ;
  const std::string& exchange() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange(Arg_&& arg, Args_... args);
  std::string* mutable_exchange();
  PROTOBUF_NODISCARD std::string* release_exchange();
  void set_allocated_exchange(std::string* value);

  private:
  const std::string& _internal_exchange() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange(
      const std::string& value);
  std::string* _internal_mutable_exchange();

  public:
  // string country_of_risk = 25;
  void clear_country_of_risk() ;
  const std::string& country_of_risk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_country_of_risk(Arg_&& arg, Args_... args);
  std::string* mutable_country_of_risk();
  PROTOBUF_NODISCARD std::string* release_country_of_risk();
  void set_allocated_country_of_risk(std::string* value);

  private:
  const std::string& _internal_country_of_risk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_of_risk(
      const std::string& value);
  std::string* _internal_mutable_country_of_risk();

  public:
  // string country_of_risk_name = 26;
  void clear_country_of_risk_name() ;
  const std::string& country_of_risk_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_country_of_risk_name(Arg_&& arg, Args_... args);
  std::string* mutable_country_of_risk_name();
  PROTOBUF_NODISCARD std::string* release_country_of_risk_name();
  void set_allocated_country_of_risk_name(std::string* value);

  private:
  const std::string& _internal_country_of_risk_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_of_risk_name(
      const std::string& value);
  std::string* _internal_mutable_country_of_risk_name();

  public:
  // string sector = 27;
  void clear_sector() ;
  const std::string& sector() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sector(Arg_&& arg, Args_... args);
  std::string* mutable_sector();
  PROTOBUF_NODISCARD std::string* release_sector();
  void set_allocated_sector(std::string* value);

  private:
  const std::string& _internal_sector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sector(
      const std::string& value);
  std::string* _internal_mutable_sector();

  public:
  // string issue_kind = 28;
  void clear_issue_kind() ;
  const std::string& issue_kind() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_issue_kind(Arg_&& arg, Args_... args);
  std::string* mutable_issue_kind();
  PROTOBUF_NODISCARD std::string* release_issue_kind();
  void set_allocated_issue_kind(std::string* value);

  private:
  const std::string& _internal_issue_kind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_issue_kind(
      const std::string& value);
  std::string* _internal_mutable_issue_kind();

  public:
  // string uid = 40;
  void clear_uid() ;
  const std::string& uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uid(Arg_&& arg, Args_... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* value);

  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(
      const std::string& value);
  std::string* _internal_mutable_uid();

  public:
  // string position_uid = 42;
  void clear_position_uid() ;
  const std::string& position_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_position_uid(Arg_&& arg, Args_... args);
  std::string* mutable_position_uid();
  PROTOBUF_NODISCARD std::string* release_position_uid();
  void set_allocated_position_uid(std::string* value);

  private:
  const std::string& _internal_position_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_uid(
      const std::string& value);
  std::string* _internal_mutable_position_uid();

  public:
  // string asset_uid = 43;
  void clear_asset_uid() ;
  const std::string& asset_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_asset_uid(Arg_&& arg, Args_... args);
  std::string* mutable_asset_uid();
  PROTOBUF_NODISCARD std::string* release_asset_uid();
  void set_allocated_asset_uid(std::string* value);

  private:
  const std::string& _internal_asset_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_uid(
      const std::string& value);
  std::string* _internal_mutable_asset_uid();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
  bool has_klong() const;
  void clear_klong() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& klong() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_klong();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_klong();
  void set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_klong();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_klong() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_klong();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
  bool has_kshort() const;
  void clear_kshort() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& kshort() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_kshort();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_kshort();
  void set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_kshort();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_kshort() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_kshort();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
  bool has_dlong() const;
  void clear_dlong() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dlong();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dlong();
  void set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dlong();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dlong() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dlong();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
  bool has_dshort() const;
  void clear_dshort() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dshort();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dshort();
  void set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dshort();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dshort() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dshort();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
  bool has_dlong_min() const;
  void clear_dlong_min() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dlong_min() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dlong_min();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dlong_min();
  void set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dlong_min();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dlong_min() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dlong_min();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
  bool has_dshort_min() const;
  void clear_dshort_min() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dshort_min() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dshort_min();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dshort_min();
  void set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dshort_min();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dshort_min() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dshort_min();

  public:
  // .google.protobuf.Timestamp maturity_date = 18;
  bool has_maturity_date() const;
  void clear_maturity_date() ;
  const ::google::protobuf::Timestamp& maturity_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_maturity_date();
  ::google::protobuf::Timestamp* mutable_maturity_date();
  void set_allocated_maturity_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_maturity_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_maturity_date();

  private:
  const ::google::protobuf::Timestamp& _internal_maturity_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_maturity_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 19;
  bool has_nominal() const;
  void clear_nominal() ;
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& nominal() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_nominal();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_nominal();
  void set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  void unsafe_arena_set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_nominal();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_nominal() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_nominal();

  public:
  // .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_nominal = 20;
  bool has_initial_nominal() const;
  void clear_initial_nominal() ;
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& initial_nominal() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_initial_nominal();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_initial_nominal();
  void set_allocated_initial_nominal(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  void unsafe_arena_set_allocated_initial_nominal(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_initial_nominal();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_initial_nominal() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_initial_nominal();

  public:
  // .google.protobuf.Timestamp state_reg_date = 21;
  bool has_state_reg_date() const;
  void clear_state_reg_date() ;
  const ::google::protobuf::Timestamp& state_reg_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_state_reg_date();
  ::google::protobuf::Timestamp* mutable_state_reg_date();
  void set_allocated_state_reg_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_state_reg_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_state_reg_date();

  private:
  const ::google::protobuf::Timestamp& _internal_state_reg_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_state_reg_date();

  public:
  // .google.protobuf.Timestamp placement_date = 22;
  bool has_placement_date() const;
  void clear_placement_date() ;
  const ::google::protobuf::Timestamp& placement_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_placement_date();
  ::google::protobuf::Timestamp* mutable_placement_date();
  void set_allocated_placement_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_placement_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_placement_date();

  private:
  const ::google::protobuf::Timestamp& _internal_placement_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_placement_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.MoneyValue placement_price = 23;
  bool has_placement_price() const;
  void clear_placement_price() ;
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& placement_price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_placement_price();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_placement_price();
  void set_allocated_placement_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  void unsafe_arena_set_allocated_placement_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_placement_price();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_placement_price() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_placement_price();

  public:
  // .tinkoff.public_.invest.api.contract.v1.MoneyValue aci_value = 24;
  bool has_aci_value() const;
  void clear_aci_value() ;
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& aci_value() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::MoneyValue* release_aci_value();
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* mutable_aci_value();
  void set_allocated_aci_value(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  void unsafe_arena_set_allocated_aci_value(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value);
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* unsafe_arena_release_aci_value();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& _internal_aci_value() const;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _internal_mutable_aci_value();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 38;
  bool has_min_price_increment() const;
  void clear_min_price_increment() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& min_price_increment() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_min_price_increment();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_min_price_increment();
  void set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_min_price_increment();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_min_price_increment() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_min_price_increment();

  public:
  // .google.protobuf.Timestamp first_1min_candle_date = 61;
  bool has_first_1min_candle_date() const;
  void clear_first_1min_candle_date() ;
  const ::google::protobuf::Timestamp& first_1min_candle_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_first_1min_candle_date();
  ::google::protobuf::Timestamp* mutable_first_1min_candle_date();
  void set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_first_1min_candle_date();

  private:
  const ::google::protobuf::Timestamp& _internal_first_1min_candle_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_first_1min_candle_date();

  public:
  // .google.protobuf.Timestamp first_1day_candle_date = 62;
  bool has_first_1day_candle_date() const;
  void clear_first_1day_candle_date() ;
  const ::google::protobuf::Timestamp& first_1day_candle_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_first_1day_candle_date();
  ::google::protobuf::Timestamp* mutable_first_1day_candle_date();
  void set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_first_1day_candle_date();

  private:
  const ::google::protobuf::Timestamp& _internal_first_1day_candle_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_first_1day_candle_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.BrandData brand = 64;
  bool has_brand() const;
  void clear_brand() ;
  const ::tinkoff::public_::invest::api::contract::v1::BrandData& brand() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::BrandData* release_brand();
  ::tinkoff::public_::invest::api::contract::v1::BrandData* mutable_brand();
  void set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value);
  void unsafe_arena_set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value);
  ::tinkoff::public_::invest::api::contract::v1::BrandData* unsafe_arena_release_brand();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::BrandData& _internal_brand() const;
  ::tinkoff::public_::invest::api::contract::v1::BrandData* _internal_mutable_brand();

  public:
  // int32 lot = 5;
  void clear_lot() ;
  ::int32_t lot() const;
  void set_lot(::int32_t value);

  private:
  ::int32_t _internal_lot() const;
  void _internal_set_lot(::int32_t value);

  public:
  // int32 coupon_quantity_per_year = 17;
  void clear_coupon_quantity_per_year() ;
  ::int32_t coupon_quantity_per_year() const;
  void set_coupon_quantity_per_year(::int32_t value);

  private:
  ::int32_t _internal_coupon_quantity_per_year() const;
  void _internal_set_coupon_quantity_per_year(::int32_t value);

  public:
  // bool short_enabled_flag = 13;
  void clear_short_enabled_flag() ;
  bool short_enabled_flag() const;
  void set_short_enabled_flag(bool value);

  private:
  bool _internal_short_enabled_flag() const;
  void _internal_set_short_enabled_flag(bool value);

  public:
  // bool otc_flag = 32;
  void clear_otc_flag() ;
  bool otc_flag() const;
  void set_otc_flag(bool value);

  private:
  bool _internal_otc_flag() const;
  void _internal_set_otc_flag(bool value);

  public:
  // bool buy_available_flag = 33;
  void clear_buy_available_flag() ;
  bool buy_available_flag() const;
  void set_buy_available_flag(bool value);

  private:
  bool _internal_buy_available_flag() const;
  void _internal_set_buy_available_flag(bool value);

  public:
  // bool sell_available_flag = 34;
  void clear_sell_available_flag() ;
  bool sell_available_flag() const;
  void set_sell_available_flag(bool value);

  private:
  bool _internal_sell_available_flag() const;
  void _internal_set_sell_available_flag(bool value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 31;
  void clear_trading_status() ;
  ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus trading_status() const;
  void set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus _internal_trading_status() const;
  void _internal_set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value);

  public:
  // int64 issue_size = 29;
  void clear_issue_size() ;
  ::int64_t issue_size() const;
  void set_issue_size(::int64_t value);

  private:
  ::int64_t _internal_issue_size() const;
  void _internal_set_issue_size(::int64_t value);

  public:
  // int64 issue_size_plan = 30;
  void clear_issue_size_plan() ;
  ::int64_t issue_size_plan() const;
  void set_issue_size_plan(::int64_t value);

  private:
  ::int64_t _internal_issue_size_plan() const;
  void _internal_set_issue_size_plan(::int64_t value);

  public:
  // bool floating_coupon_flag = 35;
  void clear_floating_coupon_flag() ;
  bool floating_coupon_flag() const;
  void set_floating_coupon_flag(bool value);

  private:
  bool _internal_floating_coupon_flag() const;
  void _internal_set_floating_coupon_flag(bool value);

  public:
  // bool perpetual_flag = 36;
  void clear_perpetual_flag() ;
  bool perpetual_flag() const;
  void set_perpetual_flag(bool value);

  private:
  bool _internal_perpetual_flag() const;
  void _internal_set_perpetual_flag(bool value);

  public:
  // bool amortization_flag = 37;
  void clear_amortization_flag() ;
  bool amortization_flag() const;
  void set_amortization_flag(bool value);

  private:
  bool _internal_amortization_flag() const;
  void _internal_set_amortization_flag(bool value);

  public:
  // bool api_trade_available_flag = 39;
  void clear_api_trade_available_flag() ;
  bool api_trade_available_flag() const;
  void set_api_trade_available_flag(bool value);

  private:
  bool _internal_api_trade_available_flag() const;
  void _internal_set_api_trade_available_flag(bool value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 41;
  void clear_real_exchange() ;
  ::tinkoff::public_::invest::api::contract::v1::RealExchange real_exchange() const;
  void set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::RealExchange _internal_real_exchange() const;
  void _internal_set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value);

  public:
  // bool for_iis_flag = 51;
  void clear_for_iis_flag() ;
  bool for_iis_flag() const;
  void set_for_iis_flag(bool value);

  private:
  bool _internal_for_iis_flag() const;
  void _internal_set_for_iis_flag(bool value);

  public:
  // bool for_qual_investor_flag = 52;
  void clear_for_qual_investor_flag() ;
  bool for_qual_investor_flag() const;
  void set_for_qual_investor_flag(bool value);

  private:
  bool _internal_for_qual_investor_flag() const;
  void _internal_set_for_qual_investor_flag(bool value);

  public:
  // bool weekend_flag = 53;
  void clear_weekend_flag() ;
  bool weekend_flag() const;
  void set_weekend_flag(bool value);

  private:
  bool _internal_weekend_flag() const;
  void _internal_set_weekend_flag(bool value);

  public:
  // bool blocked_tca_flag = 54;
  void clear_blocked_tca_flag() ;
  bool blocked_tca_flag() const;
  void set_blocked_tca_flag(bool value);

  private:
  bool _internal_blocked_tca_flag() const;
  void _internal_set_blocked_tca_flag(bool value);

  public:
  // bool subordinated_flag = 55;
  void clear_subordinated_flag() ;
  bool subordinated_flag() const;
  void set_subordinated_flag(bool value);

  private:
  bool _internal_subordinated_flag() const;
  void _internal_set_subordinated_flag(bool value);

  public:
  // bool liquidity_flag = 56;
  void clear_liquidity_flag() ;
  bool liquidity_flag() const;
  void set_liquidity_flag(bool value);

  private:
  bool _internal_liquidity_flag() const;
  void _internal_set_liquidity_flag(bool value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.RiskLevel risk_level = 63;
  void clear_risk_level() ;
  ::tinkoff::public_::invest::api::contract::v1::RiskLevel risk_level() const;
  void set_risk_level(::tinkoff::public_::invest::api::contract::v1::RiskLevel value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::RiskLevel _internal_risk_level() const;
  void _internal_set_risk_level(::tinkoff::public_::invest::api::contract::v1::RiskLevel value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.Bond)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 52, 17,
      219, 9>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr ticker_;
    ::google::protobuf::internal::ArenaStringPtr class_code_;
    ::google::protobuf::internal::ArenaStringPtr isin_;
    ::google::protobuf::internal::ArenaStringPtr currency_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr exchange_;
    ::google::protobuf::internal::ArenaStringPtr country_of_risk_;
    ::google::protobuf::internal::ArenaStringPtr country_of_risk_name_;
    ::google::protobuf::internal::ArenaStringPtr sector_;
    ::google::protobuf::internal::ArenaStringPtr issue_kind_;
    ::google::protobuf::internal::ArenaStringPtr uid_;
    ::google::protobuf::internal::ArenaStringPtr position_uid_;
    ::google::protobuf::internal::ArenaStringPtr asset_uid_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* klong_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* kshort_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dlong_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dshort_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dlong_min_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dshort_min_;
    ::google::protobuf::Timestamp* maturity_date_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* nominal_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* initial_nominal_;
    ::google::protobuf::Timestamp* state_reg_date_;
    ::google::protobuf::Timestamp* placement_date_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* placement_price_;
    ::tinkoff::public_::invest::api::contract::v1::MoneyValue* aci_value_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* min_price_increment_;
    ::google::protobuf::Timestamp* first_1min_candle_date_;
    ::google::protobuf::Timestamp* first_1day_candle_date_;
    ::tinkoff::public_::invest::api::contract::v1::BrandData* brand_;
    ::int32_t lot_;
    ::int32_t coupon_quantity_per_year_;
    bool short_enabled_flag_;
    bool otc_flag_;
    bool buy_available_flag_;
    bool sell_available_flag_;
    int trading_status_;
    ::int64_t issue_size_;
    ::int64_t issue_size_plan_;
    bool floating_coupon_flag_;
    bool perpetual_flag_;
    bool amortization_flag_;
    bool api_trade_available_flag_;
    int real_exchange_;
    bool for_iis_flag_;
    bool for_qual_investor_flag_;
    bool weekend_flag_;
    bool blocked_tca_flag_;
    bool subordinated_flag_;
    bool liquidity_flag_;
    int risk_level_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class AssetStructuredProduct final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct) */ {
 public:
  inline AssetStructuredProduct() : AssetStructuredProduct(nullptr) {}
  ~AssetStructuredProduct() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AssetStructuredProduct(::google::protobuf::internal::ConstantInitialized);

  inline AssetStructuredProduct(const AssetStructuredProduct& from)
      : AssetStructuredProduct(nullptr, from) {}
  AssetStructuredProduct(AssetStructuredProduct&& from) noexcept
    : AssetStructuredProduct() {
    *this = ::std::move(from);
  }

  inline AssetStructuredProduct& operator=(const AssetStructuredProduct& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetStructuredProduct& operator=(AssetStructuredProduct&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssetStructuredProduct& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssetStructuredProduct* internal_default_instance() {
    return reinterpret_cast<const AssetStructuredProduct*>(
               &_AssetStructuredProduct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(AssetStructuredProduct& a, AssetStructuredProduct& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetStructuredProduct* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetStructuredProduct* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssetStructuredProduct* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssetStructuredProduct>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AssetStructuredProduct& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AssetStructuredProduct& from) {
    AssetStructuredProduct::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AssetStructuredProduct* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct";
  }
  protected:
  explicit AssetStructuredProduct(::google::protobuf::Arena* arena);
  AssetStructuredProduct(::google::protobuf::Arena* arena, const AssetStructuredProduct& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBorrowNameFieldNumber = 1,
    kNominalCurrencyFieldNumber = 3,
    kLogicPortfolioFieldNumber = 5,
    kBasicAssetFieldNumber = 7,
    kIssueKindFieldNumber = 13,
    kNominalFieldNumber = 2,
    kSafetyBarrierFieldNumber = 8,
    kMaturityDateFieldNumber = 9,
    kIssueSizePlanFieldNumber = 10,
    kIssueSizeFieldNumber = 11,
    kPlacementDateFieldNumber = 12,
    kTypeFieldNumber = 4,
    kAssetTypeFieldNumber = 6,
  };
  // string borrow_name = 1;
  void clear_borrow_name() ;
  const std::string& borrow_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_borrow_name(Arg_&& arg, Args_... args);
  std::string* mutable_borrow_name();
  PROTOBUF_NODISCARD std::string* release_borrow_name();
  void set_allocated_borrow_name(std::string* value);

  private:
  const std::string& _internal_borrow_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_borrow_name(
      const std::string& value);
  std::string* _internal_mutable_borrow_name();

  public:
  // string nominal_currency = 3;
  void clear_nominal_currency() ;
  const std::string& nominal_currency() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nominal_currency(Arg_&& arg, Args_... args);
  std::string* mutable_nominal_currency();
  PROTOBUF_NODISCARD std::string* release_nominal_currency();
  void set_allocated_nominal_currency(std::string* value);

  private:
  const std::string& _internal_nominal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nominal_currency(
      const std::string& value);
  std::string* _internal_mutable_nominal_currency();

  public:
  // string logic_portfolio = 5;
  void clear_logic_portfolio() ;
  const std::string& logic_portfolio() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_logic_portfolio(Arg_&& arg, Args_... args);
  std::string* mutable_logic_portfolio();
  PROTOBUF_NODISCARD std::string* release_logic_portfolio();
  void set_allocated_logic_portfolio(std::string* value);

  private:
  const std::string& _internal_logic_portfolio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logic_portfolio(
      const std::string& value);
  std::string* _internal_mutable_logic_portfolio();

  public:
  // string basic_asset = 7;
  void clear_basic_asset() ;
  const std::string& basic_asset() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_basic_asset(Arg_&& arg, Args_... args);
  std::string* mutable_basic_asset();
  PROTOBUF_NODISCARD std::string* release_basic_asset();
  void set_allocated_basic_asset(std::string* value);

  private:
  const std::string& _internal_basic_asset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_basic_asset(
      const std::string& value);
  std::string* _internal_mutable_basic_asset();

  public:
  // string issue_kind = 13;
  void clear_issue_kind() ;
  const std::string& issue_kind() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_issue_kind(Arg_&& arg, Args_... args);
  std::string* mutable_issue_kind();
  PROTOBUF_NODISCARD std::string* release_issue_kind();
  void set_allocated_issue_kind(std::string* value);

  private:
  const std::string& _internal_issue_kind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_issue_kind(
      const std::string& value);
  std::string* _internal_mutable_issue_kind();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 2;
  bool has_nominal() const;
  void clear_nominal() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& nominal() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_nominal();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_nominal();
  void set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_nominal();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_nominal() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_nominal();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation safety_barrier = 8;
  bool has_safety_barrier() const;
  void clear_safety_barrier() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& safety_barrier() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_safety_barrier();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_safety_barrier();
  void set_allocated_safety_barrier(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_safety_barrier(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_safety_barrier();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_safety_barrier() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_safety_barrier();

  public:
  // .google.protobuf.Timestamp maturity_date = 9;
  bool has_maturity_date() const;
  void clear_maturity_date() ;
  const ::google::protobuf::Timestamp& maturity_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_maturity_date();
  ::google::protobuf::Timestamp* mutable_maturity_date();
  void set_allocated_maturity_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_maturity_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_maturity_date();

  private:
  const ::google::protobuf::Timestamp& _internal_maturity_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_maturity_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 10;
  bool has_issue_size_plan() const;
  void clear_issue_size_plan() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& issue_size_plan() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_issue_size_plan();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_issue_size_plan();
  void set_allocated_issue_size_plan(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_issue_size_plan(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_issue_size_plan();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_issue_size_plan() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_issue_size_plan();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 11;
  bool has_issue_size() const;
  void clear_issue_size() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& issue_size() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_issue_size();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_issue_size();
  void set_allocated_issue_size(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_issue_size(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_issue_size();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_issue_size() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_issue_size();

  public:
  // .google.protobuf.Timestamp placement_date = 12;
  bool has_placement_date() const;
  void clear_placement_date() ;
  const ::google::protobuf::Timestamp& placement_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_placement_date();
  ::google::protobuf::Timestamp* mutable_placement_date();
  void set_allocated_placement_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_placement_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_placement_date();

  private:
  const ::google::protobuf::Timestamp& _internal_placement_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_placement_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.StructuredProductType type = 4;
  void clear_type() ;
  ::tinkoff::public_::invest::api::contract::v1::StructuredProductType type() const;
  void set_type(::tinkoff::public_::invest::api::contract::v1::StructuredProductType value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::StructuredProductType _internal_type() const;
  void _internal_set_type(::tinkoff::public_::invest::api::contract::v1::StructuredProductType value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.AssetType asset_type = 6;
  void clear_asset_type() ;
  ::tinkoff::public_::invest::api::contract::v1::AssetType asset_type() const;
  void set_asset_type(::tinkoff::public_::invest::api::contract::v1::AssetType value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::AssetType _internal_asset_type() const;
  void _internal_set_asset_type(::tinkoff::public_::invest::api::contract::v1::AssetType value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 6,
      141, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr borrow_name_;
    ::google::protobuf::internal::ArenaStringPtr nominal_currency_;
    ::google::protobuf::internal::ArenaStringPtr logic_portfolio_;
    ::google::protobuf::internal::ArenaStringPtr basic_asset_;
    ::google::protobuf::internal::ArenaStringPtr issue_kind_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* nominal_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* safety_barrier_;
    ::google::protobuf::Timestamp* maturity_date_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* issue_size_plan_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* issue_size_;
    ::google::protobuf::Timestamp* placement_date_;
    int type_;
    int asset_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class AssetShare final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.AssetShare) */ {
 public:
  inline AssetShare() : AssetShare(nullptr) {}
  ~AssetShare() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AssetShare(::google::protobuf::internal::ConstantInitialized);

  inline AssetShare(const AssetShare& from)
      : AssetShare(nullptr, from) {}
  AssetShare(AssetShare&& from) noexcept
    : AssetShare() {
    *this = ::std::move(from);
  }

  inline AssetShare& operator=(const AssetShare& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetShare& operator=(AssetShare&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssetShare& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssetShare* internal_default_instance() {
    return reinterpret_cast<const AssetShare*>(
               &_AssetShare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(AssetShare& a, AssetShare& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetShare* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetShare* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssetShare* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssetShare>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AssetShare& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AssetShare& from) {
    AssetShare::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AssetShare* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.AssetShare";
  }
  protected:
  explicit AssetShare(::google::protobuf::Arena* arena);
  AssetShare(::google::protobuf::Arena* arena, const AssetShare& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNominalCurrencyFieldNumber = 4,
    kPrimaryIndexFieldNumber = 5,
    kPreferredShareTypeFieldNumber = 7,
    kIssueKindFieldNumber = 11,
    kRepresIsinFieldNumber = 13,
    kIssueSizeFieldNumber = 2,
    kNominalFieldNumber = 3,
    kDividendRateFieldNumber = 6,
    kIpoDateFieldNumber = 8,
    kRegistryDateFieldNumber = 9,
    kPlacementDateFieldNumber = 12,
    kIssueSizePlanFieldNumber = 14,
    kTotalFloatFieldNumber = 15,
    kTypeFieldNumber = 1,
    kDivYieldFlagFieldNumber = 10,
  };
  // string nominal_currency = 4;
  void clear_nominal_currency() ;
  const std::string& nominal_currency() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nominal_currency(Arg_&& arg, Args_... args);
  std::string* mutable_nominal_currency();
  PROTOBUF_NODISCARD std::string* release_nominal_currency();
  void set_allocated_nominal_currency(std::string* value);

  private:
  const std::string& _internal_nominal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nominal_currency(
      const std::string& value);
  std::string* _internal_mutable_nominal_currency();

  public:
  // string primary_index = 5;
  void clear_primary_index() ;
  const std::string& primary_index() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_primary_index(Arg_&& arg, Args_... args);
  std::string* mutable_primary_index();
  PROTOBUF_NODISCARD std::string* release_primary_index();
  void set_allocated_primary_index(std::string* value);

  private:
  const std::string& _internal_primary_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primary_index(
      const std::string& value);
  std::string* _internal_mutable_primary_index();

  public:
  // string preferred_share_type = 7;
  void clear_preferred_share_type() ;
  const std::string& preferred_share_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_preferred_share_type(Arg_&& arg, Args_... args);
  std::string* mutable_preferred_share_type();
  PROTOBUF_NODISCARD std::string* release_preferred_share_type();
  void set_allocated_preferred_share_type(std::string* value);

  private:
  const std::string& _internal_preferred_share_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_preferred_share_type(
      const std::string& value);
  std::string* _internal_mutable_preferred_share_type();

  public:
  // string issue_kind = 11;
  void clear_issue_kind() ;
  const std::string& issue_kind() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_issue_kind(Arg_&& arg, Args_... args);
  std::string* mutable_issue_kind();
  PROTOBUF_NODISCARD std::string* release_issue_kind();
  void set_allocated_issue_kind(std::string* value);

  private:
  const std::string& _internal_issue_kind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_issue_kind(
      const std::string& value);
  std::string* _internal_mutable_issue_kind();

  public:
  // string repres_isin = 13;
  void clear_repres_isin() ;
  const std::string& repres_isin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_repres_isin(Arg_&& arg, Args_... args);
  std::string* mutable_repres_isin();
  PROTOBUF_NODISCARD std::string* release_repres_isin();
  void set_allocated_repres_isin(std::string* value);

  private:
  const std::string& _internal_repres_isin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_repres_isin(
      const std::string& value);
  std::string* _internal_mutable_repres_isin();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 2;
  bool has_issue_size() const;
  void clear_issue_size() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& issue_size() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_issue_size();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_issue_size();
  void set_allocated_issue_size(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_issue_size(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_issue_size();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_issue_size() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_issue_size();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 3;
  bool has_nominal() const;
  void clear_nominal() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& nominal() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_nominal();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_nominal();
  void set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_nominal();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_nominal() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_nominal();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation dividend_rate = 6;
  bool has_dividend_rate() const;
  void clear_dividend_rate() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& dividend_rate() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_dividend_rate();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_dividend_rate();
  void set_allocated_dividend_rate(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_dividend_rate(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_dividend_rate();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_dividend_rate() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_dividend_rate();

  public:
  // .google.protobuf.Timestamp ipo_date = 8;
  bool has_ipo_date() const;
  void clear_ipo_date() ;
  const ::google::protobuf::Timestamp& ipo_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_ipo_date();
  ::google::protobuf::Timestamp* mutable_ipo_date();
  void set_allocated_ipo_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_ipo_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_ipo_date();

  private:
  const ::google::protobuf::Timestamp& _internal_ipo_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_ipo_date();

  public:
  // .google.protobuf.Timestamp registry_date = 9;
  bool has_registry_date() const;
  void clear_registry_date() ;
  const ::google::protobuf::Timestamp& registry_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_registry_date();
  ::google::protobuf::Timestamp* mutable_registry_date();
  void set_allocated_registry_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_registry_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_registry_date();

  private:
  const ::google::protobuf::Timestamp& _internal_registry_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_registry_date();

  public:
  // .google.protobuf.Timestamp placement_date = 12;
  bool has_placement_date() const;
  void clear_placement_date() ;
  const ::google::protobuf::Timestamp& placement_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_placement_date();
  ::google::protobuf::Timestamp* mutable_placement_date();
  void set_allocated_placement_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_placement_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_placement_date();

  private:
  const ::google::protobuf::Timestamp& _internal_placement_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_placement_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 14;
  bool has_issue_size_plan() const;
  void clear_issue_size_plan() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& issue_size_plan() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_issue_size_plan();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_issue_size_plan();
  void set_allocated_issue_size_plan(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_issue_size_plan(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_issue_size_plan();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_issue_size_plan() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_issue_size_plan();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation total_float = 15;
  bool has_total_float() const;
  void clear_total_float() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& total_float() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_total_float();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_total_float();
  void set_allocated_total_float(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_total_float(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_total_float();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_total_float() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_total_float();

  public:
  // .tinkoff.public_.invest.api.contract.v1.ShareType type = 1;
  void clear_type() ;
  ::tinkoff::public_::invest::api::contract::v1::ShareType type() const;
  void set_type(::tinkoff::public_::invest::api::contract::v1::ShareType value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::ShareType _internal_type() const;
  void _internal_set_type(::tinkoff::public_::invest::api::contract::v1::ShareType value);

  public:
  // bool div_yield_flag = 10;
  void clear_div_yield_flag() ;
  bool div_yield_flag() const;
  void set_div_yield_flag(bool value);

  private:
  bool _internal_div_yield_flag() const;
  void _internal_set_div_yield_flag(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.AssetShare)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 15, 8,
      136, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr nominal_currency_;
    ::google::protobuf::internal::ArenaStringPtr primary_index_;
    ::google::protobuf::internal::ArenaStringPtr preferred_share_type_;
    ::google::protobuf::internal::ArenaStringPtr issue_kind_;
    ::google::protobuf::internal::ArenaStringPtr repres_isin_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* issue_size_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* nominal_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* dividend_rate_;
    ::google::protobuf::Timestamp* ipo_date_;
    ::google::protobuf::Timestamp* registry_date_;
    ::google::protobuf::Timestamp* placement_date_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* issue_size_plan_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* total_float_;
    int type_;
    bool div_yield_flag_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class AssetInstrument final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.AssetInstrument) */ {
 public:
  inline AssetInstrument() : AssetInstrument(nullptr) {}
  ~AssetInstrument() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AssetInstrument(::google::protobuf::internal::ConstantInitialized);

  inline AssetInstrument(const AssetInstrument& from)
      : AssetInstrument(nullptr, from) {}
  AssetInstrument(AssetInstrument&& from) noexcept
    : AssetInstrument() {
    *this = ::std::move(from);
  }

  inline AssetInstrument& operator=(const AssetInstrument& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetInstrument& operator=(AssetInstrument&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssetInstrument& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssetInstrument* internal_default_instance() {
    return reinterpret_cast<const AssetInstrument*>(
               &_AssetInstrument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(AssetInstrument& a, AssetInstrument& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetInstrument* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetInstrument* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssetInstrument* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssetInstrument>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AssetInstrument& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AssetInstrument& from) {
    AssetInstrument::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AssetInstrument* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.AssetInstrument";
  }
  protected:
  explicit AssetInstrument(::google::protobuf::Arena* arena);
  AssetInstrument(::google::protobuf::Arena* arena, const AssetInstrument& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinksFieldNumber = 6,
    kUidFieldNumber = 1,
    kFigiFieldNumber = 2,
    kInstrumentTypeFieldNumber = 3,
    kTickerFieldNumber = 4,
    kClassCodeFieldNumber = 5,
    kPositionUidFieldNumber = 11,
    kInstrumentKindFieldNumber = 10,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentLink links = 6;
  int links_size() const;
  private:
  int _internal_links_size() const;

  public:
  void clear_links() ;
  ::tinkoff::public_::invest::api::contract::v1::InstrumentLink* mutable_links(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::InstrumentLink >*
      mutable_links();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::InstrumentLink>& _internal_links() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::InstrumentLink>* _internal_mutable_links();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::InstrumentLink& links(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::InstrumentLink* add_links();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::InstrumentLink >&
      links() const;
  // string uid = 1;
  void clear_uid() ;
  const std::string& uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uid(Arg_&& arg, Args_... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* value);

  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(
      const std::string& value);
  std::string* _internal_mutable_uid();

  public:
  // string figi = 2;
  void clear_figi() ;
  const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_figi(Arg_&& arg, Args_... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string instrument_type = 3;
  void clear_instrument_type() ;
  const std::string& instrument_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_type(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_type();
  PROTOBUF_NODISCARD std::string* release_instrument_type();
  void set_allocated_instrument_type(std::string* value);

  private:
  const std::string& _internal_instrument_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_type(
      const std::string& value);
  std::string* _internal_mutable_instrument_type();

  public:
  // string ticker = 4;
  void clear_ticker() ;
  const std::string& ticker() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ticker(Arg_&& arg, Args_... args);
  std::string* mutable_ticker();
  PROTOBUF_NODISCARD std::string* release_ticker();
  void set_allocated_ticker(std::string* value);

  private:
  const std::string& _internal_ticker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticker(
      const std::string& value);
  std::string* _internal_mutable_ticker();

  public:
  // string class_code = 5;
  void clear_class_code() ;
  const std::string& class_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_code(Arg_&& arg, Args_... args);
  std::string* mutable_class_code();
  PROTOBUF_NODISCARD std::string* release_class_code();
  void set_allocated_class_code(std::string* value);

  private:
  const std::string& _internal_class_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_code(
      const std::string& value);
  std::string* _internal_mutable_class_code();

  public:
  // string position_uid = 11;
  void clear_position_uid() ;
  const std::string& position_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_position_uid(Arg_&& arg, Args_... args);
  std::string* mutable_position_uid();
  PROTOBUF_NODISCARD std::string* release_position_uid();
  void set_allocated_position_uid(std::string* value);

  private:
  const std::string& _internal_position_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_uid(
      const std::string& value);
  std::string* _internal_mutable_position_uid();

  public:
  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
  void clear_instrument_kind() ;
  ::tinkoff::public_::invest::api::contract::v1::InstrumentType instrument_kind() const;
  void set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::InstrumentType _internal_instrument_kind() const;
  void _internal_set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.AssetInstrument)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 8, 1,
      121, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::InstrumentLink > links_;
    ::google::protobuf::internal::ArenaStringPtr uid_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_type_;
    ::google::protobuf::internal::ArenaStringPtr ticker_;
    ::google::protobuf::internal::ArenaStringPtr class_code_;
    ::google::protobuf::internal::ArenaStringPtr position_uid_;
    int instrument_kind_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class AssetEtf final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.AssetEtf) */ {
 public:
  inline AssetEtf() : AssetEtf(nullptr) {}
  ~AssetEtf() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AssetEtf(::google::protobuf::internal::ConstantInitialized);

  inline AssetEtf(const AssetEtf& from)
      : AssetEtf(nullptr, from) {}
  AssetEtf(AssetEtf&& from) noexcept
    : AssetEtf() {
    *this = ::std::move(from);
  }

  inline AssetEtf& operator=(const AssetEtf& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetEtf& operator=(AssetEtf&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssetEtf& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssetEtf* internal_default_instance() {
    return reinterpret_cast<const AssetEtf*>(
               &_AssetEtf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(AssetEtf& a, AssetEtf& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetEtf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetEtf* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssetEtf* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssetEtf>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AssetEtf& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AssetEtf& from) {
    AssetEtf::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AssetEtf* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.AssetEtf";
  }
  protected:
  explicit AssetEtf(::google::protobuf::Arena* arena);
  AssetEtf(::google::protobuf::Arena* arena, const AssetEtf& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRebalancingDatesFieldNumber = 28,
    kPaymentTypeFieldNumber = 5,
    kRebalancingFreqFieldNumber = 10,
    kManagementTypeFieldNumber = 11,
    kPrimaryIndexFieldNumber = 12,
    kFocusTypeFieldNumber = 13,
    kDescriptionFieldNumber = 18,
    kPrimaryIndexDescriptionFieldNumber = 19,
    kPrimaryIndexCompanyFieldNumber = 20,
    kInavCodeFieldNumber = 22,
    kRebalancingPlanFieldNumber = 26,
    kTaxRateFieldNumber = 27,
    kIssueKindFieldNumber = 29,
    kNominalCurrencyFieldNumber = 31,
    kTotalExpenseFieldNumber = 1,
    kHurdleRateFieldNumber = 2,
    kPerformanceFeeFieldNumber = 3,
    kFixedCommissionFieldNumber = 4,
    kBuyPremiumFieldNumber = 7,
    kSellDiscountFieldNumber = 8,
    kNumShareFieldNumber = 15,
    kReleasedDateFieldNumber = 17,
    kIndexRecoveryPeriodFieldNumber = 21,
    kExpenseCommissionFieldNumber = 24,
    kPrimaryIndexTrackingErrorFieldNumber = 25,
    kNominalFieldNumber = 30,
    kWatermarkFlagFieldNumber = 6,
    kRebalancingFlagFieldNumber = 9,
    kLeveragedFlagFieldNumber = 14,
    kUcitsFlagFieldNumber = 16,
    kDivYieldFlagFieldNumber = 23,
  };
  // repeated .google.protobuf.Timestamp rebalancing_dates = 28;
  int rebalancing_dates_size() const;
  private:
  int _internal_rebalancing_dates_size() const;

  public:
  void clear_rebalancing_dates() ;
  ::google::protobuf::Timestamp* mutable_rebalancing_dates(int index);
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp >*
      mutable_rebalancing_dates();
  private:
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Timestamp>& _internal_rebalancing_dates() const;
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Timestamp>* _internal_mutable_rebalancing_dates();
  public:
  const ::google::protobuf::Timestamp& rebalancing_dates(int index) const;
  ::google::protobuf::Timestamp* add_rebalancing_dates();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp >&
      rebalancing_dates() const;
  // string payment_type = 5;
  void clear_payment_type() ;
  const std::string& payment_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payment_type(Arg_&& arg, Args_... args);
  std::string* mutable_payment_type();
  PROTOBUF_NODISCARD std::string* release_payment_type();
  void set_allocated_payment_type(std::string* value);

  private:
  const std::string& _internal_payment_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payment_type(
      const std::string& value);
  std::string* _internal_mutable_payment_type();

  public:
  // string rebalancing_freq = 10;
  void clear_rebalancing_freq() ;
  const std::string& rebalancing_freq() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rebalancing_freq(Arg_&& arg, Args_... args);
  std::string* mutable_rebalancing_freq();
  PROTOBUF_NODISCARD std::string* release_rebalancing_freq();
  void set_allocated_rebalancing_freq(std::string* value);

  private:
  const std::string& _internal_rebalancing_freq() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rebalancing_freq(
      const std::string& value);
  std::string* _internal_mutable_rebalancing_freq();

  public:
  // string management_type = 11;
  void clear_management_type() ;
  const std::string& management_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_management_type(Arg_&& arg, Args_... args);
  std::string* mutable_management_type();
  PROTOBUF_NODISCARD std::string* release_management_type();
  void set_allocated_management_type(std::string* value);

  private:
  const std::string& _internal_management_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_management_type(
      const std::string& value);
  std::string* _internal_mutable_management_type();

  public:
  // string primary_index = 12;
  void clear_primary_index() ;
  const std::string& primary_index() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_primary_index(Arg_&& arg, Args_... args);
  std::string* mutable_primary_index();
  PROTOBUF_NODISCARD std::string* release_primary_index();
  void set_allocated_primary_index(std::string* value);

  private:
  const std::string& _internal_primary_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primary_index(
      const std::string& value);
  std::string* _internal_mutable_primary_index();

  public:
  // string focus_type = 13;
  void clear_focus_type() ;
  const std::string& focus_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_focus_type(Arg_&& arg, Args_... args);
  std::string* mutable_focus_type();
  PROTOBUF_NODISCARD std::string* release_focus_type();
  void set_allocated_focus_type(std::string* value);

  private:
  const std::string& _internal_focus_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_focus_type(
      const std::string& value);
  std::string* _internal_mutable_focus_type();

  public:
  // string description = 18;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string primary_index_description = 19;
  void clear_primary_index_description() ;
  const std::string& primary_index_description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_primary_index_description(Arg_&& arg, Args_... args);
  std::string* mutable_primary_index_description();
  PROTOBUF_NODISCARD std::string* release_primary_index_description();
  void set_allocated_primary_index_description(std::string* value);

  private:
  const std::string& _internal_primary_index_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primary_index_description(
      const std::string& value);
  std::string* _internal_mutable_primary_index_description();

  public:
  // string primary_index_company = 20;
  void clear_primary_index_company() ;
  const std::string& primary_index_company() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_primary_index_company(Arg_&& arg, Args_... args);
  std::string* mutable_primary_index_company();
  PROTOBUF_NODISCARD std::string* release_primary_index_company();
  void set_allocated_primary_index_company(std::string* value);

  private:
  const std::string& _internal_primary_index_company() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primary_index_company(
      const std::string& value);
  std::string* _internal_mutable_primary_index_company();

  public:
  // string inav_code = 22;
  void clear_inav_code() ;
  const std::string& inav_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_inav_code(Arg_&& arg, Args_... args);
  std::string* mutable_inav_code();
  PROTOBUF_NODISCARD std::string* release_inav_code();
  void set_allocated_inav_code(std::string* value);

  private:
  const std::string& _internal_inav_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inav_code(
      const std::string& value);
  std::string* _internal_mutable_inav_code();

  public:
  // string rebalancing_plan = 26;
  void clear_rebalancing_plan() ;
  const std::string& rebalancing_plan() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rebalancing_plan(Arg_&& arg, Args_... args);
  std::string* mutable_rebalancing_plan();
  PROTOBUF_NODISCARD std::string* release_rebalancing_plan();
  void set_allocated_rebalancing_plan(std::string* value);

  private:
  const std::string& _internal_rebalancing_plan() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rebalancing_plan(
      const std::string& value);
  std::string* _internal_mutable_rebalancing_plan();

  public:
  // string tax_rate = 27;
  void clear_tax_rate() ;
  const std::string& tax_rate() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tax_rate(Arg_&& arg, Args_... args);
  std::string* mutable_tax_rate();
  PROTOBUF_NODISCARD std::string* release_tax_rate();
  void set_allocated_tax_rate(std::string* value);

  private:
  const std::string& _internal_tax_rate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tax_rate(
      const std::string& value);
  std::string* _internal_mutable_tax_rate();

  public:
  // string issue_kind = 29;
  void clear_issue_kind() ;
  const std::string& issue_kind() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_issue_kind(Arg_&& arg, Args_... args);
  std::string* mutable_issue_kind();
  PROTOBUF_NODISCARD std::string* release_issue_kind();
  void set_allocated_issue_kind(std::string* value);

  private:
  const std::string& _internal_issue_kind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_issue_kind(
      const std::string& value);
  std::string* _internal_mutable_issue_kind();

  public:
  // string nominal_currency = 31;
  void clear_nominal_currency() ;
  const std::string& nominal_currency() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nominal_currency(Arg_&& arg, Args_... args);
  std::string* mutable_nominal_currency();
  PROTOBUF_NODISCARD std::string* release_nominal_currency();
  void set_allocated_nominal_currency(std::string* value);

  private:
  const std::string& _internal_nominal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nominal_currency(
      const std::string& value);
  std::string* _internal_mutable_nominal_currency();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation total_expense = 1;
  bool has_total_expense() const;
  void clear_total_expense() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& total_expense() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_total_expense();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_total_expense();
  void set_allocated_total_expense(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_total_expense(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_total_expense();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_total_expense() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_total_expense();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation hurdle_rate = 2;
  bool has_hurdle_rate() const;
  void clear_hurdle_rate() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& hurdle_rate() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_hurdle_rate();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_hurdle_rate();
  void set_allocated_hurdle_rate(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_hurdle_rate(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_hurdle_rate();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_hurdle_rate() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_hurdle_rate();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation performance_fee = 3;
  bool has_performance_fee() const;
  void clear_performance_fee() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& performance_fee() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_performance_fee();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_performance_fee();
  void set_allocated_performance_fee(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_performance_fee(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_performance_fee();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_performance_fee() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_performance_fee();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation fixed_commission = 4;
  bool has_fixed_commission() const;
  void clear_fixed_commission() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& fixed_commission() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_fixed_commission();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_fixed_commission();
  void set_allocated_fixed_commission(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_fixed_commission(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_fixed_commission();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_fixed_commission() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_fixed_commission();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation buy_premium = 7;
  bool has_buy_premium() const;
  void clear_buy_premium() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& buy_premium() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_buy_premium();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_buy_premium();
  void set_allocated_buy_premium(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_buy_premium(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_buy_premium();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_buy_premium() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_buy_premium();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation sell_discount = 8;
  bool has_sell_discount() const;
  void clear_sell_discount() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& sell_discount() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_sell_discount();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_sell_discount();
  void set_allocated_sell_discount(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_sell_discount(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_sell_discount();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_sell_discount() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_sell_discount();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation num_share = 15;
  bool has_num_share() const;
  void clear_num_share() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& num_share() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_num_share();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_num_share();
  void set_allocated_num_share(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_num_share(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_num_share();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_num_share() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_num_share();

  public:
  // .google.protobuf.Timestamp released_date = 17;
  bool has_released_date() const;
  void clear_released_date() ;
  const ::google::protobuf::Timestamp& released_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_released_date();
  ::google::protobuf::Timestamp* mutable_released_date();
  void set_allocated_released_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_released_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_released_date();

  private:
  const ::google::protobuf::Timestamp& _internal_released_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_released_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation index_recovery_period = 21;
  bool has_index_recovery_period() const;
  void clear_index_recovery_period() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& index_recovery_period() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_index_recovery_period();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_index_recovery_period();
  void set_allocated_index_recovery_period(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_index_recovery_period(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_index_recovery_period();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_index_recovery_period() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_index_recovery_period();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation expense_commission = 24;
  bool has_expense_commission() const;
  void clear_expense_commission() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& expense_commission() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_expense_commission();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_expense_commission();
  void set_allocated_expense_commission(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_expense_commission(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_expense_commission();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_expense_commission() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_expense_commission();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation primary_index_tracking_error = 25;
  bool has_primary_index_tracking_error() const;
  void clear_primary_index_tracking_error() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& primary_index_tracking_error() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_primary_index_tracking_error();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_primary_index_tracking_error();
  void set_allocated_primary_index_tracking_error(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_primary_index_tracking_error(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_primary_index_tracking_error();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_primary_index_tracking_error() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_primary_index_tracking_error();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 30;
  bool has_nominal() const;
  void clear_nominal() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& nominal() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_nominal();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_nominal();
  void set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_nominal();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_nominal() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_nominal();

  public:
  // bool watermark_flag = 6;
  void clear_watermark_flag() ;
  bool watermark_flag() const;
  void set_watermark_flag(bool value);

  private:
  bool _internal_watermark_flag() const;
  void _internal_set_watermark_flag(bool value);

  public:
  // bool rebalancing_flag = 9;
  void clear_rebalancing_flag() ;
  bool rebalancing_flag() const;
  void set_rebalancing_flag(bool value);

  private:
  bool _internal_rebalancing_flag() const;
  void _internal_set_rebalancing_flag(bool value);

  public:
  // bool leveraged_flag = 14;
  void clear_leveraged_flag() ;
  bool leveraged_flag() const;
  void set_leveraged_flag(bool value);

  private:
  bool _internal_leveraged_flag() const;
  void _internal_set_leveraged_flag(bool value);

  public:
  // bool ucits_flag = 16;
  void clear_ucits_flag() ;
  bool ucits_flag() const;
  void set_ucits_flag(bool value);

  private:
  bool _internal_ucits_flag() const;
  void _internal_set_ucits_flag(bool value);

  public:
  // bool div_yield_flag = 23;
  void clear_div_yield_flag() ;
  bool div_yield_flag() const;
  void set_div_yield_flag(bool value);

  private:
  bool _internal_div_yield_flag() const;
  void _internal_set_div_yield_flag(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.AssetEtf)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 31, 13,
      262, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp > rebalancing_dates_;
    ::google::protobuf::internal::ArenaStringPtr payment_type_;
    ::google::protobuf::internal::ArenaStringPtr rebalancing_freq_;
    ::google::protobuf::internal::ArenaStringPtr management_type_;
    ::google::protobuf::internal::ArenaStringPtr primary_index_;
    ::google::protobuf::internal::ArenaStringPtr focus_type_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr primary_index_description_;
    ::google::protobuf::internal::ArenaStringPtr primary_index_company_;
    ::google::protobuf::internal::ArenaStringPtr inav_code_;
    ::google::protobuf::internal::ArenaStringPtr rebalancing_plan_;
    ::google::protobuf::internal::ArenaStringPtr tax_rate_;
    ::google::protobuf::internal::ArenaStringPtr issue_kind_;
    ::google::protobuf::internal::ArenaStringPtr nominal_currency_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* total_expense_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* hurdle_rate_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* performance_fee_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* fixed_commission_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* buy_premium_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* sell_discount_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* num_share_;
    ::google::protobuf::Timestamp* released_date_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* index_recovery_period_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* expense_commission_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* primary_index_tracking_error_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* nominal_;
    bool watermark_flag_;
    bool rebalancing_flag_;
    bool leveraged_flag_;
    bool ucits_flag_;
    bool div_yield_flag_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class AssetClearingCertificate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate) */ {
 public:
  inline AssetClearingCertificate() : AssetClearingCertificate(nullptr) {}
  ~AssetClearingCertificate() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AssetClearingCertificate(::google::protobuf::internal::ConstantInitialized);

  inline AssetClearingCertificate(const AssetClearingCertificate& from)
      : AssetClearingCertificate(nullptr, from) {}
  AssetClearingCertificate(AssetClearingCertificate&& from) noexcept
    : AssetClearingCertificate() {
    *this = ::std::move(from);
  }

  inline AssetClearingCertificate& operator=(const AssetClearingCertificate& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetClearingCertificate& operator=(AssetClearingCertificate&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssetClearingCertificate& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssetClearingCertificate* internal_default_instance() {
    return reinterpret_cast<const AssetClearingCertificate*>(
               &_AssetClearingCertificate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(AssetClearingCertificate& a, AssetClearingCertificate& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetClearingCertificate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetClearingCertificate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssetClearingCertificate* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssetClearingCertificate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AssetClearingCertificate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AssetClearingCertificate& from) {
    AssetClearingCertificate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AssetClearingCertificate* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate";
  }
  protected:
  explicit AssetClearingCertificate(::google::protobuf::Arena* arena);
  AssetClearingCertificate(::google::protobuf::Arena* arena, const AssetClearingCertificate& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNominalCurrencyFieldNumber = 2,
    kNominalFieldNumber = 1,
  };
  // string nominal_currency = 2;
  void clear_nominal_currency() ;
  const std::string& nominal_currency() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nominal_currency(Arg_&& arg, Args_... args);
  std::string* mutable_nominal_currency();
  PROTOBUF_NODISCARD std::string* release_nominal_currency();
  void set_allocated_nominal_currency(std::string* value);

  private:
  const std::string& _internal_nominal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nominal_currency(
      const std::string& value);
  std::string* _internal_mutable_nominal_currency();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 1;
  bool has_nominal() const;
  void clear_nominal() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& nominal() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_nominal();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_nominal();
  void set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_nominal();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_nominal() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_nominal();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      88, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr nominal_currency_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* nominal_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class AssetBond final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.AssetBond) */ {
 public:
  inline AssetBond() : AssetBond(nullptr) {}
  ~AssetBond() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AssetBond(::google::protobuf::internal::ConstantInitialized);

  inline AssetBond(const AssetBond& from)
      : AssetBond(nullptr, from) {}
  AssetBond(AssetBond&& from) noexcept
    : AssetBond() {
    *this = ::std::move(from);
  }

  inline AssetBond& operator=(const AssetBond& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetBond& operator=(AssetBond&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssetBond& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssetBond* internal_default_instance() {
    return reinterpret_cast<const AssetBond*>(
               &_AssetBond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(AssetBond& a, AssetBond& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetBond* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetBond* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssetBond* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssetBond>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AssetBond& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AssetBond& from) {
    AssetBond::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AssetBond* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.AssetBond";
  }
  protected:
  explicit AssetBond(::google::protobuf::Arena* arena);
  AssetBond(::google::protobuf::Arena* arena, const AssetBond& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBorrowNameFieldNumber = 2,
    kNominalCurrencyFieldNumber = 5,
    kIssueKindFieldNumber = 6,
    kInterestKindFieldNumber = 7,
    kReturnConditionFieldNumber = 17,
    kCurrentNominalFieldNumber = 1,
    kIssueSizeFieldNumber = 3,
    kNominalFieldNumber = 4,
    kMaturityDateFieldNumber = 16,
    kStateRegDateFieldNumber = 18,
    kPlacementDateFieldNumber = 19,
    kPlacementPriceFieldNumber = 20,
    kIssueSizePlanFieldNumber = 21,
    kCouponQuantityPerYearFieldNumber = 8,
    kIndexedNominalFlagFieldNumber = 9,
    kSubordinatedFlagFieldNumber = 10,
    kCollateralFlagFieldNumber = 11,
    kTaxFreeFlagFieldNumber = 12,
    kAmortizationFlagFieldNumber = 13,
    kFloatingCouponFlagFieldNumber = 14,
    kPerpetualFlagFieldNumber = 15,
  };
  // string borrow_name = 2;
  void clear_borrow_name() ;
  const std::string& borrow_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_borrow_name(Arg_&& arg, Args_... args);
  std::string* mutable_borrow_name();
  PROTOBUF_NODISCARD std::string* release_borrow_name();
  void set_allocated_borrow_name(std::string* value);

  private:
  const std::string& _internal_borrow_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_borrow_name(
      const std::string& value);
  std::string* _internal_mutable_borrow_name();

  public:
  // string nominal_currency = 5;
  void clear_nominal_currency() ;
  const std::string& nominal_currency() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nominal_currency(Arg_&& arg, Args_... args);
  std::string* mutable_nominal_currency();
  PROTOBUF_NODISCARD std::string* release_nominal_currency();
  void set_allocated_nominal_currency(std::string* value);

  private:
  const std::string& _internal_nominal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nominal_currency(
      const std::string& value);
  std::string* _internal_mutable_nominal_currency();

  public:
  // string issue_kind = 6;
  void clear_issue_kind() ;
  const std::string& issue_kind() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_issue_kind(Arg_&& arg, Args_... args);
  std::string* mutable_issue_kind();
  PROTOBUF_NODISCARD std::string* release_issue_kind();
  void set_allocated_issue_kind(std::string* value);

  private:
  const std::string& _internal_issue_kind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_issue_kind(
      const std::string& value);
  std::string* _internal_mutable_issue_kind();

  public:
  // string interest_kind = 7;
  void clear_interest_kind() ;
  const std::string& interest_kind() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_interest_kind(Arg_&& arg, Args_... args);
  std::string* mutable_interest_kind();
  PROTOBUF_NODISCARD std::string* release_interest_kind();
  void set_allocated_interest_kind(std::string* value);

  private:
  const std::string& _internal_interest_kind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interest_kind(
      const std::string& value);
  std::string* _internal_mutable_interest_kind();

  public:
  // string return_condition = 17;
  void clear_return_condition() ;
  const std::string& return_condition() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_return_condition(Arg_&& arg, Args_... args);
  std::string* mutable_return_condition();
  PROTOBUF_NODISCARD std::string* release_return_condition();
  void set_allocated_return_condition(std::string* value);

  private:
  const std::string& _internal_return_condition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_return_condition(
      const std::string& value);
  std::string* _internal_mutable_return_condition();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation current_nominal = 1;
  bool has_current_nominal() const;
  void clear_current_nominal() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& current_nominal() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_current_nominal();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_current_nominal();
  void set_allocated_current_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_current_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_current_nominal();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_current_nominal() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_current_nominal();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 3;
  bool has_issue_size() const;
  void clear_issue_size() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& issue_size() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_issue_size();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_issue_size();
  void set_allocated_issue_size(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_issue_size(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_issue_size();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_issue_size() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_issue_size();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 4;
  bool has_nominal() const;
  void clear_nominal() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& nominal() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_nominal();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_nominal();
  void set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_nominal();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_nominal() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_nominal();

  public:
  // .google.protobuf.Timestamp maturity_date = 16;
  bool has_maturity_date() const;
  void clear_maturity_date() ;
  const ::google::protobuf::Timestamp& maturity_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_maturity_date();
  ::google::protobuf::Timestamp* mutable_maturity_date();
  void set_allocated_maturity_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_maturity_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_maturity_date();

  private:
  const ::google::protobuf::Timestamp& _internal_maturity_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_maturity_date();

  public:
  // .google.protobuf.Timestamp state_reg_date = 18;
  bool has_state_reg_date() const;
  void clear_state_reg_date() ;
  const ::google::protobuf::Timestamp& state_reg_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_state_reg_date();
  ::google::protobuf::Timestamp* mutable_state_reg_date();
  void set_allocated_state_reg_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_state_reg_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_state_reg_date();

  private:
  const ::google::protobuf::Timestamp& _internal_state_reg_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_state_reg_date();

  public:
  // .google.protobuf.Timestamp placement_date = 19;
  bool has_placement_date() const;
  void clear_placement_date() ;
  const ::google::protobuf::Timestamp& placement_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_placement_date();
  ::google::protobuf::Timestamp* mutable_placement_date();
  void set_allocated_placement_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_placement_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_placement_date();

  private:
  const ::google::protobuf::Timestamp& _internal_placement_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_placement_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation placement_price = 20;
  bool has_placement_price() const;
  void clear_placement_price() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& placement_price() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_placement_price();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_placement_price();
  void set_allocated_placement_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_placement_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_placement_price();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_placement_price() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_placement_price();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 21;
  bool has_issue_size_plan() const;
  void clear_issue_size_plan() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& issue_size_plan() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_issue_size_plan();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_issue_size_plan();
  void set_allocated_issue_size_plan(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_issue_size_plan(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_issue_size_plan();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_issue_size_plan() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_issue_size_plan();

  public:
  // int32 coupon_quantity_per_year = 8;
  void clear_coupon_quantity_per_year() ;
  ::int32_t coupon_quantity_per_year() const;
  void set_coupon_quantity_per_year(::int32_t value);

  private:
  ::int32_t _internal_coupon_quantity_per_year() const;
  void _internal_set_coupon_quantity_per_year(::int32_t value);

  public:
  // bool indexed_nominal_flag = 9;
  void clear_indexed_nominal_flag() ;
  bool indexed_nominal_flag() const;
  void set_indexed_nominal_flag(bool value);

  private:
  bool _internal_indexed_nominal_flag() const;
  void _internal_set_indexed_nominal_flag(bool value);

  public:
  // bool subordinated_flag = 10;
  void clear_subordinated_flag() ;
  bool subordinated_flag() const;
  void set_subordinated_flag(bool value);

  private:
  bool _internal_subordinated_flag() const;
  void _internal_set_subordinated_flag(bool value);

  public:
  // bool collateral_flag = 11;
  void clear_collateral_flag() ;
  bool collateral_flag() const;
  void set_collateral_flag(bool value);

  private:
  bool _internal_collateral_flag() const;
  void _internal_set_collateral_flag(bool value);

  public:
  // bool tax_free_flag = 12;
  void clear_tax_free_flag() ;
  bool tax_free_flag() const;
  void set_tax_free_flag(bool value);

  private:
  bool _internal_tax_free_flag() const;
  void _internal_set_tax_free_flag(bool value);

  public:
  // bool amortization_flag = 13;
  void clear_amortization_flag() ;
  bool amortization_flag() const;
  void set_amortization_flag(bool value);

  private:
  bool _internal_amortization_flag() const;
  void _internal_set_amortization_flag(bool value);

  public:
  // bool floating_coupon_flag = 14;
  void clear_floating_coupon_flag() ;
  bool floating_coupon_flag() const;
  void set_floating_coupon_flag(bool value);

  private:
  bool _internal_floating_coupon_flag() const;
  void _internal_set_floating_coupon_flag(bool value);

  public:
  // bool perpetual_flag = 15;
  void clear_perpetual_flag() ;
  bool perpetual_flag() const;
  void set_perpetual_flag(bool value);

  private:
  bool _internal_perpetual_flag() const;
  void _internal_set_perpetual_flag(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.AssetBond)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 21, 8,
      139, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr borrow_name_;
    ::google::protobuf::internal::ArenaStringPtr nominal_currency_;
    ::google::protobuf::internal::ArenaStringPtr issue_kind_;
    ::google::protobuf::internal::ArenaStringPtr interest_kind_;
    ::google::protobuf::internal::ArenaStringPtr return_condition_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* current_nominal_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* issue_size_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* nominal_;
    ::google::protobuf::Timestamp* maturity_date_;
    ::google::protobuf::Timestamp* state_reg_date_;
    ::google::protobuf::Timestamp* placement_date_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* placement_price_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* issue_size_plan_;
    ::int32_t coupon_quantity_per_year_;
    bool indexed_nominal_flag_;
    bool subordinated_flag_;
    bool collateral_flag_;
    bool tax_free_flag_;
    bool amortization_flag_;
    bool floating_coupon_flag_;
    bool perpetual_flag_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class AccruedInterest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.AccruedInterest) */ {
 public:
  inline AccruedInterest() : AccruedInterest(nullptr) {}
  ~AccruedInterest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AccruedInterest(::google::protobuf::internal::ConstantInitialized);

  inline AccruedInterest(const AccruedInterest& from)
      : AccruedInterest(nullptr, from) {}
  AccruedInterest(AccruedInterest&& from) noexcept
    : AccruedInterest() {
    *this = ::std::move(from);
  }

  inline AccruedInterest& operator=(const AccruedInterest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccruedInterest& operator=(AccruedInterest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccruedInterest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccruedInterest* internal_default_instance() {
    return reinterpret_cast<const AccruedInterest*>(
               &_AccruedInterest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(AccruedInterest& a, AccruedInterest& b) {
    a.Swap(&b);
  }
  inline void Swap(AccruedInterest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccruedInterest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccruedInterest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccruedInterest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AccruedInterest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AccruedInterest& from) {
    AccruedInterest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AccruedInterest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.AccruedInterest";
  }
  protected:
  explicit AccruedInterest(::google::protobuf::Arena* arena);
  AccruedInterest(::google::protobuf::Arena* arena, const AccruedInterest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateFieldNumber = 1,
    kValueFieldNumber = 2,
    kValuePercentFieldNumber = 3,
    kNominalFieldNumber = 4,
  };
  // .google.protobuf.Timestamp date = 1;
  bool has_date() const;
  void clear_date() ;
  const ::google::protobuf::Timestamp& date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_date();
  ::google::protobuf::Timestamp* mutable_date();
  void set_allocated_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_date();

  private:
  const ::google::protobuf::Timestamp& _internal_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_date();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation value = 2;
  bool has_value() const;
  void clear_value() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& value() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_value();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_value();
  void set_allocated_value(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_value(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_value();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_value() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_value();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation value_percent = 3;
  bool has_value_percent() const;
  void clear_value_percent() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& value_percent() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_value_percent();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_value_percent();
  void set_allocated_value_percent(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_value_percent(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_value_percent();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_value_percent() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_value_percent();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 4;
  bool has_nominal() const;
  void clear_nominal() ;
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& nominal() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Quotation* release_nominal();
  ::tinkoff::public_::invest::api::contract::v1::Quotation* mutable_nominal();
  void set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value);
  ::tinkoff::public_::invest::api::contract::v1::Quotation* unsafe_arena_release_nominal();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Quotation& _internal_nominal() const;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _internal_mutable_nominal();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.AccruedInterest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 4,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Timestamp* date_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* value_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* value_percent_;
    ::tinkoff::public_::invest::api::contract::v1::Quotation* nominal_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class TradingInterval final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.TradingInterval) */ {
 public:
  inline TradingInterval() : TradingInterval(nullptr) {}
  ~TradingInterval() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TradingInterval(::google::protobuf::internal::ConstantInitialized);

  inline TradingInterval(const TradingInterval& from)
      : TradingInterval(nullptr, from) {}
  TradingInterval(TradingInterval&& from) noexcept
    : TradingInterval() {
    *this = ::std::move(from);
  }

  inline TradingInterval& operator=(const TradingInterval& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradingInterval& operator=(TradingInterval&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TradingInterval& default_instance() {
    return *internal_default_instance();
  }
  static inline const TradingInterval* internal_default_instance() {
    return reinterpret_cast<const TradingInterval*>(
               &_TradingInterval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(TradingInterval& a, TradingInterval& b) {
    a.Swap(&b);
  }
  inline void Swap(TradingInterval* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradingInterval* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TradingInterval* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TradingInterval>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TradingInterval& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TradingInterval& from) {
    TradingInterval::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TradingInterval* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.TradingInterval";
  }
  protected:
  explicit TradingInterval(::google::protobuf::Arena* arena);
  TradingInterval(::google::protobuf::Arena* arena, const TradingInterval& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using TimeInterval = TradingInterval_TimeInterval;

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kIntervalFieldNumber = 2,
  };
  // string type = 1;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // .tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval interval = 2;
  bool has_interval() const;
  void clear_interval() ;
  const ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval& interval() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval* release_interval();
  ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval* mutable_interval();
  void set_allocated_interval(::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval* value);
  void unsafe_arena_set_allocated_interval(::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval* value);
  ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval* unsafe_arena_release_interval();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval& _internal_interval() const;
  ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval* _internal_mutable_interval();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.TradingInterval)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      67, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval* interval_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class SharesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.SharesResponse) */ {
 public:
  inline SharesResponse() : SharesResponse(nullptr) {}
  ~SharesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SharesResponse(::google::protobuf::internal::ConstantInitialized);

  inline SharesResponse(const SharesResponse& from)
      : SharesResponse(nullptr, from) {}
  SharesResponse(SharesResponse&& from) noexcept
    : SharesResponse() {
    *this = ::std::move(from);
  }

  inline SharesResponse& operator=(const SharesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharesResponse& operator=(SharesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SharesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharesResponse* internal_default_instance() {
    return reinterpret_cast<const SharesResponse*>(
               &_SharesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SharesResponse& a, SharesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SharesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharesResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SharesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SharesResponse& from) {
    SharesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SharesResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.SharesResponse";
  }
  protected:
  explicit SharesResponse(::google::protobuf::Arena* arena);
  SharesResponse(::google::protobuf::Arena* arena, const SharesResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentsFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.Share instruments = 1;
  int instruments_size() const;
  private:
  int _internal_instruments_size() const;

  public:
  void clear_instruments() ;
  ::tinkoff::public_::invest::api::contract::v1::Share* mutable_instruments(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Share >*
      mutable_instruments();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Share>& _internal_instruments() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Share>* _internal_mutable_instruments();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::Share& instruments(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::Share* add_instruments();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Share >&
      instruments() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.SharesResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Share > instruments_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class ShareResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.ShareResponse) */ {
 public:
  inline ShareResponse() : ShareResponse(nullptr) {}
  ~ShareResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ShareResponse(::google::protobuf::internal::ConstantInitialized);

  inline ShareResponse(const ShareResponse& from)
      : ShareResponse(nullptr, from) {}
  ShareResponse(ShareResponse&& from) noexcept
    : ShareResponse() {
    *this = ::std::move(from);
  }

  inline ShareResponse& operator=(const ShareResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShareResponse& operator=(ShareResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShareResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShareResponse* internal_default_instance() {
    return reinterpret_cast<const ShareResponse*>(
               &_ShareResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ShareResponse& a, ShareResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShareResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShareResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShareResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShareResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ShareResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ShareResponse& from) {
    ShareResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ShareResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.ShareResponse";
  }
  protected:
  explicit ShareResponse(::google::protobuf::Arena* arena);
  ShareResponse(::google::protobuf::Arena* arena, const ShareResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentFieldNumber = 1,
  };
  // .tinkoff.public_.invest.api.contract.v1.Share instrument = 1;
  bool has_instrument() const;
  void clear_instrument() ;
  const ::tinkoff::public_::invest::api::contract::v1::Share& instrument() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Share* release_instrument();
  ::tinkoff::public_::invest::api::contract::v1::Share* mutable_instrument();
  void set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Share* value);
  void unsafe_arena_set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Share* value);
  ::tinkoff::public_::invest::api::contract::v1::Share* unsafe_arena_release_instrument();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Share& _internal_instrument() const;
  ::tinkoff::public_::invest::api::contract::v1::Share* _internal_mutable_instrument();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.ShareResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tinkoff::public_::invest::api::contract::v1::Share* instrument_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class OptionsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.OptionsResponse) */ {
 public:
  inline OptionsResponse() : OptionsResponse(nullptr) {}
  ~OptionsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OptionsResponse(::google::protobuf::internal::ConstantInitialized);

  inline OptionsResponse(const OptionsResponse& from)
      : OptionsResponse(nullptr, from) {}
  OptionsResponse(OptionsResponse&& from) noexcept
    : OptionsResponse() {
    *this = ::std::move(from);
  }

  inline OptionsResponse& operator=(const OptionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionsResponse& operator=(OptionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionsResponse* internal_default_instance() {
    return reinterpret_cast<const OptionsResponse*>(
               &_OptionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(OptionsResponse& a, OptionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OptionsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OptionsResponse& from) {
    OptionsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OptionsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.OptionsResponse";
  }
  protected:
  explicit OptionsResponse(::google::protobuf::Arena* arena);
  OptionsResponse(::google::protobuf::Arena* arena, const OptionsResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentsFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.Option instruments = 1;
  int instruments_size() const;
  private:
  int _internal_instruments_size() const;

  public:
  void clear_instruments() ;
  ::tinkoff::public_::invest::api::contract::v1::Option* mutable_instruments(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Option >*
      mutable_instruments();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Option>& _internal_instruments() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Option>* _internal_mutable_instruments();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::Option& instruments(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::Option* add_instruments();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Option >&
      instruments() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.OptionsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Option > instruments_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class OptionResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.OptionResponse) */ {
 public:
  inline OptionResponse() : OptionResponse(nullptr) {}
  ~OptionResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OptionResponse(::google::protobuf::internal::ConstantInitialized);

  inline OptionResponse(const OptionResponse& from)
      : OptionResponse(nullptr, from) {}
  OptionResponse(OptionResponse&& from) noexcept
    : OptionResponse() {
    *this = ::std::move(from);
  }

  inline OptionResponse& operator=(const OptionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionResponse& operator=(OptionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionResponse* internal_default_instance() {
    return reinterpret_cast<const OptionResponse*>(
               &_OptionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(OptionResponse& a, OptionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OptionResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OptionResponse& from) {
    OptionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OptionResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.OptionResponse";
  }
  protected:
  explicit OptionResponse(::google::protobuf::Arena* arena);
  OptionResponse(::google::protobuf::Arena* arena, const OptionResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentFieldNumber = 1,
  };
  // .tinkoff.public_.invest.api.contract.v1.Option instrument = 1;
  bool has_instrument() const;
  void clear_instrument() ;
  const ::tinkoff::public_::invest::api::contract::v1::Option& instrument() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Option* release_instrument();
  ::tinkoff::public_::invest::api::contract::v1::Option* mutable_instrument();
  void set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Option* value);
  void unsafe_arena_set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Option* value);
  ::tinkoff::public_::invest::api::contract::v1::Option* unsafe_arena_release_instrument();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Option& _internal_instrument() const;
  ::tinkoff::public_::invest::api::contract::v1::Option* _internal_mutable_instrument();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.OptionResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tinkoff::public_::invest::api::contract::v1::Option* instrument_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class InstrumentResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.InstrumentResponse) */ {
 public:
  inline InstrumentResponse() : InstrumentResponse(nullptr) {}
  ~InstrumentResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InstrumentResponse(::google::protobuf::internal::ConstantInitialized);

  inline InstrumentResponse(const InstrumentResponse& from)
      : InstrumentResponse(nullptr, from) {}
  InstrumentResponse(InstrumentResponse&& from) noexcept
    : InstrumentResponse() {
    *this = ::std::move(from);
  }

  inline InstrumentResponse& operator=(const InstrumentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentResponse& operator=(InstrumentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstrumentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstrumentResponse* internal_default_instance() {
    return reinterpret_cast<const InstrumentResponse*>(
               &_InstrumentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(InstrumentResponse& a, InstrumentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstrumentResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstrumentResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InstrumentResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const InstrumentResponse& from) {
    InstrumentResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(InstrumentResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.InstrumentResponse";
  }
  protected:
  explicit InstrumentResponse(::google::protobuf::Arena* arena);
  InstrumentResponse(::google::protobuf::Arena* arena, const InstrumentResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentFieldNumber = 1,
  };
  // .tinkoff.public_.invest.api.contract.v1.Instrument instrument = 1;
  bool has_instrument() const;
  void clear_instrument() ;
  const ::tinkoff::public_::invest::api::contract::v1::Instrument& instrument() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Instrument* release_instrument();
  ::tinkoff::public_::invest::api::contract::v1::Instrument* mutable_instrument();
  void set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Instrument* value);
  void unsafe_arena_set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Instrument* value);
  ::tinkoff::public_::invest::api::contract::v1::Instrument* unsafe_arena_release_instrument();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Instrument& _internal_instrument() const;
  ::tinkoff::public_::invest::api::contract::v1::Instrument* _internal_mutable_instrument();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.InstrumentResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tinkoff::public_::invest::api::contract::v1::Instrument* instrument_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetForecastResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetForecastResponse) */ {
 public:
  inline GetForecastResponse() : GetForecastResponse(nullptr) {}
  ~GetForecastResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetForecastResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetForecastResponse(const GetForecastResponse& from)
      : GetForecastResponse(nullptr, from) {}
  GetForecastResponse(GetForecastResponse&& from) noexcept
    : GetForecastResponse() {
    *this = ::std::move(from);
  }

  inline GetForecastResponse& operator=(const GetForecastResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetForecastResponse& operator=(GetForecastResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetForecastResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetForecastResponse* internal_default_instance() {
    return reinterpret_cast<const GetForecastResponse*>(
               &_GetForecastResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(GetForecastResponse& a, GetForecastResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetForecastResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetForecastResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetForecastResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetForecastResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetForecastResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetForecastResponse& from) {
    GetForecastResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetForecastResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetForecastResponse";
  }
  protected:
  explicit GetForecastResponse(::google::protobuf::Arena* arena);
  GetForecastResponse(::google::protobuf::Arena* arena, const GetForecastResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using TargetItem = GetForecastResponse_TargetItem;
  using ConsensusItem = GetForecastResponse_ConsensusItem;

  // accessors -------------------------------------------------------

  enum : int {
    kTargetsFieldNumber = 1,
    kConsensusFieldNumber = 2,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem targets = 1;
  int targets_size() const;
  private:
  int _internal_targets_size() const;

  public:
  void clear_targets() ;
  ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem* mutable_targets(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem >*
      mutable_targets();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem>& _internal_targets() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem>* _internal_mutable_targets();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem& targets(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem* add_targets();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem >&
      targets() const;
  // .tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem consensus = 2;
  bool has_consensus() const;
  void clear_consensus() ;
  const ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem& consensus() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem* release_consensus();
  ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem* mutable_consensus();
  void set_allocated_consensus(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem* value);
  void unsafe_arena_set_allocated_consensus(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem* value);
  ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem* unsafe_arena_release_consensus();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem& _internal_consensus() const;
  ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem* _internal_mutable_consensus();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetForecastResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem > targets_;
    ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem* consensus_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetDividendsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetDividendsResponse) */ {
 public:
  inline GetDividendsResponse() : GetDividendsResponse(nullptr) {}
  ~GetDividendsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetDividendsResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetDividendsResponse(const GetDividendsResponse& from)
      : GetDividendsResponse(nullptr, from) {}
  GetDividendsResponse(GetDividendsResponse&& from) noexcept
    : GetDividendsResponse() {
    *this = ::std::move(from);
  }

  inline GetDividendsResponse& operator=(const GetDividendsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDividendsResponse& operator=(GetDividendsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDividendsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDividendsResponse* internal_default_instance() {
    return reinterpret_cast<const GetDividendsResponse*>(
               &_GetDividendsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(GetDividendsResponse& a, GetDividendsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDividendsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDividendsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDividendsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDividendsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetDividendsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetDividendsResponse& from) {
    GetDividendsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetDividendsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetDividendsResponse";
  }
  protected:
  explicit GetDividendsResponse(::google::protobuf::Arena* arena);
  GetDividendsResponse(::google::protobuf::Arena* arena, const GetDividendsResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDividendsFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.Dividend dividends = 1;
  int dividends_size() const;
  private:
  int _internal_dividends_size() const;

  public:
  void clear_dividends() ;
  ::tinkoff::public_::invest::api::contract::v1::Dividend* mutable_dividends(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Dividend >*
      mutable_dividends();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Dividend>& _internal_dividends() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Dividend>* _internal_mutable_dividends();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::Dividend& dividends(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::Dividend* add_dividends();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Dividend >&
      dividends() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetDividendsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Dividend > dividends_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetConsensusForecastsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse) */ {
 public:
  inline GetConsensusForecastsResponse() : GetConsensusForecastsResponse(nullptr) {}
  ~GetConsensusForecastsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetConsensusForecastsResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetConsensusForecastsResponse(const GetConsensusForecastsResponse& from)
      : GetConsensusForecastsResponse(nullptr, from) {}
  GetConsensusForecastsResponse(GetConsensusForecastsResponse&& from) noexcept
    : GetConsensusForecastsResponse() {
    *this = ::std::move(from);
  }

  inline GetConsensusForecastsResponse& operator=(const GetConsensusForecastsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConsensusForecastsResponse& operator=(GetConsensusForecastsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConsensusForecastsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConsensusForecastsResponse* internal_default_instance() {
    return reinterpret_cast<const GetConsensusForecastsResponse*>(
               &_GetConsensusForecastsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(GetConsensusForecastsResponse& a, GetConsensusForecastsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConsensusForecastsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConsensusForecastsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConsensusForecastsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConsensusForecastsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetConsensusForecastsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetConsensusForecastsResponse& from) {
    GetConsensusForecastsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetConsensusForecastsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse";
  }
  protected:
  explicit GetConsensusForecastsResponse(::google::protobuf::Arena* arena);
  GetConsensusForecastsResponse(::google::protobuf::Arena* arena, const GetConsensusForecastsResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ConsensusForecastsItem = GetConsensusForecastsResponse_ConsensusForecastsItem;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
    kPageFieldNumber = 2,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem >*
      mutable_items();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem>& _internal_items() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem>* _internal_mutable_items();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem& items(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem* add_items();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem >&
      items() const;
  // .tinkoff.public_.invest.api.contract.v1.PageResponse page = 2;
  bool has_page() const;
  void clear_page() ;
  const ::tinkoff::public_::invest::api::contract::v1::PageResponse& page() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::PageResponse* release_page();
  ::tinkoff::public_::invest::api::contract::v1::PageResponse* mutable_page();
  void set_allocated_page(::tinkoff::public_::invest::api::contract::v1::PageResponse* value);
  void unsafe_arena_set_allocated_page(::tinkoff::public_::invest::api::contract::v1::PageResponse* value);
  ::tinkoff::public_::invest::api::contract::v1::PageResponse* unsafe_arena_release_page();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::PageResponse& _internal_page() const;
  ::tinkoff::public_::invest::api::contract::v1::PageResponse* _internal_mutable_page();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem > items_;
    ::tinkoff::public_::invest::api::contract::v1::PageResponse* page_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetBondEventsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse) */ {
 public:
  inline GetBondEventsResponse() : GetBondEventsResponse(nullptr) {}
  ~GetBondEventsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetBondEventsResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetBondEventsResponse(const GetBondEventsResponse& from)
      : GetBondEventsResponse(nullptr, from) {}
  GetBondEventsResponse(GetBondEventsResponse&& from) noexcept
    : GetBondEventsResponse() {
    *this = ::std::move(from);
  }

  inline GetBondEventsResponse& operator=(const GetBondEventsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBondEventsResponse& operator=(GetBondEventsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBondEventsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBondEventsResponse* internal_default_instance() {
    return reinterpret_cast<const GetBondEventsResponse*>(
               &_GetBondEventsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetBondEventsResponse& a, GetBondEventsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBondEventsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBondEventsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBondEventsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBondEventsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetBondEventsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetBondEventsResponse& from) {
    GetBondEventsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetBondEventsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse";
  }
  protected:
  explicit GetBondEventsResponse(::google::protobuf::Arena* arena);
  GetBondEventsResponse(::google::protobuf::Arena* arena, const GetBondEventsResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using BondEvent = GetBondEventsResponse_BondEvent;

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent events = 1;
  int events_size() const;
  private:
  int _internal_events_size() const;

  public:
  void clear_events() ;
  ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent* mutable_events(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent >*
      mutable_events();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent>& _internal_events() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent>* _internal_mutable_events();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent& events(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent* add_events();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent >&
      events() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent > events_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetBondCouponsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse) */ {
 public:
  inline GetBondCouponsResponse() : GetBondCouponsResponse(nullptr) {}
  ~GetBondCouponsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetBondCouponsResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetBondCouponsResponse(const GetBondCouponsResponse& from)
      : GetBondCouponsResponse(nullptr, from) {}
  GetBondCouponsResponse(GetBondCouponsResponse&& from) noexcept
    : GetBondCouponsResponse() {
    *this = ::std::move(from);
  }

  inline GetBondCouponsResponse& operator=(const GetBondCouponsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBondCouponsResponse& operator=(GetBondCouponsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBondCouponsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBondCouponsResponse* internal_default_instance() {
    return reinterpret_cast<const GetBondCouponsResponse*>(
               &_GetBondCouponsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetBondCouponsResponse& a, GetBondCouponsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBondCouponsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBondCouponsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBondCouponsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBondCouponsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetBondCouponsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetBondCouponsResponse& from) {
    GetBondCouponsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetBondCouponsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse";
  }
  protected:
  explicit GetBondCouponsResponse(::google::protobuf::Arena* arena);
  GetBondCouponsResponse(::google::protobuf::Arena* arena, const GetBondCouponsResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.Coupon events = 1;
  int events_size() const;
  private:
  int _internal_events_size() const;

  public:
  void clear_events() ;
  ::tinkoff::public_::invest::api::contract::v1::Coupon* mutable_events(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Coupon >*
      mutable_events();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Coupon>& _internal_events() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Coupon>* _internal_mutable_events();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::Coupon& events(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::Coupon* add_events();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Coupon >&
      events() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Coupon > events_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetAssetReportsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse) */ {
 public:
  inline GetAssetReportsResponse() : GetAssetReportsResponse(nullptr) {}
  ~GetAssetReportsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetAssetReportsResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetAssetReportsResponse(const GetAssetReportsResponse& from)
      : GetAssetReportsResponse(nullptr, from) {}
  GetAssetReportsResponse(GetAssetReportsResponse&& from) noexcept
    : GetAssetReportsResponse() {
    *this = ::std::move(from);
  }

  inline GetAssetReportsResponse& operator=(const GetAssetReportsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAssetReportsResponse& operator=(GetAssetReportsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAssetReportsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAssetReportsResponse* internal_default_instance() {
    return reinterpret_cast<const GetAssetReportsResponse*>(
               &_GetAssetReportsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(GetAssetReportsResponse& a, GetAssetReportsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAssetReportsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAssetReportsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAssetReportsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAssetReportsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetAssetReportsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetAssetReportsResponse& from) {
    GetAssetReportsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetAssetReportsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse";
  }
  protected:
  explicit GetAssetReportsResponse(::google::protobuf::Arena* arena);
  GetAssetReportsResponse(::google::protobuf::Arena* arena, const GetAssetReportsResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using GetAssetReportsEvent = GetAssetReportsResponse_GetAssetReportsEvent;

  using AssetReportPeriodType = GetAssetReportsResponse_AssetReportPeriodType;
  static constexpr AssetReportPeriodType PERIOD_TYPE_UNSPECIFIED = GetAssetReportsResponse_AssetReportPeriodType_PERIOD_TYPE_UNSPECIFIED;
  static constexpr AssetReportPeriodType PERIOD_TYPE_QUARTER = GetAssetReportsResponse_AssetReportPeriodType_PERIOD_TYPE_QUARTER;
  static constexpr AssetReportPeriodType PERIOD_TYPE_SEMIANNUAL = GetAssetReportsResponse_AssetReportPeriodType_PERIOD_TYPE_SEMIANNUAL;
  static constexpr AssetReportPeriodType PERIOD_TYPE_ANNUAL = GetAssetReportsResponse_AssetReportPeriodType_PERIOD_TYPE_ANNUAL;
  static inline bool AssetReportPeriodType_IsValid(int value) {
    return GetAssetReportsResponse_AssetReportPeriodType_IsValid(value);
  }
  static constexpr AssetReportPeriodType AssetReportPeriodType_MIN = GetAssetReportsResponse_AssetReportPeriodType_AssetReportPeriodType_MIN;
  static constexpr AssetReportPeriodType AssetReportPeriodType_MAX = GetAssetReportsResponse_AssetReportPeriodType_AssetReportPeriodType_MAX;
  static constexpr int AssetReportPeriodType_ARRAYSIZE = GetAssetReportsResponse_AssetReportPeriodType_AssetReportPeriodType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* AssetReportPeriodType_descriptor() {
    return GetAssetReportsResponse_AssetReportPeriodType_descriptor();
  }
  template <typename T>
  static inline const std::string& AssetReportPeriodType_Name(T value) {
    return GetAssetReportsResponse_AssetReportPeriodType_Name(value);
  }
  static inline bool AssetReportPeriodType_Parse(absl::string_view name, AssetReportPeriodType* value) {
    return GetAssetReportsResponse_AssetReportPeriodType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent events = 1;
  int events_size() const;
  private:
  int _internal_events_size() const;

  public:
  void clear_events() ;
  ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent* mutable_events(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent >*
      mutable_events();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent>& _internal_events() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent>* _internal_mutable_events();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent& events(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent* add_events();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent >&
      events() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent > events_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetAssetFundamentalsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse) */ {
 public:
  inline GetAssetFundamentalsResponse() : GetAssetFundamentalsResponse(nullptr) {}
  ~GetAssetFundamentalsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetAssetFundamentalsResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetAssetFundamentalsResponse(const GetAssetFundamentalsResponse& from)
      : GetAssetFundamentalsResponse(nullptr, from) {}
  GetAssetFundamentalsResponse(GetAssetFundamentalsResponse&& from) noexcept
    : GetAssetFundamentalsResponse() {
    *this = ::std::move(from);
  }

  inline GetAssetFundamentalsResponse& operator=(const GetAssetFundamentalsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAssetFundamentalsResponse& operator=(GetAssetFundamentalsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAssetFundamentalsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAssetFundamentalsResponse* internal_default_instance() {
    return reinterpret_cast<const GetAssetFundamentalsResponse*>(
               &_GetAssetFundamentalsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(GetAssetFundamentalsResponse& a, GetAssetFundamentalsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAssetFundamentalsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAssetFundamentalsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAssetFundamentalsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAssetFundamentalsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetAssetFundamentalsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetAssetFundamentalsResponse& from) {
    GetAssetFundamentalsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetAssetFundamentalsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse";
  }
  protected:
  explicit GetAssetFundamentalsResponse(::google::protobuf::Arena* arena);
  GetAssetFundamentalsResponse(::google::protobuf::Arena* arena, const GetAssetFundamentalsResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using StatisticResponse = GetAssetFundamentalsResponse_StatisticResponse;

  // accessors -------------------------------------------------------

  enum : int {
    kFundamentalsFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse fundamentals = 1;
  int fundamentals_size() const;
  private:
  int _internal_fundamentals_size() const;

  public:
  void clear_fundamentals() ;
  ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse* mutable_fundamentals(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse >*
      mutable_fundamentals();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse>& _internal_fundamentals() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse>* _internal_mutable_fundamentals();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse& fundamentals(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse* add_fundamentals();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse >&
      fundamentals() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse > fundamentals_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class GetAccruedInterestsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse) */ {
 public:
  inline GetAccruedInterestsResponse() : GetAccruedInterestsResponse(nullptr) {}
  ~GetAccruedInterestsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetAccruedInterestsResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetAccruedInterestsResponse(const GetAccruedInterestsResponse& from)
      : GetAccruedInterestsResponse(nullptr, from) {}
  GetAccruedInterestsResponse(GetAccruedInterestsResponse&& from) noexcept
    : GetAccruedInterestsResponse() {
    *this = ::std::move(from);
  }

  inline GetAccruedInterestsResponse& operator=(const GetAccruedInterestsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccruedInterestsResponse& operator=(GetAccruedInterestsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAccruedInterestsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAccruedInterestsResponse* internal_default_instance() {
    return reinterpret_cast<const GetAccruedInterestsResponse*>(
               &_GetAccruedInterestsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetAccruedInterestsResponse& a, GetAccruedInterestsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAccruedInterestsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAccruedInterestsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAccruedInterestsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAccruedInterestsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetAccruedInterestsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetAccruedInterestsResponse& from) {
    GetAccruedInterestsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetAccruedInterestsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse";
  }
  protected:
  explicit GetAccruedInterestsResponse(::google::protobuf::Arena* arena);
  GetAccruedInterestsResponse(::google::protobuf::Arena* arena, const GetAccruedInterestsResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccruedInterestsFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.AccruedInterest accrued_interests = 1;
  int accrued_interests_size() const;
  private:
  int _internal_accrued_interests_size() const;

  public:
  void clear_accrued_interests() ;
  ::tinkoff::public_::invest::api::contract::v1::AccruedInterest* mutable_accrued_interests(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::AccruedInterest >*
      mutable_accrued_interests();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AccruedInterest>& _internal_accrued_interests() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AccruedInterest>* _internal_mutable_accrued_interests();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::AccruedInterest& accrued_interests(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::AccruedInterest* add_accrued_interests();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::AccruedInterest >&
      accrued_interests() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::AccruedInterest > accrued_interests_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class FuturesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.FuturesResponse) */ {
 public:
  inline FuturesResponse() : FuturesResponse(nullptr) {}
  ~FuturesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FuturesResponse(::google::protobuf::internal::ConstantInitialized);

  inline FuturesResponse(const FuturesResponse& from)
      : FuturesResponse(nullptr, from) {}
  FuturesResponse(FuturesResponse&& from) noexcept
    : FuturesResponse() {
    *this = ::std::move(from);
  }

  inline FuturesResponse& operator=(const FuturesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FuturesResponse& operator=(FuturesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FuturesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FuturesResponse* internal_default_instance() {
    return reinterpret_cast<const FuturesResponse*>(
               &_FuturesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(FuturesResponse& a, FuturesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FuturesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FuturesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FuturesResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FuturesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FuturesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FuturesResponse& from) {
    FuturesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FuturesResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.FuturesResponse";
  }
  protected:
  explicit FuturesResponse(::google::protobuf::Arena* arena);
  FuturesResponse(::google::protobuf::Arena* arena, const FuturesResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentsFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.Future instruments = 1;
  int instruments_size() const;
  private:
  int _internal_instruments_size() const;

  public:
  void clear_instruments() ;
  ::tinkoff::public_::invest::api::contract::v1::Future* mutable_instruments(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Future >*
      mutable_instruments();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Future>& _internal_instruments() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Future>* _internal_mutable_instruments();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::Future& instruments(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::Future* add_instruments();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Future >&
      instruments() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.FuturesResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Future > instruments_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class FutureResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.FutureResponse) */ {
 public:
  inline FutureResponse() : FutureResponse(nullptr) {}
  ~FutureResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FutureResponse(::google::protobuf::internal::ConstantInitialized);

  inline FutureResponse(const FutureResponse& from)
      : FutureResponse(nullptr, from) {}
  FutureResponse(FutureResponse&& from) noexcept
    : FutureResponse() {
    *this = ::std::move(from);
  }

  inline FutureResponse& operator=(const FutureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FutureResponse& operator=(FutureResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FutureResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FutureResponse* internal_default_instance() {
    return reinterpret_cast<const FutureResponse*>(
               &_FutureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(FutureResponse& a, FutureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FutureResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FutureResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FutureResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FutureResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FutureResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FutureResponse& from) {
    FutureResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FutureResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.FutureResponse";
  }
  protected:
  explicit FutureResponse(::google::protobuf::Arena* arena);
  FutureResponse(::google::protobuf::Arena* arena, const FutureResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentFieldNumber = 1,
  };
  // .tinkoff.public_.invest.api.contract.v1.Future instrument = 1;
  bool has_instrument() const;
  void clear_instrument() ;
  const ::tinkoff::public_::invest::api::contract::v1::Future& instrument() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Future* release_instrument();
  ::tinkoff::public_::invest::api::contract::v1::Future* mutable_instrument();
  void set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Future* value);
  void unsafe_arena_set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Future* value);
  ::tinkoff::public_::invest::api::contract::v1::Future* unsafe_arena_release_instrument();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Future& _internal_instrument() const;
  ::tinkoff::public_::invest::api::contract::v1::Future* _internal_mutable_instrument();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.FutureResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tinkoff::public_::invest::api::contract::v1::Future* instrument_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class FindInstrumentResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse) */ {
 public:
  inline FindInstrumentResponse() : FindInstrumentResponse(nullptr) {}
  ~FindInstrumentResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FindInstrumentResponse(::google::protobuf::internal::ConstantInitialized);

  inline FindInstrumentResponse(const FindInstrumentResponse& from)
      : FindInstrumentResponse(nullptr, from) {}
  FindInstrumentResponse(FindInstrumentResponse&& from) noexcept
    : FindInstrumentResponse() {
    *this = ::std::move(from);
  }

  inline FindInstrumentResponse& operator=(const FindInstrumentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindInstrumentResponse& operator=(FindInstrumentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindInstrumentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindInstrumentResponse* internal_default_instance() {
    return reinterpret_cast<const FindInstrumentResponse*>(
               &_FindInstrumentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(FindInstrumentResponse& a, FindInstrumentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindInstrumentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindInstrumentResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindInstrumentResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindInstrumentResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FindInstrumentResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FindInstrumentResponse& from) {
    FindInstrumentResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FindInstrumentResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse";
  }
  protected:
  explicit FindInstrumentResponse(::google::protobuf::Arena* arena);
  FindInstrumentResponse(::google::protobuf::Arena* arena, const FindInstrumentResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentsFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.InstrumentShort instruments = 1;
  int instruments_size() const;
  private:
  int _internal_instruments_size() const;

  public:
  void clear_instruments() ;
  ::tinkoff::public_::invest::api::contract::v1::InstrumentShort* mutable_instruments(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::InstrumentShort >*
      mutable_instruments();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::InstrumentShort>& _internal_instruments() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::InstrumentShort>* _internal_mutable_instruments();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::InstrumentShort& instruments(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::InstrumentShort* add_instruments();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::InstrumentShort >&
      instruments() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::InstrumentShort > instruments_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class EtfsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.EtfsResponse) */ {
 public:
  inline EtfsResponse() : EtfsResponse(nullptr) {}
  ~EtfsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EtfsResponse(::google::protobuf::internal::ConstantInitialized);

  inline EtfsResponse(const EtfsResponse& from)
      : EtfsResponse(nullptr, from) {}
  EtfsResponse(EtfsResponse&& from) noexcept
    : EtfsResponse() {
    *this = ::std::move(from);
  }

  inline EtfsResponse& operator=(const EtfsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EtfsResponse& operator=(EtfsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EtfsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EtfsResponse* internal_default_instance() {
    return reinterpret_cast<const EtfsResponse*>(
               &_EtfsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(EtfsResponse& a, EtfsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EtfsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EtfsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EtfsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EtfsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EtfsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EtfsResponse& from) {
    EtfsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EtfsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.EtfsResponse";
  }
  protected:
  explicit EtfsResponse(::google::protobuf::Arena* arena);
  EtfsResponse(::google::protobuf::Arena* arena, const EtfsResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentsFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.Etf instruments = 1;
  int instruments_size() const;
  private:
  int _internal_instruments_size() const;

  public:
  void clear_instruments() ;
  ::tinkoff::public_::invest::api::contract::v1::Etf* mutable_instruments(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Etf >*
      mutable_instruments();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Etf>& _internal_instruments() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Etf>* _internal_mutable_instruments();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::Etf& instruments(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::Etf* add_instruments();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Etf >&
      instruments() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.EtfsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Etf > instruments_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class EtfResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.EtfResponse) */ {
 public:
  inline EtfResponse() : EtfResponse(nullptr) {}
  ~EtfResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EtfResponse(::google::protobuf::internal::ConstantInitialized);

  inline EtfResponse(const EtfResponse& from)
      : EtfResponse(nullptr, from) {}
  EtfResponse(EtfResponse&& from) noexcept
    : EtfResponse() {
    *this = ::std::move(from);
  }

  inline EtfResponse& operator=(const EtfResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EtfResponse& operator=(EtfResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EtfResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EtfResponse* internal_default_instance() {
    return reinterpret_cast<const EtfResponse*>(
               &_EtfResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(EtfResponse& a, EtfResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EtfResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EtfResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EtfResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EtfResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EtfResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EtfResponse& from) {
    EtfResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EtfResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.EtfResponse";
  }
  protected:
  explicit EtfResponse(::google::protobuf::Arena* arena);
  EtfResponse(::google::protobuf::Arena* arena, const EtfResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentFieldNumber = 1,
  };
  // .tinkoff.public_.invest.api.contract.v1.Etf instrument = 1;
  bool has_instrument() const;
  void clear_instrument() ;
  const ::tinkoff::public_::invest::api::contract::v1::Etf& instrument() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Etf* release_instrument();
  ::tinkoff::public_::invest::api::contract::v1::Etf* mutable_instrument();
  void set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Etf* value);
  void unsafe_arena_set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Etf* value);
  ::tinkoff::public_::invest::api::contract::v1::Etf* unsafe_arena_release_instrument();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Etf& _internal_instrument() const;
  ::tinkoff::public_::invest::api::contract::v1::Etf* _internal_mutable_instrument();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.EtfResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tinkoff::public_::invest::api::contract::v1::Etf* instrument_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class CurrencyResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.CurrencyResponse) */ {
 public:
  inline CurrencyResponse() : CurrencyResponse(nullptr) {}
  ~CurrencyResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CurrencyResponse(::google::protobuf::internal::ConstantInitialized);

  inline CurrencyResponse(const CurrencyResponse& from)
      : CurrencyResponse(nullptr, from) {}
  CurrencyResponse(CurrencyResponse&& from) noexcept
    : CurrencyResponse() {
    *this = ::std::move(from);
  }

  inline CurrencyResponse& operator=(const CurrencyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrencyResponse& operator=(CurrencyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CurrencyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CurrencyResponse* internal_default_instance() {
    return reinterpret_cast<const CurrencyResponse*>(
               &_CurrencyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CurrencyResponse& a, CurrencyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrencyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurrencyResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CurrencyResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CurrencyResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CurrencyResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CurrencyResponse& from) {
    CurrencyResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CurrencyResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.CurrencyResponse";
  }
  protected:
  explicit CurrencyResponse(::google::protobuf::Arena* arena);
  CurrencyResponse(::google::protobuf::Arena* arena, const CurrencyResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentFieldNumber = 1,
  };
  // .tinkoff.public_.invest.api.contract.v1.Currency instrument = 1;
  bool has_instrument() const;
  void clear_instrument() ;
  const ::tinkoff::public_::invest::api::contract::v1::Currency& instrument() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Currency* release_instrument();
  ::tinkoff::public_::invest::api::contract::v1::Currency* mutable_instrument();
  void set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Currency* value);
  void unsafe_arena_set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Currency* value);
  ::tinkoff::public_::invest::api::contract::v1::Currency* unsafe_arena_release_instrument();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Currency& _internal_instrument() const;
  ::tinkoff::public_::invest::api::contract::v1::Currency* _internal_mutable_instrument();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.CurrencyResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tinkoff::public_::invest::api::contract::v1::Currency* instrument_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class CurrenciesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.CurrenciesResponse) */ {
 public:
  inline CurrenciesResponse() : CurrenciesResponse(nullptr) {}
  ~CurrenciesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CurrenciesResponse(::google::protobuf::internal::ConstantInitialized);

  inline CurrenciesResponse(const CurrenciesResponse& from)
      : CurrenciesResponse(nullptr, from) {}
  CurrenciesResponse(CurrenciesResponse&& from) noexcept
    : CurrenciesResponse() {
    *this = ::std::move(from);
  }

  inline CurrenciesResponse& operator=(const CurrenciesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrenciesResponse& operator=(CurrenciesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CurrenciesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CurrenciesResponse* internal_default_instance() {
    return reinterpret_cast<const CurrenciesResponse*>(
               &_CurrenciesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CurrenciesResponse& a, CurrenciesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrenciesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurrenciesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CurrenciesResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CurrenciesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CurrenciesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CurrenciesResponse& from) {
    CurrenciesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CurrenciesResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.CurrenciesResponse";
  }
  protected:
  explicit CurrenciesResponse(::google::protobuf::Arena* arena);
  CurrenciesResponse(::google::protobuf::Arena* arena, const CurrenciesResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentsFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.Currency instruments = 1;
  int instruments_size() const;
  private:
  int _internal_instruments_size() const;

  public:
  void clear_instruments() ;
  ::tinkoff::public_::invest::api::contract::v1::Currency* mutable_instruments(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Currency >*
      mutable_instruments();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Currency>& _internal_instruments() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Currency>* _internal_mutable_instruments();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::Currency& instruments(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::Currency* add_instruments();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Currency >&
      instruments() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.CurrenciesResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Currency > instruments_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class BondsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.BondsResponse) */ {
 public:
  inline BondsResponse() : BondsResponse(nullptr) {}
  ~BondsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BondsResponse(::google::protobuf::internal::ConstantInitialized);

  inline BondsResponse(const BondsResponse& from)
      : BondsResponse(nullptr, from) {}
  BondsResponse(BondsResponse&& from) noexcept
    : BondsResponse() {
    *this = ::std::move(from);
  }

  inline BondsResponse& operator=(const BondsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BondsResponse& operator=(BondsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BondsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BondsResponse* internal_default_instance() {
    return reinterpret_cast<const BondsResponse*>(
               &_BondsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BondsResponse& a, BondsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BondsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BondsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BondsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BondsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BondsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BondsResponse& from) {
    BondsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BondsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.BondsResponse";
  }
  protected:
  explicit BondsResponse(::google::protobuf::Arena* arena);
  BondsResponse(::google::protobuf::Arena* arena, const BondsResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentsFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.Bond instruments = 1;
  int instruments_size() const;
  private:
  int _internal_instruments_size() const;

  public:
  void clear_instruments() ;
  ::tinkoff::public_::invest::api::contract::v1::Bond* mutable_instruments(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Bond >*
      mutable_instruments();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Bond>& _internal_instruments() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Bond>* _internal_mutable_instruments();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::Bond& instruments(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::Bond* add_instruments();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Bond >&
      instruments() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.BondsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Bond > instruments_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class BondResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.BondResponse) */ {
 public:
  inline BondResponse() : BondResponse(nullptr) {}
  ~BondResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BondResponse(::google::protobuf::internal::ConstantInitialized);

  inline BondResponse(const BondResponse& from)
      : BondResponse(nullptr, from) {}
  BondResponse(BondResponse&& from) noexcept
    : BondResponse() {
    *this = ::std::move(from);
  }

  inline BondResponse& operator=(const BondResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BondResponse& operator=(BondResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BondResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BondResponse* internal_default_instance() {
    return reinterpret_cast<const BondResponse*>(
               &_BondResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BondResponse& a, BondResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BondResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BondResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BondResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BondResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BondResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BondResponse& from) {
    BondResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BondResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.BondResponse";
  }
  protected:
  explicit BondResponse(::google::protobuf::Arena* arena);
  BondResponse(::google::protobuf::Arena* arena, const BondResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentFieldNumber = 1,
  };
  // .tinkoff.public_.invest.api.contract.v1.Bond instrument = 1;
  bool has_instrument() const;
  void clear_instrument() ;
  const ::tinkoff::public_::invest::api::contract::v1::Bond& instrument() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Bond* release_instrument();
  ::tinkoff::public_::invest::api::contract::v1::Bond* mutable_instrument();
  void set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Bond* value);
  void unsafe_arena_set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Bond* value);
  ::tinkoff::public_::invest::api::contract::v1::Bond* unsafe_arena_release_instrument();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Bond& _internal_instrument() const;
  ::tinkoff::public_::invest::api::contract::v1::Bond* _internal_mutable_instrument();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.BondResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tinkoff::public_::invest::api::contract::v1::Bond* instrument_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class AssetSecurity final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.AssetSecurity) */ {
 public:
  inline AssetSecurity() : AssetSecurity(nullptr) {}
  ~AssetSecurity() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AssetSecurity(::google::protobuf::internal::ConstantInitialized);

  inline AssetSecurity(const AssetSecurity& from)
      : AssetSecurity(nullptr, from) {}
  AssetSecurity(AssetSecurity&& from) noexcept
    : AssetSecurity() {
    *this = ::std::move(from);
  }

  inline AssetSecurity& operator=(const AssetSecurity& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetSecurity& operator=(AssetSecurity&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssetSecurity& default_instance() {
    return *internal_default_instance();
  }
  enum ExtCase {
    kShare = 3,
    kBond = 4,
    kSp = 5,
    kEtf = 6,
    kClearingCertificate = 7,
    EXT_NOT_SET = 0,
  };

  static inline const AssetSecurity* internal_default_instance() {
    return reinterpret_cast<const AssetSecurity*>(
               &_AssetSecurity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(AssetSecurity& a, AssetSecurity& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetSecurity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetSecurity* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssetSecurity* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssetSecurity>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AssetSecurity& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AssetSecurity& from) {
    AssetSecurity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AssetSecurity* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.AssetSecurity";
  }
  protected:
  explicit AssetSecurity(::google::protobuf::Arena* arena);
  AssetSecurity(::google::protobuf::Arena* arena, const AssetSecurity& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsinFieldNumber = 1,
    kTypeFieldNumber = 2,
    kInstrumentKindFieldNumber = 10,
    kShareFieldNumber = 3,
    kBondFieldNumber = 4,
    kSpFieldNumber = 5,
    kEtfFieldNumber = 6,
    kClearingCertificateFieldNumber = 7,
  };
  // string isin = 1;
  void clear_isin() ;
  const std::string& isin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_isin(Arg_&& arg, Args_... args);
  std::string* mutable_isin();
  PROTOBUF_NODISCARD std::string* release_isin();
  void set_allocated_isin(std::string* value);

  private:
  const std::string& _internal_isin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_isin(
      const std::string& value);
  std::string* _internal_mutable_isin();

  public:
  // string type = 2;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
  void clear_instrument_kind() ;
  ::tinkoff::public_::invest::api::contract::v1::InstrumentType instrument_kind() const;
  void set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::InstrumentType _internal_instrument_kind() const;
  void _internal_set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.AssetShare share = 3;
  bool has_share() const;
  private:
  bool _internal_has_share() const;

  public:
  void clear_share() ;
  const ::tinkoff::public_::invest::api::contract::v1::AssetShare& share() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::AssetShare* release_share();
  ::tinkoff::public_::invest::api::contract::v1::AssetShare* mutable_share();
  void set_allocated_share(::tinkoff::public_::invest::api::contract::v1::AssetShare* value);
  void unsafe_arena_set_allocated_share(::tinkoff::public_::invest::api::contract::v1::AssetShare* value);
  ::tinkoff::public_::invest::api::contract::v1::AssetShare* unsafe_arena_release_share();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::AssetShare& _internal_share() const;
  ::tinkoff::public_::invest::api::contract::v1::AssetShare* _internal_mutable_share();

  public:
  // .tinkoff.public_.invest.api.contract.v1.AssetBond bond = 4;
  bool has_bond() const;
  private:
  bool _internal_has_bond() const;

  public:
  void clear_bond() ;
  const ::tinkoff::public_::invest::api::contract::v1::AssetBond& bond() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::AssetBond* release_bond();
  ::tinkoff::public_::invest::api::contract::v1::AssetBond* mutable_bond();
  void set_allocated_bond(::tinkoff::public_::invest::api::contract::v1::AssetBond* value);
  void unsafe_arena_set_allocated_bond(::tinkoff::public_::invest::api::contract::v1::AssetBond* value);
  ::tinkoff::public_::invest::api::contract::v1::AssetBond* unsafe_arena_release_bond();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::AssetBond& _internal_bond() const;
  ::tinkoff::public_::invest::api::contract::v1::AssetBond* _internal_mutable_bond();

  public:
  // .tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct sp = 5;
  bool has_sp() const;
  private:
  bool _internal_has_sp() const;

  public:
  void clear_sp() ;
  const ::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct& sp() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct* release_sp();
  ::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct* mutable_sp();
  void set_allocated_sp(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct* value);
  void unsafe_arena_set_allocated_sp(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct* value);
  ::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct* unsafe_arena_release_sp();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct& _internal_sp() const;
  ::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct* _internal_mutable_sp();

  public:
  // .tinkoff.public_.invest.api.contract.v1.AssetEtf etf = 6;
  bool has_etf() const;
  private:
  bool _internal_has_etf() const;

  public:
  void clear_etf() ;
  const ::tinkoff::public_::invest::api::contract::v1::AssetEtf& etf() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::AssetEtf* release_etf();
  ::tinkoff::public_::invest::api::contract::v1::AssetEtf* mutable_etf();
  void set_allocated_etf(::tinkoff::public_::invest::api::contract::v1::AssetEtf* value);
  void unsafe_arena_set_allocated_etf(::tinkoff::public_::invest::api::contract::v1::AssetEtf* value);
  ::tinkoff::public_::invest::api::contract::v1::AssetEtf* unsafe_arena_release_etf();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::AssetEtf& _internal_etf() const;
  ::tinkoff::public_::invest::api::contract::v1::AssetEtf* _internal_mutable_etf();

  public:
  // .tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate clearing_certificate = 7;
  bool has_clearing_certificate() const;
  private:
  bool _internal_has_clearing_certificate() const;

  public:
  void clear_clearing_certificate() ;
  const ::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate& clearing_certificate() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate* release_clearing_certificate();
  ::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate* mutable_clearing_certificate();
  void set_allocated_clearing_certificate(::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate* value);
  void unsafe_arena_set_allocated_clearing_certificate(::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate* value);
  ::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate* unsafe_arena_release_clearing_certificate();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate& _internal_clearing_certificate() const;
  ::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate* _internal_mutable_clearing_certificate();

  public:
  void clear_ext();
  ExtCase ext_case() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.AssetSecurity)
 private:
  class _Internal;
  void set_has_share();
  void set_has_bond();
  void set_has_sp();
  void set_has_etf();
  void set_has_clearing_certificate();

  inline bool has_ext() const;
  inline void clear_has_ext();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 8, 5,
      77, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr isin_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    int instrument_kind_;
    union ExtUnion {
      constexpr ExtUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::tinkoff::public_::invest::api::contract::v1::AssetShare* share_;
      ::tinkoff::public_::invest::api::contract::v1::AssetBond* bond_;
      ::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct* sp_;
      ::tinkoff::public_::invest::api::contract::v1::AssetEtf* etf_;
      ::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate* clearing_certificate_;
    } ext_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class Asset final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.Asset) */ {
 public:
  inline Asset() : Asset(nullptr) {}
  ~Asset() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Asset(::google::protobuf::internal::ConstantInitialized);

  inline Asset(const Asset& from)
      : Asset(nullptr, from) {}
  Asset(Asset&& from) noexcept
    : Asset() {
    *this = ::std::move(from);
  }

  inline Asset& operator=(const Asset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Asset& operator=(Asset&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Asset& default_instance() {
    return *internal_default_instance();
  }
  static inline const Asset* internal_default_instance() {
    return reinterpret_cast<const Asset*>(
               &_Asset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(Asset& a, Asset& b) {
    a.Swap(&b);
  }
  inline void Swap(Asset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Asset* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Asset* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Asset>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Asset& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Asset& from) {
    Asset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Asset* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.Asset";
  }
  protected:
  explicit Asset(::google::protobuf::Arena* arena);
  Asset(::google::protobuf::Arena* arena, const Asset& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentsFieldNumber = 4,
    kUidFieldNumber = 1,
    kNameFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.AssetInstrument instruments = 4;
  int instruments_size() const;
  private:
  int _internal_instruments_size() const;

  public:
  void clear_instruments() ;
  ::tinkoff::public_::invest::api::contract::v1::AssetInstrument* mutable_instruments(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::AssetInstrument >*
      mutable_instruments();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AssetInstrument>& _internal_instruments() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AssetInstrument>* _internal_mutable_instruments();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::AssetInstrument& instruments(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::AssetInstrument* add_instruments();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::AssetInstrument >&
      instruments() const;
  // string uid = 1;
  void clear_uid() ;
  const std::string& uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uid(Arg_&& arg, Args_... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* value);

  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(
      const std::string& value);
  std::string* _internal_mutable_uid();

  public:
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .tinkoff.public_.invest.api.contract.v1.AssetType type = 2;
  void clear_type() ;
  ::tinkoff::public_::invest::api::contract::v1::AssetType type() const;
  void set_type(::tinkoff::public_::invest::api::contract::v1::AssetType value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::AssetType _internal_type() const;
  void _internal_set_type(::tinkoff::public_::invest::api::contract::v1::AssetType value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.Asset)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      60, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::AssetInstrument > instruments_;
    ::google::protobuf::internal::ArenaStringPtr uid_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    int type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class TradingDay final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.TradingDay) */ {
 public:
  inline TradingDay() : TradingDay(nullptr) {}
  ~TradingDay() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TradingDay(::google::protobuf::internal::ConstantInitialized);

  inline TradingDay(const TradingDay& from)
      : TradingDay(nullptr, from) {}
  TradingDay(TradingDay&& from) noexcept
    : TradingDay() {
    *this = ::std::move(from);
  }

  inline TradingDay& operator=(const TradingDay& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradingDay& operator=(TradingDay&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TradingDay& default_instance() {
    return *internal_default_instance();
  }
  static inline const TradingDay* internal_default_instance() {
    return reinterpret_cast<const TradingDay*>(
               &_TradingDay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TradingDay& a, TradingDay& b) {
    a.Swap(&b);
  }
  inline void Swap(TradingDay* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradingDay* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TradingDay* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TradingDay>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TradingDay& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TradingDay& from) {
    TradingDay::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TradingDay* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.TradingDay";
  }
  protected:
  explicit TradingDay(::google::protobuf::Arena* arena);
  TradingDay(::google::protobuf::Arena* arena, const TradingDay& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntervalsFieldNumber = 18,
    kDateFieldNumber = 1,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
    kOpeningAuctionStartTimeFieldNumber = 7,
    kClosingAuctionEndTimeFieldNumber = 8,
    kEveningOpeningAuctionStartTimeFieldNumber = 9,
    kEveningStartTimeFieldNumber = 10,
    kEveningEndTimeFieldNumber = 11,
    kClearingStartTimeFieldNumber = 12,
    kClearingEndTimeFieldNumber = 13,
    kPremarketStartTimeFieldNumber = 14,
    kPremarketEndTimeFieldNumber = 15,
    kClosingAuctionStartTimeFieldNumber = 16,
    kOpeningAuctionEndTimeFieldNumber = 17,
    kIsTradingDayFieldNumber = 2,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.TradingInterval intervals = 18;
  int intervals_size() const;
  private:
  int _internal_intervals_size() const;

  public:
  void clear_intervals() ;
  ::tinkoff::public_::invest::api::contract::v1::TradingInterval* mutable_intervals(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::TradingInterval >*
      mutable_intervals();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::TradingInterval>& _internal_intervals() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::TradingInterval>* _internal_mutable_intervals();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::TradingInterval& intervals(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::TradingInterval* add_intervals();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::TradingInterval >&
      intervals() const;
  // .google.protobuf.Timestamp date = 1;
  bool has_date() const;
  void clear_date() ;
  const ::google::protobuf::Timestamp& date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_date();
  ::google::protobuf::Timestamp* mutable_date();
  void set_allocated_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_date();

  private:
  const ::google::protobuf::Timestamp& _internal_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_date();

  public:
  // .google.protobuf.Timestamp start_time = 3;
  bool has_start_time() const;
  void clear_start_time() ;
  const ::google::protobuf::Timestamp& start_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_start_time();
  ::google::protobuf::Timestamp* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_start_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_start_time();

  private:
  const ::google::protobuf::Timestamp& _internal_start_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_start_time();

  public:
  // .google.protobuf.Timestamp end_time = 4;
  bool has_end_time() const;
  void clear_end_time() ;
  const ::google::protobuf::Timestamp& end_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_end_time();
  ::google::protobuf::Timestamp* mutable_end_time();
  void set_allocated_end_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_end_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_end_time();

  private:
  const ::google::protobuf::Timestamp& _internal_end_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_end_time();

  public:
  // .google.protobuf.Timestamp opening_auction_start_time = 7;
  bool has_opening_auction_start_time() const;
  void clear_opening_auction_start_time() ;
  const ::google::protobuf::Timestamp& opening_auction_start_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_opening_auction_start_time();
  ::google::protobuf::Timestamp* mutable_opening_auction_start_time();
  void set_allocated_opening_auction_start_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_opening_auction_start_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_opening_auction_start_time();

  private:
  const ::google::protobuf::Timestamp& _internal_opening_auction_start_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_opening_auction_start_time();

  public:
  // .google.protobuf.Timestamp closing_auction_end_time = 8;
  bool has_closing_auction_end_time() const;
  void clear_closing_auction_end_time() ;
  const ::google::protobuf::Timestamp& closing_auction_end_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_closing_auction_end_time();
  ::google::protobuf::Timestamp* mutable_closing_auction_end_time();
  void set_allocated_closing_auction_end_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_closing_auction_end_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_closing_auction_end_time();

  private:
  const ::google::protobuf::Timestamp& _internal_closing_auction_end_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_closing_auction_end_time();

  public:
  // .google.protobuf.Timestamp evening_opening_auction_start_time = 9;
  bool has_evening_opening_auction_start_time() const;
  void clear_evening_opening_auction_start_time() ;
  const ::google::protobuf::Timestamp& evening_opening_auction_start_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_evening_opening_auction_start_time();
  ::google::protobuf::Timestamp* mutable_evening_opening_auction_start_time();
  void set_allocated_evening_opening_auction_start_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_evening_opening_auction_start_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_evening_opening_auction_start_time();

  private:
  const ::google::protobuf::Timestamp& _internal_evening_opening_auction_start_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_evening_opening_auction_start_time();

  public:
  // .google.protobuf.Timestamp evening_start_time = 10;
  bool has_evening_start_time() const;
  void clear_evening_start_time() ;
  const ::google::protobuf::Timestamp& evening_start_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_evening_start_time();
  ::google::protobuf::Timestamp* mutable_evening_start_time();
  void set_allocated_evening_start_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_evening_start_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_evening_start_time();

  private:
  const ::google::protobuf::Timestamp& _internal_evening_start_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_evening_start_time();

  public:
  // .google.protobuf.Timestamp evening_end_time = 11;
  bool has_evening_end_time() const;
  void clear_evening_end_time() ;
  const ::google::protobuf::Timestamp& evening_end_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_evening_end_time();
  ::google::protobuf::Timestamp* mutable_evening_end_time();
  void set_allocated_evening_end_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_evening_end_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_evening_end_time();

  private:
  const ::google::protobuf::Timestamp& _internal_evening_end_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_evening_end_time();

  public:
  // .google.protobuf.Timestamp clearing_start_time = 12;
  bool has_clearing_start_time() const;
  void clear_clearing_start_time() ;
  const ::google::protobuf::Timestamp& clearing_start_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_clearing_start_time();
  ::google::protobuf::Timestamp* mutable_clearing_start_time();
  void set_allocated_clearing_start_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_clearing_start_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_clearing_start_time();

  private:
  const ::google::protobuf::Timestamp& _internal_clearing_start_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_clearing_start_time();

  public:
  // .google.protobuf.Timestamp clearing_end_time = 13;
  bool has_clearing_end_time() const;
  void clear_clearing_end_time() ;
  const ::google::protobuf::Timestamp& clearing_end_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_clearing_end_time();
  ::google::protobuf::Timestamp* mutable_clearing_end_time();
  void set_allocated_clearing_end_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_clearing_end_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_clearing_end_time();

  private:
  const ::google::protobuf::Timestamp& _internal_clearing_end_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_clearing_end_time();

  public:
  // .google.protobuf.Timestamp premarket_start_time = 14;
  bool has_premarket_start_time() const;
  void clear_premarket_start_time() ;
  const ::google::protobuf::Timestamp& premarket_start_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_premarket_start_time();
  ::google::protobuf::Timestamp* mutable_premarket_start_time();
  void set_allocated_premarket_start_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_premarket_start_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_premarket_start_time();

  private:
  const ::google::protobuf::Timestamp& _internal_premarket_start_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_premarket_start_time();

  public:
  // .google.protobuf.Timestamp premarket_end_time = 15;
  bool has_premarket_end_time() const;
  void clear_premarket_end_time() ;
  const ::google::protobuf::Timestamp& premarket_end_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_premarket_end_time();
  ::google::protobuf::Timestamp* mutable_premarket_end_time();
  void set_allocated_premarket_end_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_premarket_end_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_premarket_end_time();

  private:
  const ::google::protobuf::Timestamp& _internal_premarket_end_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_premarket_end_time();

  public:
  // .google.protobuf.Timestamp closing_auction_start_time = 16;
  bool has_closing_auction_start_time() const;
  void clear_closing_auction_start_time() ;
  const ::google::protobuf::Timestamp& closing_auction_start_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_closing_auction_start_time();
  ::google::protobuf::Timestamp* mutable_closing_auction_start_time();
  void set_allocated_closing_auction_start_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_closing_auction_start_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_closing_auction_start_time();

  private:
  const ::google::protobuf::Timestamp& _internal_closing_auction_start_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_closing_auction_start_time();

  public:
  // .google.protobuf.Timestamp opening_auction_end_time = 17;
  bool has_opening_auction_end_time() const;
  void clear_opening_auction_end_time() ;
  const ::google::protobuf::Timestamp& opening_auction_end_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_opening_auction_end_time();
  ::google::protobuf::Timestamp* mutable_opening_auction_end_time();
  void set_allocated_opening_auction_end_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_opening_auction_end_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_opening_auction_end_time();

  private:
  const ::google::protobuf::Timestamp& _internal_opening_auction_end_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_opening_auction_end_time();

  public:
  // bool is_trading_day = 2;
  void clear_is_trading_day() ;
  bool is_trading_day() const;
  void set_is_trading_day(bool value);

  private:
  bool _internal_is_trading_day() const;
  void _internal_set_is_trading_day(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.TradingDay)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 16, 15,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::TradingInterval > intervals_;
    ::google::protobuf::Timestamp* date_;
    ::google::protobuf::Timestamp* start_time_;
    ::google::protobuf::Timestamp* end_time_;
    ::google::protobuf::Timestamp* opening_auction_start_time_;
    ::google::protobuf::Timestamp* closing_auction_end_time_;
    ::google::protobuf::Timestamp* evening_opening_auction_start_time_;
    ::google::protobuf::Timestamp* evening_start_time_;
    ::google::protobuf::Timestamp* evening_end_time_;
    ::google::protobuf::Timestamp* clearing_start_time_;
    ::google::protobuf::Timestamp* clearing_end_time_;
    ::google::protobuf::Timestamp* premarket_start_time_;
    ::google::protobuf::Timestamp* premarket_end_time_;
    ::google::protobuf::Timestamp* closing_auction_start_time_;
    ::google::protobuf::Timestamp* opening_auction_end_time_;
    bool is_trading_day_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class AssetsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.AssetsResponse) */ {
 public:
  inline AssetsResponse() : AssetsResponse(nullptr) {}
  ~AssetsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AssetsResponse(::google::protobuf::internal::ConstantInitialized);

  inline AssetsResponse(const AssetsResponse& from)
      : AssetsResponse(nullptr, from) {}
  AssetsResponse(AssetsResponse&& from) noexcept
    : AssetsResponse() {
    *this = ::std::move(from);
  }

  inline AssetsResponse& operator=(const AssetsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetsResponse& operator=(AssetsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssetsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssetsResponse* internal_default_instance() {
    return reinterpret_cast<const AssetsResponse*>(
               &_AssetsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(AssetsResponse& a, AssetsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssetsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssetsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AssetsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AssetsResponse& from) {
    AssetsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AssetsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.AssetsResponse";
  }
  protected:
  explicit AssetsResponse(::google::protobuf::Arena* arena);
  AssetsResponse(::google::protobuf::Arena* arena, const AssetsResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetsFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.Asset assets = 1;
  int assets_size() const;
  private:
  int _internal_assets_size() const;

  public:
  void clear_assets() ;
  ::tinkoff::public_::invest::api::contract::v1::Asset* mutable_assets(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Asset >*
      mutable_assets();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Asset>& _internal_assets() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Asset>* _internal_mutable_assets();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::Asset& assets(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::Asset* add_assets();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Asset >&
      assets() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.AssetsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::Asset > assets_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class AssetFull final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.AssetFull) */ {
 public:
  inline AssetFull() : AssetFull(nullptr) {}
  ~AssetFull() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AssetFull(::google::protobuf::internal::ConstantInitialized);

  inline AssetFull(const AssetFull& from)
      : AssetFull(nullptr, from) {}
  AssetFull(AssetFull&& from) noexcept
    : AssetFull() {
    *this = ::std::move(from);
  }

  inline AssetFull& operator=(const AssetFull& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetFull& operator=(AssetFull&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssetFull& default_instance() {
    return *internal_default_instance();
  }
  enum ExtCase {
    kCurrency = 8,
    kSecurity = 9,
    EXT_NOT_SET = 0,
  };

  static inline const AssetFull* internal_default_instance() {
    return reinterpret_cast<const AssetFull*>(
               &_AssetFull_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(AssetFull& a, AssetFull& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetFull* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetFull* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssetFull* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssetFull>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AssetFull& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AssetFull& from) {
    AssetFull::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AssetFull* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.AssetFull";
  }
  protected:
  explicit AssetFull(::google::protobuf::Arena* arena);
  AssetFull(::google::protobuf::Arena* arena, const AssetFull& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequiredTestsFieldNumber = 7,
    kInstrumentsFieldNumber = 18,
    kUidFieldNumber = 1,
    kNameFieldNumber = 3,
    kNameBriefFieldNumber = 4,
    kDescriptionFieldNumber = 5,
    kGosRegCodeFieldNumber = 10,
    kCfiFieldNumber = 11,
    kCodeNsdFieldNumber = 12,
    kStatusFieldNumber = 13,
    kBrCodeFieldNumber = 16,
    kBrCodeNameFieldNumber = 17,
    kDeletedAtFieldNumber = 6,
    kBrandFieldNumber = 14,
    kUpdatedAtFieldNumber = 15,
    kTypeFieldNumber = 2,
    kCurrencyFieldNumber = 8,
    kSecurityFieldNumber = 9,
  };
  // repeated string required_tests = 7;
  int required_tests_size() const;
  private:
  int _internal_required_tests_size() const;

  public:
  void clear_required_tests() ;
  const std::string& required_tests(int index) const;
  std::string* mutable_required_tests(int index);
  void set_required_tests(int index, const std::string& value);
  void set_required_tests(int index, std::string&& value);
  void set_required_tests(int index, const char* value);
  void set_required_tests(int index, const char* value, std::size_t size);
  void set_required_tests(int index, absl::string_view value);
  std::string* add_required_tests();
  void add_required_tests(const std::string& value);
  void add_required_tests(std::string&& value);
  void add_required_tests(const char* value);
  void add_required_tests(const char* value, std::size_t size);
  void add_required_tests(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& required_tests() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_required_tests();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_required_tests() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_required_tests();

  public:
  // repeated .tinkoff.public_.invest.api.contract.v1.AssetInstrument instruments = 18;
  int instruments_size() const;
  private:
  int _internal_instruments_size() const;

  public:
  void clear_instruments() ;
  ::tinkoff::public_::invest::api::contract::v1::AssetInstrument* mutable_instruments(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::AssetInstrument >*
      mutable_instruments();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AssetInstrument>& _internal_instruments() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AssetInstrument>* _internal_mutable_instruments();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::AssetInstrument& instruments(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::AssetInstrument* add_instruments();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::AssetInstrument >&
      instruments() const;
  // string uid = 1;
  void clear_uid() ;
  const std::string& uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uid(Arg_&& arg, Args_... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* value);

  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(
      const std::string& value);
  std::string* _internal_mutable_uid();

  public:
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string name_brief = 4;
  void clear_name_brief() ;
  const std::string& name_brief() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name_brief(Arg_&& arg, Args_... args);
  std::string* mutable_name_brief();
  PROTOBUF_NODISCARD std::string* release_name_brief();
  void set_allocated_name_brief(std::string* value);

  private:
  const std::string& _internal_name_brief() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_brief(
      const std::string& value);
  std::string* _internal_mutable_name_brief();

  public:
  // string description = 5;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string gos_reg_code = 10;
  void clear_gos_reg_code() ;
  const std::string& gos_reg_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_gos_reg_code(Arg_&& arg, Args_... args);
  std::string* mutable_gos_reg_code();
  PROTOBUF_NODISCARD std::string* release_gos_reg_code();
  void set_allocated_gos_reg_code(std::string* value);

  private:
  const std::string& _internal_gos_reg_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gos_reg_code(
      const std::string& value);
  std::string* _internal_mutable_gos_reg_code();

  public:
  // string cfi = 11;
  void clear_cfi() ;
  const std::string& cfi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cfi(Arg_&& arg, Args_... args);
  std::string* mutable_cfi();
  PROTOBUF_NODISCARD std::string* release_cfi();
  void set_allocated_cfi(std::string* value);

  private:
  const std::string& _internal_cfi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cfi(
      const std::string& value);
  std::string* _internal_mutable_cfi();

  public:
  // string code_nsd = 12;
  void clear_code_nsd() ;
  const std::string& code_nsd() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code_nsd(Arg_&& arg, Args_... args);
  std::string* mutable_code_nsd();
  PROTOBUF_NODISCARD std::string* release_code_nsd();
  void set_allocated_code_nsd(std::string* value);

  private:
  const std::string& _internal_code_nsd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code_nsd(
      const std::string& value);
  std::string* _internal_mutable_code_nsd();

  public:
  // string status = 13;
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // string br_code = 16;
  void clear_br_code() ;
  const std::string& br_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_br_code(Arg_&& arg, Args_... args);
  std::string* mutable_br_code();
  PROTOBUF_NODISCARD std::string* release_br_code();
  void set_allocated_br_code(std::string* value);

  private:
  const std::string& _internal_br_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_br_code(
      const std::string& value);
  std::string* _internal_mutable_br_code();

  public:
  // string br_code_name = 17;
  void clear_br_code_name() ;
  const std::string& br_code_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_br_code_name(Arg_&& arg, Args_... args);
  std::string* mutable_br_code_name();
  PROTOBUF_NODISCARD std::string* release_br_code_name();
  void set_allocated_br_code_name(std::string* value);

  private:
  const std::string& _internal_br_code_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_br_code_name(
      const std::string& value);
  std::string* _internal_mutable_br_code_name();

  public:
  // .google.protobuf.Timestamp deleted_at = 6;
  bool has_deleted_at() const;
  void clear_deleted_at() ;
  const ::google::protobuf::Timestamp& deleted_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_deleted_at();
  ::google::protobuf::Timestamp* mutable_deleted_at();
  void set_allocated_deleted_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_deleted_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_deleted_at();

  private:
  const ::google::protobuf::Timestamp& _internal_deleted_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_deleted_at();

  public:
  // .tinkoff.public_.invest.api.contract.v1.Brand brand = 14;
  bool has_brand() const;
  void clear_brand() ;
  const ::tinkoff::public_::invest::api::contract::v1::Brand& brand() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::Brand* release_brand();
  ::tinkoff::public_::invest::api::contract::v1::Brand* mutable_brand();
  void set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::Brand* value);
  void unsafe_arena_set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::Brand* value);
  ::tinkoff::public_::invest::api::contract::v1::Brand* unsafe_arena_release_brand();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::Brand& _internal_brand() const;
  ::tinkoff::public_::invest::api::contract::v1::Brand* _internal_mutable_brand();

  public:
  // .google.protobuf.Timestamp updated_at = 15;
  bool has_updated_at() const;
  void clear_updated_at() ;
  const ::google::protobuf::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_updated_at();
  ::google::protobuf::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_updated_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_updated_at();

  private:
  const ::google::protobuf::Timestamp& _internal_updated_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_updated_at();

  public:
  // .tinkoff.public_.invest.api.contract.v1.AssetType type = 2;
  void clear_type() ;
  ::tinkoff::public_::invest::api::contract::v1::AssetType type() const;
  void set_type(::tinkoff::public_::invest::api::contract::v1::AssetType value);

  private:
  ::tinkoff::public_::invest::api::contract::v1::AssetType _internal_type() const;
  void _internal_set_type(::tinkoff::public_::invest::api::contract::v1::AssetType value);

  public:
  // .tinkoff.public_.invest.api.contract.v1.AssetCurrency currency = 8;
  bool has_currency() const;
  private:
  bool _internal_has_currency() const;

  public:
  void clear_currency() ;
  const ::tinkoff::public_::invest::api::contract::v1::AssetCurrency& currency() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::AssetCurrency* release_currency();
  ::tinkoff::public_::invest::api::contract::v1::AssetCurrency* mutable_currency();
  void set_allocated_currency(::tinkoff::public_::invest::api::contract::v1::AssetCurrency* value);
  void unsafe_arena_set_allocated_currency(::tinkoff::public_::invest::api::contract::v1::AssetCurrency* value);
  ::tinkoff::public_::invest::api::contract::v1::AssetCurrency* unsafe_arena_release_currency();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::AssetCurrency& _internal_currency() const;
  ::tinkoff::public_::invest::api::contract::v1::AssetCurrency* _internal_mutable_currency();

  public:
  // .tinkoff.public_.invest.api.contract.v1.AssetSecurity security = 9;
  bool has_security() const;
  private:
  bool _internal_has_security() const;

  public:
  void clear_security() ;
  const ::tinkoff::public_::invest::api::contract::v1::AssetSecurity& security() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::AssetSecurity* release_security();
  ::tinkoff::public_::invest::api::contract::v1::AssetSecurity* mutable_security();
  void set_allocated_security(::tinkoff::public_::invest::api::contract::v1::AssetSecurity* value);
  void unsafe_arena_set_allocated_security(::tinkoff::public_::invest::api::contract::v1::AssetSecurity* value);
  ::tinkoff::public_::invest::api::contract::v1::AssetSecurity* unsafe_arena_release_security();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::AssetSecurity& _internal_security() const;
  ::tinkoff::public_::invest::api::contract::v1::AssetSecurity* _internal_mutable_security();

  public:
  void clear_ext();
  ExtCase ext_case() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.AssetFull)
 private:
  class _Internal;
  void set_has_currency();
  void set_has_security();

  inline bool has_ext() const;
  inline void clear_has_ext();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 18, 6,
      163, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> required_tests_;
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::AssetInstrument > instruments_;
    ::google::protobuf::internal::ArenaStringPtr uid_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr name_brief_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr gos_reg_code_;
    ::google::protobuf::internal::ArenaStringPtr cfi_;
    ::google::protobuf::internal::ArenaStringPtr code_nsd_;
    ::google::protobuf::internal::ArenaStringPtr status_;
    ::google::protobuf::internal::ArenaStringPtr br_code_;
    ::google::protobuf::internal::ArenaStringPtr br_code_name_;
    ::google::protobuf::Timestamp* deleted_at_;
    ::tinkoff::public_::invest::api::contract::v1::Brand* brand_;
    ::google::protobuf::Timestamp* updated_at_;
    int type_;
    union ExtUnion {
      constexpr ExtUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::tinkoff::public_::invest::api::contract::v1::AssetCurrency* currency_;
      ::tinkoff::public_::invest::api::contract::v1::AssetSecurity* security_;
    } ext_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class TradingSchedule final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.TradingSchedule) */ {
 public:
  inline TradingSchedule() : TradingSchedule(nullptr) {}
  ~TradingSchedule() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TradingSchedule(::google::protobuf::internal::ConstantInitialized);

  inline TradingSchedule(const TradingSchedule& from)
      : TradingSchedule(nullptr, from) {}
  TradingSchedule(TradingSchedule&& from) noexcept
    : TradingSchedule() {
    *this = ::std::move(from);
  }

  inline TradingSchedule& operator=(const TradingSchedule& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradingSchedule& operator=(TradingSchedule&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TradingSchedule& default_instance() {
    return *internal_default_instance();
  }
  static inline const TradingSchedule* internal_default_instance() {
    return reinterpret_cast<const TradingSchedule*>(
               &_TradingSchedule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TradingSchedule& a, TradingSchedule& b) {
    a.Swap(&b);
  }
  inline void Swap(TradingSchedule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradingSchedule* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TradingSchedule* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TradingSchedule>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TradingSchedule& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TradingSchedule& from) {
    TradingSchedule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TradingSchedule* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.TradingSchedule";
  }
  protected:
  explicit TradingSchedule(::google::protobuf::Arena* arena);
  TradingSchedule(::google::protobuf::Arena* arena, const TradingSchedule& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDaysFieldNumber = 2,
    kExchangeFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.TradingDay days = 2;
  int days_size() const;
  private:
  int _internal_days_size() const;

  public:
  void clear_days() ;
  ::tinkoff::public_::invest::api::contract::v1::TradingDay* mutable_days(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::TradingDay >*
      mutable_days();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::TradingDay>& _internal_days() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::TradingDay>* _internal_mutable_days();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::TradingDay& days(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::TradingDay* add_days();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::TradingDay >&
      days() const;
  // string exchange = 1;
  void clear_exchange() ;
  const std::string& exchange() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange(Arg_&& arg, Args_... args);
  std::string* mutable_exchange();
  PROTOBUF_NODISCARD std::string* release_exchange();
  void set_allocated_exchange(std::string* value);

  private:
  const std::string& _internal_exchange() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange(
      const std::string& value);
  std::string* _internal_mutable_exchange();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.TradingSchedule)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      71, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::TradingDay > days_;
    ::google::protobuf::internal::ArenaStringPtr exchange_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class AssetResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.AssetResponse) */ {
 public:
  inline AssetResponse() : AssetResponse(nullptr) {}
  ~AssetResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AssetResponse(::google::protobuf::internal::ConstantInitialized);

  inline AssetResponse(const AssetResponse& from)
      : AssetResponse(nullptr, from) {}
  AssetResponse(AssetResponse&& from) noexcept
    : AssetResponse() {
    *this = ::std::move(from);
  }

  inline AssetResponse& operator=(const AssetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetResponse& operator=(AssetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssetResponse* internal_default_instance() {
    return reinterpret_cast<const AssetResponse*>(
               &_AssetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(AssetResponse& a, AssetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssetResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssetResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AssetResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AssetResponse& from) {
    AssetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AssetResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.AssetResponse";
  }
  protected:
  explicit AssetResponse(::google::protobuf::Arena* arena);
  AssetResponse(::google::protobuf::Arena* arena, const AssetResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetFieldNumber = 1,
  };
  // .tinkoff.public_.invest.api.contract.v1.AssetFull asset = 1;
  bool has_asset() const;
  void clear_asset() ;
  const ::tinkoff::public_::invest::api::contract::v1::AssetFull& asset() const;
  PROTOBUF_NODISCARD ::tinkoff::public_::invest::api::contract::v1::AssetFull* release_asset();
  ::tinkoff::public_::invest::api::contract::v1::AssetFull* mutable_asset();
  void set_allocated_asset(::tinkoff::public_::invest::api::contract::v1::AssetFull* value);
  void unsafe_arena_set_allocated_asset(::tinkoff::public_::invest::api::contract::v1::AssetFull* value);
  ::tinkoff::public_::invest::api::contract::v1::AssetFull* unsafe_arena_release_asset();

  private:
  const ::tinkoff::public_::invest::api::contract::v1::AssetFull& _internal_asset() const;
  ::tinkoff::public_::invest::api::contract::v1::AssetFull* _internal_mutable_asset();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.AssetResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::tinkoff::public_::invest::api::contract::v1::AssetFull* asset_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};// -------------------------------------------------------------------

class TradingSchedulesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse) */ {
 public:
  inline TradingSchedulesResponse() : TradingSchedulesResponse(nullptr) {}
  ~TradingSchedulesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TradingSchedulesResponse(::google::protobuf::internal::ConstantInitialized);

  inline TradingSchedulesResponse(const TradingSchedulesResponse& from)
      : TradingSchedulesResponse(nullptr, from) {}
  TradingSchedulesResponse(TradingSchedulesResponse&& from) noexcept
    : TradingSchedulesResponse() {
    *this = ::std::move(from);
  }

  inline TradingSchedulesResponse& operator=(const TradingSchedulesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradingSchedulesResponse& operator=(TradingSchedulesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TradingSchedulesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TradingSchedulesResponse* internal_default_instance() {
    return reinterpret_cast<const TradingSchedulesResponse*>(
               &_TradingSchedulesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TradingSchedulesResponse& a, TradingSchedulesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TradingSchedulesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradingSchedulesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TradingSchedulesResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TradingSchedulesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TradingSchedulesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TradingSchedulesResponse& from) {
    TradingSchedulesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TradingSchedulesResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse";
  }
  protected:
  explicit TradingSchedulesResponse(::google::protobuf::Arena* arena);
  TradingSchedulesResponse(::google::protobuf::Arena* arena, const TradingSchedulesResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangesFieldNumber = 1,
  };
  // repeated .tinkoff.public_.invest.api.contract.v1.TradingSchedule exchanges = 1;
  int exchanges_size() const;
  private:
  int _internal_exchanges_size() const;

  public:
  void clear_exchanges() ;
  ::tinkoff::public_::invest::api::contract::v1::TradingSchedule* mutable_exchanges(int index);
  ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::TradingSchedule >*
      mutable_exchanges();
  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::TradingSchedule>& _internal_exchanges() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::TradingSchedule>* _internal_mutable_exchanges();
  public:
  const ::tinkoff::public_::invest::api::contract::v1::TradingSchedule& exchanges(int index) const;
  ::tinkoff::public_::invest::api::contract::v1::TradingSchedule* add_exchanges();
  const ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::TradingSchedule >&
      exchanges() const;
  // @@protoc_insertion_point(class_scope:tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::public_::invest::api::contract::v1::TradingSchedule > exchanges_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_instruments_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TradingSchedulesRequest

// optional string exchange = 1;
inline bool TradingSchedulesRequest::has_exchange() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TradingSchedulesRequest::clear_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TradingSchedulesRequest::exchange() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest.exchange)
  return _internal_exchange();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TradingSchedulesRequest::set_exchange(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.exchange_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest.exchange)
}
inline std::string* TradingSchedulesRequest::mutable_exchange() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_exchange();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest.exchange)
  return _s;
}
inline const std::string& TradingSchedulesRequest::_internal_exchange() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exchange_.Get();
}
inline void TradingSchedulesRequest::_internal_set_exchange(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.exchange_.Set(value, GetArena());
}
inline std::string* TradingSchedulesRequest::_internal_mutable_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.exchange_.Mutable( GetArena());
}
inline std::string* TradingSchedulesRequest::release_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest.exchange)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.exchange_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchange_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TradingSchedulesRequest::set_allocated_exchange(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.exchange_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_.IsDefault()) {
          _impl_.exchange_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest.exchange)
}

// optional .google.protobuf.Timestamp from = 2;
inline bool TradingSchedulesRequest::has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.from_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TradingSchedulesRequest::_internal_from() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TradingSchedulesRequest::from() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest.from)
  return _internal_from();
}
inline void TradingSchedulesRequest::unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest.from)
}
inline ::google::protobuf::Timestamp* TradingSchedulesRequest::release_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.from_;
  _impl_.from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* TradingSchedulesRequest::unsafe_arena_release_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest.from)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TradingSchedulesRequest::_internal_mutable_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.from_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.from_;
}
inline ::google::protobuf::Timestamp* TradingSchedulesRequest::mutable_from() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest.from)
  return _msg;
}
inline void TradingSchedulesRequest::set_allocated_from(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest.from)
}

// optional .google.protobuf.Timestamp to = 3;
inline bool TradingSchedulesRequest::has_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.to_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TradingSchedulesRequest::_internal_to() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TradingSchedulesRequest::to() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest.to)
  return _internal_to();
}
inline void TradingSchedulesRequest::unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest.to)
}
inline ::google::protobuf::Timestamp* TradingSchedulesRequest::release_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* released = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* TradingSchedulesRequest::unsafe_arena_release_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest.to)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TradingSchedulesRequest::_internal_mutable_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.to_;
}
inline ::google::protobuf::Timestamp* TradingSchedulesRequest::mutable_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest.to)
  return _msg;
}
inline void TradingSchedulesRequest::set_allocated_to(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingSchedulesRequest.to)
}

// -------------------------------------------------------------------

// TradingSchedulesResponse

// repeated .tinkoff.public_.invest.api.contract.v1.TradingSchedule exchanges = 1;
inline int TradingSchedulesResponse::_internal_exchanges_size() const {
  return _internal_exchanges().size();
}
inline int TradingSchedulesResponse::exchanges_size() const {
  return _internal_exchanges_size();
}
inline void TradingSchedulesResponse::clear_exchanges() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchanges_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::TradingSchedule* TradingSchedulesResponse::mutable_exchanges(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse.exchanges)
  return _internal_mutable_exchanges()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::TradingSchedule>* TradingSchedulesResponse::mutable_exchanges()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse.exchanges)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_exchanges();
}
inline const ::tinkoff::public_::invest::api::contract::v1::TradingSchedule& TradingSchedulesResponse::exchanges(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse.exchanges)
  return _internal_exchanges().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::TradingSchedule* TradingSchedulesResponse::add_exchanges() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::TradingSchedule* _add = _internal_mutable_exchanges()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse.exchanges)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::TradingSchedule>& TradingSchedulesResponse::exchanges() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.TradingSchedulesResponse.exchanges)
  return _internal_exchanges();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::TradingSchedule>&
TradingSchedulesResponse::_internal_exchanges() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exchanges_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::TradingSchedule>*
TradingSchedulesResponse::_internal_mutable_exchanges() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.exchanges_;
}

// -------------------------------------------------------------------

// TradingSchedule

// string exchange = 1;
inline void TradingSchedule::clear_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_.ClearToEmpty();
}
inline const std::string& TradingSchedule::exchange() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingSchedule.exchange)
  return _internal_exchange();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TradingSchedule::set_exchange(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.TradingSchedule.exchange)
}
inline std::string* TradingSchedule::mutable_exchange() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_exchange();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradingSchedule.exchange)
  return _s;
}
inline const std::string& TradingSchedule::_internal_exchange() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exchange_.Get();
}
inline void TradingSchedule::_internal_set_exchange(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_.Set(value, GetArena());
}
inline std::string* TradingSchedule::_internal_mutable_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.exchange_.Mutable( GetArena());
}
inline std::string* TradingSchedule::release_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.TradingSchedule.exchange)
  return _impl_.exchange_.Release();
}
inline void TradingSchedule::set_allocated_exchange(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_.IsDefault()) {
          _impl_.exchange_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingSchedule.exchange)
}

// repeated .tinkoff.public_.invest.api.contract.v1.TradingDay days = 2;
inline int TradingSchedule::_internal_days_size() const {
  return _internal_days().size();
}
inline int TradingSchedule::days_size() const {
  return _internal_days_size();
}
inline void TradingSchedule::clear_days() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.days_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::TradingDay* TradingSchedule::mutable_days(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradingSchedule.days)
  return _internal_mutable_days()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::TradingDay>* TradingSchedule::mutable_days()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.TradingSchedule.days)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_days();
}
inline const ::tinkoff::public_::invest::api::contract::v1::TradingDay& TradingSchedule::days(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingSchedule.days)
  return _internal_days().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::TradingDay* TradingSchedule::add_days() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::TradingDay* _add = _internal_mutable_days()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.TradingSchedule.days)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::TradingDay>& TradingSchedule::days() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.TradingSchedule.days)
  return _internal_days();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::TradingDay>&
TradingSchedule::_internal_days() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.days_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::TradingDay>*
TradingSchedule::_internal_mutable_days() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.days_;
}

// -------------------------------------------------------------------

// TradingDay

// .google.protobuf.Timestamp date = 1;
inline bool TradingDay::has_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TradingDay::_internal_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TradingDay::date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingDay.date)
  return _internal_date();
}
inline void TradingDay::unsafe_arena_set_allocated_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.date_);
  }
  _impl_.date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.date)
}
inline ::google::protobuf::Timestamp* TradingDay::release_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.date_;
  _impl_.date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* TradingDay::unsafe_arena_release_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.TradingDay.date)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.date_;
  _impl_.date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TradingDay::_internal_mutable_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.date_;
}
inline ::google::protobuf::Timestamp* TradingDay::mutable_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradingDay.date)
  return _msg;
}
inline void TradingDay::set_allocated_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.date)
}

// bool is_trading_day = 2;
inline void TradingDay::clear_is_trading_day() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_trading_day_ = false;
}
inline bool TradingDay::is_trading_day() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingDay.is_trading_day)
  return _internal_is_trading_day();
}
inline void TradingDay::set_is_trading_day(bool value) {
  _internal_set_is_trading_day(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.TradingDay.is_trading_day)
}
inline bool TradingDay::_internal_is_trading_day() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_trading_day_;
}
inline void TradingDay::_internal_set_is_trading_day(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_trading_day_ = value;
}

// .google.protobuf.Timestamp start_time = 3;
inline bool TradingDay::has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TradingDay::_internal_start_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TradingDay::start_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingDay.start_time)
  return _internal_start_time();
}
inline void TradingDay::unsafe_arena_set_allocated_start_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_time_);
  }
  _impl_.start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.start_time)
}
inline ::google::protobuf::Timestamp* TradingDay::release_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* TradingDay::unsafe_arena_release_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.TradingDay.start_time)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TradingDay::_internal_mutable_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.start_time_;
}
inline ::google::protobuf::Timestamp* TradingDay::mutable_start_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradingDay.start_time)
  return _msg;
}
inline void TradingDay::set_allocated_start_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.start_time)
}

// .google.protobuf.Timestamp end_time = 4;
inline bool TradingDay::has_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TradingDay::_internal_end_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TradingDay::end_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingDay.end_time)
  return _internal_end_time();
}
inline void TradingDay::unsafe_arena_set_allocated_end_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_time_);
  }
  _impl_.end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.end_time)
}
inline ::google::protobuf::Timestamp* TradingDay::release_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* released = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* TradingDay::unsafe_arena_release_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.TradingDay.end_time)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TradingDay::_internal_mutable_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.end_time_;
}
inline ::google::protobuf::Timestamp* TradingDay::mutable_end_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradingDay.end_time)
  return _msg;
}
inline void TradingDay::set_allocated_end_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.end_time)
}

// .google.protobuf.Timestamp opening_auction_start_time = 7;
inline bool TradingDay::has_opening_auction_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.opening_auction_start_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TradingDay::_internal_opening_auction_start_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.opening_auction_start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TradingDay::opening_auction_start_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingDay.opening_auction_start_time)
  return _internal_opening_auction_start_time();
}
inline void TradingDay::unsafe_arena_set_allocated_opening_auction_start_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.opening_auction_start_time_);
  }
  _impl_.opening_auction_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.opening_auction_start_time)
}
inline ::google::protobuf::Timestamp* TradingDay::release_opening_auction_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Timestamp* released = _impl_.opening_auction_start_time_;
  _impl_.opening_auction_start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* TradingDay::unsafe_arena_release_opening_auction_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.TradingDay.opening_auction_start_time)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Timestamp* temp = _impl_.opening_auction_start_time_;
  _impl_.opening_auction_start_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TradingDay::_internal_mutable_opening_auction_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.opening_auction_start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.opening_auction_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.opening_auction_start_time_;
}
inline ::google::protobuf::Timestamp* TradingDay::mutable_opening_auction_start_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_opening_auction_start_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradingDay.opening_auction_start_time)
  return _msg;
}
inline void TradingDay::set_allocated_opening_auction_start_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.opening_auction_start_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.opening_auction_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.opening_auction_start_time)
}

// .google.protobuf.Timestamp closing_auction_end_time = 8;
inline bool TradingDay::has_closing_auction_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.closing_auction_end_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TradingDay::_internal_closing_auction_end_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.closing_auction_end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TradingDay::closing_auction_end_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingDay.closing_auction_end_time)
  return _internal_closing_auction_end_time();
}
inline void TradingDay::unsafe_arena_set_allocated_closing_auction_end_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.closing_auction_end_time_);
  }
  _impl_.closing_auction_end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.closing_auction_end_time)
}
inline ::google::protobuf::Timestamp* TradingDay::release_closing_auction_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* released = _impl_.closing_auction_end_time_;
  _impl_.closing_auction_end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* TradingDay::unsafe_arena_release_closing_auction_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.TradingDay.closing_auction_end_time)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* temp = _impl_.closing_auction_end_time_;
  _impl_.closing_auction_end_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TradingDay::_internal_mutable_closing_auction_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.closing_auction_end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.closing_auction_end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.closing_auction_end_time_;
}
inline ::google::protobuf::Timestamp* TradingDay::mutable_closing_auction_end_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_closing_auction_end_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradingDay.closing_auction_end_time)
  return _msg;
}
inline void TradingDay::set_allocated_closing_auction_end_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.closing_auction_end_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.closing_auction_end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.closing_auction_end_time)
}

// .google.protobuf.Timestamp evening_opening_auction_start_time = 9;
inline bool TradingDay::has_evening_opening_auction_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.evening_opening_auction_start_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TradingDay::_internal_evening_opening_auction_start_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.evening_opening_auction_start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TradingDay::evening_opening_auction_start_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingDay.evening_opening_auction_start_time)
  return _internal_evening_opening_auction_start_time();
}
inline void TradingDay::unsafe_arena_set_allocated_evening_opening_auction_start_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.evening_opening_auction_start_time_);
  }
  _impl_.evening_opening_auction_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.evening_opening_auction_start_time)
}
inline ::google::protobuf::Timestamp* TradingDay::release_evening_opening_auction_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Timestamp* released = _impl_.evening_opening_auction_start_time_;
  _impl_.evening_opening_auction_start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* TradingDay::unsafe_arena_release_evening_opening_auction_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.TradingDay.evening_opening_auction_start_time)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Timestamp* temp = _impl_.evening_opening_auction_start_time_;
  _impl_.evening_opening_auction_start_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TradingDay::_internal_mutable_evening_opening_auction_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.evening_opening_auction_start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.evening_opening_auction_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.evening_opening_auction_start_time_;
}
inline ::google::protobuf::Timestamp* TradingDay::mutable_evening_opening_auction_start_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_evening_opening_auction_start_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradingDay.evening_opening_auction_start_time)
  return _msg;
}
inline void TradingDay::set_allocated_evening_opening_auction_start_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.evening_opening_auction_start_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.evening_opening_auction_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.evening_opening_auction_start_time)
}

// .google.protobuf.Timestamp evening_start_time = 10;
inline bool TradingDay::has_evening_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.evening_start_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TradingDay::_internal_evening_start_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.evening_start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TradingDay::evening_start_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingDay.evening_start_time)
  return _internal_evening_start_time();
}
inline void TradingDay::unsafe_arena_set_allocated_evening_start_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.evening_start_time_);
  }
  _impl_.evening_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.evening_start_time)
}
inline ::google::protobuf::Timestamp* TradingDay::release_evening_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::google::protobuf::Timestamp* released = _impl_.evening_start_time_;
  _impl_.evening_start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* TradingDay::unsafe_arena_release_evening_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.TradingDay.evening_start_time)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::google::protobuf::Timestamp* temp = _impl_.evening_start_time_;
  _impl_.evening_start_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TradingDay::_internal_mutable_evening_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.evening_start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.evening_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.evening_start_time_;
}
inline ::google::protobuf::Timestamp* TradingDay::mutable_evening_start_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_evening_start_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradingDay.evening_start_time)
  return _msg;
}
inline void TradingDay::set_allocated_evening_start_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.evening_start_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.evening_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.evening_start_time)
}

// .google.protobuf.Timestamp evening_end_time = 11;
inline bool TradingDay::has_evening_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.evening_end_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TradingDay::_internal_evening_end_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.evening_end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TradingDay::evening_end_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingDay.evening_end_time)
  return _internal_evening_end_time();
}
inline void TradingDay::unsafe_arena_set_allocated_evening_end_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.evening_end_time_);
  }
  _impl_.evening_end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.evening_end_time)
}
inline ::google::protobuf::Timestamp* TradingDay::release_evening_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::google::protobuf::Timestamp* released = _impl_.evening_end_time_;
  _impl_.evening_end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* TradingDay::unsafe_arena_release_evening_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.TradingDay.evening_end_time)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::google::protobuf::Timestamp* temp = _impl_.evening_end_time_;
  _impl_.evening_end_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TradingDay::_internal_mutable_evening_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.evening_end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.evening_end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.evening_end_time_;
}
inline ::google::protobuf::Timestamp* TradingDay::mutable_evening_end_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_evening_end_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradingDay.evening_end_time)
  return _msg;
}
inline void TradingDay::set_allocated_evening_end_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.evening_end_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.evening_end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.evening_end_time)
}

// .google.protobuf.Timestamp clearing_start_time = 12;
inline bool TradingDay::has_clearing_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.clearing_start_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TradingDay::_internal_clearing_start_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.clearing_start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TradingDay::clearing_start_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingDay.clearing_start_time)
  return _internal_clearing_start_time();
}
inline void TradingDay::unsafe_arena_set_allocated_clearing_start_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.clearing_start_time_);
  }
  _impl_.clearing_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.clearing_start_time)
}
inline ::google::protobuf::Timestamp* TradingDay::release_clearing_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::google::protobuf::Timestamp* released = _impl_.clearing_start_time_;
  _impl_.clearing_start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* TradingDay::unsafe_arena_release_clearing_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.TradingDay.clearing_start_time)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::google::protobuf::Timestamp* temp = _impl_.clearing_start_time_;
  _impl_.clearing_start_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TradingDay::_internal_mutable_clearing_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.clearing_start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.clearing_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.clearing_start_time_;
}
inline ::google::protobuf::Timestamp* TradingDay::mutable_clearing_start_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_clearing_start_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradingDay.clearing_start_time)
  return _msg;
}
inline void TradingDay::set_allocated_clearing_start_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.clearing_start_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.clearing_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.clearing_start_time)
}

// .google.protobuf.Timestamp clearing_end_time = 13;
inline bool TradingDay::has_clearing_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.clearing_end_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TradingDay::_internal_clearing_end_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.clearing_end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TradingDay::clearing_end_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingDay.clearing_end_time)
  return _internal_clearing_end_time();
}
inline void TradingDay::unsafe_arena_set_allocated_clearing_end_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.clearing_end_time_);
  }
  _impl_.clearing_end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.clearing_end_time)
}
inline ::google::protobuf::Timestamp* TradingDay::release_clearing_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::google::protobuf::Timestamp* released = _impl_.clearing_end_time_;
  _impl_.clearing_end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* TradingDay::unsafe_arena_release_clearing_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.TradingDay.clearing_end_time)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::google::protobuf::Timestamp* temp = _impl_.clearing_end_time_;
  _impl_.clearing_end_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TradingDay::_internal_mutable_clearing_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.clearing_end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.clearing_end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.clearing_end_time_;
}
inline ::google::protobuf::Timestamp* TradingDay::mutable_clearing_end_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_clearing_end_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradingDay.clearing_end_time)
  return _msg;
}
inline void TradingDay::set_allocated_clearing_end_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.clearing_end_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.clearing_end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.clearing_end_time)
}

// .google.protobuf.Timestamp premarket_start_time = 14;
inline bool TradingDay::has_premarket_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.premarket_start_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TradingDay::_internal_premarket_start_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.premarket_start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TradingDay::premarket_start_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingDay.premarket_start_time)
  return _internal_premarket_start_time();
}
inline void TradingDay::unsafe_arena_set_allocated_premarket_start_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.premarket_start_time_);
  }
  _impl_.premarket_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.premarket_start_time)
}
inline ::google::protobuf::Timestamp* TradingDay::release_premarket_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::google::protobuf::Timestamp* released = _impl_.premarket_start_time_;
  _impl_.premarket_start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* TradingDay::unsafe_arena_release_premarket_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.TradingDay.premarket_start_time)

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::google::protobuf::Timestamp* temp = _impl_.premarket_start_time_;
  _impl_.premarket_start_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TradingDay::_internal_mutable_premarket_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.premarket_start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.premarket_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.premarket_start_time_;
}
inline ::google::protobuf::Timestamp* TradingDay::mutable_premarket_start_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_premarket_start_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradingDay.premarket_start_time)
  return _msg;
}
inline void TradingDay::set_allocated_premarket_start_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.premarket_start_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }

  _impl_.premarket_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.premarket_start_time)
}

// .google.protobuf.Timestamp premarket_end_time = 15;
inline bool TradingDay::has_premarket_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.premarket_end_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TradingDay::_internal_premarket_end_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.premarket_end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TradingDay::premarket_end_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingDay.premarket_end_time)
  return _internal_premarket_end_time();
}
inline void TradingDay::unsafe_arena_set_allocated_premarket_end_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.premarket_end_time_);
  }
  _impl_.premarket_end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.premarket_end_time)
}
inline ::google::protobuf::Timestamp* TradingDay::release_premarket_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::google::protobuf::Timestamp* released = _impl_.premarket_end_time_;
  _impl_.premarket_end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* TradingDay::unsafe_arena_release_premarket_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.TradingDay.premarket_end_time)

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::google::protobuf::Timestamp* temp = _impl_.premarket_end_time_;
  _impl_.premarket_end_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TradingDay::_internal_mutable_premarket_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.premarket_end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.premarket_end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.premarket_end_time_;
}
inline ::google::protobuf::Timestamp* TradingDay::mutable_premarket_end_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_premarket_end_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradingDay.premarket_end_time)
  return _msg;
}
inline void TradingDay::set_allocated_premarket_end_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.premarket_end_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }

  _impl_.premarket_end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.premarket_end_time)
}

// .google.protobuf.Timestamp closing_auction_start_time = 16;
inline bool TradingDay::has_closing_auction_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.closing_auction_start_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TradingDay::_internal_closing_auction_start_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.closing_auction_start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TradingDay::closing_auction_start_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingDay.closing_auction_start_time)
  return _internal_closing_auction_start_time();
}
inline void TradingDay::unsafe_arena_set_allocated_closing_auction_start_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.closing_auction_start_time_);
  }
  _impl_.closing_auction_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.closing_auction_start_time)
}
inline ::google::protobuf::Timestamp* TradingDay::release_closing_auction_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::google::protobuf::Timestamp* released = _impl_.closing_auction_start_time_;
  _impl_.closing_auction_start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* TradingDay::unsafe_arena_release_closing_auction_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.TradingDay.closing_auction_start_time)

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::google::protobuf::Timestamp* temp = _impl_.closing_auction_start_time_;
  _impl_.closing_auction_start_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TradingDay::_internal_mutable_closing_auction_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.closing_auction_start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.closing_auction_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.closing_auction_start_time_;
}
inline ::google::protobuf::Timestamp* TradingDay::mutable_closing_auction_start_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_closing_auction_start_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradingDay.closing_auction_start_time)
  return _msg;
}
inline void TradingDay::set_allocated_closing_auction_start_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.closing_auction_start_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }

  _impl_.closing_auction_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.closing_auction_start_time)
}

// .google.protobuf.Timestamp opening_auction_end_time = 17;
inline bool TradingDay::has_opening_auction_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.opening_auction_end_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TradingDay::_internal_opening_auction_end_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.opening_auction_end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TradingDay::opening_auction_end_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingDay.opening_auction_end_time)
  return _internal_opening_auction_end_time();
}
inline void TradingDay::unsafe_arena_set_allocated_opening_auction_end_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.opening_auction_end_time_);
  }
  _impl_.opening_auction_end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.opening_auction_end_time)
}
inline ::google::protobuf::Timestamp* TradingDay::release_opening_auction_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00002000u;
  ::google::protobuf::Timestamp* released = _impl_.opening_auction_end_time_;
  _impl_.opening_auction_end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* TradingDay::unsafe_arena_release_opening_auction_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.TradingDay.opening_auction_end_time)

  _impl_._has_bits_[0] &= ~0x00002000u;
  ::google::protobuf::Timestamp* temp = _impl_.opening_auction_end_time_;
  _impl_.opening_auction_end_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TradingDay::_internal_mutable_opening_auction_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.opening_auction_end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.opening_auction_end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.opening_auction_end_time_;
}
inline ::google::protobuf::Timestamp* TradingDay::mutable_opening_auction_end_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_opening_auction_end_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradingDay.opening_auction_end_time)
  return _msg;
}
inline void TradingDay::set_allocated_opening_auction_end_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.opening_auction_end_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }

  _impl_.opening_auction_end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingDay.opening_auction_end_time)
}

// repeated .tinkoff.public_.invest.api.contract.v1.TradingInterval intervals = 18;
inline int TradingDay::_internal_intervals_size() const {
  return _internal_intervals().size();
}
inline int TradingDay::intervals_size() const {
  return _internal_intervals_size();
}
inline void TradingDay::clear_intervals() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.intervals_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::TradingInterval* TradingDay::mutable_intervals(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradingDay.intervals)
  return _internal_mutable_intervals()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::TradingInterval>* TradingDay::mutable_intervals()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.TradingDay.intervals)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_intervals();
}
inline const ::tinkoff::public_::invest::api::contract::v1::TradingInterval& TradingDay::intervals(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingDay.intervals)
  return _internal_intervals().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::TradingInterval* TradingDay::add_intervals() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::TradingInterval* _add = _internal_mutable_intervals()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.TradingDay.intervals)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::TradingInterval>& TradingDay::intervals() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.TradingDay.intervals)
  return _internal_intervals();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::TradingInterval>&
TradingDay::_internal_intervals() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.intervals_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::TradingInterval>*
TradingDay::_internal_mutable_intervals() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.intervals_;
}

// -------------------------------------------------------------------

// InstrumentRequest

// .tinkoff.public_.invest.api.contract.v1.InstrumentIdType id_type = 1 [(.google.api.field_behavior) = REQUIRED];
inline void InstrumentRequest::clear_id_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentIdType InstrumentRequest::id_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.InstrumentRequest.id_type)
  return _internal_id_type();
}
inline void InstrumentRequest::set_id_type(::tinkoff::public_::invest::api::contract::v1::InstrumentIdType value) {
  _internal_set_id_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.InstrumentRequest.id_type)
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentIdType InstrumentRequest::_internal_id_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::InstrumentIdType>(_impl_.id_type_);
}
inline void InstrumentRequest::_internal_set_id_type(::tinkoff::public_::invest::api::contract::v1::InstrumentIdType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_type_ = value;
}

// optional string class_code = 2;
inline bool InstrumentRequest::has_class_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void InstrumentRequest::clear_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InstrumentRequest::class_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.InstrumentRequest.class_code)
  return _internal_class_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InstrumentRequest::set_class_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.class_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.InstrumentRequest.class_code)
}
inline std::string* InstrumentRequest::mutable_class_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_class_code();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.InstrumentRequest.class_code)
  return _s;
}
inline const std::string& InstrumentRequest::_internal_class_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.class_code_.Get();
}
inline void InstrumentRequest::_internal_set_class_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.class_code_.Set(value, GetArena());
}
inline std::string* InstrumentRequest::_internal_mutable_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.class_code_.Mutable( GetArena());
}
inline std::string* InstrumentRequest::release_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.InstrumentRequest.class_code)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.class_code_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.class_code_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void InstrumentRequest::set_allocated_class_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.class_code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.class_code_.IsDefault()) {
          _impl_.class_code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.InstrumentRequest.class_code)
}

// string id = 3 [(.google.api.field_behavior) = REQUIRED];
inline void InstrumentRequest::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& InstrumentRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.InstrumentRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InstrumentRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.InstrumentRequest.id)
}
inline std::string* InstrumentRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.InstrumentRequest.id)
  return _s;
}
inline const std::string& InstrumentRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void InstrumentRequest::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* InstrumentRequest::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* InstrumentRequest::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.InstrumentRequest.id)
  return _impl_.id_.Release();
}
inline void InstrumentRequest::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.InstrumentRequest.id)
}

// -------------------------------------------------------------------

// InstrumentsRequest

// optional .tinkoff.public_.invest.api.contract.v1.InstrumentStatus instrument_status = 1;
inline bool InstrumentsRequest::has_instrument_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void InstrumentsRequest::clear_instrument_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentStatus InstrumentsRequest::instrument_status() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.InstrumentsRequest.instrument_status)
  return _internal_instrument_status();
}
inline void InstrumentsRequest::set_instrument_status(::tinkoff::public_::invest::api::contract::v1::InstrumentStatus value) {
  _internal_set_instrument_status(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.InstrumentsRequest.instrument_status)
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentStatus InstrumentsRequest::_internal_instrument_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::InstrumentStatus>(_impl_.instrument_status_);
}
inline void InstrumentsRequest::_internal_set_instrument_status(::tinkoff::public_::invest::api::contract::v1::InstrumentStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.instrument_status_ = value;
}

// -------------------------------------------------------------------

// FilterOptionsRequest

// optional string basic_asset_uid = 1;
inline bool FilterOptionsRequest::has_basic_asset_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FilterOptionsRequest::clear_basic_asset_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.basic_asset_uid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FilterOptionsRequest::basic_asset_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest.basic_asset_uid)
  return _internal_basic_asset_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilterOptionsRequest::set_basic_asset_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.basic_asset_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest.basic_asset_uid)
}
inline std::string* FilterOptionsRequest::mutable_basic_asset_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_basic_asset_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest.basic_asset_uid)
  return _s;
}
inline const std::string& FilterOptionsRequest::_internal_basic_asset_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.basic_asset_uid_.Get();
}
inline void FilterOptionsRequest::_internal_set_basic_asset_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.basic_asset_uid_.Set(value, GetArena());
}
inline std::string* FilterOptionsRequest::_internal_mutable_basic_asset_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.basic_asset_uid_.Mutable( GetArena());
}
inline std::string* FilterOptionsRequest::release_basic_asset_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest.basic_asset_uid)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.basic_asset_uid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.basic_asset_uid_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FilterOptionsRequest::set_allocated_basic_asset_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.basic_asset_uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.basic_asset_uid_.IsDefault()) {
          _impl_.basic_asset_uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest.basic_asset_uid)
}

// optional string basic_asset_position_uid = 2;
inline bool FilterOptionsRequest::has_basic_asset_position_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FilterOptionsRequest::clear_basic_asset_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.basic_asset_position_uid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FilterOptionsRequest::basic_asset_position_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest.basic_asset_position_uid)
  return _internal_basic_asset_position_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilterOptionsRequest::set_basic_asset_position_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.basic_asset_position_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest.basic_asset_position_uid)
}
inline std::string* FilterOptionsRequest::mutable_basic_asset_position_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_basic_asset_position_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest.basic_asset_position_uid)
  return _s;
}
inline const std::string& FilterOptionsRequest::_internal_basic_asset_position_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.basic_asset_position_uid_.Get();
}
inline void FilterOptionsRequest::_internal_set_basic_asset_position_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.basic_asset_position_uid_.Set(value, GetArena());
}
inline std::string* FilterOptionsRequest::_internal_mutable_basic_asset_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.basic_asset_position_uid_.Mutable( GetArena());
}
inline std::string* FilterOptionsRequest::release_basic_asset_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest.basic_asset_position_uid)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.basic_asset_position_uid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.basic_asset_position_uid_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FilterOptionsRequest::set_allocated_basic_asset_position_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.basic_asset_position_uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.basic_asset_position_uid_.IsDefault()) {
          _impl_.basic_asset_position_uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.FilterOptionsRequest.basic_asset_position_uid)
}

// -------------------------------------------------------------------

// BondResponse

// .tinkoff.public_.invest.api.contract.v1.Bond instrument = 1;
inline bool BondResponse::has_instrument() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.instrument_ != nullptr);
  return value;
}
inline void BondResponse::clear_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.instrument_ != nullptr) _impl_.instrument_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Bond& BondResponse::_internal_instrument() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Bond* p = _impl_.instrument_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Bond&>(::tinkoff::public_::invest::api::contract::v1::_Bond_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Bond& BondResponse::instrument() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BondResponse.instrument)
  return _internal_instrument();
}
inline void BondResponse::unsafe_arena_set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Bond* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.instrument_);
  }
  _impl_.instrument_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Bond*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.BondResponse.instrument)
}
inline ::tinkoff::public_::invest::api::contract::v1::Bond* BondResponse::release_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Bond* released = _impl_.instrument_;
  _impl_.instrument_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Bond* BondResponse::unsafe_arena_release_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.BondResponse.instrument)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Bond* temp = _impl_.instrument_;
  _impl_.instrument_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Bond* BondResponse::_internal_mutable_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.instrument_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Bond>(GetArena());
    _impl_.instrument_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Bond*>(p);
  }
  return _impl_.instrument_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Bond* BondResponse::mutable_instrument() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Bond* _msg = _internal_mutable_instrument();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BondResponse.instrument)
  return _msg;
}
inline void BondResponse::set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Bond* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Bond*>(_impl_.instrument_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Bond*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.instrument_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Bond*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.BondResponse.instrument)
}

// -------------------------------------------------------------------

// BondsResponse

// repeated .tinkoff.public_.invest.api.contract.v1.Bond instruments = 1;
inline int BondsResponse::_internal_instruments_size() const {
  return _internal_instruments().size();
}
inline int BondsResponse::instruments_size() const {
  return _internal_instruments_size();
}
inline void BondsResponse::clear_instruments() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instruments_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::Bond* BondsResponse::mutable_instruments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.BondsResponse.instruments)
  return _internal_mutable_instruments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Bond>* BondsResponse::mutable_instruments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.BondsResponse.instruments)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_instruments();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Bond& BondsResponse::instruments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.BondsResponse.instruments)
  return _internal_instruments().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::Bond* BondsResponse::add_instruments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::Bond* _add = _internal_mutable_instruments()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.BondsResponse.instruments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Bond>& BondsResponse::instruments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.BondsResponse.instruments)
  return _internal_instruments();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Bond>&
BondsResponse::_internal_instruments() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instruments_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Bond>*
BondsResponse::_internal_mutable_instruments() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.instruments_;
}

// -------------------------------------------------------------------

// GetBondCouponsRequest

// string figi = 1 [deprecated = true];
inline void GetBondCouponsRequest::clear_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& GetBondCouponsRequest::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetBondCouponsRequest::set_figi(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.figi)
}
inline std::string* GetBondCouponsRequest::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.figi)
  return _s;
}
inline const std::string& GetBondCouponsRequest::_internal_figi() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.figi_.Get();
}
inline void GetBondCouponsRequest::_internal_set_figi(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* GetBondCouponsRequest::_internal_mutable_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* GetBondCouponsRequest::release_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.figi)
  return _impl_.figi_.Release();
}
inline void GetBondCouponsRequest::set_allocated_figi(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.figi_.IsDefault()) {
          _impl_.figi_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.figi)
}

// optional .google.protobuf.Timestamp from = 2;
inline bool GetBondCouponsRequest::has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.from_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetBondCouponsRequest::_internal_from() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetBondCouponsRequest::from() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.from)
  return _internal_from();
}
inline void GetBondCouponsRequest::unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.from)
}
inline ::google::protobuf::Timestamp* GetBondCouponsRequest::release_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.from_;
  _impl_.from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetBondCouponsRequest::unsafe_arena_release_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.from)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetBondCouponsRequest::_internal_mutable_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.from_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.from_;
}
inline ::google::protobuf::Timestamp* GetBondCouponsRequest::mutable_from() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.from)
  return _msg;
}
inline void GetBondCouponsRequest::set_allocated_from(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.from)
}

// optional .google.protobuf.Timestamp to = 3;
inline bool GetBondCouponsRequest::has_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.to_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetBondCouponsRequest::_internal_to() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetBondCouponsRequest::to() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.to)
  return _internal_to();
}
inline void GetBondCouponsRequest::unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.to)
}
inline ::google::protobuf::Timestamp* GetBondCouponsRequest::release_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetBondCouponsRequest::unsafe_arena_release_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.to)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetBondCouponsRequest::_internal_mutable_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.to_;
}
inline ::google::protobuf::Timestamp* GetBondCouponsRequest::mutable_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.to)
  return _msg;
}
inline void GetBondCouponsRequest::set_allocated_to(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.to)
}

// string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
inline void GetBondCouponsRequest::clear_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_id_.ClearToEmpty();
}
inline const std::string& GetBondCouponsRequest::instrument_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.instrument_id)
  return _internal_instrument_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetBondCouponsRequest::set_instrument_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.instrument_id)
}
inline std::string* GetBondCouponsRequest::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.instrument_id)
  return _s;
}
inline const std::string& GetBondCouponsRequest::_internal_instrument_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instrument_id_.Get();
}
inline void GetBondCouponsRequest::_internal_set_instrument_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_id_.Set(value, GetArena());
}
inline std::string* GetBondCouponsRequest::_internal_mutable_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.instrument_id_.Mutable( GetArena());
}
inline std::string* GetBondCouponsRequest::release_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.instrument_id)
  return _impl_.instrument_id_.Release();
}
inline void GetBondCouponsRequest::set_allocated_instrument_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.instrument_id_.IsDefault()) {
          _impl_.instrument_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondCouponsRequest.instrument_id)
}

// -------------------------------------------------------------------

// GetBondCouponsResponse

// repeated .tinkoff.public_.invest.api.contract.v1.Coupon events = 1;
inline int GetBondCouponsResponse::_internal_events_size() const {
  return _internal_events().size();
}
inline int GetBondCouponsResponse::events_size() const {
  return _internal_events_size();
}
inline void GetBondCouponsResponse::clear_events() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.events_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::Coupon* GetBondCouponsResponse::mutable_events(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse.events)
  return _internal_mutable_events()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Coupon>* GetBondCouponsResponse::mutable_events()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse.events)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_events();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Coupon& GetBondCouponsResponse::events(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse.events)
  return _internal_events().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::Coupon* GetBondCouponsResponse::add_events() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::Coupon* _add = _internal_mutable_events()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse.events)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Coupon>& GetBondCouponsResponse::events() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.GetBondCouponsResponse.events)
  return _internal_events();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Coupon>&
GetBondCouponsResponse::_internal_events() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.events_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Coupon>*
GetBondCouponsResponse::_internal_mutable_events() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.events_;
}

// -------------------------------------------------------------------

// GetBondEventsRequest

// optional .google.protobuf.Timestamp from = 2;
inline bool GetBondEventsRequest::has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.from_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetBondEventsRequest::_internal_from() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetBondEventsRequest::from() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.from)
  return _internal_from();
}
inline void GetBondEventsRequest::unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.from)
}
inline ::google::protobuf::Timestamp* GetBondEventsRequest::release_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.from_;
  _impl_.from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetBondEventsRequest::unsafe_arena_release_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.from)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetBondEventsRequest::_internal_mutable_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.from_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.from_;
}
inline ::google::protobuf::Timestamp* GetBondEventsRequest::mutable_from() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.from)
  return _msg;
}
inline void GetBondEventsRequest::set_allocated_from(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.from)
}

// optional .google.protobuf.Timestamp to = 3;
inline bool GetBondEventsRequest::has_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.to_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetBondEventsRequest::_internal_to() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetBondEventsRequest::to() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.to)
  return _internal_to();
}
inline void GetBondEventsRequest::unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.to)
}
inline ::google::protobuf::Timestamp* GetBondEventsRequest::release_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetBondEventsRequest::unsafe_arena_release_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.to)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetBondEventsRequest::_internal_mutable_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.to_;
}
inline ::google::protobuf::Timestamp* GetBondEventsRequest::mutable_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.to)
  return _msg;
}
inline void GetBondEventsRequest::set_allocated_to(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.to)
}

// string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
inline void GetBondEventsRequest::clear_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_id_.ClearToEmpty();
}
inline const std::string& GetBondEventsRequest::instrument_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.instrument_id)
  return _internal_instrument_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetBondEventsRequest::set_instrument_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.instrument_id)
}
inline std::string* GetBondEventsRequest::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.instrument_id)
  return _s;
}
inline const std::string& GetBondEventsRequest::_internal_instrument_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instrument_id_.Get();
}
inline void GetBondEventsRequest::_internal_set_instrument_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_id_.Set(value, GetArena());
}
inline std::string* GetBondEventsRequest::_internal_mutable_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.instrument_id_.Mutable( GetArena());
}
inline std::string* GetBondEventsRequest::release_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.instrument_id)
  return _impl_.instrument_id_.Release();
}
inline void GetBondEventsRequest::set_allocated_instrument_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.instrument_id_.IsDefault()) {
          _impl_.instrument_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.instrument_id)
}

// .tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.EventType type = 5;
inline void GetBondEventsRequest::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType GetBondEventsRequest::type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.type)
  return _internal_type();
}
inline void GetBondEventsRequest::set_type(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.type)
}
inline ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType GetBondEventsRequest::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType>(_impl_.type_);
}
inline void GetBondEventsRequest::_internal_set_type(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// GetBondEventsResponse_BondEvent

// string instrument_id = 2;
inline void GetBondEventsResponse_BondEvent::clear_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_id_.ClearToEmpty();
}
inline const std::string& GetBondEventsResponse_BondEvent::instrument_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.instrument_id)
  return _internal_instrument_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetBondEventsResponse_BondEvent::set_instrument_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.instrument_id)
}
inline std::string* GetBondEventsResponse_BondEvent::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.instrument_id)
  return _s;
}
inline const std::string& GetBondEventsResponse_BondEvent::_internal_instrument_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instrument_id_.Get();
}
inline void GetBondEventsResponse_BondEvent::_internal_set_instrument_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_id_.Set(value, GetArena());
}
inline std::string* GetBondEventsResponse_BondEvent::_internal_mutable_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.instrument_id_.Mutable( GetArena());
}
inline std::string* GetBondEventsResponse_BondEvent::release_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.instrument_id)
  return _impl_.instrument_id_.Release();
}
inline void GetBondEventsResponse_BondEvent::set_allocated_instrument_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.instrument_id_.IsDefault()) {
          _impl_.instrument_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.instrument_id)
}

// int32 event_number = 3;
inline void GetBondEventsResponse_BondEvent::clear_event_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.event_number_ = 0;
}
inline ::int32_t GetBondEventsResponse_BondEvent::event_number() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.event_number)
  return _internal_event_number();
}
inline void GetBondEventsResponse_BondEvent::set_event_number(::int32_t value) {
  _internal_set_event_number(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.event_number)
}
inline ::int32_t GetBondEventsResponse_BondEvent::_internal_event_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.event_number_;
}
inline void GetBondEventsResponse_BondEvent::_internal_set_event_number(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.event_number_ = value;
}

// .google.protobuf.Timestamp event_date = 4;
inline bool GetBondEventsResponse_BondEvent::has_event_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.event_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetBondEventsResponse_BondEvent::_internal_event_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.event_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetBondEventsResponse_BondEvent::event_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.event_date)
  return _internal_event_date();
}
inline void GetBondEventsResponse_BondEvent::unsafe_arena_set_allocated_event_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.event_date_);
  }
  _impl_.event_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.event_date)
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::release_event_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.event_date_;
  _impl_.event_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::unsafe_arena_release_event_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.event_date)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.event_date_;
  _impl_.event_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::_internal_mutable_event_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.event_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.event_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.event_date_;
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::mutable_event_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_event_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.event_date)
  return _msg;
}
inline void GetBondEventsResponse_BondEvent::set_allocated_event_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.event_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.event_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.event_date)
}

// .tinkoff.public_.invest.api.contract.v1.GetBondEventsRequest.EventType event_type = 5;
inline void GetBondEventsResponse_BondEvent::clear_event_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.event_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType GetBondEventsResponse_BondEvent::event_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.event_type)
  return _internal_event_type();
}
inline void GetBondEventsResponse_BondEvent::set_event_type(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.event_type)
}
inline ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType GetBondEventsResponse_BondEvent::_internal_event_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType>(_impl_.event_type_);
}
inline void GetBondEventsResponse_BondEvent::_internal_set_event_type(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.event_type_ = value;
}

// .tinkoff.public_.invest.api.contract.v1.Quotation event_total_vol = 6;
inline bool GetBondEventsResponse_BondEvent::has_event_total_vol() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.event_total_vol_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetBondEventsResponse_BondEvent::_internal_event_total_vol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.event_total_vol_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetBondEventsResponse_BondEvent::event_total_vol() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.event_total_vol)
  return _internal_event_total_vol();
}
inline void GetBondEventsResponse_BondEvent::unsafe_arena_set_allocated_event_total_vol(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.event_total_vol_);
  }
  _impl_.event_total_vol_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.event_total_vol)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetBondEventsResponse_BondEvent::release_event_total_vol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.event_total_vol_;
  _impl_.event_total_vol_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetBondEventsResponse_BondEvent::unsafe_arena_release_event_total_vol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.event_total_vol)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.event_total_vol_;
  _impl_.event_total_vol_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetBondEventsResponse_BondEvent::_internal_mutable_event_total_vol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.event_total_vol_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.event_total_vol_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.event_total_vol_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetBondEventsResponse_BondEvent::mutable_event_total_vol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_event_total_vol();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.event_total_vol)
  return _msg;
}
inline void GetBondEventsResponse_BondEvent::set_allocated_event_total_vol(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.event_total_vol_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.event_total_vol_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.event_total_vol)
}

// .google.protobuf.Timestamp fix_date = 7;
inline bool GetBondEventsResponse_BondEvent::has_fix_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fix_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetBondEventsResponse_BondEvent::_internal_fix_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.fix_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetBondEventsResponse_BondEvent::fix_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.fix_date)
  return _internal_fix_date();
}
inline void GetBondEventsResponse_BondEvent::unsafe_arena_set_allocated_fix_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fix_date_);
  }
  _impl_.fix_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.fix_date)
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::release_fix_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* released = _impl_.fix_date_;
  _impl_.fix_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::unsafe_arena_release_fix_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.fix_date)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* temp = _impl_.fix_date_;
  _impl_.fix_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::_internal_mutable_fix_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.fix_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.fix_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.fix_date_;
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::mutable_fix_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_fix_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.fix_date)
  return _msg;
}
inline void GetBondEventsResponse_BondEvent::set_allocated_fix_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fix_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.fix_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.fix_date)
}

// .google.protobuf.Timestamp rate_date = 8;
inline bool GetBondEventsResponse_BondEvent::has_rate_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rate_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetBondEventsResponse_BondEvent::_internal_rate_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.rate_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetBondEventsResponse_BondEvent::rate_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.rate_date)
  return _internal_rate_date();
}
inline void GetBondEventsResponse_BondEvent::unsafe_arena_set_allocated_rate_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rate_date_);
  }
  _impl_.rate_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.rate_date)
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::release_rate_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Timestamp* released = _impl_.rate_date_;
  _impl_.rate_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::unsafe_arena_release_rate_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.rate_date)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Timestamp* temp = _impl_.rate_date_;
  _impl_.rate_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::_internal_mutable_rate_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.rate_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.rate_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.rate_date_;
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::mutable_rate_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_rate_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.rate_date)
  return _msg;
}
inline void GetBondEventsResponse_BondEvent::set_allocated_rate_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rate_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.rate_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.rate_date)
}

// .google.protobuf.Timestamp default_date = 9;
inline bool GetBondEventsResponse_BondEvent::has_default_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.default_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetBondEventsResponse_BondEvent::_internal_default_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.default_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetBondEventsResponse_BondEvent::default_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.default_date)
  return _internal_default_date();
}
inline void GetBondEventsResponse_BondEvent::unsafe_arena_set_allocated_default_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.default_date_);
  }
  _impl_.default_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.default_date)
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::release_default_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* released = _impl_.default_date_;
  _impl_.default_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::unsafe_arena_release_default_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.default_date)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* temp = _impl_.default_date_;
  _impl_.default_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::_internal_mutable_default_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.default_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.default_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.default_date_;
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::mutable_default_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_default_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.default_date)
  return _msg;
}
inline void GetBondEventsResponse_BondEvent::set_allocated_default_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.default_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.default_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.default_date)
}

// .google.protobuf.Timestamp real_pay_date = 10;
inline bool GetBondEventsResponse_BondEvent::has_real_pay_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.real_pay_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetBondEventsResponse_BondEvent::_internal_real_pay_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.real_pay_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetBondEventsResponse_BondEvent::real_pay_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.real_pay_date)
  return _internal_real_pay_date();
}
inline void GetBondEventsResponse_BondEvent::unsafe_arena_set_allocated_real_pay_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.real_pay_date_);
  }
  _impl_.real_pay_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.real_pay_date)
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::release_real_pay_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Timestamp* released = _impl_.real_pay_date_;
  _impl_.real_pay_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::unsafe_arena_release_real_pay_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.real_pay_date)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Timestamp* temp = _impl_.real_pay_date_;
  _impl_.real_pay_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::_internal_mutable_real_pay_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.real_pay_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.real_pay_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.real_pay_date_;
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::mutable_real_pay_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_real_pay_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.real_pay_date)
  return _msg;
}
inline void GetBondEventsResponse_BondEvent::set_allocated_real_pay_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.real_pay_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.real_pay_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.real_pay_date)
}

// .google.protobuf.Timestamp pay_date = 11;
inline bool GetBondEventsResponse_BondEvent::has_pay_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pay_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetBondEventsResponse_BondEvent::_internal_pay_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.pay_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetBondEventsResponse_BondEvent::pay_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.pay_date)
  return _internal_pay_date();
}
inline void GetBondEventsResponse_BondEvent::unsafe_arena_set_allocated_pay_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pay_date_);
  }
  _impl_.pay_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.pay_date)
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::release_pay_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::google::protobuf::Timestamp* released = _impl_.pay_date_;
  _impl_.pay_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::unsafe_arena_release_pay_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.pay_date)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::google::protobuf::Timestamp* temp = _impl_.pay_date_;
  _impl_.pay_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::_internal_mutable_pay_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.pay_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.pay_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.pay_date_;
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::mutable_pay_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_pay_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.pay_date)
  return _msg;
}
inline void GetBondEventsResponse_BondEvent::set_allocated_pay_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pay_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.pay_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.pay_date)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue pay_one_bond = 12;
inline bool GetBondEventsResponse_BondEvent::has_pay_one_bond() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pay_one_bond_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetBondEventsResponse_BondEvent::_internal_pay_one_bond() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.pay_one_bond_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetBondEventsResponse_BondEvent::pay_one_bond() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.pay_one_bond)
  return _internal_pay_one_bond();
}
inline void GetBondEventsResponse_BondEvent::unsafe_arena_set_allocated_pay_one_bond(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pay_one_bond_);
  }
  _impl_.pay_one_bond_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.pay_one_bond)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetBondEventsResponse_BondEvent::release_pay_one_bond() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.pay_one_bond_;
  _impl_.pay_one_bond_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetBondEventsResponse_BondEvent::unsafe_arena_release_pay_one_bond() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.pay_one_bond)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.pay_one_bond_;
  _impl_.pay_one_bond_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetBondEventsResponse_BondEvent::_internal_mutable_pay_one_bond() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.pay_one_bond_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
    _impl_.pay_one_bond_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
  }
  return _impl_.pay_one_bond_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetBondEventsResponse_BondEvent::mutable_pay_one_bond() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_pay_one_bond();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.pay_one_bond)
  return _msg;
}
inline void GetBondEventsResponse_BondEvent::set_allocated_pay_one_bond(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pay_one_bond_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.pay_one_bond_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.pay_one_bond)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue money_flow_val = 13;
inline bool GetBondEventsResponse_BondEvent::has_money_flow_val() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.money_flow_val_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetBondEventsResponse_BondEvent::_internal_money_flow_val() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.money_flow_val_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetBondEventsResponse_BondEvent::money_flow_val() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.money_flow_val)
  return _internal_money_flow_val();
}
inline void GetBondEventsResponse_BondEvent::unsafe_arena_set_allocated_money_flow_val(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.money_flow_val_);
  }
  _impl_.money_flow_val_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.money_flow_val)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetBondEventsResponse_BondEvent::release_money_flow_val() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.money_flow_val_;
  _impl_.money_flow_val_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetBondEventsResponse_BondEvent::unsafe_arena_release_money_flow_val() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.money_flow_val)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.money_flow_val_;
  _impl_.money_flow_val_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetBondEventsResponse_BondEvent::_internal_mutable_money_flow_val() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.money_flow_val_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
    _impl_.money_flow_val_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
  }
  return _impl_.money_flow_val_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetBondEventsResponse_BondEvent::mutable_money_flow_val() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_money_flow_val();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.money_flow_val)
  return _msg;
}
inline void GetBondEventsResponse_BondEvent::set_allocated_money_flow_val(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.money_flow_val_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.money_flow_val_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.money_flow_val)
}

// string execution = 14;
inline void GetBondEventsResponse_BondEvent::clear_execution() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.execution_.ClearToEmpty();
}
inline const std::string& GetBondEventsResponse_BondEvent::execution() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.execution)
  return _internal_execution();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetBondEventsResponse_BondEvent::set_execution(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.execution_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.execution)
}
inline std::string* GetBondEventsResponse_BondEvent::mutable_execution() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_execution();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.execution)
  return _s;
}
inline const std::string& GetBondEventsResponse_BondEvent::_internal_execution() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.execution_.Get();
}
inline void GetBondEventsResponse_BondEvent::_internal_set_execution(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.execution_.Set(value, GetArena());
}
inline std::string* GetBondEventsResponse_BondEvent::_internal_mutable_execution() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.execution_.Mutable( GetArena());
}
inline std::string* GetBondEventsResponse_BondEvent::release_execution() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.execution)
  return _impl_.execution_.Release();
}
inline void GetBondEventsResponse_BondEvent::set_allocated_execution(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.execution_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.execution_.IsDefault()) {
          _impl_.execution_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.execution)
}

// string operation_type = 15;
inline void GetBondEventsResponse_BondEvent::clear_operation_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.operation_type_.ClearToEmpty();
}
inline const std::string& GetBondEventsResponse_BondEvent::operation_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.operation_type)
  return _internal_operation_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetBondEventsResponse_BondEvent::set_operation_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.operation_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.operation_type)
}
inline std::string* GetBondEventsResponse_BondEvent::mutable_operation_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_operation_type();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.operation_type)
  return _s;
}
inline const std::string& GetBondEventsResponse_BondEvent::_internal_operation_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.operation_type_.Get();
}
inline void GetBondEventsResponse_BondEvent::_internal_set_operation_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.operation_type_.Set(value, GetArena());
}
inline std::string* GetBondEventsResponse_BondEvent::_internal_mutable_operation_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.operation_type_.Mutable( GetArena());
}
inline std::string* GetBondEventsResponse_BondEvent::release_operation_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.operation_type)
  return _impl_.operation_type_.Release();
}
inline void GetBondEventsResponse_BondEvent::set_allocated_operation_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.operation_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.operation_type_.IsDefault()) {
          _impl_.operation_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.operation_type)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation value = 16;
inline bool GetBondEventsResponse_BondEvent::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetBondEventsResponse_BondEvent::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetBondEventsResponse_BondEvent::value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.value)
  return _internal_value();
}
inline void GetBondEventsResponse_BondEvent::unsafe_arena_set_allocated_value(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.value)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetBondEventsResponse_BondEvent::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetBondEventsResponse_BondEvent::unsafe_arena_release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.value)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetBondEventsResponse_BondEvent::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.value_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.value_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetBondEventsResponse_BondEvent::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.value)
  return _msg;
}
inline void GetBondEventsResponse_BondEvent::set_allocated_value(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.value_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.value)
}

// string note = 17;
inline void GetBondEventsResponse_BondEvent::clear_note() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.note_.ClearToEmpty();
}
inline const std::string& GetBondEventsResponse_BondEvent::note() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.note)
  return _internal_note();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetBondEventsResponse_BondEvent::set_note(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.note_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.note)
}
inline std::string* GetBondEventsResponse_BondEvent::mutable_note() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_note();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.note)
  return _s;
}
inline const std::string& GetBondEventsResponse_BondEvent::_internal_note() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.note_.Get();
}
inline void GetBondEventsResponse_BondEvent::_internal_set_note(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.note_.Set(value, GetArena());
}
inline std::string* GetBondEventsResponse_BondEvent::_internal_mutable_note() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.note_.Mutable( GetArena());
}
inline std::string* GetBondEventsResponse_BondEvent::release_note() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.note)
  return _impl_.note_.Release();
}
inline void GetBondEventsResponse_BondEvent::set_allocated_note(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.note_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.note_.IsDefault()) {
          _impl_.note_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.note)
}

// string convert_to_fin_tool_id = 18;
inline void GetBondEventsResponse_BondEvent::clear_convert_to_fin_tool_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.convert_to_fin_tool_id_.ClearToEmpty();
}
inline const std::string& GetBondEventsResponse_BondEvent::convert_to_fin_tool_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.convert_to_fin_tool_id)
  return _internal_convert_to_fin_tool_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetBondEventsResponse_BondEvent::set_convert_to_fin_tool_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.convert_to_fin_tool_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.convert_to_fin_tool_id)
}
inline std::string* GetBondEventsResponse_BondEvent::mutable_convert_to_fin_tool_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_convert_to_fin_tool_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.convert_to_fin_tool_id)
  return _s;
}
inline const std::string& GetBondEventsResponse_BondEvent::_internal_convert_to_fin_tool_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.convert_to_fin_tool_id_.Get();
}
inline void GetBondEventsResponse_BondEvent::_internal_set_convert_to_fin_tool_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.convert_to_fin_tool_id_.Set(value, GetArena());
}
inline std::string* GetBondEventsResponse_BondEvent::_internal_mutable_convert_to_fin_tool_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.convert_to_fin_tool_id_.Mutable( GetArena());
}
inline std::string* GetBondEventsResponse_BondEvent::release_convert_to_fin_tool_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.convert_to_fin_tool_id)
  return _impl_.convert_to_fin_tool_id_.Release();
}
inline void GetBondEventsResponse_BondEvent::set_allocated_convert_to_fin_tool_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.convert_to_fin_tool_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.convert_to_fin_tool_id_.IsDefault()) {
          _impl_.convert_to_fin_tool_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.convert_to_fin_tool_id)
}

// .google.protobuf.Timestamp coupon_start_date = 19;
inline bool GetBondEventsResponse_BondEvent::has_coupon_start_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.coupon_start_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetBondEventsResponse_BondEvent::_internal_coupon_start_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.coupon_start_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetBondEventsResponse_BondEvent::coupon_start_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.coupon_start_date)
  return _internal_coupon_start_date();
}
inline void GetBondEventsResponse_BondEvent::unsafe_arena_set_allocated_coupon_start_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.coupon_start_date_);
  }
  _impl_.coupon_start_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.coupon_start_date)
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::release_coupon_start_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::google::protobuf::Timestamp* released = _impl_.coupon_start_date_;
  _impl_.coupon_start_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::unsafe_arena_release_coupon_start_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.coupon_start_date)

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::google::protobuf::Timestamp* temp = _impl_.coupon_start_date_;
  _impl_.coupon_start_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::_internal_mutable_coupon_start_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.coupon_start_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.coupon_start_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.coupon_start_date_;
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::mutable_coupon_start_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_coupon_start_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.coupon_start_date)
  return _msg;
}
inline void GetBondEventsResponse_BondEvent::set_allocated_coupon_start_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.coupon_start_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }

  _impl_.coupon_start_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.coupon_start_date)
}

// .google.protobuf.Timestamp coupon_end_date = 20;
inline bool GetBondEventsResponse_BondEvent::has_coupon_end_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.coupon_end_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetBondEventsResponse_BondEvent::_internal_coupon_end_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.coupon_end_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetBondEventsResponse_BondEvent::coupon_end_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.coupon_end_date)
  return _internal_coupon_end_date();
}
inline void GetBondEventsResponse_BondEvent::unsafe_arena_set_allocated_coupon_end_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.coupon_end_date_);
  }
  _impl_.coupon_end_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.coupon_end_date)
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::release_coupon_end_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::google::protobuf::Timestamp* released = _impl_.coupon_end_date_;
  _impl_.coupon_end_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::unsafe_arena_release_coupon_end_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.coupon_end_date)

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::google::protobuf::Timestamp* temp = _impl_.coupon_end_date_;
  _impl_.coupon_end_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::_internal_mutable_coupon_end_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.coupon_end_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.coupon_end_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.coupon_end_date_;
}
inline ::google::protobuf::Timestamp* GetBondEventsResponse_BondEvent::mutable_coupon_end_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_coupon_end_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.coupon_end_date)
  return _msg;
}
inline void GetBondEventsResponse_BondEvent::set_allocated_coupon_end_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.coupon_end_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }

  _impl_.coupon_end_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.coupon_end_date)
}

// int32 coupon_period = 21;
inline void GetBondEventsResponse_BondEvent::clear_coupon_period() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.coupon_period_ = 0;
}
inline ::int32_t GetBondEventsResponse_BondEvent::coupon_period() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.coupon_period)
  return _internal_coupon_period();
}
inline void GetBondEventsResponse_BondEvent::set_coupon_period(::int32_t value) {
  _internal_set_coupon_period(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.coupon_period)
}
inline ::int32_t GetBondEventsResponse_BondEvent::_internal_coupon_period() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.coupon_period_;
}
inline void GetBondEventsResponse_BondEvent::_internal_set_coupon_period(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.coupon_period_ = value;
}

// .tinkoff.public_.invest.api.contract.v1.Quotation coupon_interest_rate = 22;
inline bool GetBondEventsResponse_BondEvent::has_coupon_interest_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.coupon_interest_rate_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetBondEventsResponse_BondEvent::_internal_coupon_interest_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.coupon_interest_rate_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetBondEventsResponse_BondEvent::coupon_interest_rate() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.coupon_interest_rate)
  return _internal_coupon_interest_rate();
}
inline void GetBondEventsResponse_BondEvent::unsafe_arena_set_allocated_coupon_interest_rate(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.coupon_interest_rate_);
  }
  _impl_.coupon_interest_rate_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.coupon_interest_rate)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetBondEventsResponse_BondEvent::release_coupon_interest_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.coupon_interest_rate_;
  _impl_.coupon_interest_rate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetBondEventsResponse_BondEvent::unsafe_arena_release_coupon_interest_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.coupon_interest_rate)

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.coupon_interest_rate_;
  _impl_.coupon_interest_rate_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetBondEventsResponse_BondEvent::_internal_mutable_coupon_interest_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.coupon_interest_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.coupon_interest_rate_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.coupon_interest_rate_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetBondEventsResponse_BondEvent::mutable_coupon_interest_rate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_coupon_interest_rate();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.coupon_interest_rate)
  return _msg;
}
inline void GetBondEventsResponse_BondEvent::set_allocated_coupon_interest_rate(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.coupon_interest_rate_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }

  _impl_.coupon_interest_rate_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent.coupon_interest_rate)
}

// -------------------------------------------------------------------

// GetBondEventsResponse

// repeated .tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.BondEvent events = 1;
inline int GetBondEventsResponse::_internal_events_size() const {
  return _internal_events().size();
}
inline int GetBondEventsResponse::events_size() const {
  return _internal_events_size();
}
inline void GetBondEventsResponse::clear_events() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.events_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent* GetBondEventsResponse::mutable_events(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.events)
  return _internal_mutable_events()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent>* GetBondEventsResponse::mutable_events()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.events)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_events();
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent& GetBondEventsResponse::events(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.events)
  return _internal_events().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent* GetBondEventsResponse::add_events() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent* _add = _internal_mutable_events()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.events)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent>& GetBondEventsResponse::events() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.GetBondEventsResponse.events)
  return _internal_events();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent>&
GetBondEventsResponse::_internal_events() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.events_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent>*
GetBondEventsResponse::_internal_mutable_events() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.events_;
}

// -------------------------------------------------------------------

// Coupon

// string figi = 1;
inline void Coupon::clear_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& Coupon::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Coupon.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Coupon::set_figi(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Coupon.figi)
}
inline std::string* Coupon::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Coupon.figi)
  return _s;
}
inline const std::string& Coupon::_internal_figi() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.figi_.Get();
}
inline void Coupon::_internal_set_figi(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* Coupon::_internal_mutable_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* Coupon::release_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Coupon.figi)
  return _impl_.figi_.Release();
}
inline void Coupon::set_allocated_figi(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.figi_.IsDefault()) {
          _impl_.figi_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Coupon.figi)
}

// .google.protobuf.Timestamp coupon_date = 2;
inline bool Coupon::has_coupon_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.coupon_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Coupon::_internal_coupon_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.coupon_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Coupon::coupon_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Coupon.coupon_date)
  return _internal_coupon_date();
}
inline void Coupon::unsafe_arena_set_allocated_coupon_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.coupon_date_);
  }
  _impl_.coupon_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Coupon.coupon_date)
}
inline ::google::protobuf::Timestamp* Coupon::release_coupon_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.coupon_date_;
  _impl_.coupon_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Coupon::unsafe_arena_release_coupon_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Coupon.coupon_date)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.coupon_date_;
  _impl_.coupon_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Coupon::_internal_mutable_coupon_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.coupon_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.coupon_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.coupon_date_;
}
inline ::google::protobuf::Timestamp* Coupon::mutable_coupon_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_coupon_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Coupon.coupon_date)
  return _msg;
}
inline void Coupon::set_allocated_coupon_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.coupon_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.coupon_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Coupon.coupon_date)
}

// int64 coupon_number = 3;
inline void Coupon::clear_coupon_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.coupon_number_ = ::int64_t{0};
}
inline ::int64_t Coupon::coupon_number() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Coupon.coupon_number)
  return _internal_coupon_number();
}
inline void Coupon::set_coupon_number(::int64_t value) {
  _internal_set_coupon_number(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Coupon.coupon_number)
}
inline ::int64_t Coupon::_internal_coupon_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.coupon_number_;
}
inline void Coupon::_internal_set_coupon_number(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.coupon_number_ = value;
}

// .google.protobuf.Timestamp fix_date = 4;
inline bool Coupon::has_fix_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fix_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Coupon::_internal_fix_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.fix_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Coupon::fix_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Coupon.fix_date)
  return _internal_fix_date();
}
inline void Coupon::unsafe_arena_set_allocated_fix_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fix_date_);
  }
  _impl_.fix_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Coupon.fix_date)
}
inline ::google::protobuf::Timestamp* Coupon::release_fix_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.fix_date_;
  _impl_.fix_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Coupon::unsafe_arena_release_fix_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Coupon.fix_date)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.fix_date_;
  _impl_.fix_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Coupon::_internal_mutable_fix_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.fix_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.fix_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.fix_date_;
}
inline ::google::protobuf::Timestamp* Coupon::mutable_fix_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_fix_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Coupon.fix_date)
  return _msg;
}
inline void Coupon::set_allocated_fix_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fix_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.fix_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Coupon.fix_date)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue pay_one_bond = 5;
inline bool Coupon::has_pay_one_bond() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pay_one_bond_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Coupon::_internal_pay_one_bond() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.pay_one_bond_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Coupon::pay_one_bond() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Coupon.pay_one_bond)
  return _internal_pay_one_bond();
}
inline void Coupon::unsafe_arena_set_allocated_pay_one_bond(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pay_one_bond_);
  }
  _impl_.pay_one_bond_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Coupon.pay_one_bond)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Coupon::release_pay_one_bond() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.pay_one_bond_;
  _impl_.pay_one_bond_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Coupon::unsafe_arena_release_pay_one_bond() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Coupon.pay_one_bond)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.pay_one_bond_;
  _impl_.pay_one_bond_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Coupon::_internal_mutable_pay_one_bond() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.pay_one_bond_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
    _impl_.pay_one_bond_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
  }
  return _impl_.pay_one_bond_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Coupon::mutable_pay_one_bond() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_pay_one_bond();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Coupon.pay_one_bond)
  return _msg;
}
inline void Coupon::set_allocated_pay_one_bond(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pay_one_bond_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.pay_one_bond_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Coupon.pay_one_bond)
}

// .tinkoff.public_.invest.api.contract.v1.CouponType coupon_type = 6;
inline void Coupon::clear_coupon_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.coupon_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::CouponType Coupon::coupon_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Coupon.coupon_type)
  return _internal_coupon_type();
}
inline void Coupon::set_coupon_type(::tinkoff::public_::invest::api::contract::v1::CouponType value) {
  _internal_set_coupon_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Coupon.coupon_type)
}
inline ::tinkoff::public_::invest::api::contract::v1::CouponType Coupon::_internal_coupon_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::CouponType>(_impl_.coupon_type_);
}
inline void Coupon::_internal_set_coupon_type(::tinkoff::public_::invest::api::contract::v1::CouponType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.coupon_type_ = value;
}

// .google.protobuf.Timestamp coupon_start_date = 7;
inline bool Coupon::has_coupon_start_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.coupon_start_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Coupon::_internal_coupon_start_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.coupon_start_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Coupon::coupon_start_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Coupon.coupon_start_date)
  return _internal_coupon_start_date();
}
inline void Coupon::unsafe_arena_set_allocated_coupon_start_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.coupon_start_date_);
  }
  _impl_.coupon_start_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Coupon.coupon_start_date)
}
inline ::google::protobuf::Timestamp* Coupon::release_coupon_start_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Timestamp* released = _impl_.coupon_start_date_;
  _impl_.coupon_start_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Coupon::unsafe_arena_release_coupon_start_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Coupon.coupon_start_date)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Timestamp* temp = _impl_.coupon_start_date_;
  _impl_.coupon_start_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Coupon::_internal_mutable_coupon_start_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.coupon_start_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.coupon_start_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.coupon_start_date_;
}
inline ::google::protobuf::Timestamp* Coupon::mutable_coupon_start_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_coupon_start_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Coupon.coupon_start_date)
  return _msg;
}
inline void Coupon::set_allocated_coupon_start_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.coupon_start_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.coupon_start_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Coupon.coupon_start_date)
}

// .google.protobuf.Timestamp coupon_end_date = 8;
inline bool Coupon::has_coupon_end_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.coupon_end_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Coupon::_internal_coupon_end_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.coupon_end_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Coupon::coupon_end_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Coupon.coupon_end_date)
  return _internal_coupon_end_date();
}
inline void Coupon::unsafe_arena_set_allocated_coupon_end_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.coupon_end_date_);
  }
  _impl_.coupon_end_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Coupon.coupon_end_date)
}
inline ::google::protobuf::Timestamp* Coupon::release_coupon_end_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* released = _impl_.coupon_end_date_;
  _impl_.coupon_end_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Coupon::unsafe_arena_release_coupon_end_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Coupon.coupon_end_date)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* temp = _impl_.coupon_end_date_;
  _impl_.coupon_end_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Coupon::_internal_mutable_coupon_end_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.coupon_end_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.coupon_end_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.coupon_end_date_;
}
inline ::google::protobuf::Timestamp* Coupon::mutable_coupon_end_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_coupon_end_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Coupon.coupon_end_date)
  return _msg;
}
inline void Coupon::set_allocated_coupon_end_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.coupon_end_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.coupon_end_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Coupon.coupon_end_date)
}

// int32 coupon_period = 9;
inline void Coupon::clear_coupon_period() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.coupon_period_ = 0;
}
inline ::int32_t Coupon::coupon_period() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Coupon.coupon_period)
  return _internal_coupon_period();
}
inline void Coupon::set_coupon_period(::int32_t value) {
  _internal_set_coupon_period(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Coupon.coupon_period)
}
inline ::int32_t Coupon::_internal_coupon_period() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.coupon_period_;
}
inline void Coupon::_internal_set_coupon_period(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.coupon_period_ = value;
}

// -------------------------------------------------------------------

// CurrencyResponse

// .tinkoff.public_.invest.api.contract.v1.Currency instrument = 1;
inline bool CurrencyResponse::has_instrument() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.instrument_ != nullptr);
  return value;
}
inline void CurrencyResponse::clear_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.instrument_ != nullptr) _impl_.instrument_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Currency& CurrencyResponse::_internal_instrument() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Currency* p = _impl_.instrument_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Currency&>(::tinkoff::public_::invest::api::contract::v1::_Currency_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Currency& CurrencyResponse::instrument() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.CurrencyResponse.instrument)
  return _internal_instrument();
}
inline void CurrencyResponse::unsafe_arena_set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Currency* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.instrument_);
  }
  _impl_.instrument_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Currency*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.CurrencyResponse.instrument)
}
inline ::tinkoff::public_::invest::api::contract::v1::Currency* CurrencyResponse::release_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Currency* released = _impl_.instrument_;
  _impl_.instrument_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Currency* CurrencyResponse::unsafe_arena_release_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.CurrencyResponse.instrument)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Currency* temp = _impl_.instrument_;
  _impl_.instrument_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Currency* CurrencyResponse::_internal_mutable_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.instrument_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Currency>(GetArena());
    _impl_.instrument_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Currency*>(p);
  }
  return _impl_.instrument_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Currency* CurrencyResponse::mutable_instrument() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Currency* _msg = _internal_mutable_instrument();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.CurrencyResponse.instrument)
  return _msg;
}
inline void CurrencyResponse::set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Currency* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Currency*>(_impl_.instrument_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Currency*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.instrument_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Currency*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.CurrencyResponse.instrument)
}

// -------------------------------------------------------------------

// CurrenciesResponse

// repeated .tinkoff.public_.invest.api.contract.v1.Currency instruments = 1;
inline int CurrenciesResponse::_internal_instruments_size() const {
  return _internal_instruments().size();
}
inline int CurrenciesResponse::instruments_size() const {
  return _internal_instruments_size();
}
inline void CurrenciesResponse::clear_instruments() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instruments_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::Currency* CurrenciesResponse::mutable_instruments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.CurrenciesResponse.instruments)
  return _internal_mutable_instruments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Currency>* CurrenciesResponse::mutable_instruments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.CurrenciesResponse.instruments)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_instruments();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Currency& CurrenciesResponse::instruments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.CurrenciesResponse.instruments)
  return _internal_instruments().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::Currency* CurrenciesResponse::add_instruments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::Currency* _add = _internal_mutable_instruments()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.CurrenciesResponse.instruments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Currency>& CurrenciesResponse::instruments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.CurrenciesResponse.instruments)
  return _internal_instruments();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Currency>&
CurrenciesResponse::_internal_instruments() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instruments_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Currency>*
CurrenciesResponse::_internal_mutable_instruments() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.instruments_;
}

// -------------------------------------------------------------------

// EtfResponse

// .tinkoff.public_.invest.api.contract.v1.Etf instrument = 1;
inline bool EtfResponse::has_instrument() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.instrument_ != nullptr);
  return value;
}
inline void EtfResponse::clear_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.instrument_ != nullptr) _impl_.instrument_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Etf& EtfResponse::_internal_instrument() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Etf* p = _impl_.instrument_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Etf&>(::tinkoff::public_::invest::api::contract::v1::_Etf_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Etf& EtfResponse::instrument() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.EtfResponse.instrument)
  return _internal_instrument();
}
inline void EtfResponse::unsafe_arena_set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Etf* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.instrument_);
  }
  _impl_.instrument_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Etf*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.EtfResponse.instrument)
}
inline ::tinkoff::public_::invest::api::contract::v1::Etf* EtfResponse::release_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Etf* released = _impl_.instrument_;
  _impl_.instrument_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Etf* EtfResponse::unsafe_arena_release_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.EtfResponse.instrument)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Etf* temp = _impl_.instrument_;
  _impl_.instrument_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Etf* EtfResponse::_internal_mutable_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.instrument_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Etf>(GetArena());
    _impl_.instrument_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Etf*>(p);
  }
  return _impl_.instrument_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Etf* EtfResponse::mutable_instrument() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Etf* _msg = _internal_mutable_instrument();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.EtfResponse.instrument)
  return _msg;
}
inline void EtfResponse::set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Etf* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Etf*>(_impl_.instrument_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Etf*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.instrument_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Etf*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.EtfResponse.instrument)
}

// -------------------------------------------------------------------

// EtfsResponse

// repeated .tinkoff.public_.invest.api.contract.v1.Etf instruments = 1;
inline int EtfsResponse::_internal_instruments_size() const {
  return _internal_instruments().size();
}
inline int EtfsResponse::instruments_size() const {
  return _internal_instruments_size();
}
inline void EtfsResponse::clear_instruments() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instruments_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::Etf* EtfsResponse::mutable_instruments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.EtfsResponse.instruments)
  return _internal_mutable_instruments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Etf>* EtfsResponse::mutable_instruments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.EtfsResponse.instruments)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_instruments();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Etf& EtfsResponse::instruments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.EtfsResponse.instruments)
  return _internal_instruments().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::Etf* EtfsResponse::add_instruments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::Etf* _add = _internal_mutable_instruments()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.EtfsResponse.instruments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Etf>& EtfsResponse::instruments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.EtfsResponse.instruments)
  return _internal_instruments();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Etf>&
EtfsResponse::_internal_instruments() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instruments_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Etf>*
EtfsResponse::_internal_mutable_instruments() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.instruments_;
}

// -------------------------------------------------------------------

// FutureResponse

// .tinkoff.public_.invest.api.contract.v1.Future instrument = 1;
inline bool FutureResponse::has_instrument() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.instrument_ != nullptr);
  return value;
}
inline void FutureResponse::clear_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.instrument_ != nullptr) _impl_.instrument_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Future& FutureResponse::_internal_instrument() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Future* p = _impl_.instrument_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Future&>(::tinkoff::public_::invest::api::contract::v1::_Future_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Future& FutureResponse::instrument() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.FutureResponse.instrument)
  return _internal_instrument();
}
inline void FutureResponse::unsafe_arena_set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Future* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.instrument_);
  }
  _impl_.instrument_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Future*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.FutureResponse.instrument)
}
inline ::tinkoff::public_::invest::api::contract::v1::Future* FutureResponse::release_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Future* released = _impl_.instrument_;
  _impl_.instrument_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Future* FutureResponse::unsafe_arena_release_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.FutureResponse.instrument)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Future* temp = _impl_.instrument_;
  _impl_.instrument_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Future* FutureResponse::_internal_mutable_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.instrument_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Future>(GetArena());
    _impl_.instrument_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Future*>(p);
  }
  return _impl_.instrument_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Future* FutureResponse::mutable_instrument() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Future* _msg = _internal_mutable_instrument();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.FutureResponse.instrument)
  return _msg;
}
inline void FutureResponse::set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Future* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Future*>(_impl_.instrument_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Future*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.instrument_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Future*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.FutureResponse.instrument)
}

// -------------------------------------------------------------------

// FuturesResponse

// repeated .tinkoff.public_.invest.api.contract.v1.Future instruments = 1;
inline int FuturesResponse::_internal_instruments_size() const {
  return _internal_instruments().size();
}
inline int FuturesResponse::instruments_size() const {
  return _internal_instruments_size();
}
inline void FuturesResponse::clear_instruments() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instruments_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::Future* FuturesResponse::mutable_instruments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.FuturesResponse.instruments)
  return _internal_mutable_instruments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Future>* FuturesResponse::mutable_instruments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.FuturesResponse.instruments)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_instruments();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Future& FuturesResponse::instruments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.FuturesResponse.instruments)
  return _internal_instruments().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::Future* FuturesResponse::add_instruments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::Future* _add = _internal_mutable_instruments()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.FuturesResponse.instruments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Future>& FuturesResponse::instruments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.FuturesResponse.instruments)
  return _internal_instruments();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Future>&
FuturesResponse::_internal_instruments() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instruments_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Future>*
FuturesResponse::_internal_mutable_instruments() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.instruments_;
}

// -------------------------------------------------------------------

// OptionResponse

// .tinkoff.public_.invest.api.contract.v1.Option instrument = 1;
inline bool OptionResponse::has_instrument() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.instrument_ != nullptr);
  return value;
}
inline void OptionResponse::clear_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.instrument_ != nullptr) _impl_.instrument_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Option& OptionResponse::_internal_instrument() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Option* p = _impl_.instrument_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Option&>(::tinkoff::public_::invest::api::contract::v1::_Option_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Option& OptionResponse::instrument() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OptionResponse.instrument)
  return _internal_instrument();
}
inline void OptionResponse::unsafe_arena_set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Option* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.instrument_);
  }
  _impl_.instrument_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Option*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.OptionResponse.instrument)
}
inline ::tinkoff::public_::invest::api::contract::v1::Option* OptionResponse::release_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Option* released = _impl_.instrument_;
  _impl_.instrument_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Option* OptionResponse::unsafe_arena_release_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.OptionResponse.instrument)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Option* temp = _impl_.instrument_;
  _impl_.instrument_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Option* OptionResponse::_internal_mutable_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.instrument_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Option>(GetArena());
    _impl_.instrument_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Option*>(p);
  }
  return _impl_.instrument_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Option* OptionResponse::mutable_instrument() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Option* _msg = _internal_mutable_instrument();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OptionResponse.instrument)
  return _msg;
}
inline void OptionResponse::set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Option* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Option*>(_impl_.instrument_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Option*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.instrument_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Option*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.OptionResponse.instrument)
}

// -------------------------------------------------------------------

// OptionsResponse

// repeated .tinkoff.public_.invest.api.contract.v1.Option instruments = 1;
inline int OptionsResponse::_internal_instruments_size() const {
  return _internal_instruments().size();
}
inline int OptionsResponse::instruments_size() const {
  return _internal_instruments_size();
}
inline void OptionsResponse::clear_instruments() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instruments_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::Option* OptionsResponse::mutable_instruments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.OptionsResponse.instruments)
  return _internal_mutable_instruments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Option>* OptionsResponse::mutable_instruments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.OptionsResponse.instruments)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_instruments();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Option& OptionsResponse::instruments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.OptionsResponse.instruments)
  return _internal_instruments().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::Option* OptionsResponse::add_instruments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::Option* _add = _internal_mutable_instruments()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.OptionsResponse.instruments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Option>& OptionsResponse::instruments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.OptionsResponse.instruments)
  return _internal_instruments();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Option>&
OptionsResponse::_internal_instruments() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instruments_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Option>*
OptionsResponse::_internal_mutable_instruments() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.instruments_;
}

// -------------------------------------------------------------------

// Option

// string uid = 1;
inline void Option::clear_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& Option::uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.uid)
  return _internal_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Option::set_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.uid)
}
inline std::string* Option::mutable_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.uid)
  return _s;
}
inline const std::string& Option::_internal_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uid_.Get();
}
inline void Option::_internal_set_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(value, GetArena());
}
inline std::string* Option::_internal_mutable_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.uid_.Mutable( GetArena());
}
inline std::string* Option::release_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.uid)
  return _impl_.uid_.Release();
}
inline void Option::set_allocated_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uid_.IsDefault()) {
          _impl_.uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.uid)
}

// string position_uid = 2;
inline void Option::clear_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.position_uid_.ClearToEmpty();
}
inline const std::string& Option::position_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.position_uid)
  return _internal_position_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Option::set_position_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.position_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.position_uid)
}
inline std::string* Option::mutable_position_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_position_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.position_uid)
  return _s;
}
inline const std::string& Option::_internal_position_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.position_uid_.Get();
}
inline void Option::_internal_set_position_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.position_uid_.Set(value, GetArena());
}
inline std::string* Option::_internal_mutable_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.position_uid_.Mutable( GetArena());
}
inline std::string* Option::release_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.position_uid)
  return _impl_.position_uid_.Release();
}
inline void Option::set_allocated_position_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.position_uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.position_uid_.IsDefault()) {
          _impl_.position_uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.position_uid)
}

// string ticker = 3;
inline void Option::clear_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.ClearToEmpty();
}
inline const std::string& Option::ticker() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.ticker)
  return _internal_ticker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Option::set_ticker(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.ticker)
}
inline std::string* Option::mutable_ticker() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ticker();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.ticker)
  return _s;
}
inline const std::string& Option::_internal_ticker() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ticker_.Get();
}
inline void Option::_internal_set_ticker(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(value, GetArena());
}
inline std::string* Option::_internal_mutable_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ticker_.Mutable( GetArena());
}
inline std::string* Option::release_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.ticker)
  return _impl_.ticker_.Release();
}
inline void Option::set_allocated_ticker(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ticker_.IsDefault()) {
          _impl_.ticker_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.ticker)
}

// string class_code = 4;
inline void Option::clear_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_code_.ClearToEmpty();
}
inline const std::string& Option::class_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.class_code)
  return _internal_class_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Option::set_class_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.class_code)
}
inline std::string* Option::mutable_class_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_class_code();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.class_code)
  return _s;
}
inline const std::string& Option::_internal_class_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.class_code_.Get();
}
inline void Option::_internal_set_class_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class_code_.Set(value, GetArena());
}
inline std::string* Option::_internal_mutable_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.class_code_.Mutable( GetArena());
}
inline std::string* Option::release_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.class_code)
  return _impl_.class_code_.Release();
}
inline void Option::set_allocated_class_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.class_code_.IsDefault()) {
          _impl_.class_code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.class_code)
}

// string basic_asset_position_uid = 5;
inline void Option::clear_basic_asset_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.basic_asset_position_uid_.ClearToEmpty();
}
inline const std::string& Option::basic_asset_position_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.basic_asset_position_uid)
  return _internal_basic_asset_position_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Option::set_basic_asset_position_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.basic_asset_position_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.basic_asset_position_uid)
}
inline std::string* Option::mutable_basic_asset_position_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_basic_asset_position_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.basic_asset_position_uid)
  return _s;
}
inline const std::string& Option::_internal_basic_asset_position_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.basic_asset_position_uid_.Get();
}
inline void Option::_internal_set_basic_asset_position_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.basic_asset_position_uid_.Set(value, GetArena());
}
inline std::string* Option::_internal_mutable_basic_asset_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.basic_asset_position_uid_.Mutable( GetArena());
}
inline std::string* Option::release_basic_asset_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.basic_asset_position_uid)
  return _impl_.basic_asset_position_uid_.Release();
}
inline void Option::set_allocated_basic_asset_position_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.basic_asset_position_uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.basic_asset_position_uid_.IsDefault()) {
          _impl_.basic_asset_position_uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.basic_asset_position_uid)
}

// .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 21;
inline void Option::clear_trading_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trading_status_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus Option::trading_status() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.trading_status)
  return _internal_trading_status();
}
inline void Option::set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value) {
  _internal_set_trading_status(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.trading_status)
}
inline ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus Option::_internal_trading_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus>(_impl_.trading_status_);
}
inline void Option::_internal_set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trading_status_ = value;
}

// .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 31;
inline void Option::clear_real_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.real_exchange_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::RealExchange Option::real_exchange() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.real_exchange)
  return _internal_real_exchange();
}
inline void Option::set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value) {
  _internal_set_real_exchange(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.real_exchange)
}
inline ::tinkoff::public_::invest::api::contract::v1::RealExchange Option::_internal_real_exchange() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::RealExchange>(_impl_.real_exchange_);
}
inline void Option::_internal_set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.real_exchange_ = value;
}

// .tinkoff.public_.invest.api.contract.v1.OptionDirection direction = 41;
inline void Option::clear_direction() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.direction_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OptionDirection Option::direction() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.direction)
  return _internal_direction();
}
inline void Option::set_direction(::tinkoff::public_::invest::api::contract::v1::OptionDirection value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.direction)
}
inline ::tinkoff::public_::invest::api::contract::v1::OptionDirection Option::_internal_direction() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::OptionDirection>(_impl_.direction_);
}
inline void Option::_internal_set_direction(::tinkoff::public_::invest::api::contract::v1::OptionDirection value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.direction_ = value;
}

// .tinkoff.public_.invest.api.contract.v1.OptionPaymentType payment_type = 42;
inline void Option::clear_payment_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.payment_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OptionPaymentType Option::payment_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.payment_type)
  return _internal_payment_type();
}
inline void Option::set_payment_type(::tinkoff::public_::invest::api::contract::v1::OptionPaymentType value) {
  _internal_set_payment_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.payment_type)
}
inline ::tinkoff::public_::invest::api::contract::v1::OptionPaymentType Option::_internal_payment_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::OptionPaymentType>(_impl_.payment_type_);
}
inline void Option::_internal_set_payment_type(::tinkoff::public_::invest::api::contract::v1::OptionPaymentType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.payment_type_ = value;
}

// .tinkoff.public_.invest.api.contract.v1.OptionStyle style = 43;
inline void Option::clear_style() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.style_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OptionStyle Option::style() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.style)
  return _internal_style();
}
inline void Option::set_style(::tinkoff::public_::invest::api::contract::v1::OptionStyle value) {
  _internal_set_style(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.style)
}
inline ::tinkoff::public_::invest::api::contract::v1::OptionStyle Option::_internal_style() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::OptionStyle>(_impl_.style_);
}
inline void Option::_internal_set_style(::tinkoff::public_::invest::api::contract::v1::OptionStyle value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.style_ = value;
}

// .tinkoff.public_.invest.api.contract.v1.OptionSettlementType settlement_type = 44;
inline void Option::clear_settlement_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.settlement_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::OptionSettlementType Option::settlement_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.settlement_type)
  return _internal_settlement_type();
}
inline void Option::set_settlement_type(::tinkoff::public_::invest::api::contract::v1::OptionSettlementType value) {
  _internal_set_settlement_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.settlement_type)
}
inline ::tinkoff::public_::invest::api::contract::v1::OptionSettlementType Option::_internal_settlement_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::OptionSettlementType>(_impl_.settlement_type_);
}
inline void Option::_internal_set_settlement_type(::tinkoff::public_::invest::api::contract::v1::OptionSettlementType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.settlement_type_ = value;
}

// string name = 101;
inline void Option::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Option::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Option::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.name)
}
inline std::string* Option::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.name)
  return _s;
}
inline const std::string& Option::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Option::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Option::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Option::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.name)
  return _impl_.name_.Release();
}
inline void Option::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.name)
}

// string currency = 111;
inline void Option::clear_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.ClearToEmpty();
}
inline const std::string& Option::currency() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.currency)
  return _internal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Option::set_currency(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.currency)
}
inline std::string* Option::mutable_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.currency)
  return _s;
}
inline const std::string& Option::_internal_currency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.currency_.Get();
}
inline void Option::_internal_set_currency(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(value, GetArena());
}
inline std::string* Option::_internal_mutable_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.currency_.Mutable( GetArena());
}
inline std::string* Option::release_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.currency)
  return _impl_.currency_.Release();
}
inline void Option::set_allocated_currency(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.currency_.IsDefault()) {
          _impl_.currency_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.currency)
}

// string settlement_currency = 112;
inline void Option::clear_settlement_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.settlement_currency_.ClearToEmpty();
}
inline const std::string& Option::settlement_currency() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.settlement_currency)
  return _internal_settlement_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Option::set_settlement_currency(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.settlement_currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.settlement_currency)
}
inline std::string* Option::mutable_settlement_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_settlement_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.settlement_currency)
  return _s;
}
inline const std::string& Option::_internal_settlement_currency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.settlement_currency_.Get();
}
inline void Option::_internal_set_settlement_currency(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.settlement_currency_.Set(value, GetArena());
}
inline std::string* Option::_internal_mutable_settlement_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.settlement_currency_.Mutable( GetArena());
}
inline std::string* Option::release_settlement_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.settlement_currency)
  return _impl_.settlement_currency_.Release();
}
inline void Option::set_allocated_settlement_currency(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.settlement_currency_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.settlement_currency_.IsDefault()) {
          _impl_.settlement_currency_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.settlement_currency)
}

// string asset_type = 131;
inline void Option::clear_asset_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.asset_type_.ClearToEmpty();
}
inline const std::string& Option::asset_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.asset_type)
  return _internal_asset_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Option::set_asset_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.asset_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.asset_type)
}
inline std::string* Option::mutable_asset_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_asset_type();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.asset_type)
  return _s;
}
inline const std::string& Option::_internal_asset_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.asset_type_.Get();
}
inline void Option::_internal_set_asset_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.asset_type_.Set(value, GetArena());
}
inline std::string* Option::_internal_mutable_asset_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.asset_type_.Mutable( GetArena());
}
inline std::string* Option::release_asset_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.asset_type)
  return _impl_.asset_type_.Release();
}
inline void Option::set_allocated_asset_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.asset_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.asset_type_.IsDefault()) {
          _impl_.asset_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.asset_type)
}

// string basic_asset = 132;
inline void Option::clear_basic_asset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.basic_asset_.ClearToEmpty();
}
inline const std::string& Option::basic_asset() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.basic_asset)
  return _internal_basic_asset();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Option::set_basic_asset(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.basic_asset_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.basic_asset)
}
inline std::string* Option::mutable_basic_asset() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_basic_asset();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.basic_asset)
  return _s;
}
inline const std::string& Option::_internal_basic_asset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.basic_asset_.Get();
}
inline void Option::_internal_set_basic_asset(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.basic_asset_.Set(value, GetArena());
}
inline std::string* Option::_internal_mutable_basic_asset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.basic_asset_.Mutable( GetArena());
}
inline std::string* Option::release_basic_asset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.basic_asset)
  return _impl_.basic_asset_.Release();
}
inline void Option::set_allocated_basic_asset(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.basic_asset_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.basic_asset_.IsDefault()) {
          _impl_.basic_asset_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.basic_asset)
}

// string exchange = 141;
inline void Option::clear_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_.ClearToEmpty();
}
inline const std::string& Option::exchange() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.exchange)
  return _internal_exchange();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Option::set_exchange(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.exchange)
}
inline std::string* Option::mutable_exchange() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_exchange();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.exchange)
  return _s;
}
inline const std::string& Option::_internal_exchange() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exchange_.Get();
}
inline void Option::_internal_set_exchange(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_.Set(value, GetArena());
}
inline std::string* Option::_internal_mutable_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.exchange_.Mutable( GetArena());
}
inline std::string* Option::release_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.exchange)
  return _impl_.exchange_.Release();
}
inline void Option::set_allocated_exchange(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_.IsDefault()) {
          _impl_.exchange_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.exchange)
}

// string country_of_risk = 151;
inline void Option::clear_country_of_risk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_.ClearToEmpty();
}
inline const std::string& Option::country_of_risk() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.country_of_risk)
  return _internal_country_of_risk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Option::set_country_of_risk(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.country_of_risk)
}
inline std::string* Option::mutable_country_of_risk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_country_of_risk();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.country_of_risk)
  return _s;
}
inline const std::string& Option::_internal_country_of_risk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.country_of_risk_.Get();
}
inline void Option::_internal_set_country_of_risk(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_.Set(value, GetArena());
}
inline std::string* Option::_internal_mutable_country_of_risk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.country_of_risk_.Mutable( GetArena());
}
inline std::string* Option::release_country_of_risk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.country_of_risk)
  return _impl_.country_of_risk_.Release();
}
inline void Option::set_allocated_country_of_risk(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.country_of_risk_.IsDefault()) {
          _impl_.country_of_risk_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.country_of_risk)
}

// string country_of_risk_name = 152;
inline void Option::clear_country_of_risk_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_name_.ClearToEmpty();
}
inline const std::string& Option::country_of_risk_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.country_of_risk_name)
  return _internal_country_of_risk_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Option::set_country_of_risk_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.country_of_risk_name)
}
inline std::string* Option::mutable_country_of_risk_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_country_of_risk_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.country_of_risk_name)
  return _s;
}
inline const std::string& Option::_internal_country_of_risk_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.country_of_risk_name_.Get();
}
inline void Option::_internal_set_country_of_risk_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_name_.Set(value, GetArena());
}
inline std::string* Option::_internal_mutable_country_of_risk_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.country_of_risk_name_.Mutable( GetArena());
}
inline std::string* Option::release_country_of_risk_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.country_of_risk_name)
  return _impl_.country_of_risk_name_.Release();
}
inline void Option::set_allocated_country_of_risk_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.country_of_risk_name_.IsDefault()) {
          _impl_.country_of_risk_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.country_of_risk_name)
}

// string sector = 161;
inline void Option::clear_sector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sector_.ClearToEmpty();
}
inline const std::string& Option::sector() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.sector)
  return _internal_sector();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Option::set_sector(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sector_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.sector)
}
inline std::string* Option::mutable_sector() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sector();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.sector)
  return _s;
}
inline const std::string& Option::_internal_sector() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sector_.Get();
}
inline void Option::_internal_set_sector(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sector_.Set(value, GetArena());
}
inline std::string* Option::_internal_mutable_sector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.sector_.Mutable( GetArena());
}
inline std::string* Option::release_sector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.sector)
  return _impl_.sector_.Release();
}
inline void Option::set_allocated_sector(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sector_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sector_.IsDefault()) {
          _impl_.sector_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.sector)
}

// .tinkoff.public_.invest.api.contract.v1.BrandData brand = 162;
inline bool Option::has_brand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.brand_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::BrandData& Option::_internal_brand() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::BrandData* p = _impl_.brand_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::BrandData&>(::tinkoff::public_::invest::api::contract::v1::_BrandData_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::BrandData& Option::brand() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.brand)
  return _internal_brand();
}
inline void Option::unsafe_arena_set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.brand_);
  }
  _impl_.brand_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::BrandData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.brand)
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Option::release_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::BrandData* released = _impl_.brand_;
  _impl_.brand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Option::unsafe_arena_release_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.brand)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::BrandData* temp = _impl_.brand_;
  _impl_.brand_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Option::_internal_mutable_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.brand_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::BrandData>(GetArena());
    _impl_.brand_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::BrandData*>(p);
  }
  return _impl_.brand_;
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Option::mutable_brand() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::BrandData* _msg = _internal_mutable_brand();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.brand)
  return _msg;
}
inline void Option::set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.brand_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.brand_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::BrandData*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.brand)
}

// int32 lot = 201;
inline void Option::clear_lot() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lot_ = 0;
}
inline ::int32_t Option::lot() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.lot)
  return _internal_lot();
}
inline void Option::set_lot(::int32_t value) {
  _internal_set_lot(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.lot)
}
inline ::int32_t Option::_internal_lot() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lot_;
}
inline void Option::_internal_set_lot(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lot_ = value;
}

// .tinkoff.public_.invest.api.contract.v1.Quotation basic_asset_size = 211;
inline bool Option::has_basic_asset_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.basic_asset_size_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Option::_internal_basic_asset_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.basic_asset_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Option::basic_asset_size() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.basic_asset_size)
  return _internal_basic_asset_size();
}
inline void Option::unsafe_arena_set_allocated_basic_asset_size(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.basic_asset_size_);
  }
  _impl_.basic_asset_size_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.basic_asset_size)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::release_basic_asset_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.basic_asset_size_;
  _impl_.basic_asset_size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::unsafe_arena_release_basic_asset_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.basic_asset_size)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.basic_asset_size_;
  _impl_.basic_asset_size_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::_internal_mutable_basic_asset_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.basic_asset_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.basic_asset_size_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.basic_asset_size_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::mutable_basic_asset_size() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_basic_asset_size();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.basic_asset_size)
  return _msg;
}
inline void Option::set_allocated_basic_asset_size(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.basic_asset_size_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.basic_asset_size_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.basic_asset_size)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation klong = 221;
inline bool Option::has_klong() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.klong_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Option::_internal_klong() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.klong_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Option::klong() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.klong)
  return _internal_klong();
}
inline void Option::unsafe_arena_set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.klong_);
  }
  _impl_.klong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.klong)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::release_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.klong_;
  _impl_.klong_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::unsafe_arena_release_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.klong)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.klong_;
  _impl_.klong_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::_internal_mutable_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.klong_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.klong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.klong_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::mutable_klong() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_klong();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.klong)
  return _msg;
}
inline void Option::set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.klong_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.klong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.klong)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 222;
inline bool Option::has_kshort() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kshort_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Option::_internal_kshort() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.kshort_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Option::kshort() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.kshort)
  return _internal_kshort();
}
inline void Option::unsafe_arena_set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kshort_);
  }
  _impl_.kshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.kshort)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::release_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.kshort_;
  _impl_.kshort_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::unsafe_arena_release_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.kshort)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.kshort_;
  _impl_.kshort_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::_internal_mutable_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.kshort_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.kshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.kshort_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::mutable_kshort() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_kshort();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.kshort)
  return _msg;
}
inline void Option::set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kshort_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.kshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.kshort)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 223;
inline bool Option::has_dlong() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dlong_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Option::_internal_dlong() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dlong_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Option::dlong() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.dlong)
  return _internal_dlong();
}
inline void Option::unsafe_arena_set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_);
  }
  _impl_.dlong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.dlong)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::release_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dlong_;
  _impl_.dlong_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::unsafe_arena_release_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.dlong)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dlong_;
  _impl_.dlong_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::_internal_mutable_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.dlong_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dlong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dlong_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::mutable_dlong() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dlong();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.dlong)
  return _msg;
}
inline void Option::set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.dlong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.dlong)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 224;
inline bool Option::has_dshort() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dshort_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Option::_internal_dshort() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dshort_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Option::dshort() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.dshort)
  return _internal_dshort();
}
inline void Option::unsafe_arena_set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_);
  }
  _impl_.dshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.dshort)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::release_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dshort_;
  _impl_.dshort_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::unsafe_arena_release_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.dshort)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dshort_;
  _impl_.dshort_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::_internal_mutable_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.dshort_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dshort_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::mutable_dshort() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dshort();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.dshort)
  return _msg;
}
inline void Option::set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.dshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.dshort)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 225;
inline bool Option::has_dlong_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dlong_min_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Option::_internal_dlong_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dlong_min_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Option::dlong_min() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.dlong_min)
  return _internal_dlong_min();
}
inline void Option::unsafe_arena_set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_min_);
  }
  _impl_.dlong_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.dlong_min)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::release_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dlong_min_;
  _impl_.dlong_min_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::unsafe_arena_release_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.dlong_min)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dlong_min_;
  _impl_.dlong_min_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::_internal_mutable_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.dlong_min_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dlong_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dlong_min_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::mutable_dlong_min() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dlong_min();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.dlong_min)
  return _msg;
}
inline void Option::set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_min_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.dlong_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.dlong_min)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 226;
inline bool Option::has_dshort_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dshort_min_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Option::_internal_dshort_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dshort_min_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Option::dshort_min() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.dshort_min)
  return _internal_dshort_min();
}
inline void Option::unsafe_arena_set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_min_);
  }
  _impl_.dshort_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.dshort_min)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::release_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dshort_min_;
  _impl_.dshort_min_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::unsafe_arena_release_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.dshort_min)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dshort_min_;
  _impl_.dshort_min_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::_internal_mutable_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.dshort_min_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dshort_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dshort_min_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::mutable_dshort_min() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dshort_min();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.dshort_min)
  return _msg;
}
inline void Option::set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_min_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.dshort_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.dshort_min)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 231;
inline bool Option::has_min_price_increment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.min_price_increment_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Option::_internal_min_price_increment() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.min_price_increment_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Option::min_price_increment() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.min_price_increment)
  return _internal_min_price_increment();
}
inline void Option::unsafe_arena_set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_price_increment_);
  }
  _impl_.min_price_increment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.min_price_increment)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::release_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.min_price_increment_;
  _impl_.min_price_increment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::unsafe_arena_release_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.min_price_increment)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.min_price_increment_;
  _impl_.min_price_increment_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::_internal_mutable_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.min_price_increment_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.min_price_increment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.min_price_increment_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Option::mutable_min_price_increment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_min_price_increment();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.min_price_increment)
  return _msg;
}
inline void Option::set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_price_increment_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.min_price_increment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.min_price_increment)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue strike_price = 241;
inline bool Option::has_strike_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.strike_price_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Option::_internal_strike_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.strike_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Option::strike_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.strike_price)
  return _internal_strike_price();
}
inline void Option::unsafe_arena_set_allocated_strike_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.strike_price_);
  }
  _impl_.strike_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.strike_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Option::release_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.strike_price_;
  _impl_.strike_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Option::unsafe_arena_release_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.strike_price)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.strike_price_;
  _impl_.strike_price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Option::_internal_mutable_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.strike_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
    _impl_.strike_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
  }
  return _impl_.strike_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Option::mutable_strike_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_strike_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.strike_price)
  return _msg;
}
inline void Option::set_allocated_strike_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.strike_price_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.strike_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.strike_price)
}

// .google.protobuf.Timestamp expiration_date = 301;
inline bool Option::has_expiration_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.expiration_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Option::_internal_expiration_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.expiration_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Option::expiration_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.expiration_date)
  return _internal_expiration_date();
}
inline void Option::unsafe_arena_set_allocated_expiration_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expiration_date_);
  }
  _impl_.expiration_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.expiration_date)
}
inline ::google::protobuf::Timestamp* Option::release_expiration_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::google::protobuf::Timestamp* released = _impl_.expiration_date_;
  _impl_.expiration_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Option::unsafe_arena_release_expiration_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.expiration_date)

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::google::protobuf::Timestamp* temp = _impl_.expiration_date_;
  _impl_.expiration_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Option::_internal_mutable_expiration_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.expiration_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.expiration_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.expiration_date_;
}
inline ::google::protobuf::Timestamp* Option::mutable_expiration_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_expiration_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.expiration_date)
  return _msg;
}
inline void Option::set_allocated_expiration_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expiration_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }

  _impl_.expiration_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.expiration_date)
}

// .google.protobuf.Timestamp first_trade_date = 311;
inline bool Option::has_first_trade_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.first_trade_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Option::_internal_first_trade_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.first_trade_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Option::first_trade_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.first_trade_date)
  return _internal_first_trade_date();
}
inline void Option::unsafe_arena_set_allocated_first_trade_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_trade_date_);
  }
  _impl_.first_trade_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.first_trade_date)
}
inline ::google::protobuf::Timestamp* Option::release_first_trade_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::google::protobuf::Timestamp* released = _impl_.first_trade_date_;
  _impl_.first_trade_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Option::unsafe_arena_release_first_trade_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.first_trade_date)

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::google::protobuf::Timestamp* temp = _impl_.first_trade_date_;
  _impl_.first_trade_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Option::_internal_mutable_first_trade_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.first_trade_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.first_trade_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.first_trade_date_;
}
inline ::google::protobuf::Timestamp* Option::mutable_first_trade_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_first_trade_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.first_trade_date)
  return _msg;
}
inline void Option::set_allocated_first_trade_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_trade_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }

  _impl_.first_trade_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.first_trade_date)
}

// .google.protobuf.Timestamp last_trade_date = 312;
inline bool Option::has_last_trade_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_trade_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Option::_internal_last_trade_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.last_trade_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Option::last_trade_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.last_trade_date)
  return _internal_last_trade_date();
}
inline void Option::unsafe_arena_set_allocated_last_trade_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_trade_date_);
  }
  _impl_.last_trade_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.last_trade_date)
}
inline ::google::protobuf::Timestamp* Option::release_last_trade_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::google::protobuf::Timestamp* released = _impl_.last_trade_date_;
  _impl_.last_trade_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Option::unsafe_arena_release_last_trade_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.last_trade_date)

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::google::protobuf::Timestamp* temp = _impl_.last_trade_date_;
  _impl_.last_trade_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Option::_internal_mutable_last_trade_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.last_trade_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.last_trade_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.last_trade_date_;
}
inline ::google::protobuf::Timestamp* Option::mutable_last_trade_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_last_trade_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.last_trade_date)
  return _msg;
}
inline void Option::set_allocated_last_trade_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_trade_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }

  _impl_.last_trade_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.last_trade_date)
}

// .google.protobuf.Timestamp first_1min_candle_date = 321;
inline bool Option::has_first_1min_candle_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.first_1min_candle_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Option::_internal_first_1min_candle_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.first_1min_candle_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Option::first_1min_candle_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.first_1min_candle_date)
  return _internal_first_1min_candle_date();
}
inline void Option::unsafe_arena_set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1min_candle_date_);
  }
  _impl_.first_1min_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.first_1min_candle_date)
}
inline ::google::protobuf::Timestamp* Option::release_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00002000u;
  ::google::protobuf::Timestamp* released = _impl_.first_1min_candle_date_;
  _impl_.first_1min_candle_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Option::unsafe_arena_release_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.first_1min_candle_date)

  _impl_._has_bits_[0] &= ~0x00002000u;
  ::google::protobuf::Timestamp* temp = _impl_.first_1min_candle_date_;
  _impl_.first_1min_candle_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Option::_internal_mutable_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.first_1min_candle_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.first_1min_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.first_1min_candle_date_;
}
inline ::google::protobuf::Timestamp* Option::mutable_first_1min_candle_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_first_1min_candle_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.first_1min_candle_date)
  return _msg;
}
inline void Option::set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1min_candle_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }

  _impl_.first_1min_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.first_1min_candle_date)
}

// .google.protobuf.Timestamp first_1day_candle_date = 322;
inline bool Option::has_first_1day_candle_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.first_1day_candle_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Option::_internal_first_1day_candle_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.first_1day_candle_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Option::first_1day_candle_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.first_1day_candle_date)
  return _internal_first_1day_candle_date();
}
inline void Option::unsafe_arena_set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1day_candle_date_);
  }
  _impl_.first_1day_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.first_1day_candle_date)
}
inline ::google::protobuf::Timestamp* Option::release_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00004000u;
  ::google::protobuf::Timestamp* released = _impl_.first_1day_candle_date_;
  _impl_.first_1day_candle_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Option::unsafe_arena_release_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Option.first_1day_candle_date)

  _impl_._has_bits_[0] &= ~0x00004000u;
  ::google::protobuf::Timestamp* temp = _impl_.first_1day_candle_date_;
  _impl_.first_1day_candle_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Option::_internal_mutable_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00004000u;
  if (_impl_.first_1day_candle_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.first_1day_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.first_1day_candle_date_;
}
inline ::google::protobuf::Timestamp* Option::mutable_first_1day_candle_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_first_1day_candle_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Option.first_1day_candle_date)
  return _msg;
}
inline void Option::set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1day_candle_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }

  _impl_.first_1day_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Option.first_1day_candle_date)
}

// bool short_enabled_flag = 401;
inline void Option::clear_short_enabled_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.short_enabled_flag_ = false;
}
inline bool Option::short_enabled_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.short_enabled_flag)
  return _internal_short_enabled_flag();
}
inline void Option::set_short_enabled_flag(bool value) {
  _internal_set_short_enabled_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.short_enabled_flag)
}
inline bool Option::_internal_short_enabled_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.short_enabled_flag_;
}
inline void Option::_internal_set_short_enabled_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.short_enabled_flag_ = value;
}

// bool for_iis_flag = 402;
inline void Option::clear_for_iis_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.for_iis_flag_ = false;
}
inline bool Option::for_iis_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.for_iis_flag)
  return _internal_for_iis_flag();
}
inline void Option::set_for_iis_flag(bool value) {
  _internal_set_for_iis_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.for_iis_flag)
}
inline bool Option::_internal_for_iis_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.for_iis_flag_;
}
inline void Option::_internal_set_for_iis_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.for_iis_flag_ = value;
}

// bool otc_flag = 403;
inline void Option::clear_otc_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.otc_flag_ = false;
}
inline bool Option::otc_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.otc_flag)
  return _internal_otc_flag();
}
inline void Option::set_otc_flag(bool value) {
  _internal_set_otc_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.otc_flag)
}
inline bool Option::_internal_otc_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.otc_flag_;
}
inline void Option::_internal_set_otc_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.otc_flag_ = value;
}

// bool buy_available_flag = 404;
inline void Option::clear_buy_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.buy_available_flag_ = false;
}
inline bool Option::buy_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.buy_available_flag)
  return _internal_buy_available_flag();
}
inline void Option::set_buy_available_flag(bool value) {
  _internal_set_buy_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.buy_available_flag)
}
inline bool Option::_internal_buy_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.buy_available_flag_;
}
inline void Option::_internal_set_buy_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.buy_available_flag_ = value;
}

// bool sell_available_flag = 405;
inline void Option::clear_sell_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sell_available_flag_ = false;
}
inline bool Option::sell_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.sell_available_flag)
  return _internal_sell_available_flag();
}
inline void Option::set_sell_available_flag(bool value) {
  _internal_set_sell_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.sell_available_flag)
}
inline bool Option::_internal_sell_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sell_available_flag_;
}
inline void Option::_internal_set_sell_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sell_available_flag_ = value;
}

// bool for_qual_investor_flag = 406;
inline void Option::clear_for_qual_investor_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.for_qual_investor_flag_ = false;
}
inline bool Option::for_qual_investor_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.for_qual_investor_flag)
  return _internal_for_qual_investor_flag();
}
inline void Option::set_for_qual_investor_flag(bool value) {
  _internal_set_for_qual_investor_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.for_qual_investor_flag)
}
inline bool Option::_internal_for_qual_investor_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.for_qual_investor_flag_;
}
inline void Option::_internal_set_for_qual_investor_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.for_qual_investor_flag_ = value;
}

// bool weekend_flag = 407;
inline void Option::clear_weekend_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.weekend_flag_ = false;
}
inline bool Option::weekend_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.weekend_flag)
  return _internal_weekend_flag();
}
inline void Option::set_weekend_flag(bool value) {
  _internal_set_weekend_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.weekend_flag)
}
inline bool Option::_internal_weekend_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.weekend_flag_;
}
inline void Option::_internal_set_weekend_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.weekend_flag_ = value;
}

// bool blocked_tca_flag = 408;
inline void Option::clear_blocked_tca_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.blocked_tca_flag_ = false;
}
inline bool Option::blocked_tca_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.blocked_tca_flag)
  return _internal_blocked_tca_flag();
}
inline void Option::set_blocked_tca_flag(bool value) {
  _internal_set_blocked_tca_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.blocked_tca_flag)
}
inline bool Option::_internal_blocked_tca_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.blocked_tca_flag_;
}
inline void Option::_internal_set_blocked_tca_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.blocked_tca_flag_ = value;
}

// bool api_trade_available_flag = 409;
inline void Option::clear_api_trade_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.api_trade_available_flag_ = false;
}
inline bool Option::api_trade_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Option.api_trade_available_flag)
  return _internal_api_trade_available_flag();
}
inline void Option::set_api_trade_available_flag(bool value) {
  _internal_set_api_trade_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Option.api_trade_available_flag)
}
inline bool Option::_internal_api_trade_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.api_trade_available_flag_;
}
inline void Option::_internal_set_api_trade_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.api_trade_available_flag_ = value;
}

// -------------------------------------------------------------------

// ShareResponse

// .tinkoff.public_.invest.api.contract.v1.Share instrument = 1;
inline bool ShareResponse::has_instrument() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.instrument_ != nullptr);
  return value;
}
inline void ShareResponse::clear_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.instrument_ != nullptr) _impl_.instrument_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Share& ShareResponse::_internal_instrument() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Share* p = _impl_.instrument_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Share&>(::tinkoff::public_::invest::api::contract::v1::_Share_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Share& ShareResponse::instrument() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.ShareResponse.instrument)
  return _internal_instrument();
}
inline void ShareResponse::unsafe_arena_set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Share* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.instrument_);
  }
  _impl_.instrument_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Share*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.ShareResponse.instrument)
}
inline ::tinkoff::public_::invest::api::contract::v1::Share* ShareResponse::release_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Share* released = _impl_.instrument_;
  _impl_.instrument_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Share* ShareResponse::unsafe_arena_release_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.ShareResponse.instrument)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Share* temp = _impl_.instrument_;
  _impl_.instrument_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Share* ShareResponse::_internal_mutable_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.instrument_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Share>(GetArena());
    _impl_.instrument_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Share*>(p);
  }
  return _impl_.instrument_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Share* ShareResponse::mutable_instrument() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Share* _msg = _internal_mutable_instrument();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.ShareResponse.instrument)
  return _msg;
}
inline void ShareResponse::set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Share* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Share*>(_impl_.instrument_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Share*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.instrument_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Share*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.ShareResponse.instrument)
}

// -------------------------------------------------------------------

// SharesResponse

// repeated .tinkoff.public_.invest.api.contract.v1.Share instruments = 1;
inline int SharesResponse::_internal_instruments_size() const {
  return _internal_instruments().size();
}
inline int SharesResponse::instruments_size() const {
  return _internal_instruments_size();
}
inline void SharesResponse::clear_instruments() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instruments_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::Share* SharesResponse::mutable_instruments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.SharesResponse.instruments)
  return _internal_mutable_instruments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Share>* SharesResponse::mutable_instruments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.SharesResponse.instruments)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_instruments();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Share& SharesResponse::instruments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.SharesResponse.instruments)
  return _internal_instruments().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::Share* SharesResponse::add_instruments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::Share* _add = _internal_mutable_instruments()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.SharesResponse.instruments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Share>& SharesResponse::instruments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.SharesResponse.instruments)
  return _internal_instruments();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Share>&
SharesResponse::_internal_instruments() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instruments_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Share>*
SharesResponse::_internal_mutable_instruments() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.instruments_;
}

// -------------------------------------------------------------------

// Bond

// string figi = 1;
inline void Bond::clear_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& Bond::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bond::set_figi(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.figi)
}
inline std::string* Bond::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.figi)
  return _s;
}
inline const std::string& Bond::_internal_figi() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.figi_.Get();
}
inline void Bond::_internal_set_figi(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* Bond::_internal_mutable_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* Bond::release_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.figi)
  return _impl_.figi_.Release();
}
inline void Bond::set_allocated_figi(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.figi_.IsDefault()) {
          _impl_.figi_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.figi)
}

// string ticker = 2;
inline void Bond::clear_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.ClearToEmpty();
}
inline const std::string& Bond::ticker() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.ticker)
  return _internal_ticker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bond::set_ticker(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.ticker)
}
inline std::string* Bond::mutable_ticker() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ticker();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.ticker)
  return _s;
}
inline const std::string& Bond::_internal_ticker() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ticker_.Get();
}
inline void Bond::_internal_set_ticker(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(value, GetArena());
}
inline std::string* Bond::_internal_mutable_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ticker_.Mutable( GetArena());
}
inline std::string* Bond::release_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.ticker)
  return _impl_.ticker_.Release();
}
inline void Bond::set_allocated_ticker(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ticker_.IsDefault()) {
          _impl_.ticker_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.ticker)
}

// string class_code = 3;
inline void Bond::clear_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_code_.ClearToEmpty();
}
inline const std::string& Bond::class_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.class_code)
  return _internal_class_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bond::set_class_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.class_code)
}
inline std::string* Bond::mutable_class_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_class_code();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.class_code)
  return _s;
}
inline const std::string& Bond::_internal_class_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.class_code_.Get();
}
inline void Bond::_internal_set_class_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class_code_.Set(value, GetArena());
}
inline std::string* Bond::_internal_mutable_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.class_code_.Mutable( GetArena());
}
inline std::string* Bond::release_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.class_code)
  return _impl_.class_code_.Release();
}
inline void Bond::set_allocated_class_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.class_code_.IsDefault()) {
          _impl_.class_code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.class_code)
}

// string isin = 4;
inline void Bond::clear_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.isin_.ClearToEmpty();
}
inline const std::string& Bond::isin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.isin)
  return _internal_isin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bond::set_isin(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.isin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.isin)
}
inline std::string* Bond::mutable_isin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_isin();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.isin)
  return _s;
}
inline const std::string& Bond::_internal_isin() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.isin_.Get();
}
inline void Bond::_internal_set_isin(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.isin_.Set(value, GetArena());
}
inline std::string* Bond::_internal_mutable_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.isin_.Mutable( GetArena());
}
inline std::string* Bond::release_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.isin)
  return _impl_.isin_.Release();
}
inline void Bond::set_allocated_isin(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.isin_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.isin_.IsDefault()) {
          _impl_.isin_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.isin)
}

// int32 lot = 5;
inline void Bond::clear_lot() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lot_ = 0;
}
inline ::int32_t Bond::lot() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.lot)
  return _internal_lot();
}
inline void Bond::set_lot(::int32_t value) {
  _internal_set_lot(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.lot)
}
inline ::int32_t Bond::_internal_lot() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lot_;
}
inline void Bond::_internal_set_lot(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lot_ = value;
}

// string currency = 6;
inline void Bond::clear_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.ClearToEmpty();
}
inline const std::string& Bond::currency() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.currency)
  return _internal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bond::set_currency(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.currency)
}
inline std::string* Bond::mutable_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.currency)
  return _s;
}
inline const std::string& Bond::_internal_currency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.currency_.Get();
}
inline void Bond::_internal_set_currency(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(value, GetArena());
}
inline std::string* Bond::_internal_mutable_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.currency_.Mutable( GetArena());
}
inline std::string* Bond::release_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.currency)
  return _impl_.currency_.Release();
}
inline void Bond::set_allocated_currency(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.currency_.IsDefault()) {
          _impl_.currency_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.currency)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
inline bool Bond::has_klong() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.klong_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Bond::_internal_klong() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.klong_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Bond::klong() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.klong)
  return _internal_klong();
}
inline void Bond::unsafe_arena_set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.klong_);
  }
  _impl_.klong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.klong)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::release_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.klong_;
  _impl_.klong_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::unsafe_arena_release_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.klong)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.klong_;
  _impl_.klong_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::_internal_mutable_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.klong_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.klong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.klong_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::mutable_klong() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_klong();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.klong)
  return _msg;
}
inline void Bond::set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.klong_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.klong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.klong)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
inline bool Bond::has_kshort() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kshort_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Bond::_internal_kshort() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.kshort_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Bond::kshort() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.kshort)
  return _internal_kshort();
}
inline void Bond::unsafe_arena_set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kshort_);
  }
  _impl_.kshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.kshort)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::release_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.kshort_;
  _impl_.kshort_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::unsafe_arena_release_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.kshort)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.kshort_;
  _impl_.kshort_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::_internal_mutable_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.kshort_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.kshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.kshort_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::mutable_kshort() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_kshort();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.kshort)
  return _msg;
}
inline void Bond::set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kshort_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.kshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.kshort)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
inline bool Bond::has_dlong() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dlong_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Bond::_internal_dlong() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dlong_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Bond::dlong() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.dlong)
  return _internal_dlong();
}
inline void Bond::unsafe_arena_set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_);
  }
  _impl_.dlong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.dlong)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::release_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dlong_;
  _impl_.dlong_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::unsafe_arena_release_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.dlong)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dlong_;
  _impl_.dlong_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::_internal_mutable_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.dlong_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dlong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dlong_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::mutable_dlong() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dlong();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.dlong)
  return _msg;
}
inline void Bond::set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.dlong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.dlong)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
inline bool Bond::has_dshort() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dshort_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Bond::_internal_dshort() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dshort_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Bond::dshort() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.dshort)
  return _internal_dshort();
}
inline void Bond::unsafe_arena_set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_);
  }
  _impl_.dshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.dshort)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::release_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dshort_;
  _impl_.dshort_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::unsafe_arena_release_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.dshort)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dshort_;
  _impl_.dshort_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::_internal_mutable_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.dshort_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dshort_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::mutable_dshort() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dshort();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.dshort)
  return _msg;
}
inline void Bond::set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.dshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.dshort)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
inline bool Bond::has_dlong_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dlong_min_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Bond::_internal_dlong_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dlong_min_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Bond::dlong_min() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.dlong_min)
  return _internal_dlong_min();
}
inline void Bond::unsafe_arena_set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_min_);
  }
  _impl_.dlong_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.dlong_min)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::release_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dlong_min_;
  _impl_.dlong_min_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::unsafe_arena_release_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.dlong_min)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dlong_min_;
  _impl_.dlong_min_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::_internal_mutable_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.dlong_min_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dlong_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dlong_min_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::mutable_dlong_min() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dlong_min();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.dlong_min)
  return _msg;
}
inline void Bond::set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_min_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.dlong_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.dlong_min)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
inline bool Bond::has_dshort_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dshort_min_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Bond::_internal_dshort_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dshort_min_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Bond::dshort_min() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.dshort_min)
  return _internal_dshort_min();
}
inline void Bond::unsafe_arena_set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_min_);
  }
  _impl_.dshort_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.dshort_min)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::release_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dshort_min_;
  _impl_.dshort_min_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::unsafe_arena_release_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.dshort_min)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dshort_min_;
  _impl_.dshort_min_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::_internal_mutable_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.dshort_min_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dshort_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dshort_min_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::mutable_dshort_min() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dshort_min();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.dshort_min)
  return _msg;
}
inline void Bond::set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_min_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.dshort_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.dshort_min)
}

// bool short_enabled_flag = 13;
inline void Bond::clear_short_enabled_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.short_enabled_flag_ = false;
}
inline bool Bond::short_enabled_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.short_enabled_flag)
  return _internal_short_enabled_flag();
}
inline void Bond::set_short_enabled_flag(bool value) {
  _internal_set_short_enabled_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.short_enabled_flag)
}
inline bool Bond::_internal_short_enabled_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.short_enabled_flag_;
}
inline void Bond::_internal_set_short_enabled_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.short_enabled_flag_ = value;
}

// string name = 15;
inline void Bond::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Bond::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bond::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.name)
}
inline std::string* Bond::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.name)
  return _s;
}
inline const std::string& Bond::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Bond::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Bond::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Bond::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.name)
  return _impl_.name_.Release();
}
inline void Bond::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.name)
}

// string exchange = 16;
inline void Bond::clear_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_.ClearToEmpty();
}
inline const std::string& Bond::exchange() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.exchange)
  return _internal_exchange();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bond::set_exchange(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.exchange)
}
inline std::string* Bond::mutable_exchange() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_exchange();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.exchange)
  return _s;
}
inline const std::string& Bond::_internal_exchange() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exchange_.Get();
}
inline void Bond::_internal_set_exchange(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_.Set(value, GetArena());
}
inline std::string* Bond::_internal_mutable_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.exchange_.Mutable( GetArena());
}
inline std::string* Bond::release_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.exchange)
  return _impl_.exchange_.Release();
}
inline void Bond::set_allocated_exchange(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_.IsDefault()) {
          _impl_.exchange_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.exchange)
}

// int32 coupon_quantity_per_year = 17;
inline void Bond::clear_coupon_quantity_per_year() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.coupon_quantity_per_year_ = 0;
}
inline ::int32_t Bond::coupon_quantity_per_year() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.coupon_quantity_per_year)
  return _internal_coupon_quantity_per_year();
}
inline void Bond::set_coupon_quantity_per_year(::int32_t value) {
  _internal_set_coupon_quantity_per_year(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.coupon_quantity_per_year)
}
inline ::int32_t Bond::_internal_coupon_quantity_per_year() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.coupon_quantity_per_year_;
}
inline void Bond::_internal_set_coupon_quantity_per_year(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.coupon_quantity_per_year_ = value;
}

// .google.protobuf.Timestamp maturity_date = 18;
inline bool Bond::has_maturity_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.maturity_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Bond::_internal_maturity_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.maturity_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Bond::maturity_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.maturity_date)
  return _internal_maturity_date();
}
inline void Bond::unsafe_arena_set_allocated_maturity_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.maturity_date_);
  }
  _impl_.maturity_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.maturity_date)
}
inline ::google::protobuf::Timestamp* Bond::release_maturity_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::google::protobuf::Timestamp* released = _impl_.maturity_date_;
  _impl_.maturity_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Bond::unsafe_arena_release_maturity_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.maturity_date)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::google::protobuf::Timestamp* temp = _impl_.maturity_date_;
  _impl_.maturity_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Bond::_internal_mutable_maturity_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.maturity_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.maturity_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.maturity_date_;
}
inline ::google::protobuf::Timestamp* Bond::mutable_maturity_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_maturity_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.maturity_date)
  return _msg;
}
inline void Bond::set_allocated_maturity_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.maturity_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.maturity_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.maturity_date)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 19;
inline bool Bond::has_nominal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nominal_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Bond::_internal_nominal() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.nominal_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Bond::nominal() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.nominal)
  return _internal_nominal();
}
inline void Bond::unsafe_arena_set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nominal_);
  }
  _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.nominal)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Bond::release_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.nominal_;
  _impl_.nominal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Bond::unsafe_arena_release_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.nominal)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.nominal_;
  _impl_.nominal_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Bond::_internal_mutable_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.nominal_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
    _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
  }
  return _impl_.nominal_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Bond::mutable_nominal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_nominal();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.nominal)
  return _msg;
}
inline void Bond::set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nominal_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.nominal)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_nominal = 20;
inline bool Bond::has_initial_nominal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.initial_nominal_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Bond::_internal_initial_nominal() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.initial_nominal_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Bond::initial_nominal() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.initial_nominal)
  return _internal_initial_nominal();
}
inline void Bond::unsafe_arena_set_allocated_initial_nominal(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_nominal_);
  }
  _impl_.initial_nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.initial_nominal)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Bond::release_initial_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.initial_nominal_;
  _impl_.initial_nominal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Bond::unsafe_arena_release_initial_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.initial_nominal)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_nominal_;
  _impl_.initial_nominal_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Bond::_internal_mutable_initial_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.initial_nominal_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
    _impl_.initial_nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
  }
  return _impl_.initial_nominal_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Bond::mutable_initial_nominal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_initial_nominal();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.initial_nominal)
  return _msg;
}
inline void Bond::set_allocated_initial_nominal(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_nominal_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.initial_nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.initial_nominal)
}

// .google.protobuf.Timestamp state_reg_date = 21;
inline bool Bond::has_state_reg_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_reg_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Bond::_internal_state_reg_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.state_reg_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Bond::state_reg_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.state_reg_date)
  return _internal_state_reg_date();
}
inline void Bond::unsafe_arena_set_allocated_state_reg_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_reg_date_);
  }
  _impl_.state_reg_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.state_reg_date)
}
inline ::google::protobuf::Timestamp* Bond::release_state_reg_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::google::protobuf::Timestamp* released = _impl_.state_reg_date_;
  _impl_.state_reg_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Bond::unsafe_arena_release_state_reg_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.state_reg_date)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::google::protobuf::Timestamp* temp = _impl_.state_reg_date_;
  _impl_.state_reg_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Bond::_internal_mutable_state_reg_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.state_reg_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.state_reg_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.state_reg_date_;
}
inline ::google::protobuf::Timestamp* Bond::mutable_state_reg_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_state_reg_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.state_reg_date)
  return _msg;
}
inline void Bond::set_allocated_state_reg_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_reg_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.state_reg_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.state_reg_date)
}

// .google.protobuf.Timestamp placement_date = 22;
inline bool Bond::has_placement_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.placement_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Bond::_internal_placement_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.placement_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Bond::placement_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.placement_date)
  return _internal_placement_date();
}
inline void Bond::unsafe_arena_set_allocated_placement_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.placement_date_);
  }
  _impl_.placement_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.placement_date)
}
inline ::google::protobuf::Timestamp* Bond::release_placement_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::google::protobuf::Timestamp* released = _impl_.placement_date_;
  _impl_.placement_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Bond::unsafe_arena_release_placement_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.placement_date)

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::google::protobuf::Timestamp* temp = _impl_.placement_date_;
  _impl_.placement_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Bond::_internal_mutable_placement_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.placement_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.placement_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.placement_date_;
}
inline ::google::protobuf::Timestamp* Bond::mutable_placement_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_placement_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.placement_date)
  return _msg;
}
inline void Bond::set_allocated_placement_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.placement_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }

  _impl_.placement_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.placement_date)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue placement_price = 23;
inline bool Bond::has_placement_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.placement_price_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Bond::_internal_placement_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.placement_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Bond::placement_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.placement_price)
  return _internal_placement_price();
}
inline void Bond::unsafe_arena_set_allocated_placement_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.placement_price_);
  }
  _impl_.placement_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.placement_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Bond::release_placement_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.placement_price_;
  _impl_.placement_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Bond::unsafe_arena_release_placement_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.placement_price)

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.placement_price_;
  _impl_.placement_price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Bond::_internal_mutable_placement_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.placement_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
    _impl_.placement_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
  }
  return _impl_.placement_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Bond::mutable_placement_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_placement_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.placement_price)
  return _msg;
}
inline void Bond::set_allocated_placement_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.placement_price_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }

  _impl_.placement_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.placement_price)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue aci_value = 24;
inline bool Bond::has_aci_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.aci_value_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Bond::_internal_aci_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.aci_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Bond::aci_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.aci_value)
  return _internal_aci_value();
}
inline void Bond::unsafe_arena_set_allocated_aci_value(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.aci_value_);
  }
  _impl_.aci_value_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.aci_value)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Bond::release_aci_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.aci_value_;
  _impl_.aci_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Bond::unsafe_arena_release_aci_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.aci_value)

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.aci_value_;
  _impl_.aci_value_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Bond::_internal_mutable_aci_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.aci_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
    _impl_.aci_value_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
  }
  return _impl_.aci_value_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Bond::mutable_aci_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_aci_value();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.aci_value)
  return _msg;
}
inline void Bond::set_allocated_aci_value(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.aci_value_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }

  _impl_.aci_value_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.aci_value)
}

// string country_of_risk = 25;
inline void Bond::clear_country_of_risk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_.ClearToEmpty();
}
inline const std::string& Bond::country_of_risk() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.country_of_risk)
  return _internal_country_of_risk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bond::set_country_of_risk(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.country_of_risk)
}
inline std::string* Bond::mutable_country_of_risk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_country_of_risk();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.country_of_risk)
  return _s;
}
inline const std::string& Bond::_internal_country_of_risk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.country_of_risk_.Get();
}
inline void Bond::_internal_set_country_of_risk(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_.Set(value, GetArena());
}
inline std::string* Bond::_internal_mutable_country_of_risk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.country_of_risk_.Mutable( GetArena());
}
inline std::string* Bond::release_country_of_risk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.country_of_risk)
  return _impl_.country_of_risk_.Release();
}
inline void Bond::set_allocated_country_of_risk(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.country_of_risk_.IsDefault()) {
          _impl_.country_of_risk_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.country_of_risk)
}

// string country_of_risk_name = 26;
inline void Bond::clear_country_of_risk_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_name_.ClearToEmpty();
}
inline const std::string& Bond::country_of_risk_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.country_of_risk_name)
  return _internal_country_of_risk_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bond::set_country_of_risk_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.country_of_risk_name)
}
inline std::string* Bond::mutable_country_of_risk_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_country_of_risk_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.country_of_risk_name)
  return _s;
}
inline const std::string& Bond::_internal_country_of_risk_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.country_of_risk_name_.Get();
}
inline void Bond::_internal_set_country_of_risk_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_name_.Set(value, GetArena());
}
inline std::string* Bond::_internal_mutable_country_of_risk_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.country_of_risk_name_.Mutable( GetArena());
}
inline std::string* Bond::release_country_of_risk_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.country_of_risk_name)
  return _impl_.country_of_risk_name_.Release();
}
inline void Bond::set_allocated_country_of_risk_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.country_of_risk_name_.IsDefault()) {
          _impl_.country_of_risk_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.country_of_risk_name)
}

// string sector = 27;
inline void Bond::clear_sector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sector_.ClearToEmpty();
}
inline const std::string& Bond::sector() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.sector)
  return _internal_sector();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bond::set_sector(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sector_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.sector)
}
inline std::string* Bond::mutable_sector() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sector();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.sector)
  return _s;
}
inline const std::string& Bond::_internal_sector() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sector_.Get();
}
inline void Bond::_internal_set_sector(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sector_.Set(value, GetArena());
}
inline std::string* Bond::_internal_mutable_sector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.sector_.Mutable( GetArena());
}
inline std::string* Bond::release_sector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.sector)
  return _impl_.sector_.Release();
}
inline void Bond::set_allocated_sector(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sector_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sector_.IsDefault()) {
          _impl_.sector_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.sector)
}

// string issue_kind = 28;
inline void Bond::clear_issue_kind() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.issue_kind_.ClearToEmpty();
}
inline const std::string& Bond::issue_kind() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.issue_kind)
  return _internal_issue_kind();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bond::set_issue_kind(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.issue_kind_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.issue_kind)
}
inline std::string* Bond::mutable_issue_kind() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_issue_kind();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.issue_kind)
  return _s;
}
inline const std::string& Bond::_internal_issue_kind() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.issue_kind_.Get();
}
inline void Bond::_internal_set_issue_kind(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.issue_kind_.Set(value, GetArena());
}
inline std::string* Bond::_internal_mutable_issue_kind() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.issue_kind_.Mutable( GetArena());
}
inline std::string* Bond::release_issue_kind() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.issue_kind)
  return _impl_.issue_kind_.Release();
}
inline void Bond::set_allocated_issue_kind(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.issue_kind_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.issue_kind_.IsDefault()) {
          _impl_.issue_kind_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.issue_kind)
}

// int64 issue_size = 29;
inline void Bond::clear_issue_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.issue_size_ = ::int64_t{0};
}
inline ::int64_t Bond::issue_size() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.issue_size)
  return _internal_issue_size();
}
inline void Bond::set_issue_size(::int64_t value) {
  _internal_set_issue_size(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.issue_size)
}
inline ::int64_t Bond::_internal_issue_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.issue_size_;
}
inline void Bond::_internal_set_issue_size(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.issue_size_ = value;
}

// int64 issue_size_plan = 30;
inline void Bond::clear_issue_size_plan() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.issue_size_plan_ = ::int64_t{0};
}
inline ::int64_t Bond::issue_size_plan() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.issue_size_plan)
  return _internal_issue_size_plan();
}
inline void Bond::set_issue_size_plan(::int64_t value) {
  _internal_set_issue_size_plan(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.issue_size_plan)
}
inline ::int64_t Bond::_internal_issue_size_plan() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.issue_size_plan_;
}
inline void Bond::_internal_set_issue_size_plan(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.issue_size_plan_ = value;
}

// .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 31;
inline void Bond::clear_trading_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trading_status_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus Bond::trading_status() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.trading_status)
  return _internal_trading_status();
}
inline void Bond::set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value) {
  _internal_set_trading_status(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.trading_status)
}
inline ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus Bond::_internal_trading_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus>(_impl_.trading_status_);
}
inline void Bond::_internal_set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trading_status_ = value;
}

// bool otc_flag = 32;
inline void Bond::clear_otc_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.otc_flag_ = false;
}
inline bool Bond::otc_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.otc_flag)
  return _internal_otc_flag();
}
inline void Bond::set_otc_flag(bool value) {
  _internal_set_otc_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.otc_flag)
}
inline bool Bond::_internal_otc_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.otc_flag_;
}
inline void Bond::_internal_set_otc_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.otc_flag_ = value;
}

// bool buy_available_flag = 33;
inline void Bond::clear_buy_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.buy_available_flag_ = false;
}
inline bool Bond::buy_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.buy_available_flag)
  return _internal_buy_available_flag();
}
inline void Bond::set_buy_available_flag(bool value) {
  _internal_set_buy_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.buy_available_flag)
}
inline bool Bond::_internal_buy_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.buy_available_flag_;
}
inline void Bond::_internal_set_buy_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.buy_available_flag_ = value;
}

// bool sell_available_flag = 34;
inline void Bond::clear_sell_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sell_available_flag_ = false;
}
inline bool Bond::sell_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.sell_available_flag)
  return _internal_sell_available_flag();
}
inline void Bond::set_sell_available_flag(bool value) {
  _internal_set_sell_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.sell_available_flag)
}
inline bool Bond::_internal_sell_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sell_available_flag_;
}
inline void Bond::_internal_set_sell_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sell_available_flag_ = value;
}

// bool floating_coupon_flag = 35;
inline void Bond::clear_floating_coupon_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.floating_coupon_flag_ = false;
}
inline bool Bond::floating_coupon_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.floating_coupon_flag)
  return _internal_floating_coupon_flag();
}
inline void Bond::set_floating_coupon_flag(bool value) {
  _internal_set_floating_coupon_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.floating_coupon_flag)
}
inline bool Bond::_internal_floating_coupon_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.floating_coupon_flag_;
}
inline void Bond::_internal_set_floating_coupon_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.floating_coupon_flag_ = value;
}

// bool perpetual_flag = 36;
inline void Bond::clear_perpetual_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.perpetual_flag_ = false;
}
inline bool Bond::perpetual_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.perpetual_flag)
  return _internal_perpetual_flag();
}
inline void Bond::set_perpetual_flag(bool value) {
  _internal_set_perpetual_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.perpetual_flag)
}
inline bool Bond::_internal_perpetual_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.perpetual_flag_;
}
inline void Bond::_internal_set_perpetual_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.perpetual_flag_ = value;
}

// bool amortization_flag = 37;
inline void Bond::clear_amortization_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.amortization_flag_ = false;
}
inline bool Bond::amortization_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.amortization_flag)
  return _internal_amortization_flag();
}
inline void Bond::set_amortization_flag(bool value) {
  _internal_set_amortization_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.amortization_flag)
}
inline bool Bond::_internal_amortization_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.amortization_flag_;
}
inline void Bond::_internal_set_amortization_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.amortization_flag_ = value;
}

// .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 38;
inline bool Bond::has_min_price_increment() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.min_price_increment_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Bond::_internal_min_price_increment() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.min_price_increment_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Bond::min_price_increment() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.min_price_increment)
  return _internal_min_price_increment();
}
inline void Bond::unsafe_arena_set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_price_increment_);
  }
  _impl_.min_price_increment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.min_price_increment)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::release_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00002000u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.min_price_increment_;
  _impl_.min_price_increment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::unsafe_arena_release_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.min_price_increment)

  _impl_._has_bits_[0] &= ~0x00002000u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.min_price_increment_;
  _impl_.min_price_increment_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::_internal_mutable_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.min_price_increment_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.min_price_increment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.min_price_increment_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Bond::mutable_min_price_increment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_min_price_increment();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.min_price_increment)
  return _msg;
}
inline void Bond::set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_price_increment_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }

  _impl_.min_price_increment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.min_price_increment)
}

// bool api_trade_available_flag = 39;
inline void Bond::clear_api_trade_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.api_trade_available_flag_ = false;
}
inline bool Bond::api_trade_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.api_trade_available_flag)
  return _internal_api_trade_available_flag();
}
inline void Bond::set_api_trade_available_flag(bool value) {
  _internal_set_api_trade_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.api_trade_available_flag)
}
inline bool Bond::_internal_api_trade_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.api_trade_available_flag_;
}
inline void Bond::_internal_set_api_trade_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.api_trade_available_flag_ = value;
}

// string uid = 40;
inline void Bond::clear_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& Bond::uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.uid)
  return _internal_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bond::set_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.uid)
}
inline std::string* Bond::mutable_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.uid)
  return _s;
}
inline const std::string& Bond::_internal_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uid_.Get();
}
inline void Bond::_internal_set_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(value, GetArena());
}
inline std::string* Bond::_internal_mutable_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.uid_.Mutable( GetArena());
}
inline std::string* Bond::release_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.uid)
  return _impl_.uid_.Release();
}
inline void Bond::set_allocated_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uid_.IsDefault()) {
          _impl_.uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.uid)
}

// .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 41;
inline void Bond::clear_real_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.real_exchange_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::RealExchange Bond::real_exchange() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.real_exchange)
  return _internal_real_exchange();
}
inline void Bond::set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value) {
  _internal_set_real_exchange(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.real_exchange)
}
inline ::tinkoff::public_::invest::api::contract::v1::RealExchange Bond::_internal_real_exchange() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::RealExchange>(_impl_.real_exchange_);
}
inline void Bond::_internal_set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.real_exchange_ = value;
}

// string position_uid = 42;
inline void Bond::clear_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.position_uid_.ClearToEmpty();
}
inline const std::string& Bond::position_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.position_uid)
  return _internal_position_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bond::set_position_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.position_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.position_uid)
}
inline std::string* Bond::mutable_position_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_position_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.position_uid)
  return _s;
}
inline const std::string& Bond::_internal_position_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.position_uid_.Get();
}
inline void Bond::_internal_set_position_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.position_uid_.Set(value, GetArena());
}
inline std::string* Bond::_internal_mutable_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.position_uid_.Mutable( GetArena());
}
inline std::string* Bond::release_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.position_uid)
  return _impl_.position_uid_.Release();
}
inline void Bond::set_allocated_position_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.position_uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.position_uid_.IsDefault()) {
          _impl_.position_uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.position_uid)
}

// string asset_uid = 43;
inline void Bond::clear_asset_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.asset_uid_.ClearToEmpty();
}
inline const std::string& Bond::asset_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.asset_uid)
  return _internal_asset_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bond::set_asset_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.asset_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.asset_uid)
}
inline std::string* Bond::mutable_asset_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_asset_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.asset_uid)
  return _s;
}
inline const std::string& Bond::_internal_asset_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.asset_uid_.Get();
}
inline void Bond::_internal_set_asset_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.asset_uid_.Set(value, GetArena());
}
inline std::string* Bond::_internal_mutable_asset_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.asset_uid_.Mutable( GetArena());
}
inline std::string* Bond::release_asset_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.asset_uid)
  return _impl_.asset_uid_.Release();
}
inline void Bond::set_allocated_asset_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.asset_uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.asset_uid_.IsDefault()) {
          _impl_.asset_uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.asset_uid)
}

// bool for_iis_flag = 51;
inline void Bond::clear_for_iis_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.for_iis_flag_ = false;
}
inline bool Bond::for_iis_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.for_iis_flag)
  return _internal_for_iis_flag();
}
inline void Bond::set_for_iis_flag(bool value) {
  _internal_set_for_iis_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.for_iis_flag)
}
inline bool Bond::_internal_for_iis_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.for_iis_flag_;
}
inline void Bond::_internal_set_for_iis_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.for_iis_flag_ = value;
}

// bool for_qual_investor_flag = 52;
inline void Bond::clear_for_qual_investor_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.for_qual_investor_flag_ = false;
}
inline bool Bond::for_qual_investor_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.for_qual_investor_flag)
  return _internal_for_qual_investor_flag();
}
inline void Bond::set_for_qual_investor_flag(bool value) {
  _internal_set_for_qual_investor_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.for_qual_investor_flag)
}
inline bool Bond::_internal_for_qual_investor_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.for_qual_investor_flag_;
}
inline void Bond::_internal_set_for_qual_investor_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.for_qual_investor_flag_ = value;
}

// bool weekend_flag = 53;
inline void Bond::clear_weekend_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.weekend_flag_ = false;
}
inline bool Bond::weekend_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.weekend_flag)
  return _internal_weekend_flag();
}
inline void Bond::set_weekend_flag(bool value) {
  _internal_set_weekend_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.weekend_flag)
}
inline bool Bond::_internal_weekend_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.weekend_flag_;
}
inline void Bond::_internal_set_weekend_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.weekend_flag_ = value;
}

// bool blocked_tca_flag = 54;
inline void Bond::clear_blocked_tca_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.blocked_tca_flag_ = false;
}
inline bool Bond::blocked_tca_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.blocked_tca_flag)
  return _internal_blocked_tca_flag();
}
inline void Bond::set_blocked_tca_flag(bool value) {
  _internal_set_blocked_tca_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.blocked_tca_flag)
}
inline bool Bond::_internal_blocked_tca_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.blocked_tca_flag_;
}
inline void Bond::_internal_set_blocked_tca_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.blocked_tca_flag_ = value;
}

// bool subordinated_flag = 55;
inline void Bond::clear_subordinated_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subordinated_flag_ = false;
}
inline bool Bond::subordinated_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.subordinated_flag)
  return _internal_subordinated_flag();
}
inline void Bond::set_subordinated_flag(bool value) {
  _internal_set_subordinated_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.subordinated_flag)
}
inline bool Bond::_internal_subordinated_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.subordinated_flag_;
}
inline void Bond::_internal_set_subordinated_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.subordinated_flag_ = value;
}

// bool liquidity_flag = 56;
inline void Bond::clear_liquidity_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.liquidity_flag_ = false;
}
inline bool Bond::liquidity_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.liquidity_flag)
  return _internal_liquidity_flag();
}
inline void Bond::set_liquidity_flag(bool value) {
  _internal_set_liquidity_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.liquidity_flag)
}
inline bool Bond::_internal_liquidity_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.liquidity_flag_;
}
inline void Bond::_internal_set_liquidity_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.liquidity_flag_ = value;
}

// .google.protobuf.Timestamp first_1min_candle_date = 61;
inline bool Bond::has_first_1min_candle_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.first_1min_candle_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Bond::_internal_first_1min_candle_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.first_1min_candle_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Bond::first_1min_candle_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.first_1min_candle_date)
  return _internal_first_1min_candle_date();
}
inline void Bond::unsafe_arena_set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1min_candle_date_);
  }
  _impl_.first_1min_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.first_1min_candle_date)
}
inline ::google::protobuf::Timestamp* Bond::release_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00004000u;
  ::google::protobuf::Timestamp* released = _impl_.first_1min_candle_date_;
  _impl_.first_1min_candle_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Bond::unsafe_arena_release_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.first_1min_candle_date)

  _impl_._has_bits_[0] &= ~0x00004000u;
  ::google::protobuf::Timestamp* temp = _impl_.first_1min_candle_date_;
  _impl_.first_1min_candle_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Bond::_internal_mutable_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00004000u;
  if (_impl_.first_1min_candle_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.first_1min_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.first_1min_candle_date_;
}
inline ::google::protobuf::Timestamp* Bond::mutable_first_1min_candle_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_first_1min_candle_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.first_1min_candle_date)
  return _msg;
}
inline void Bond::set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1min_candle_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }

  _impl_.first_1min_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.first_1min_candle_date)
}

// .google.protobuf.Timestamp first_1day_candle_date = 62;
inline bool Bond::has_first_1day_candle_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.first_1day_candle_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Bond::_internal_first_1day_candle_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.first_1day_candle_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Bond::first_1day_candle_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.first_1day_candle_date)
  return _internal_first_1day_candle_date();
}
inline void Bond::unsafe_arena_set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1day_candle_date_);
  }
  _impl_.first_1day_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.first_1day_candle_date)
}
inline ::google::protobuf::Timestamp* Bond::release_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00008000u;
  ::google::protobuf::Timestamp* released = _impl_.first_1day_candle_date_;
  _impl_.first_1day_candle_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Bond::unsafe_arena_release_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.first_1day_candle_date)

  _impl_._has_bits_[0] &= ~0x00008000u;
  ::google::protobuf::Timestamp* temp = _impl_.first_1day_candle_date_;
  _impl_.first_1day_candle_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Bond::_internal_mutable_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00008000u;
  if (_impl_.first_1day_candle_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.first_1day_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.first_1day_candle_date_;
}
inline ::google::protobuf::Timestamp* Bond::mutable_first_1day_candle_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_first_1day_candle_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.first_1day_candle_date)
  return _msg;
}
inline void Bond::set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1day_candle_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }

  _impl_.first_1day_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.first_1day_candle_date)
}

// .tinkoff.public_.invest.api.contract.v1.RiskLevel risk_level = 63;
inline void Bond::clear_risk_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.risk_level_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::RiskLevel Bond::risk_level() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.risk_level)
  return _internal_risk_level();
}
inline void Bond::set_risk_level(::tinkoff::public_::invest::api::contract::v1::RiskLevel value) {
  _internal_set_risk_level(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Bond.risk_level)
}
inline ::tinkoff::public_::invest::api::contract::v1::RiskLevel Bond::_internal_risk_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::RiskLevel>(_impl_.risk_level_);
}
inline void Bond::_internal_set_risk_level(::tinkoff::public_::invest::api::contract::v1::RiskLevel value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.risk_level_ = value;
}

// .tinkoff.public_.invest.api.contract.v1.BrandData brand = 64;
inline bool Bond::has_brand() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.brand_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::BrandData& Bond::_internal_brand() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::BrandData* p = _impl_.brand_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::BrandData&>(::tinkoff::public_::invest::api::contract::v1::_BrandData_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::BrandData& Bond::brand() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Bond.brand)
  return _internal_brand();
}
inline void Bond::unsafe_arena_set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.brand_);
  }
  _impl_.brand_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::BrandData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.brand)
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Bond::release_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00010000u;
  ::tinkoff::public_::invest::api::contract::v1::BrandData* released = _impl_.brand_;
  _impl_.brand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Bond::unsafe_arena_release_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Bond.brand)

  _impl_._has_bits_[0] &= ~0x00010000u;
  ::tinkoff::public_::invest::api::contract::v1::BrandData* temp = _impl_.brand_;
  _impl_.brand_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Bond::_internal_mutable_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00010000u;
  if (_impl_.brand_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::BrandData>(GetArena());
    _impl_.brand_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::BrandData*>(p);
  }
  return _impl_.brand_;
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Bond::mutable_brand() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::BrandData* _msg = _internal_mutable_brand();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Bond.brand)
  return _msg;
}
inline void Bond::set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.brand_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }

  _impl_.brand_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::BrandData*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Bond.brand)
}

// -------------------------------------------------------------------

// Currency

// string figi = 1;
inline void Currency::clear_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& Currency::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Currency::set_figi(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Currency.figi)
}
inline std::string* Currency::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Currency.figi)
  return _s;
}
inline const std::string& Currency::_internal_figi() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.figi_.Get();
}
inline void Currency::_internal_set_figi(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* Currency::_internal_mutable_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* Currency::release_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Currency.figi)
  return _impl_.figi_.Release();
}
inline void Currency::set_allocated_figi(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.figi_.IsDefault()) {
          _impl_.figi_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.figi)
}

// string ticker = 2;
inline void Currency::clear_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.ClearToEmpty();
}
inline const std::string& Currency::ticker() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.ticker)
  return _internal_ticker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Currency::set_ticker(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Currency.ticker)
}
inline std::string* Currency::mutable_ticker() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ticker();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Currency.ticker)
  return _s;
}
inline const std::string& Currency::_internal_ticker() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ticker_.Get();
}
inline void Currency::_internal_set_ticker(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(value, GetArena());
}
inline std::string* Currency::_internal_mutable_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ticker_.Mutable( GetArena());
}
inline std::string* Currency::release_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Currency.ticker)
  return _impl_.ticker_.Release();
}
inline void Currency::set_allocated_ticker(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ticker_.IsDefault()) {
          _impl_.ticker_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.ticker)
}

// string class_code = 3;
inline void Currency::clear_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_code_.ClearToEmpty();
}
inline const std::string& Currency::class_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.class_code)
  return _internal_class_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Currency::set_class_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Currency.class_code)
}
inline std::string* Currency::mutable_class_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_class_code();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Currency.class_code)
  return _s;
}
inline const std::string& Currency::_internal_class_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.class_code_.Get();
}
inline void Currency::_internal_set_class_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class_code_.Set(value, GetArena());
}
inline std::string* Currency::_internal_mutable_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.class_code_.Mutable( GetArena());
}
inline std::string* Currency::release_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Currency.class_code)
  return _impl_.class_code_.Release();
}
inline void Currency::set_allocated_class_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.class_code_.IsDefault()) {
          _impl_.class_code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.class_code)
}

// string isin = 4;
inline void Currency::clear_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.isin_.ClearToEmpty();
}
inline const std::string& Currency::isin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.isin)
  return _internal_isin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Currency::set_isin(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.isin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Currency.isin)
}
inline std::string* Currency::mutable_isin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_isin();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Currency.isin)
  return _s;
}
inline const std::string& Currency::_internal_isin() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.isin_.Get();
}
inline void Currency::_internal_set_isin(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.isin_.Set(value, GetArena());
}
inline std::string* Currency::_internal_mutable_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.isin_.Mutable( GetArena());
}
inline std::string* Currency::release_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Currency.isin)
  return _impl_.isin_.Release();
}
inline void Currency::set_allocated_isin(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.isin_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.isin_.IsDefault()) {
          _impl_.isin_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.isin)
}

// int32 lot = 5;
inline void Currency::clear_lot() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lot_ = 0;
}
inline ::int32_t Currency::lot() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.lot)
  return _internal_lot();
}
inline void Currency::set_lot(::int32_t value) {
  _internal_set_lot(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Currency.lot)
}
inline ::int32_t Currency::_internal_lot() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lot_;
}
inline void Currency::_internal_set_lot(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lot_ = value;
}

// string currency = 6;
inline void Currency::clear_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.ClearToEmpty();
}
inline const std::string& Currency::currency() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.currency)
  return _internal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Currency::set_currency(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Currency.currency)
}
inline std::string* Currency::mutable_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Currency.currency)
  return _s;
}
inline const std::string& Currency::_internal_currency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.currency_.Get();
}
inline void Currency::_internal_set_currency(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(value, GetArena());
}
inline std::string* Currency::_internal_mutable_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.currency_.Mutable( GetArena());
}
inline std::string* Currency::release_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Currency.currency)
  return _impl_.currency_.Release();
}
inline void Currency::set_allocated_currency(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.currency_.IsDefault()) {
          _impl_.currency_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.currency)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
inline bool Currency::has_klong() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.klong_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Currency::_internal_klong() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.klong_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Currency::klong() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.klong)
  return _internal_klong();
}
inline void Currency::unsafe_arena_set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.klong_);
  }
  _impl_.klong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.klong)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::release_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.klong_;
  _impl_.klong_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::unsafe_arena_release_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Currency.klong)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.klong_;
  _impl_.klong_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::_internal_mutable_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.klong_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.klong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.klong_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::mutable_klong() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_klong();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Currency.klong)
  return _msg;
}
inline void Currency::set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.klong_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.klong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.klong)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
inline bool Currency::has_kshort() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kshort_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Currency::_internal_kshort() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.kshort_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Currency::kshort() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.kshort)
  return _internal_kshort();
}
inline void Currency::unsafe_arena_set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kshort_);
  }
  _impl_.kshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.kshort)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::release_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.kshort_;
  _impl_.kshort_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::unsafe_arena_release_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Currency.kshort)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.kshort_;
  _impl_.kshort_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::_internal_mutable_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.kshort_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.kshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.kshort_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::mutable_kshort() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_kshort();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Currency.kshort)
  return _msg;
}
inline void Currency::set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kshort_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.kshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.kshort)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
inline bool Currency::has_dlong() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dlong_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Currency::_internal_dlong() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dlong_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Currency::dlong() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.dlong)
  return _internal_dlong();
}
inline void Currency::unsafe_arena_set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_);
  }
  _impl_.dlong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.dlong)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::release_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dlong_;
  _impl_.dlong_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::unsafe_arena_release_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Currency.dlong)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dlong_;
  _impl_.dlong_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::_internal_mutable_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.dlong_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dlong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dlong_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::mutable_dlong() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dlong();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Currency.dlong)
  return _msg;
}
inline void Currency::set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.dlong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.dlong)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
inline bool Currency::has_dshort() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dshort_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Currency::_internal_dshort() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dshort_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Currency::dshort() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.dshort)
  return _internal_dshort();
}
inline void Currency::unsafe_arena_set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_);
  }
  _impl_.dshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.dshort)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::release_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dshort_;
  _impl_.dshort_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::unsafe_arena_release_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Currency.dshort)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dshort_;
  _impl_.dshort_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::_internal_mutable_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.dshort_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dshort_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::mutable_dshort() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dshort();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Currency.dshort)
  return _msg;
}
inline void Currency::set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.dshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.dshort)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
inline bool Currency::has_dlong_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dlong_min_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Currency::_internal_dlong_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dlong_min_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Currency::dlong_min() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.dlong_min)
  return _internal_dlong_min();
}
inline void Currency::unsafe_arena_set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_min_);
  }
  _impl_.dlong_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.dlong_min)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::release_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dlong_min_;
  _impl_.dlong_min_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::unsafe_arena_release_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Currency.dlong_min)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dlong_min_;
  _impl_.dlong_min_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::_internal_mutable_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.dlong_min_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dlong_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dlong_min_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::mutable_dlong_min() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dlong_min();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Currency.dlong_min)
  return _msg;
}
inline void Currency::set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_min_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.dlong_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.dlong_min)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
inline bool Currency::has_dshort_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dshort_min_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Currency::_internal_dshort_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dshort_min_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Currency::dshort_min() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.dshort_min)
  return _internal_dshort_min();
}
inline void Currency::unsafe_arena_set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_min_);
  }
  _impl_.dshort_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.dshort_min)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::release_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dshort_min_;
  _impl_.dshort_min_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::unsafe_arena_release_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Currency.dshort_min)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dshort_min_;
  _impl_.dshort_min_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::_internal_mutable_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.dshort_min_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dshort_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dshort_min_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::mutable_dshort_min() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dshort_min();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Currency.dshort_min)
  return _msg;
}
inline void Currency::set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_min_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.dshort_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.dshort_min)
}

// bool short_enabled_flag = 13;
inline void Currency::clear_short_enabled_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.short_enabled_flag_ = false;
}
inline bool Currency::short_enabled_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.short_enabled_flag)
  return _internal_short_enabled_flag();
}
inline void Currency::set_short_enabled_flag(bool value) {
  _internal_set_short_enabled_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Currency.short_enabled_flag)
}
inline bool Currency::_internal_short_enabled_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.short_enabled_flag_;
}
inline void Currency::_internal_set_short_enabled_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.short_enabled_flag_ = value;
}

// string name = 15;
inline void Currency::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Currency::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Currency::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Currency.name)
}
inline std::string* Currency::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Currency.name)
  return _s;
}
inline const std::string& Currency::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Currency::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Currency::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Currency::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Currency.name)
  return _impl_.name_.Release();
}
inline void Currency::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.name)
}

// string exchange = 16;
inline void Currency::clear_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_.ClearToEmpty();
}
inline const std::string& Currency::exchange() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.exchange)
  return _internal_exchange();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Currency::set_exchange(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Currency.exchange)
}
inline std::string* Currency::mutable_exchange() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_exchange();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Currency.exchange)
  return _s;
}
inline const std::string& Currency::_internal_exchange() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exchange_.Get();
}
inline void Currency::_internal_set_exchange(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_.Set(value, GetArena());
}
inline std::string* Currency::_internal_mutable_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.exchange_.Mutable( GetArena());
}
inline std::string* Currency::release_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Currency.exchange)
  return _impl_.exchange_.Release();
}
inline void Currency::set_allocated_exchange(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_.IsDefault()) {
          _impl_.exchange_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.exchange)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 17;
inline bool Currency::has_nominal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nominal_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Currency::_internal_nominal() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.nominal_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Currency::nominal() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.nominal)
  return _internal_nominal();
}
inline void Currency::unsafe_arena_set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nominal_);
  }
  _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.nominal)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Currency::release_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.nominal_;
  _impl_.nominal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Currency::unsafe_arena_release_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Currency.nominal)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.nominal_;
  _impl_.nominal_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Currency::_internal_mutable_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.nominal_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
    _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
  }
  return _impl_.nominal_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Currency::mutable_nominal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_nominal();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Currency.nominal)
  return _msg;
}
inline void Currency::set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nominal_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.nominal)
}

// string country_of_risk = 18;
inline void Currency::clear_country_of_risk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_.ClearToEmpty();
}
inline const std::string& Currency::country_of_risk() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.country_of_risk)
  return _internal_country_of_risk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Currency::set_country_of_risk(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Currency.country_of_risk)
}
inline std::string* Currency::mutable_country_of_risk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_country_of_risk();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Currency.country_of_risk)
  return _s;
}
inline const std::string& Currency::_internal_country_of_risk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.country_of_risk_.Get();
}
inline void Currency::_internal_set_country_of_risk(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_.Set(value, GetArena());
}
inline std::string* Currency::_internal_mutable_country_of_risk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.country_of_risk_.Mutable( GetArena());
}
inline std::string* Currency::release_country_of_risk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Currency.country_of_risk)
  return _impl_.country_of_risk_.Release();
}
inline void Currency::set_allocated_country_of_risk(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.country_of_risk_.IsDefault()) {
          _impl_.country_of_risk_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.country_of_risk)
}

// string country_of_risk_name = 19;
inline void Currency::clear_country_of_risk_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_name_.ClearToEmpty();
}
inline const std::string& Currency::country_of_risk_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.country_of_risk_name)
  return _internal_country_of_risk_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Currency::set_country_of_risk_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Currency.country_of_risk_name)
}
inline std::string* Currency::mutable_country_of_risk_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_country_of_risk_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Currency.country_of_risk_name)
  return _s;
}
inline const std::string& Currency::_internal_country_of_risk_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.country_of_risk_name_.Get();
}
inline void Currency::_internal_set_country_of_risk_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_name_.Set(value, GetArena());
}
inline std::string* Currency::_internal_mutable_country_of_risk_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.country_of_risk_name_.Mutable( GetArena());
}
inline std::string* Currency::release_country_of_risk_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Currency.country_of_risk_name)
  return _impl_.country_of_risk_name_.Release();
}
inline void Currency::set_allocated_country_of_risk_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.country_of_risk_name_.IsDefault()) {
          _impl_.country_of_risk_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.country_of_risk_name)
}

// .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 20;
inline void Currency::clear_trading_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trading_status_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus Currency::trading_status() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.trading_status)
  return _internal_trading_status();
}
inline void Currency::set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value) {
  _internal_set_trading_status(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Currency.trading_status)
}
inline ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus Currency::_internal_trading_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus>(_impl_.trading_status_);
}
inline void Currency::_internal_set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trading_status_ = value;
}

// bool otc_flag = 21;
inline void Currency::clear_otc_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.otc_flag_ = false;
}
inline bool Currency::otc_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.otc_flag)
  return _internal_otc_flag();
}
inline void Currency::set_otc_flag(bool value) {
  _internal_set_otc_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Currency.otc_flag)
}
inline bool Currency::_internal_otc_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.otc_flag_;
}
inline void Currency::_internal_set_otc_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.otc_flag_ = value;
}

// bool buy_available_flag = 22;
inline void Currency::clear_buy_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.buy_available_flag_ = false;
}
inline bool Currency::buy_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.buy_available_flag)
  return _internal_buy_available_flag();
}
inline void Currency::set_buy_available_flag(bool value) {
  _internal_set_buy_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Currency.buy_available_flag)
}
inline bool Currency::_internal_buy_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.buy_available_flag_;
}
inline void Currency::_internal_set_buy_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.buy_available_flag_ = value;
}

// bool sell_available_flag = 23;
inline void Currency::clear_sell_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sell_available_flag_ = false;
}
inline bool Currency::sell_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.sell_available_flag)
  return _internal_sell_available_flag();
}
inline void Currency::set_sell_available_flag(bool value) {
  _internal_set_sell_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Currency.sell_available_flag)
}
inline bool Currency::_internal_sell_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sell_available_flag_;
}
inline void Currency::_internal_set_sell_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sell_available_flag_ = value;
}

// string iso_currency_name = 24;
inline void Currency::clear_iso_currency_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.iso_currency_name_.ClearToEmpty();
}
inline const std::string& Currency::iso_currency_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.iso_currency_name)
  return _internal_iso_currency_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Currency::set_iso_currency_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.iso_currency_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Currency.iso_currency_name)
}
inline std::string* Currency::mutable_iso_currency_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_iso_currency_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Currency.iso_currency_name)
  return _s;
}
inline const std::string& Currency::_internal_iso_currency_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.iso_currency_name_.Get();
}
inline void Currency::_internal_set_iso_currency_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.iso_currency_name_.Set(value, GetArena());
}
inline std::string* Currency::_internal_mutable_iso_currency_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.iso_currency_name_.Mutable( GetArena());
}
inline std::string* Currency::release_iso_currency_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Currency.iso_currency_name)
  return _impl_.iso_currency_name_.Release();
}
inline void Currency::set_allocated_iso_currency_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.iso_currency_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.iso_currency_name_.IsDefault()) {
          _impl_.iso_currency_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.iso_currency_name)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 25;
inline bool Currency::has_min_price_increment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.min_price_increment_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Currency::_internal_min_price_increment() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.min_price_increment_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Currency::min_price_increment() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.min_price_increment)
  return _internal_min_price_increment();
}
inline void Currency::unsafe_arena_set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_price_increment_);
  }
  _impl_.min_price_increment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.min_price_increment)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::release_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.min_price_increment_;
  _impl_.min_price_increment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::unsafe_arena_release_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Currency.min_price_increment)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.min_price_increment_;
  _impl_.min_price_increment_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::_internal_mutable_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.min_price_increment_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.min_price_increment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.min_price_increment_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Currency::mutable_min_price_increment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_min_price_increment();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Currency.min_price_increment)
  return _msg;
}
inline void Currency::set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_price_increment_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.min_price_increment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.min_price_increment)
}

// bool api_trade_available_flag = 26;
inline void Currency::clear_api_trade_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.api_trade_available_flag_ = false;
}
inline bool Currency::api_trade_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.api_trade_available_flag)
  return _internal_api_trade_available_flag();
}
inline void Currency::set_api_trade_available_flag(bool value) {
  _internal_set_api_trade_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Currency.api_trade_available_flag)
}
inline bool Currency::_internal_api_trade_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.api_trade_available_flag_;
}
inline void Currency::_internal_set_api_trade_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.api_trade_available_flag_ = value;
}

// string uid = 27;
inline void Currency::clear_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& Currency::uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.uid)
  return _internal_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Currency::set_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Currency.uid)
}
inline std::string* Currency::mutable_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Currency.uid)
  return _s;
}
inline const std::string& Currency::_internal_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uid_.Get();
}
inline void Currency::_internal_set_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(value, GetArena());
}
inline std::string* Currency::_internal_mutable_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.uid_.Mutable( GetArena());
}
inline std::string* Currency::release_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Currency.uid)
  return _impl_.uid_.Release();
}
inline void Currency::set_allocated_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uid_.IsDefault()) {
          _impl_.uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.uid)
}

// .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 28;
inline void Currency::clear_real_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.real_exchange_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::RealExchange Currency::real_exchange() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.real_exchange)
  return _internal_real_exchange();
}
inline void Currency::set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value) {
  _internal_set_real_exchange(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Currency.real_exchange)
}
inline ::tinkoff::public_::invest::api::contract::v1::RealExchange Currency::_internal_real_exchange() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::RealExchange>(_impl_.real_exchange_);
}
inline void Currency::_internal_set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.real_exchange_ = value;
}

// string position_uid = 29;
inline void Currency::clear_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.position_uid_.ClearToEmpty();
}
inline const std::string& Currency::position_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.position_uid)
  return _internal_position_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Currency::set_position_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.position_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Currency.position_uid)
}
inline std::string* Currency::mutable_position_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_position_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Currency.position_uid)
  return _s;
}
inline const std::string& Currency::_internal_position_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.position_uid_.Get();
}
inline void Currency::_internal_set_position_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.position_uid_.Set(value, GetArena());
}
inline std::string* Currency::_internal_mutable_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.position_uid_.Mutable( GetArena());
}
inline std::string* Currency::release_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Currency.position_uid)
  return _impl_.position_uid_.Release();
}
inline void Currency::set_allocated_position_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.position_uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.position_uid_.IsDefault()) {
          _impl_.position_uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.position_uid)
}

// bool for_iis_flag = 41;
inline void Currency::clear_for_iis_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.for_iis_flag_ = false;
}
inline bool Currency::for_iis_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.for_iis_flag)
  return _internal_for_iis_flag();
}
inline void Currency::set_for_iis_flag(bool value) {
  _internal_set_for_iis_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Currency.for_iis_flag)
}
inline bool Currency::_internal_for_iis_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.for_iis_flag_;
}
inline void Currency::_internal_set_for_iis_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.for_iis_flag_ = value;
}

// bool for_qual_investor_flag = 52;
inline void Currency::clear_for_qual_investor_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.for_qual_investor_flag_ = false;
}
inline bool Currency::for_qual_investor_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.for_qual_investor_flag)
  return _internal_for_qual_investor_flag();
}
inline void Currency::set_for_qual_investor_flag(bool value) {
  _internal_set_for_qual_investor_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Currency.for_qual_investor_flag)
}
inline bool Currency::_internal_for_qual_investor_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.for_qual_investor_flag_;
}
inline void Currency::_internal_set_for_qual_investor_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.for_qual_investor_flag_ = value;
}

// bool weekend_flag = 53;
inline void Currency::clear_weekend_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.weekend_flag_ = false;
}
inline bool Currency::weekend_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.weekend_flag)
  return _internal_weekend_flag();
}
inline void Currency::set_weekend_flag(bool value) {
  _internal_set_weekend_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Currency.weekend_flag)
}
inline bool Currency::_internal_weekend_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.weekend_flag_;
}
inline void Currency::_internal_set_weekend_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.weekend_flag_ = value;
}

// bool blocked_tca_flag = 54;
inline void Currency::clear_blocked_tca_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.blocked_tca_flag_ = false;
}
inline bool Currency::blocked_tca_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.blocked_tca_flag)
  return _internal_blocked_tca_flag();
}
inline void Currency::set_blocked_tca_flag(bool value) {
  _internal_set_blocked_tca_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Currency.blocked_tca_flag)
}
inline bool Currency::_internal_blocked_tca_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.blocked_tca_flag_;
}
inline void Currency::_internal_set_blocked_tca_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.blocked_tca_flag_ = value;
}

// .google.protobuf.Timestamp first_1min_candle_date = 56;
inline bool Currency::has_first_1min_candle_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.first_1min_candle_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Currency::_internal_first_1min_candle_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.first_1min_candle_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Currency::first_1min_candle_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.first_1min_candle_date)
  return _internal_first_1min_candle_date();
}
inline void Currency::unsafe_arena_set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1min_candle_date_);
  }
  _impl_.first_1min_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.first_1min_candle_date)
}
inline ::google::protobuf::Timestamp* Currency::release_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::google::protobuf::Timestamp* released = _impl_.first_1min_candle_date_;
  _impl_.first_1min_candle_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Currency::unsafe_arena_release_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Currency.first_1min_candle_date)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::google::protobuf::Timestamp* temp = _impl_.first_1min_candle_date_;
  _impl_.first_1min_candle_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Currency::_internal_mutable_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.first_1min_candle_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.first_1min_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.first_1min_candle_date_;
}
inline ::google::protobuf::Timestamp* Currency::mutable_first_1min_candle_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_first_1min_candle_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Currency.first_1min_candle_date)
  return _msg;
}
inline void Currency::set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1min_candle_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.first_1min_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.first_1min_candle_date)
}

// .google.protobuf.Timestamp first_1day_candle_date = 57;
inline bool Currency::has_first_1day_candle_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.first_1day_candle_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Currency::_internal_first_1day_candle_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.first_1day_candle_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Currency::first_1day_candle_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.first_1day_candle_date)
  return _internal_first_1day_candle_date();
}
inline void Currency::unsafe_arena_set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1day_candle_date_);
  }
  _impl_.first_1day_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.first_1day_candle_date)
}
inline ::google::protobuf::Timestamp* Currency::release_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::google::protobuf::Timestamp* released = _impl_.first_1day_candle_date_;
  _impl_.first_1day_candle_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Currency::unsafe_arena_release_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Currency.first_1day_candle_date)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::google::protobuf::Timestamp* temp = _impl_.first_1day_candle_date_;
  _impl_.first_1day_candle_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Currency::_internal_mutable_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.first_1day_candle_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.first_1day_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.first_1day_candle_date_;
}
inline ::google::protobuf::Timestamp* Currency::mutable_first_1day_candle_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_first_1day_candle_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Currency.first_1day_candle_date)
  return _msg;
}
inline void Currency::set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1day_candle_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.first_1day_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.first_1day_candle_date)
}

// .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
inline bool Currency::has_brand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.brand_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::BrandData& Currency::_internal_brand() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::BrandData* p = _impl_.brand_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::BrandData&>(::tinkoff::public_::invest::api::contract::v1::_BrandData_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::BrandData& Currency::brand() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Currency.brand)
  return _internal_brand();
}
inline void Currency::unsafe_arena_set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.brand_);
  }
  _impl_.brand_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::BrandData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.brand)
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Currency::release_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::tinkoff::public_::invest::api::contract::v1::BrandData* released = _impl_.brand_;
  _impl_.brand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Currency::unsafe_arena_release_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Currency.brand)

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::tinkoff::public_::invest::api::contract::v1::BrandData* temp = _impl_.brand_;
  _impl_.brand_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Currency::_internal_mutable_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.brand_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::BrandData>(GetArena());
    _impl_.brand_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::BrandData*>(p);
  }
  return _impl_.brand_;
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Currency::mutable_brand() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::BrandData* _msg = _internal_mutable_brand();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Currency.brand)
  return _msg;
}
inline void Currency::set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.brand_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }

  _impl_.brand_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::BrandData*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Currency.brand)
}

// -------------------------------------------------------------------

// Etf

// string figi = 1;
inline void Etf::clear_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& Etf::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Etf::set_figi(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.figi)
}
inline std::string* Etf::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.figi)
  return _s;
}
inline const std::string& Etf::_internal_figi() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.figi_.Get();
}
inline void Etf::_internal_set_figi(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* Etf::_internal_mutable_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* Etf::release_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.figi)
  return _impl_.figi_.Release();
}
inline void Etf::set_allocated_figi(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.figi_.IsDefault()) {
          _impl_.figi_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.figi)
}

// string ticker = 2;
inline void Etf::clear_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.ClearToEmpty();
}
inline const std::string& Etf::ticker() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.ticker)
  return _internal_ticker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Etf::set_ticker(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.ticker)
}
inline std::string* Etf::mutable_ticker() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ticker();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.ticker)
  return _s;
}
inline const std::string& Etf::_internal_ticker() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ticker_.Get();
}
inline void Etf::_internal_set_ticker(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(value, GetArena());
}
inline std::string* Etf::_internal_mutable_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ticker_.Mutable( GetArena());
}
inline std::string* Etf::release_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.ticker)
  return _impl_.ticker_.Release();
}
inline void Etf::set_allocated_ticker(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ticker_.IsDefault()) {
          _impl_.ticker_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.ticker)
}

// string class_code = 3;
inline void Etf::clear_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_code_.ClearToEmpty();
}
inline const std::string& Etf::class_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.class_code)
  return _internal_class_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Etf::set_class_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.class_code)
}
inline std::string* Etf::mutable_class_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_class_code();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.class_code)
  return _s;
}
inline const std::string& Etf::_internal_class_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.class_code_.Get();
}
inline void Etf::_internal_set_class_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class_code_.Set(value, GetArena());
}
inline std::string* Etf::_internal_mutable_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.class_code_.Mutable( GetArena());
}
inline std::string* Etf::release_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.class_code)
  return _impl_.class_code_.Release();
}
inline void Etf::set_allocated_class_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.class_code_.IsDefault()) {
          _impl_.class_code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.class_code)
}

// string isin = 4;
inline void Etf::clear_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.isin_.ClearToEmpty();
}
inline const std::string& Etf::isin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.isin)
  return _internal_isin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Etf::set_isin(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.isin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.isin)
}
inline std::string* Etf::mutable_isin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_isin();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.isin)
  return _s;
}
inline const std::string& Etf::_internal_isin() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.isin_.Get();
}
inline void Etf::_internal_set_isin(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.isin_.Set(value, GetArena());
}
inline std::string* Etf::_internal_mutable_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.isin_.Mutable( GetArena());
}
inline std::string* Etf::release_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.isin)
  return _impl_.isin_.Release();
}
inline void Etf::set_allocated_isin(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.isin_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.isin_.IsDefault()) {
          _impl_.isin_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.isin)
}

// int32 lot = 5;
inline void Etf::clear_lot() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lot_ = 0;
}
inline ::int32_t Etf::lot() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.lot)
  return _internal_lot();
}
inline void Etf::set_lot(::int32_t value) {
  _internal_set_lot(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.lot)
}
inline ::int32_t Etf::_internal_lot() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lot_;
}
inline void Etf::_internal_set_lot(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lot_ = value;
}

// string currency = 6;
inline void Etf::clear_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.ClearToEmpty();
}
inline const std::string& Etf::currency() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.currency)
  return _internal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Etf::set_currency(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.currency)
}
inline std::string* Etf::mutable_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.currency)
  return _s;
}
inline const std::string& Etf::_internal_currency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.currency_.Get();
}
inline void Etf::_internal_set_currency(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(value, GetArena());
}
inline std::string* Etf::_internal_mutable_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.currency_.Mutable( GetArena());
}
inline std::string* Etf::release_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.currency)
  return _impl_.currency_.Release();
}
inline void Etf::set_allocated_currency(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.currency_.IsDefault()) {
          _impl_.currency_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.currency)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
inline bool Etf::has_klong() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.klong_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::_internal_klong() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.klong_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::klong() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.klong)
  return _internal_klong();
}
inline void Etf::unsafe_arena_set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.klong_);
  }
  _impl_.klong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.klong)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::release_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.klong_;
  _impl_.klong_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::unsafe_arena_release_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.klong)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.klong_;
  _impl_.klong_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::_internal_mutable_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.klong_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.klong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.klong_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::mutable_klong() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_klong();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.klong)
  return _msg;
}
inline void Etf::set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.klong_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.klong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.klong)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
inline bool Etf::has_kshort() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kshort_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::_internal_kshort() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.kshort_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::kshort() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.kshort)
  return _internal_kshort();
}
inline void Etf::unsafe_arena_set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kshort_);
  }
  _impl_.kshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.kshort)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::release_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.kshort_;
  _impl_.kshort_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::unsafe_arena_release_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.kshort)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.kshort_;
  _impl_.kshort_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::_internal_mutable_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.kshort_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.kshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.kshort_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::mutable_kshort() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_kshort();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.kshort)
  return _msg;
}
inline void Etf::set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kshort_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.kshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.kshort)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
inline bool Etf::has_dlong() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dlong_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::_internal_dlong() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dlong_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::dlong() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.dlong)
  return _internal_dlong();
}
inline void Etf::unsafe_arena_set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_);
  }
  _impl_.dlong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.dlong)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::release_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dlong_;
  _impl_.dlong_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::unsafe_arena_release_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.dlong)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dlong_;
  _impl_.dlong_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::_internal_mutable_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.dlong_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dlong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dlong_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::mutable_dlong() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dlong();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.dlong)
  return _msg;
}
inline void Etf::set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.dlong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.dlong)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
inline bool Etf::has_dshort() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dshort_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::_internal_dshort() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dshort_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::dshort() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.dshort)
  return _internal_dshort();
}
inline void Etf::unsafe_arena_set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_);
  }
  _impl_.dshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.dshort)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::release_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dshort_;
  _impl_.dshort_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::unsafe_arena_release_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.dshort)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dshort_;
  _impl_.dshort_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::_internal_mutable_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.dshort_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dshort_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::mutable_dshort() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dshort();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.dshort)
  return _msg;
}
inline void Etf::set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.dshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.dshort)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
inline bool Etf::has_dlong_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dlong_min_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::_internal_dlong_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dlong_min_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::dlong_min() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.dlong_min)
  return _internal_dlong_min();
}
inline void Etf::unsafe_arena_set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_min_);
  }
  _impl_.dlong_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.dlong_min)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::release_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dlong_min_;
  _impl_.dlong_min_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::unsafe_arena_release_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.dlong_min)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dlong_min_;
  _impl_.dlong_min_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::_internal_mutable_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.dlong_min_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dlong_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dlong_min_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::mutable_dlong_min() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dlong_min();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.dlong_min)
  return _msg;
}
inline void Etf::set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_min_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.dlong_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.dlong_min)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
inline bool Etf::has_dshort_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dshort_min_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::_internal_dshort_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dshort_min_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::dshort_min() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.dshort_min)
  return _internal_dshort_min();
}
inline void Etf::unsafe_arena_set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_min_);
  }
  _impl_.dshort_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.dshort_min)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::release_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dshort_min_;
  _impl_.dshort_min_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::unsafe_arena_release_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.dshort_min)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dshort_min_;
  _impl_.dshort_min_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::_internal_mutable_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.dshort_min_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dshort_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dshort_min_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::mutable_dshort_min() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dshort_min();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.dshort_min)
  return _msg;
}
inline void Etf::set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_min_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.dshort_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.dshort_min)
}

// bool short_enabled_flag = 13;
inline void Etf::clear_short_enabled_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.short_enabled_flag_ = false;
}
inline bool Etf::short_enabled_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.short_enabled_flag)
  return _internal_short_enabled_flag();
}
inline void Etf::set_short_enabled_flag(bool value) {
  _internal_set_short_enabled_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.short_enabled_flag)
}
inline bool Etf::_internal_short_enabled_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.short_enabled_flag_;
}
inline void Etf::_internal_set_short_enabled_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.short_enabled_flag_ = value;
}

// string name = 15;
inline void Etf::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Etf::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Etf::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.name)
}
inline std::string* Etf::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.name)
  return _s;
}
inline const std::string& Etf::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Etf::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Etf::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Etf::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.name)
  return _impl_.name_.Release();
}
inline void Etf::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.name)
}

// string exchange = 16;
inline void Etf::clear_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_.ClearToEmpty();
}
inline const std::string& Etf::exchange() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.exchange)
  return _internal_exchange();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Etf::set_exchange(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.exchange)
}
inline std::string* Etf::mutable_exchange() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_exchange();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.exchange)
  return _s;
}
inline const std::string& Etf::_internal_exchange() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exchange_.Get();
}
inline void Etf::_internal_set_exchange(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_.Set(value, GetArena());
}
inline std::string* Etf::_internal_mutable_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.exchange_.Mutable( GetArena());
}
inline std::string* Etf::release_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.exchange)
  return _impl_.exchange_.Release();
}
inline void Etf::set_allocated_exchange(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_.IsDefault()) {
          _impl_.exchange_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.exchange)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation fixed_commission = 17;
inline bool Etf::has_fixed_commission() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fixed_commission_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::_internal_fixed_commission() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.fixed_commission_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::fixed_commission() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.fixed_commission)
  return _internal_fixed_commission();
}
inline void Etf::unsafe_arena_set_allocated_fixed_commission(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fixed_commission_);
  }
  _impl_.fixed_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.fixed_commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::release_fixed_commission() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.fixed_commission_;
  _impl_.fixed_commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::unsafe_arena_release_fixed_commission() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.fixed_commission)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.fixed_commission_;
  _impl_.fixed_commission_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::_internal_mutable_fixed_commission() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.fixed_commission_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.fixed_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.fixed_commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::mutable_fixed_commission() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_fixed_commission();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.fixed_commission)
  return _msg;
}
inline void Etf::set_allocated_fixed_commission(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fixed_commission_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.fixed_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.fixed_commission)
}

// string focus_type = 18;
inline void Etf::clear_focus_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.focus_type_.ClearToEmpty();
}
inline const std::string& Etf::focus_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.focus_type)
  return _internal_focus_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Etf::set_focus_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.focus_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.focus_type)
}
inline std::string* Etf::mutable_focus_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_focus_type();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.focus_type)
  return _s;
}
inline const std::string& Etf::_internal_focus_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.focus_type_.Get();
}
inline void Etf::_internal_set_focus_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.focus_type_.Set(value, GetArena());
}
inline std::string* Etf::_internal_mutable_focus_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.focus_type_.Mutable( GetArena());
}
inline std::string* Etf::release_focus_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.focus_type)
  return _impl_.focus_type_.Release();
}
inline void Etf::set_allocated_focus_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.focus_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.focus_type_.IsDefault()) {
          _impl_.focus_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.focus_type)
}

// .google.protobuf.Timestamp released_date = 19;
inline bool Etf::has_released_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.released_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Etf::_internal_released_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.released_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Etf::released_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.released_date)
  return _internal_released_date();
}
inline void Etf::unsafe_arena_set_allocated_released_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.released_date_);
  }
  _impl_.released_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.released_date)
}
inline ::google::protobuf::Timestamp* Etf::release_released_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::google::protobuf::Timestamp* released = _impl_.released_date_;
  _impl_.released_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Etf::unsafe_arena_release_released_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.released_date)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::google::protobuf::Timestamp* temp = _impl_.released_date_;
  _impl_.released_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Etf::_internal_mutable_released_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.released_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.released_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.released_date_;
}
inline ::google::protobuf::Timestamp* Etf::mutable_released_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_released_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.released_date)
  return _msg;
}
inline void Etf::set_allocated_released_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.released_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.released_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.released_date)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation num_shares = 20;
inline bool Etf::has_num_shares() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.num_shares_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::_internal_num_shares() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.num_shares_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::num_shares() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.num_shares)
  return _internal_num_shares();
}
inline void Etf::unsafe_arena_set_allocated_num_shares(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.num_shares_);
  }
  _impl_.num_shares_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.num_shares)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::release_num_shares() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.num_shares_;
  _impl_.num_shares_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::unsafe_arena_release_num_shares() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.num_shares)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.num_shares_;
  _impl_.num_shares_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::_internal_mutable_num_shares() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.num_shares_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.num_shares_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.num_shares_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::mutable_num_shares() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_num_shares();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.num_shares)
  return _msg;
}
inline void Etf::set_allocated_num_shares(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.num_shares_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.num_shares_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.num_shares)
}

// string country_of_risk = 21;
inline void Etf::clear_country_of_risk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_.ClearToEmpty();
}
inline const std::string& Etf::country_of_risk() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.country_of_risk)
  return _internal_country_of_risk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Etf::set_country_of_risk(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.country_of_risk)
}
inline std::string* Etf::mutable_country_of_risk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_country_of_risk();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.country_of_risk)
  return _s;
}
inline const std::string& Etf::_internal_country_of_risk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.country_of_risk_.Get();
}
inline void Etf::_internal_set_country_of_risk(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_.Set(value, GetArena());
}
inline std::string* Etf::_internal_mutable_country_of_risk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.country_of_risk_.Mutable( GetArena());
}
inline std::string* Etf::release_country_of_risk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.country_of_risk)
  return _impl_.country_of_risk_.Release();
}
inline void Etf::set_allocated_country_of_risk(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.country_of_risk_.IsDefault()) {
          _impl_.country_of_risk_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.country_of_risk)
}

// string country_of_risk_name = 22;
inline void Etf::clear_country_of_risk_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_name_.ClearToEmpty();
}
inline const std::string& Etf::country_of_risk_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.country_of_risk_name)
  return _internal_country_of_risk_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Etf::set_country_of_risk_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.country_of_risk_name)
}
inline std::string* Etf::mutable_country_of_risk_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_country_of_risk_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.country_of_risk_name)
  return _s;
}
inline const std::string& Etf::_internal_country_of_risk_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.country_of_risk_name_.Get();
}
inline void Etf::_internal_set_country_of_risk_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_name_.Set(value, GetArena());
}
inline std::string* Etf::_internal_mutable_country_of_risk_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.country_of_risk_name_.Mutable( GetArena());
}
inline std::string* Etf::release_country_of_risk_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.country_of_risk_name)
  return _impl_.country_of_risk_name_.Release();
}
inline void Etf::set_allocated_country_of_risk_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.country_of_risk_name_.IsDefault()) {
          _impl_.country_of_risk_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.country_of_risk_name)
}

// string sector = 23;
inline void Etf::clear_sector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sector_.ClearToEmpty();
}
inline const std::string& Etf::sector() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.sector)
  return _internal_sector();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Etf::set_sector(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sector_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.sector)
}
inline std::string* Etf::mutable_sector() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sector();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.sector)
  return _s;
}
inline const std::string& Etf::_internal_sector() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sector_.Get();
}
inline void Etf::_internal_set_sector(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sector_.Set(value, GetArena());
}
inline std::string* Etf::_internal_mutable_sector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.sector_.Mutable( GetArena());
}
inline std::string* Etf::release_sector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.sector)
  return _impl_.sector_.Release();
}
inline void Etf::set_allocated_sector(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sector_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sector_.IsDefault()) {
          _impl_.sector_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.sector)
}

// string rebalancing_freq = 24;
inline void Etf::clear_rebalancing_freq() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rebalancing_freq_.ClearToEmpty();
}
inline const std::string& Etf::rebalancing_freq() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.rebalancing_freq)
  return _internal_rebalancing_freq();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Etf::set_rebalancing_freq(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rebalancing_freq_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.rebalancing_freq)
}
inline std::string* Etf::mutable_rebalancing_freq() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rebalancing_freq();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.rebalancing_freq)
  return _s;
}
inline const std::string& Etf::_internal_rebalancing_freq() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rebalancing_freq_.Get();
}
inline void Etf::_internal_set_rebalancing_freq(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rebalancing_freq_.Set(value, GetArena());
}
inline std::string* Etf::_internal_mutable_rebalancing_freq() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.rebalancing_freq_.Mutable( GetArena());
}
inline std::string* Etf::release_rebalancing_freq() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.rebalancing_freq)
  return _impl_.rebalancing_freq_.Release();
}
inline void Etf::set_allocated_rebalancing_freq(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rebalancing_freq_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rebalancing_freq_.IsDefault()) {
          _impl_.rebalancing_freq_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.rebalancing_freq)
}

// .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
inline void Etf::clear_trading_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trading_status_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus Etf::trading_status() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.trading_status)
  return _internal_trading_status();
}
inline void Etf::set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value) {
  _internal_set_trading_status(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.trading_status)
}
inline ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus Etf::_internal_trading_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus>(_impl_.trading_status_);
}
inline void Etf::_internal_set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trading_status_ = value;
}

// bool otc_flag = 26;
inline void Etf::clear_otc_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.otc_flag_ = false;
}
inline bool Etf::otc_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.otc_flag)
  return _internal_otc_flag();
}
inline void Etf::set_otc_flag(bool value) {
  _internal_set_otc_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.otc_flag)
}
inline bool Etf::_internal_otc_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.otc_flag_;
}
inline void Etf::_internal_set_otc_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.otc_flag_ = value;
}

// bool buy_available_flag = 27;
inline void Etf::clear_buy_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.buy_available_flag_ = false;
}
inline bool Etf::buy_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.buy_available_flag)
  return _internal_buy_available_flag();
}
inline void Etf::set_buy_available_flag(bool value) {
  _internal_set_buy_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.buy_available_flag)
}
inline bool Etf::_internal_buy_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.buy_available_flag_;
}
inline void Etf::_internal_set_buy_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.buy_available_flag_ = value;
}

// bool sell_available_flag = 28;
inline void Etf::clear_sell_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sell_available_flag_ = false;
}
inline bool Etf::sell_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.sell_available_flag)
  return _internal_sell_available_flag();
}
inline void Etf::set_sell_available_flag(bool value) {
  _internal_set_sell_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.sell_available_flag)
}
inline bool Etf::_internal_sell_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sell_available_flag_;
}
inline void Etf::_internal_set_sell_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sell_available_flag_ = value;
}

// .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 29;
inline bool Etf::has_min_price_increment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.min_price_increment_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::_internal_min_price_increment() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.min_price_increment_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Etf::min_price_increment() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.min_price_increment)
  return _internal_min_price_increment();
}
inline void Etf::unsafe_arena_set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_price_increment_);
  }
  _impl_.min_price_increment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.min_price_increment)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::release_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.min_price_increment_;
  _impl_.min_price_increment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::unsafe_arena_release_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.min_price_increment)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.min_price_increment_;
  _impl_.min_price_increment_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::_internal_mutable_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.min_price_increment_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.min_price_increment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.min_price_increment_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Etf::mutable_min_price_increment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_min_price_increment();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.min_price_increment)
  return _msg;
}
inline void Etf::set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_price_increment_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.min_price_increment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.min_price_increment)
}

// bool api_trade_available_flag = 30;
inline void Etf::clear_api_trade_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.api_trade_available_flag_ = false;
}
inline bool Etf::api_trade_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.api_trade_available_flag)
  return _internal_api_trade_available_flag();
}
inline void Etf::set_api_trade_available_flag(bool value) {
  _internal_set_api_trade_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.api_trade_available_flag)
}
inline bool Etf::_internal_api_trade_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.api_trade_available_flag_;
}
inline void Etf::_internal_set_api_trade_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.api_trade_available_flag_ = value;
}

// string uid = 31;
inline void Etf::clear_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& Etf::uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.uid)
  return _internal_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Etf::set_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.uid)
}
inline std::string* Etf::mutable_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.uid)
  return _s;
}
inline const std::string& Etf::_internal_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uid_.Get();
}
inline void Etf::_internal_set_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(value, GetArena());
}
inline std::string* Etf::_internal_mutable_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.uid_.Mutable( GetArena());
}
inline std::string* Etf::release_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.uid)
  return _impl_.uid_.Release();
}
inline void Etf::set_allocated_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uid_.IsDefault()) {
          _impl_.uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.uid)
}

// .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 32;
inline void Etf::clear_real_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.real_exchange_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::RealExchange Etf::real_exchange() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.real_exchange)
  return _internal_real_exchange();
}
inline void Etf::set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value) {
  _internal_set_real_exchange(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.real_exchange)
}
inline ::tinkoff::public_::invest::api::contract::v1::RealExchange Etf::_internal_real_exchange() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::RealExchange>(_impl_.real_exchange_);
}
inline void Etf::_internal_set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.real_exchange_ = value;
}

// string position_uid = 33;
inline void Etf::clear_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.position_uid_.ClearToEmpty();
}
inline const std::string& Etf::position_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.position_uid)
  return _internal_position_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Etf::set_position_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.position_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.position_uid)
}
inline std::string* Etf::mutable_position_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_position_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.position_uid)
  return _s;
}
inline const std::string& Etf::_internal_position_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.position_uid_.Get();
}
inline void Etf::_internal_set_position_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.position_uid_.Set(value, GetArena());
}
inline std::string* Etf::_internal_mutable_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.position_uid_.Mutable( GetArena());
}
inline std::string* Etf::release_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.position_uid)
  return _impl_.position_uid_.Release();
}
inline void Etf::set_allocated_position_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.position_uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.position_uid_.IsDefault()) {
          _impl_.position_uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.position_uid)
}

// string asset_uid = 34;
inline void Etf::clear_asset_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.asset_uid_.ClearToEmpty();
}
inline const std::string& Etf::asset_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.asset_uid)
  return _internal_asset_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Etf::set_asset_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.asset_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.asset_uid)
}
inline std::string* Etf::mutable_asset_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_asset_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.asset_uid)
  return _s;
}
inline const std::string& Etf::_internal_asset_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.asset_uid_.Get();
}
inline void Etf::_internal_set_asset_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.asset_uid_.Set(value, GetArena());
}
inline std::string* Etf::_internal_mutable_asset_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.asset_uid_.Mutable( GetArena());
}
inline std::string* Etf::release_asset_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.asset_uid)
  return _impl_.asset_uid_.Release();
}
inline void Etf::set_allocated_asset_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.asset_uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.asset_uid_.IsDefault()) {
          _impl_.asset_uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.asset_uid)
}

// bool for_iis_flag = 41;
inline void Etf::clear_for_iis_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.for_iis_flag_ = false;
}
inline bool Etf::for_iis_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.for_iis_flag)
  return _internal_for_iis_flag();
}
inline void Etf::set_for_iis_flag(bool value) {
  _internal_set_for_iis_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.for_iis_flag)
}
inline bool Etf::_internal_for_iis_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.for_iis_flag_;
}
inline void Etf::_internal_set_for_iis_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.for_iis_flag_ = value;
}

// bool for_qual_investor_flag = 42;
inline void Etf::clear_for_qual_investor_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.for_qual_investor_flag_ = false;
}
inline bool Etf::for_qual_investor_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.for_qual_investor_flag)
  return _internal_for_qual_investor_flag();
}
inline void Etf::set_for_qual_investor_flag(bool value) {
  _internal_set_for_qual_investor_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.for_qual_investor_flag)
}
inline bool Etf::_internal_for_qual_investor_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.for_qual_investor_flag_;
}
inline void Etf::_internal_set_for_qual_investor_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.for_qual_investor_flag_ = value;
}

// bool weekend_flag = 43;
inline void Etf::clear_weekend_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.weekend_flag_ = false;
}
inline bool Etf::weekend_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.weekend_flag)
  return _internal_weekend_flag();
}
inline void Etf::set_weekend_flag(bool value) {
  _internal_set_weekend_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.weekend_flag)
}
inline bool Etf::_internal_weekend_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.weekend_flag_;
}
inline void Etf::_internal_set_weekend_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.weekend_flag_ = value;
}

// bool blocked_tca_flag = 44;
inline void Etf::clear_blocked_tca_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.blocked_tca_flag_ = false;
}
inline bool Etf::blocked_tca_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.blocked_tca_flag)
  return _internal_blocked_tca_flag();
}
inline void Etf::set_blocked_tca_flag(bool value) {
  _internal_set_blocked_tca_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.blocked_tca_flag)
}
inline bool Etf::_internal_blocked_tca_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.blocked_tca_flag_;
}
inline void Etf::_internal_set_blocked_tca_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.blocked_tca_flag_ = value;
}

// bool liquidity_flag = 45;
inline void Etf::clear_liquidity_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.liquidity_flag_ = false;
}
inline bool Etf::liquidity_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.liquidity_flag)
  return _internal_liquidity_flag();
}
inline void Etf::set_liquidity_flag(bool value) {
  _internal_set_liquidity_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Etf.liquidity_flag)
}
inline bool Etf::_internal_liquidity_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.liquidity_flag_;
}
inline void Etf::_internal_set_liquidity_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.liquidity_flag_ = value;
}

// .google.protobuf.Timestamp first_1min_candle_date = 56;
inline bool Etf::has_first_1min_candle_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.first_1min_candle_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Etf::_internal_first_1min_candle_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.first_1min_candle_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Etf::first_1min_candle_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.first_1min_candle_date)
  return _internal_first_1min_candle_date();
}
inline void Etf::unsafe_arena_set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1min_candle_date_);
  }
  _impl_.first_1min_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.first_1min_candle_date)
}
inline ::google::protobuf::Timestamp* Etf::release_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::google::protobuf::Timestamp* released = _impl_.first_1min_candle_date_;
  _impl_.first_1min_candle_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Etf::unsafe_arena_release_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.first_1min_candle_date)

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::google::protobuf::Timestamp* temp = _impl_.first_1min_candle_date_;
  _impl_.first_1min_candle_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Etf::_internal_mutable_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.first_1min_candle_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.first_1min_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.first_1min_candle_date_;
}
inline ::google::protobuf::Timestamp* Etf::mutable_first_1min_candle_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_first_1min_candle_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.first_1min_candle_date)
  return _msg;
}
inline void Etf::set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1min_candle_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }

  _impl_.first_1min_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.first_1min_candle_date)
}

// .google.protobuf.Timestamp first_1day_candle_date = 57;
inline bool Etf::has_first_1day_candle_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.first_1day_candle_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Etf::_internal_first_1day_candle_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.first_1day_candle_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Etf::first_1day_candle_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.first_1day_candle_date)
  return _internal_first_1day_candle_date();
}
inline void Etf::unsafe_arena_set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1day_candle_date_);
  }
  _impl_.first_1day_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.first_1day_candle_date)
}
inline ::google::protobuf::Timestamp* Etf::release_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::google::protobuf::Timestamp* released = _impl_.first_1day_candle_date_;
  _impl_.first_1day_candle_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Etf::unsafe_arena_release_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.first_1day_candle_date)

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::google::protobuf::Timestamp* temp = _impl_.first_1day_candle_date_;
  _impl_.first_1day_candle_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Etf::_internal_mutable_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.first_1day_candle_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.first_1day_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.first_1day_candle_date_;
}
inline ::google::protobuf::Timestamp* Etf::mutable_first_1day_candle_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_first_1day_candle_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.first_1day_candle_date)
  return _msg;
}
inline void Etf::set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1day_candle_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }

  _impl_.first_1day_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.first_1day_candle_date)
}

// .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
inline bool Etf::has_brand() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.brand_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::BrandData& Etf::_internal_brand() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::BrandData* p = _impl_.brand_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::BrandData&>(::tinkoff::public_::invest::api::contract::v1::_BrandData_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::BrandData& Etf::brand() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Etf.brand)
  return _internal_brand();
}
inline void Etf::unsafe_arena_set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.brand_);
  }
  _impl_.brand_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::BrandData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.brand)
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Etf::release_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::tinkoff::public_::invest::api::contract::v1::BrandData* released = _impl_.brand_;
  _impl_.brand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Etf::unsafe_arena_release_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Etf.brand)

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::tinkoff::public_::invest::api::contract::v1::BrandData* temp = _impl_.brand_;
  _impl_.brand_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Etf::_internal_mutable_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.brand_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::BrandData>(GetArena());
    _impl_.brand_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::BrandData*>(p);
  }
  return _impl_.brand_;
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Etf::mutable_brand() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::BrandData* _msg = _internal_mutable_brand();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Etf.brand)
  return _msg;
}
inline void Etf::set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.brand_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }

  _impl_.brand_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::BrandData*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Etf.brand)
}

// -------------------------------------------------------------------

// Future

// string figi = 1;
inline void Future::clear_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& Future::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Future::set_figi(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.figi)
}
inline std::string* Future::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.figi)
  return _s;
}
inline const std::string& Future::_internal_figi() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.figi_.Get();
}
inline void Future::_internal_set_figi(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* Future::_internal_mutable_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* Future::release_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.figi)
  return _impl_.figi_.Release();
}
inline void Future::set_allocated_figi(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.figi_.IsDefault()) {
          _impl_.figi_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.figi)
}

// string ticker = 2;
inline void Future::clear_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.ClearToEmpty();
}
inline const std::string& Future::ticker() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.ticker)
  return _internal_ticker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Future::set_ticker(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.ticker)
}
inline std::string* Future::mutable_ticker() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ticker();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.ticker)
  return _s;
}
inline const std::string& Future::_internal_ticker() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ticker_.Get();
}
inline void Future::_internal_set_ticker(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(value, GetArena());
}
inline std::string* Future::_internal_mutable_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ticker_.Mutable( GetArena());
}
inline std::string* Future::release_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.ticker)
  return _impl_.ticker_.Release();
}
inline void Future::set_allocated_ticker(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ticker_.IsDefault()) {
          _impl_.ticker_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.ticker)
}

// string class_code = 3;
inline void Future::clear_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_code_.ClearToEmpty();
}
inline const std::string& Future::class_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.class_code)
  return _internal_class_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Future::set_class_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.class_code)
}
inline std::string* Future::mutable_class_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_class_code();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.class_code)
  return _s;
}
inline const std::string& Future::_internal_class_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.class_code_.Get();
}
inline void Future::_internal_set_class_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class_code_.Set(value, GetArena());
}
inline std::string* Future::_internal_mutable_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.class_code_.Mutable( GetArena());
}
inline std::string* Future::release_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.class_code)
  return _impl_.class_code_.Release();
}
inline void Future::set_allocated_class_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.class_code_.IsDefault()) {
          _impl_.class_code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.class_code)
}

// int32 lot = 4;
inline void Future::clear_lot() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lot_ = 0;
}
inline ::int32_t Future::lot() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.lot)
  return _internal_lot();
}
inline void Future::set_lot(::int32_t value) {
  _internal_set_lot(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.lot)
}
inline ::int32_t Future::_internal_lot() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lot_;
}
inline void Future::_internal_set_lot(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lot_ = value;
}

// string currency = 5;
inline void Future::clear_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.ClearToEmpty();
}
inline const std::string& Future::currency() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.currency)
  return _internal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Future::set_currency(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.currency)
}
inline std::string* Future::mutable_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.currency)
  return _s;
}
inline const std::string& Future::_internal_currency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.currency_.Get();
}
inline void Future::_internal_set_currency(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(value, GetArena());
}
inline std::string* Future::_internal_mutable_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.currency_.Mutable( GetArena());
}
inline std::string* Future::release_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.currency)
  return _impl_.currency_.Release();
}
inline void Future::set_allocated_currency(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.currency_.IsDefault()) {
          _impl_.currency_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.currency)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation klong = 6;
inline bool Future::has_klong() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.klong_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::_internal_klong() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.klong_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::klong() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.klong)
  return _internal_klong();
}
inline void Future::unsafe_arena_set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.klong_);
  }
  _impl_.klong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.klong)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::release_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.klong_;
  _impl_.klong_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::unsafe_arena_release_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.klong)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.klong_;
  _impl_.klong_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::_internal_mutable_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.klong_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.klong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.klong_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::mutable_klong() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_klong();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.klong)
  return _msg;
}
inline void Future::set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.klong_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.klong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.klong)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 7;
inline bool Future::has_kshort() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kshort_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::_internal_kshort() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.kshort_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::kshort() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.kshort)
  return _internal_kshort();
}
inline void Future::unsafe_arena_set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kshort_);
  }
  _impl_.kshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.kshort)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::release_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.kshort_;
  _impl_.kshort_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::unsafe_arena_release_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.kshort)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.kshort_;
  _impl_.kshort_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::_internal_mutable_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.kshort_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.kshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.kshort_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::mutable_kshort() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_kshort();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.kshort)
  return _msg;
}
inline void Future::set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kshort_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.kshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.kshort)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 8;
inline bool Future::has_dlong() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dlong_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::_internal_dlong() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dlong_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::dlong() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.dlong)
  return _internal_dlong();
}
inline void Future::unsafe_arena_set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_);
  }
  _impl_.dlong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.dlong)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::release_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dlong_;
  _impl_.dlong_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::unsafe_arena_release_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.dlong)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dlong_;
  _impl_.dlong_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::_internal_mutable_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.dlong_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dlong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dlong_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::mutable_dlong() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dlong();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.dlong)
  return _msg;
}
inline void Future::set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.dlong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.dlong)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 9;
inline bool Future::has_dshort() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dshort_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::_internal_dshort() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dshort_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::dshort() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.dshort)
  return _internal_dshort();
}
inline void Future::unsafe_arena_set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_);
  }
  _impl_.dshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.dshort)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::release_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dshort_;
  _impl_.dshort_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::unsafe_arena_release_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.dshort)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dshort_;
  _impl_.dshort_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::_internal_mutable_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.dshort_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dshort_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::mutable_dshort() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dshort();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.dshort)
  return _msg;
}
inline void Future::set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.dshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.dshort)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 10;
inline bool Future::has_dlong_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dlong_min_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::_internal_dlong_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dlong_min_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::dlong_min() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.dlong_min)
  return _internal_dlong_min();
}
inline void Future::unsafe_arena_set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_min_);
  }
  _impl_.dlong_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.dlong_min)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::release_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dlong_min_;
  _impl_.dlong_min_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::unsafe_arena_release_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.dlong_min)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dlong_min_;
  _impl_.dlong_min_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::_internal_mutable_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.dlong_min_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dlong_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dlong_min_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::mutable_dlong_min() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dlong_min();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.dlong_min)
  return _msg;
}
inline void Future::set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_min_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.dlong_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.dlong_min)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 11;
inline bool Future::has_dshort_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dshort_min_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::_internal_dshort_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dshort_min_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::dshort_min() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.dshort_min)
  return _internal_dshort_min();
}
inline void Future::unsafe_arena_set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_min_);
  }
  _impl_.dshort_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.dshort_min)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::release_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dshort_min_;
  _impl_.dshort_min_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::unsafe_arena_release_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.dshort_min)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dshort_min_;
  _impl_.dshort_min_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::_internal_mutable_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.dshort_min_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dshort_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dshort_min_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::mutable_dshort_min() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dshort_min();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.dshort_min)
  return _msg;
}
inline void Future::set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_min_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.dshort_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.dshort_min)
}

// bool short_enabled_flag = 12;
inline void Future::clear_short_enabled_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.short_enabled_flag_ = false;
}
inline bool Future::short_enabled_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.short_enabled_flag)
  return _internal_short_enabled_flag();
}
inline void Future::set_short_enabled_flag(bool value) {
  _internal_set_short_enabled_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.short_enabled_flag)
}
inline bool Future::_internal_short_enabled_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.short_enabled_flag_;
}
inline void Future::_internal_set_short_enabled_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.short_enabled_flag_ = value;
}

// string name = 13;
inline void Future::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Future::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Future::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.name)
}
inline std::string* Future::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.name)
  return _s;
}
inline const std::string& Future::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Future::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Future::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Future::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.name)
  return _impl_.name_.Release();
}
inline void Future::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.name)
}

// string exchange = 14;
inline void Future::clear_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_.ClearToEmpty();
}
inline const std::string& Future::exchange() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.exchange)
  return _internal_exchange();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Future::set_exchange(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.exchange)
}
inline std::string* Future::mutable_exchange() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_exchange();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.exchange)
  return _s;
}
inline const std::string& Future::_internal_exchange() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exchange_.Get();
}
inline void Future::_internal_set_exchange(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_.Set(value, GetArena());
}
inline std::string* Future::_internal_mutable_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.exchange_.Mutable( GetArena());
}
inline std::string* Future::release_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.exchange)
  return _impl_.exchange_.Release();
}
inline void Future::set_allocated_exchange(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_.IsDefault()) {
          _impl_.exchange_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.exchange)
}

// .google.protobuf.Timestamp first_trade_date = 15;
inline bool Future::has_first_trade_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.first_trade_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Future::_internal_first_trade_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.first_trade_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Future::first_trade_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.first_trade_date)
  return _internal_first_trade_date();
}
inline void Future::unsafe_arena_set_allocated_first_trade_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_trade_date_);
  }
  _impl_.first_trade_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.first_trade_date)
}
inline ::google::protobuf::Timestamp* Future::release_first_trade_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::google::protobuf::Timestamp* released = _impl_.first_trade_date_;
  _impl_.first_trade_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Future::unsafe_arena_release_first_trade_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.first_trade_date)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::google::protobuf::Timestamp* temp = _impl_.first_trade_date_;
  _impl_.first_trade_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Future::_internal_mutable_first_trade_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.first_trade_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.first_trade_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.first_trade_date_;
}
inline ::google::protobuf::Timestamp* Future::mutable_first_trade_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_first_trade_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.first_trade_date)
  return _msg;
}
inline void Future::set_allocated_first_trade_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_trade_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.first_trade_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.first_trade_date)
}

// .google.protobuf.Timestamp last_trade_date = 16;
inline bool Future::has_last_trade_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_trade_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Future::_internal_last_trade_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.last_trade_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Future::last_trade_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.last_trade_date)
  return _internal_last_trade_date();
}
inline void Future::unsafe_arena_set_allocated_last_trade_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_trade_date_);
  }
  _impl_.last_trade_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.last_trade_date)
}
inline ::google::protobuf::Timestamp* Future::release_last_trade_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::google::protobuf::Timestamp* released = _impl_.last_trade_date_;
  _impl_.last_trade_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Future::unsafe_arena_release_last_trade_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.last_trade_date)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::google::protobuf::Timestamp* temp = _impl_.last_trade_date_;
  _impl_.last_trade_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Future::_internal_mutable_last_trade_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.last_trade_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.last_trade_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.last_trade_date_;
}
inline ::google::protobuf::Timestamp* Future::mutable_last_trade_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_last_trade_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.last_trade_date)
  return _msg;
}
inline void Future::set_allocated_last_trade_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_trade_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.last_trade_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.last_trade_date)
}

// string futures_type = 17;
inline void Future::clear_futures_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.futures_type_.ClearToEmpty();
}
inline const std::string& Future::futures_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.futures_type)
  return _internal_futures_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Future::set_futures_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.futures_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.futures_type)
}
inline std::string* Future::mutable_futures_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_futures_type();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.futures_type)
  return _s;
}
inline const std::string& Future::_internal_futures_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.futures_type_.Get();
}
inline void Future::_internal_set_futures_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.futures_type_.Set(value, GetArena());
}
inline std::string* Future::_internal_mutable_futures_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.futures_type_.Mutable( GetArena());
}
inline std::string* Future::release_futures_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.futures_type)
  return _impl_.futures_type_.Release();
}
inline void Future::set_allocated_futures_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.futures_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.futures_type_.IsDefault()) {
          _impl_.futures_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.futures_type)
}

// string asset_type = 18;
inline void Future::clear_asset_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.asset_type_.ClearToEmpty();
}
inline const std::string& Future::asset_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.asset_type)
  return _internal_asset_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Future::set_asset_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.asset_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.asset_type)
}
inline std::string* Future::mutable_asset_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_asset_type();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.asset_type)
  return _s;
}
inline const std::string& Future::_internal_asset_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.asset_type_.Get();
}
inline void Future::_internal_set_asset_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.asset_type_.Set(value, GetArena());
}
inline std::string* Future::_internal_mutable_asset_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.asset_type_.Mutable( GetArena());
}
inline std::string* Future::release_asset_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.asset_type)
  return _impl_.asset_type_.Release();
}
inline void Future::set_allocated_asset_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.asset_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.asset_type_.IsDefault()) {
          _impl_.asset_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.asset_type)
}

// string basic_asset = 19;
inline void Future::clear_basic_asset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.basic_asset_.ClearToEmpty();
}
inline const std::string& Future::basic_asset() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.basic_asset)
  return _internal_basic_asset();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Future::set_basic_asset(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.basic_asset_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.basic_asset)
}
inline std::string* Future::mutable_basic_asset() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_basic_asset();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.basic_asset)
  return _s;
}
inline const std::string& Future::_internal_basic_asset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.basic_asset_.Get();
}
inline void Future::_internal_set_basic_asset(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.basic_asset_.Set(value, GetArena());
}
inline std::string* Future::_internal_mutable_basic_asset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.basic_asset_.Mutable( GetArena());
}
inline std::string* Future::release_basic_asset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.basic_asset)
  return _impl_.basic_asset_.Release();
}
inline void Future::set_allocated_basic_asset(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.basic_asset_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.basic_asset_.IsDefault()) {
          _impl_.basic_asset_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.basic_asset)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation basic_asset_size = 20;
inline bool Future::has_basic_asset_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.basic_asset_size_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::_internal_basic_asset_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.basic_asset_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::basic_asset_size() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.basic_asset_size)
  return _internal_basic_asset_size();
}
inline void Future::unsafe_arena_set_allocated_basic_asset_size(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.basic_asset_size_);
  }
  _impl_.basic_asset_size_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.basic_asset_size)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::release_basic_asset_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.basic_asset_size_;
  _impl_.basic_asset_size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::unsafe_arena_release_basic_asset_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.basic_asset_size)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.basic_asset_size_;
  _impl_.basic_asset_size_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::_internal_mutable_basic_asset_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.basic_asset_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.basic_asset_size_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.basic_asset_size_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::mutable_basic_asset_size() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_basic_asset_size();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.basic_asset_size)
  return _msg;
}
inline void Future::set_allocated_basic_asset_size(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.basic_asset_size_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.basic_asset_size_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.basic_asset_size)
}

// string country_of_risk = 21;
inline void Future::clear_country_of_risk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_.ClearToEmpty();
}
inline const std::string& Future::country_of_risk() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.country_of_risk)
  return _internal_country_of_risk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Future::set_country_of_risk(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.country_of_risk)
}
inline std::string* Future::mutable_country_of_risk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_country_of_risk();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.country_of_risk)
  return _s;
}
inline const std::string& Future::_internal_country_of_risk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.country_of_risk_.Get();
}
inline void Future::_internal_set_country_of_risk(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_.Set(value, GetArena());
}
inline std::string* Future::_internal_mutable_country_of_risk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.country_of_risk_.Mutable( GetArena());
}
inline std::string* Future::release_country_of_risk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.country_of_risk)
  return _impl_.country_of_risk_.Release();
}
inline void Future::set_allocated_country_of_risk(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.country_of_risk_.IsDefault()) {
          _impl_.country_of_risk_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.country_of_risk)
}

// string country_of_risk_name = 22;
inline void Future::clear_country_of_risk_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_name_.ClearToEmpty();
}
inline const std::string& Future::country_of_risk_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.country_of_risk_name)
  return _internal_country_of_risk_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Future::set_country_of_risk_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.country_of_risk_name)
}
inline std::string* Future::mutable_country_of_risk_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_country_of_risk_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.country_of_risk_name)
  return _s;
}
inline const std::string& Future::_internal_country_of_risk_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.country_of_risk_name_.Get();
}
inline void Future::_internal_set_country_of_risk_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_name_.Set(value, GetArena());
}
inline std::string* Future::_internal_mutable_country_of_risk_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.country_of_risk_name_.Mutable( GetArena());
}
inline std::string* Future::release_country_of_risk_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.country_of_risk_name)
  return _impl_.country_of_risk_name_.Release();
}
inline void Future::set_allocated_country_of_risk_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.country_of_risk_name_.IsDefault()) {
          _impl_.country_of_risk_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.country_of_risk_name)
}

// string sector = 23;
inline void Future::clear_sector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sector_.ClearToEmpty();
}
inline const std::string& Future::sector() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.sector)
  return _internal_sector();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Future::set_sector(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sector_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.sector)
}
inline std::string* Future::mutable_sector() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sector();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.sector)
  return _s;
}
inline const std::string& Future::_internal_sector() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sector_.Get();
}
inline void Future::_internal_set_sector(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sector_.Set(value, GetArena());
}
inline std::string* Future::_internal_mutable_sector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.sector_.Mutable( GetArena());
}
inline std::string* Future::release_sector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.sector)
  return _impl_.sector_.Release();
}
inline void Future::set_allocated_sector(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sector_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sector_.IsDefault()) {
          _impl_.sector_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.sector)
}

// .google.protobuf.Timestamp expiration_date = 24;
inline bool Future::has_expiration_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.expiration_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Future::_internal_expiration_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.expiration_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Future::expiration_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.expiration_date)
  return _internal_expiration_date();
}
inline void Future::unsafe_arena_set_allocated_expiration_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expiration_date_);
  }
  _impl_.expiration_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.expiration_date)
}
inline ::google::protobuf::Timestamp* Future::release_expiration_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::google::protobuf::Timestamp* released = _impl_.expiration_date_;
  _impl_.expiration_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Future::unsafe_arena_release_expiration_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.expiration_date)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::google::protobuf::Timestamp* temp = _impl_.expiration_date_;
  _impl_.expiration_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Future::_internal_mutable_expiration_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.expiration_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.expiration_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.expiration_date_;
}
inline ::google::protobuf::Timestamp* Future::mutable_expiration_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_expiration_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.expiration_date)
  return _msg;
}
inline void Future::set_allocated_expiration_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expiration_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.expiration_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.expiration_date)
}

// .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
inline void Future::clear_trading_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trading_status_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus Future::trading_status() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.trading_status)
  return _internal_trading_status();
}
inline void Future::set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value) {
  _internal_set_trading_status(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.trading_status)
}
inline ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus Future::_internal_trading_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus>(_impl_.trading_status_);
}
inline void Future::_internal_set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trading_status_ = value;
}

// bool otc_flag = 26;
inline void Future::clear_otc_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.otc_flag_ = false;
}
inline bool Future::otc_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.otc_flag)
  return _internal_otc_flag();
}
inline void Future::set_otc_flag(bool value) {
  _internal_set_otc_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.otc_flag)
}
inline bool Future::_internal_otc_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.otc_flag_;
}
inline void Future::_internal_set_otc_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.otc_flag_ = value;
}

// bool buy_available_flag = 27;
inline void Future::clear_buy_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.buy_available_flag_ = false;
}
inline bool Future::buy_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.buy_available_flag)
  return _internal_buy_available_flag();
}
inline void Future::set_buy_available_flag(bool value) {
  _internal_set_buy_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.buy_available_flag)
}
inline bool Future::_internal_buy_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.buy_available_flag_;
}
inline void Future::_internal_set_buy_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.buy_available_flag_ = value;
}

// bool sell_available_flag = 28;
inline void Future::clear_sell_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sell_available_flag_ = false;
}
inline bool Future::sell_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.sell_available_flag)
  return _internal_sell_available_flag();
}
inline void Future::set_sell_available_flag(bool value) {
  _internal_set_sell_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.sell_available_flag)
}
inline bool Future::_internal_sell_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sell_available_flag_;
}
inline void Future::_internal_set_sell_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sell_available_flag_ = value;
}

// .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 29;
inline bool Future::has_min_price_increment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.min_price_increment_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::_internal_min_price_increment() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.min_price_increment_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::min_price_increment() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.min_price_increment)
  return _internal_min_price_increment();
}
inline void Future::unsafe_arena_set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_price_increment_);
  }
  _impl_.min_price_increment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.min_price_increment)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::release_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.min_price_increment_;
  _impl_.min_price_increment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::unsafe_arena_release_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.min_price_increment)

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.min_price_increment_;
  _impl_.min_price_increment_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::_internal_mutable_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.min_price_increment_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.min_price_increment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.min_price_increment_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::mutable_min_price_increment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_min_price_increment();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.min_price_increment)
  return _msg;
}
inline void Future::set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_price_increment_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }

  _impl_.min_price_increment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.min_price_increment)
}

// bool api_trade_available_flag = 30;
inline void Future::clear_api_trade_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.api_trade_available_flag_ = false;
}
inline bool Future::api_trade_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.api_trade_available_flag)
  return _internal_api_trade_available_flag();
}
inline void Future::set_api_trade_available_flag(bool value) {
  _internal_set_api_trade_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.api_trade_available_flag)
}
inline bool Future::_internal_api_trade_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.api_trade_available_flag_;
}
inline void Future::_internal_set_api_trade_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.api_trade_available_flag_ = value;
}

// string uid = 31;
inline void Future::clear_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& Future::uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.uid)
  return _internal_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Future::set_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.uid)
}
inline std::string* Future::mutable_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.uid)
  return _s;
}
inline const std::string& Future::_internal_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uid_.Get();
}
inline void Future::_internal_set_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(value, GetArena());
}
inline std::string* Future::_internal_mutable_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.uid_.Mutable( GetArena());
}
inline std::string* Future::release_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.uid)
  return _impl_.uid_.Release();
}
inline void Future::set_allocated_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uid_.IsDefault()) {
          _impl_.uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.uid)
}

// .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 32;
inline void Future::clear_real_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.real_exchange_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::RealExchange Future::real_exchange() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.real_exchange)
  return _internal_real_exchange();
}
inline void Future::set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value) {
  _internal_set_real_exchange(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.real_exchange)
}
inline ::tinkoff::public_::invest::api::contract::v1::RealExchange Future::_internal_real_exchange() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::RealExchange>(_impl_.real_exchange_);
}
inline void Future::_internal_set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.real_exchange_ = value;
}

// string position_uid = 33;
inline void Future::clear_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.position_uid_.ClearToEmpty();
}
inline const std::string& Future::position_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.position_uid)
  return _internal_position_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Future::set_position_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.position_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.position_uid)
}
inline std::string* Future::mutable_position_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_position_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.position_uid)
  return _s;
}
inline const std::string& Future::_internal_position_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.position_uid_.Get();
}
inline void Future::_internal_set_position_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.position_uid_.Set(value, GetArena());
}
inline std::string* Future::_internal_mutable_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.position_uid_.Mutable( GetArena());
}
inline std::string* Future::release_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.position_uid)
  return _impl_.position_uid_.Release();
}
inline void Future::set_allocated_position_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.position_uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.position_uid_.IsDefault()) {
          _impl_.position_uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.position_uid)
}

// string basic_asset_position_uid = 34;
inline void Future::clear_basic_asset_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.basic_asset_position_uid_.ClearToEmpty();
}
inline const std::string& Future::basic_asset_position_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.basic_asset_position_uid)
  return _internal_basic_asset_position_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Future::set_basic_asset_position_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.basic_asset_position_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.basic_asset_position_uid)
}
inline std::string* Future::mutable_basic_asset_position_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_basic_asset_position_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.basic_asset_position_uid)
  return _s;
}
inline const std::string& Future::_internal_basic_asset_position_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.basic_asset_position_uid_.Get();
}
inline void Future::_internal_set_basic_asset_position_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.basic_asset_position_uid_.Set(value, GetArena());
}
inline std::string* Future::_internal_mutable_basic_asset_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.basic_asset_position_uid_.Mutable( GetArena());
}
inline std::string* Future::release_basic_asset_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.basic_asset_position_uid)
  return _impl_.basic_asset_position_uid_.Release();
}
inline void Future::set_allocated_basic_asset_position_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.basic_asset_position_uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.basic_asset_position_uid_.IsDefault()) {
          _impl_.basic_asset_position_uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.basic_asset_position_uid)
}

// bool for_iis_flag = 41;
inline void Future::clear_for_iis_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.for_iis_flag_ = false;
}
inline bool Future::for_iis_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.for_iis_flag)
  return _internal_for_iis_flag();
}
inline void Future::set_for_iis_flag(bool value) {
  _internal_set_for_iis_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.for_iis_flag)
}
inline bool Future::_internal_for_iis_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.for_iis_flag_;
}
inline void Future::_internal_set_for_iis_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.for_iis_flag_ = value;
}

// bool for_qual_investor_flag = 42;
inline void Future::clear_for_qual_investor_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.for_qual_investor_flag_ = false;
}
inline bool Future::for_qual_investor_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.for_qual_investor_flag)
  return _internal_for_qual_investor_flag();
}
inline void Future::set_for_qual_investor_flag(bool value) {
  _internal_set_for_qual_investor_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.for_qual_investor_flag)
}
inline bool Future::_internal_for_qual_investor_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.for_qual_investor_flag_;
}
inline void Future::_internal_set_for_qual_investor_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.for_qual_investor_flag_ = value;
}

// bool weekend_flag = 43;
inline void Future::clear_weekend_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.weekend_flag_ = false;
}
inline bool Future::weekend_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.weekend_flag)
  return _internal_weekend_flag();
}
inline void Future::set_weekend_flag(bool value) {
  _internal_set_weekend_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.weekend_flag)
}
inline bool Future::_internal_weekend_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.weekend_flag_;
}
inline void Future::_internal_set_weekend_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.weekend_flag_ = value;
}

// bool blocked_tca_flag = 44;
inline void Future::clear_blocked_tca_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.blocked_tca_flag_ = false;
}
inline bool Future::blocked_tca_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.blocked_tca_flag)
  return _internal_blocked_tca_flag();
}
inline void Future::set_blocked_tca_flag(bool value) {
  _internal_set_blocked_tca_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Future.blocked_tca_flag)
}
inline bool Future::_internal_blocked_tca_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.blocked_tca_flag_;
}
inline void Future::_internal_set_blocked_tca_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.blocked_tca_flag_ = value;
}

// .google.protobuf.Timestamp first_1min_candle_date = 56;
inline bool Future::has_first_1min_candle_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.first_1min_candle_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Future::_internal_first_1min_candle_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.first_1min_candle_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Future::first_1min_candle_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.first_1min_candle_date)
  return _internal_first_1min_candle_date();
}
inline void Future::unsafe_arena_set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1min_candle_date_);
  }
  _impl_.first_1min_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.first_1min_candle_date)
}
inline ::google::protobuf::Timestamp* Future::release_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::google::protobuf::Timestamp* released = _impl_.first_1min_candle_date_;
  _impl_.first_1min_candle_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Future::unsafe_arena_release_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.first_1min_candle_date)

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::google::protobuf::Timestamp* temp = _impl_.first_1min_candle_date_;
  _impl_.first_1min_candle_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Future::_internal_mutable_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.first_1min_candle_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.first_1min_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.first_1min_candle_date_;
}
inline ::google::protobuf::Timestamp* Future::mutable_first_1min_candle_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_first_1min_candle_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.first_1min_candle_date)
  return _msg;
}
inline void Future::set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1min_candle_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }

  _impl_.first_1min_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.first_1min_candle_date)
}

// .google.protobuf.Timestamp first_1day_candle_date = 57;
inline bool Future::has_first_1day_candle_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.first_1day_candle_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Future::_internal_first_1day_candle_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.first_1day_candle_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Future::first_1day_candle_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.first_1day_candle_date)
  return _internal_first_1day_candle_date();
}
inline void Future::unsafe_arena_set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1day_candle_date_);
  }
  _impl_.first_1day_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.first_1day_candle_date)
}
inline ::google::protobuf::Timestamp* Future::release_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::google::protobuf::Timestamp* released = _impl_.first_1day_candle_date_;
  _impl_.first_1day_candle_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Future::unsafe_arena_release_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.first_1day_candle_date)

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::google::protobuf::Timestamp* temp = _impl_.first_1day_candle_date_;
  _impl_.first_1day_candle_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Future::_internal_mutable_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.first_1day_candle_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.first_1day_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.first_1day_candle_date_;
}
inline ::google::protobuf::Timestamp* Future::mutable_first_1day_candle_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_first_1day_candle_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.first_1day_candle_date)
  return _msg;
}
inline void Future::set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1day_candle_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }

  _impl_.first_1day_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.first_1day_candle_date)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_buy = 61;
inline bool Future::has_initial_margin_on_buy() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.initial_margin_on_buy_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Future::_internal_initial_margin_on_buy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.initial_margin_on_buy_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Future::initial_margin_on_buy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.initial_margin_on_buy)
  return _internal_initial_margin_on_buy();
}
inline void Future::unsafe_arena_set_allocated_initial_margin_on_buy(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_margin_on_buy_);
  }
  _impl_.initial_margin_on_buy_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.initial_margin_on_buy)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Future::release_initial_margin_on_buy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00002000u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.initial_margin_on_buy_;
  _impl_.initial_margin_on_buy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Future::unsafe_arena_release_initial_margin_on_buy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.initial_margin_on_buy)

  _impl_._has_bits_[0] &= ~0x00002000u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_margin_on_buy_;
  _impl_.initial_margin_on_buy_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Future::_internal_mutable_initial_margin_on_buy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.initial_margin_on_buy_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
    _impl_.initial_margin_on_buy_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
  }
  return _impl_.initial_margin_on_buy_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Future::mutable_initial_margin_on_buy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_initial_margin_on_buy();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.initial_margin_on_buy)
  return _msg;
}
inline void Future::set_allocated_initial_margin_on_buy(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_margin_on_buy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }

  _impl_.initial_margin_on_buy_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.initial_margin_on_buy)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_sell = 62;
inline bool Future::has_initial_margin_on_sell() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.initial_margin_on_sell_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Future::_internal_initial_margin_on_sell() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.initial_margin_on_sell_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Future::initial_margin_on_sell() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.initial_margin_on_sell)
  return _internal_initial_margin_on_sell();
}
inline void Future::unsafe_arena_set_allocated_initial_margin_on_sell(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_margin_on_sell_);
  }
  _impl_.initial_margin_on_sell_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.initial_margin_on_sell)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Future::release_initial_margin_on_sell() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00004000u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.initial_margin_on_sell_;
  _impl_.initial_margin_on_sell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Future::unsafe_arena_release_initial_margin_on_sell() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.initial_margin_on_sell)

  _impl_._has_bits_[0] &= ~0x00004000u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_margin_on_sell_;
  _impl_.initial_margin_on_sell_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Future::_internal_mutable_initial_margin_on_sell() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00004000u;
  if (_impl_.initial_margin_on_sell_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
    _impl_.initial_margin_on_sell_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
  }
  return _impl_.initial_margin_on_sell_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Future::mutable_initial_margin_on_sell() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_initial_margin_on_sell();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.initial_margin_on_sell)
  return _msg;
}
inline void Future::set_allocated_initial_margin_on_sell(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_margin_on_sell_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }

  _impl_.initial_margin_on_sell_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.initial_margin_on_sell)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment_amount = 63;
inline bool Future::has_min_price_increment_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.min_price_increment_amount_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::_internal_min_price_increment_amount() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.min_price_increment_amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Future::min_price_increment_amount() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.min_price_increment_amount)
  return _internal_min_price_increment_amount();
}
inline void Future::unsafe_arena_set_allocated_min_price_increment_amount(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_price_increment_amount_);
  }
  _impl_.min_price_increment_amount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.min_price_increment_amount)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::release_min_price_increment_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00008000u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.min_price_increment_amount_;
  _impl_.min_price_increment_amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::unsafe_arena_release_min_price_increment_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.min_price_increment_amount)

  _impl_._has_bits_[0] &= ~0x00008000u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.min_price_increment_amount_;
  _impl_.min_price_increment_amount_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::_internal_mutable_min_price_increment_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00008000u;
  if (_impl_.min_price_increment_amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.min_price_increment_amount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.min_price_increment_amount_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Future::mutable_min_price_increment_amount() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_min_price_increment_amount();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.min_price_increment_amount)
  return _msg;
}
inline void Future::set_allocated_min_price_increment_amount(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_price_increment_amount_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }

  _impl_.min_price_increment_amount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.min_price_increment_amount)
}

// .tinkoff.public_.invest.api.contract.v1.BrandData brand = 64;
inline bool Future::has_brand() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.brand_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::BrandData& Future::_internal_brand() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::BrandData* p = _impl_.brand_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::BrandData&>(::tinkoff::public_::invest::api::contract::v1::_BrandData_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::BrandData& Future::brand() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Future.brand)
  return _internal_brand();
}
inline void Future::unsafe_arena_set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.brand_);
  }
  _impl_.brand_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::BrandData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.brand)
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Future::release_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00010000u;
  ::tinkoff::public_::invest::api::contract::v1::BrandData* released = _impl_.brand_;
  _impl_.brand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Future::unsafe_arena_release_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Future.brand)

  _impl_._has_bits_[0] &= ~0x00010000u;
  ::tinkoff::public_::invest::api::contract::v1::BrandData* temp = _impl_.brand_;
  _impl_.brand_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Future::_internal_mutable_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00010000u;
  if (_impl_.brand_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::BrandData>(GetArena());
    _impl_.brand_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::BrandData*>(p);
  }
  return _impl_.brand_;
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Future::mutable_brand() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::BrandData* _msg = _internal_mutable_brand();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Future.brand)
  return _msg;
}
inline void Future::set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.brand_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }

  _impl_.brand_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::BrandData*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Future.brand)
}

// -------------------------------------------------------------------

// Share

// string figi = 1;
inline void Share::clear_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& Share::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Share::set_figi(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.figi)
}
inline std::string* Share::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Share.figi)
  return _s;
}
inline const std::string& Share::_internal_figi() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.figi_.Get();
}
inline void Share::_internal_set_figi(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* Share::_internal_mutable_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* Share::release_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Share.figi)
  return _impl_.figi_.Release();
}
inline void Share::set_allocated_figi(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.figi_.IsDefault()) {
          _impl_.figi_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.figi)
}

// string ticker = 2;
inline void Share::clear_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.ClearToEmpty();
}
inline const std::string& Share::ticker() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.ticker)
  return _internal_ticker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Share::set_ticker(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.ticker)
}
inline std::string* Share::mutable_ticker() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ticker();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Share.ticker)
  return _s;
}
inline const std::string& Share::_internal_ticker() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ticker_.Get();
}
inline void Share::_internal_set_ticker(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(value, GetArena());
}
inline std::string* Share::_internal_mutable_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ticker_.Mutable( GetArena());
}
inline std::string* Share::release_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Share.ticker)
  return _impl_.ticker_.Release();
}
inline void Share::set_allocated_ticker(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ticker_.IsDefault()) {
          _impl_.ticker_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.ticker)
}

// string class_code = 3;
inline void Share::clear_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_code_.ClearToEmpty();
}
inline const std::string& Share::class_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.class_code)
  return _internal_class_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Share::set_class_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.class_code)
}
inline std::string* Share::mutable_class_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_class_code();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Share.class_code)
  return _s;
}
inline const std::string& Share::_internal_class_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.class_code_.Get();
}
inline void Share::_internal_set_class_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class_code_.Set(value, GetArena());
}
inline std::string* Share::_internal_mutable_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.class_code_.Mutable( GetArena());
}
inline std::string* Share::release_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Share.class_code)
  return _impl_.class_code_.Release();
}
inline void Share::set_allocated_class_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.class_code_.IsDefault()) {
          _impl_.class_code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.class_code)
}

// string isin = 4;
inline void Share::clear_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.isin_.ClearToEmpty();
}
inline const std::string& Share::isin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.isin)
  return _internal_isin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Share::set_isin(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.isin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.isin)
}
inline std::string* Share::mutable_isin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_isin();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Share.isin)
  return _s;
}
inline const std::string& Share::_internal_isin() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.isin_.Get();
}
inline void Share::_internal_set_isin(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.isin_.Set(value, GetArena());
}
inline std::string* Share::_internal_mutable_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.isin_.Mutable( GetArena());
}
inline std::string* Share::release_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Share.isin)
  return _impl_.isin_.Release();
}
inline void Share::set_allocated_isin(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.isin_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.isin_.IsDefault()) {
          _impl_.isin_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.isin)
}

// int32 lot = 5;
inline void Share::clear_lot() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lot_ = 0;
}
inline ::int32_t Share::lot() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.lot)
  return _internal_lot();
}
inline void Share::set_lot(::int32_t value) {
  _internal_set_lot(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.lot)
}
inline ::int32_t Share::_internal_lot() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lot_;
}
inline void Share::_internal_set_lot(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lot_ = value;
}

// string currency = 6;
inline void Share::clear_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.ClearToEmpty();
}
inline const std::string& Share::currency() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.currency)
  return _internal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Share::set_currency(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.currency)
}
inline std::string* Share::mutable_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Share.currency)
  return _s;
}
inline const std::string& Share::_internal_currency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.currency_.Get();
}
inline void Share::_internal_set_currency(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(value, GetArena());
}
inline std::string* Share::_internal_mutable_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.currency_.Mutable( GetArena());
}
inline std::string* Share::release_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Share.currency)
  return _impl_.currency_.Release();
}
inline void Share::set_allocated_currency(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.currency_.IsDefault()) {
          _impl_.currency_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.currency)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
inline bool Share::has_klong() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.klong_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Share::_internal_klong() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.klong_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Share::klong() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.klong)
  return _internal_klong();
}
inline void Share::unsafe_arena_set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.klong_);
  }
  _impl_.klong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.klong)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::release_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.klong_;
  _impl_.klong_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::unsafe_arena_release_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Share.klong)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.klong_;
  _impl_.klong_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::_internal_mutable_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.klong_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.klong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.klong_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::mutable_klong() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_klong();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Share.klong)
  return _msg;
}
inline void Share::set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.klong_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.klong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.klong)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
inline bool Share::has_kshort() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kshort_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Share::_internal_kshort() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.kshort_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Share::kshort() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.kshort)
  return _internal_kshort();
}
inline void Share::unsafe_arena_set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kshort_);
  }
  _impl_.kshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.kshort)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::release_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.kshort_;
  _impl_.kshort_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::unsafe_arena_release_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Share.kshort)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.kshort_;
  _impl_.kshort_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::_internal_mutable_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.kshort_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.kshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.kshort_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::mutable_kshort() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_kshort();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Share.kshort)
  return _msg;
}
inline void Share::set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kshort_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.kshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.kshort)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
inline bool Share::has_dlong() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dlong_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Share::_internal_dlong() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dlong_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Share::dlong() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.dlong)
  return _internal_dlong();
}
inline void Share::unsafe_arena_set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_);
  }
  _impl_.dlong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.dlong)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::release_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dlong_;
  _impl_.dlong_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::unsafe_arena_release_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Share.dlong)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dlong_;
  _impl_.dlong_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::_internal_mutable_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.dlong_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dlong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dlong_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::mutable_dlong() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dlong();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Share.dlong)
  return _msg;
}
inline void Share::set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.dlong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.dlong)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
inline bool Share::has_dshort() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dshort_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Share::_internal_dshort() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dshort_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Share::dshort() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.dshort)
  return _internal_dshort();
}
inline void Share::unsafe_arena_set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_);
  }
  _impl_.dshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.dshort)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::release_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dshort_;
  _impl_.dshort_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::unsafe_arena_release_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Share.dshort)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dshort_;
  _impl_.dshort_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::_internal_mutable_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.dshort_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dshort_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::mutable_dshort() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dshort();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Share.dshort)
  return _msg;
}
inline void Share::set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.dshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.dshort)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
inline bool Share::has_dlong_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dlong_min_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Share::_internal_dlong_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dlong_min_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Share::dlong_min() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.dlong_min)
  return _internal_dlong_min();
}
inline void Share::unsafe_arena_set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_min_);
  }
  _impl_.dlong_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.dlong_min)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::release_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dlong_min_;
  _impl_.dlong_min_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::unsafe_arena_release_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Share.dlong_min)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dlong_min_;
  _impl_.dlong_min_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::_internal_mutable_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.dlong_min_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dlong_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dlong_min_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::mutable_dlong_min() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dlong_min();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Share.dlong_min)
  return _msg;
}
inline void Share::set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_min_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.dlong_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.dlong_min)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
inline bool Share::has_dshort_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dshort_min_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Share::_internal_dshort_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dshort_min_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Share::dshort_min() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.dshort_min)
  return _internal_dshort_min();
}
inline void Share::unsafe_arena_set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_min_);
  }
  _impl_.dshort_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.dshort_min)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::release_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dshort_min_;
  _impl_.dshort_min_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::unsafe_arena_release_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Share.dshort_min)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dshort_min_;
  _impl_.dshort_min_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::_internal_mutable_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.dshort_min_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dshort_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dshort_min_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::mutable_dshort_min() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dshort_min();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Share.dshort_min)
  return _msg;
}
inline void Share::set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_min_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.dshort_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.dshort_min)
}

// bool short_enabled_flag = 13;
inline void Share::clear_short_enabled_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.short_enabled_flag_ = false;
}
inline bool Share::short_enabled_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.short_enabled_flag)
  return _internal_short_enabled_flag();
}
inline void Share::set_short_enabled_flag(bool value) {
  _internal_set_short_enabled_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.short_enabled_flag)
}
inline bool Share::_internal_short_enabled_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.short_enabled_flag_;
}
inline void Share::_internal_set_short_enabled_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.short_enabled_flag_ = value;
}

// string name = 15;
inline void Share::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Share::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Share::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.name)
}
inline std::string* Share::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Share.name)
  return _s;
}
inline const std::string& Share::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Share::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Share::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Share::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Share.name)
  return _impl_.name_.Release();
}
inline void Share::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.name)
}

// string exchange = 16;
inline void Share::clear_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_.ClearToEmpty();
}
inline const std::string& Share::exchange() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.exchange)
  return _internal_exchange();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Share::set_exchange(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.exchange)
}
inline std::string* Share::mutable_exchange() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_exchange();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Share.exchange)
  return _s;
}
inline const std::string& Share::_internal_exchange() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exchange_.Get();
}
inline void Share::_internal_set_exchange(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_.Set(value, GetArena());
}
inline std::string* Share::_internal_mutable_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.exchange_.Mutable( GetArena());
}
inline std::string* Share::release_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Share.exchange)
  return _impl_.exchange_.Release();
}
inline void Share::set_allocated_exchange(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_.IsDefault()) {
          _impl_.exchange_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.exchange)
}

// .google.protobuf.Timestamp ipo_date = 17;
inline bool Share::has_ipo_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ipo_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Share::_internal_ipo_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.ipo_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Share::ipo_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.ipo_date)
  return _internal_ipo_date();
}
inline void Share::unsafe_arena_set_allocated_ipo_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ipo_date_);
  }
  _impl_.ipo_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.ipo_date)
}
inline ::google::protobuf::Timestamp* Share::release_ipo_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::google::protobuf::Timestamp* released = _impl_.ipo_date_;
  _impl_.ipo_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Share::unsafe_arena_release_ipo_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Share.ipo_date)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::google::protobuf::Timestamp* temp = _impl_.ipo_date_;
  _impl_.ipo_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Share::_internal_mutable_ipo_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.ipo_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.ipo_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.ipo_date_;
}
inline ::google::protobuf::Timestamp* Share::mutable_ipo_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_ipo_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Share.ipo_date)
  return _msg;
}
inline void Share::set_allocated_ipo_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ipo_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.ipo_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.ipo_date)
}

// int64 issue_size = 18;
inline void Share::clear_issue_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.issue_size_ = ::int64_t{0};
}
inline ::int64_t Share::issue_size() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.issue_size)
  return _internal_issue_size();
}
inline void Share::set_issue_size(::int64_t value) {
  _internal_set_issue_size(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.issue_size)
}
inline ::int64_t Share::_internal_issue_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.issue_size_;
}
inline void Share::_internal_set_issue_size(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.issue_size_ = value;
}

// string country_of_risk = 19;
inline void Share::clear_country_of_risk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_.ClearToEmpty();
}
inline const std::string& Share::country_of_risk() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.country_of_risk)
  return _internal_country_of_risk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Share::set_country_of_risk(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.country_of_risk)
}
inline std::string* Share::mutable_country_of_risk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_country_of_risk();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Share.country_of_risk)
  return _s;
}
inline const std::string& Share::_internal_country_of_risk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.country_of_risk_.Get();
}
inline void Share::_internal_set_country_of_risk(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_.Set(value, GetArena());
}
inline std::string* Share::_internal_mutable_country_of_risk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.country_of_risk_.Mutable( GetArena());
}
inline std::string* Share::release_country_of_risk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Share.country_of_risk)
  return _impl_.country_of_risk_.Release();
}
inline void Share::set_allocated_country_of_risk(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.country_of_risk_.IsDefault()) {
          _impl_.country_of_risk_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.country_of_risk)
}

// string country_of_risk_name = 20;
inline void Share::clear_country_of_risk_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_name_.ClearToEmpty();
}
inline const std::string& Share::country_of_risk_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.country_of_risk_name)
  return _internal_country_of_risk_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Share::set_country_of_risk_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.country_of_risk_name)
}
inline std::string* Share::mutable_country_of_risk_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_country_of_risk_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Share.country_of_risk_name)
  return _s;
}
inline const std::string& Share::_internal_country_of_risk_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.country_of_risk_name_.Get();
}
inline void Share::_internal_set_country_of_risk_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_name_.Set(value, GetArena());
}
inline std::string* Share::_internal_mutable_country_of_risk_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.country_of_risk_name_.Mutable( GetArena());
}
inline std::string* Share::release_country_of_risk_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Share.country_of_risk_name)
  return _impl_.country_of_risk_name_.Release();
}
inline void Share::set_allocated_country_of_risk_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.country_of_risk_name_.IsDefault()) {
          _impl_.country_of_risk_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.country_of_risk_name)
}

// string sector = 21;
inline void Share::clear_sector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sector_.ClearToEmpty();
}
inline const std::string& Share::sector() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.sector)
  return _internal_sector();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Share::set_sector(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sector_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.sector)
}
inline std::string* Share::mutable_sector() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sector();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Share.sector)
  return _s;
}
inline const std::string& Share::_internal_sector() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sector_.Get();
}
inline void Share::_internal_set_sector(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sector_.Set(value, GetArena());
}
inline std::string* Share::_internal_mutable_sector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.sector_.Mutable( GetArena());
}
inline std::string* Share::release_sector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Share.sector)
  return _impl_.sector_.Release();
}
inline void Share::set_allocated_sector(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sector_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sector_.IsDefault()) {
          _impl_.sector_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.sector)
}

// int64 issue_size_plan = 22;
inline void Share::clear_issue_size_plan() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.issue_size_plan_ = ::int64_t{0};
}
inline ::int64_t Share::issue_size_plan() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.issue_size_plan)
  return _internal_issue_size_plan();
}
inline void Share::set_issue_size_plan(::int64_t value) {
  _internal_set_issue_size_plan(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.issue_size_plan)
}
inline ::int64_t Share::_internal_issue_size_plan() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.issue_size_plan_;
}
inline void Share::_internal_set_issue_size_plan(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.issue_size_plan_ = value;
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue nominal = 23;
inline bool Share::has_nominal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nominal_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Share::_internal_nominal() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.nominal_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Share::nominal() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.nominal)
  return _internal_nominal();
}
inline void Share::unsafe_arena_set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nominal_);
  }
  _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.nominal)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Share::release_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.nominal_;
  _impl_.nominal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Share::unsafe_arena_release_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Share.nominal)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.nominal_;
  _impl_.nominal_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Share::_internal_mutable_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.nominal_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
    _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
  }
  return _impl_.nominal_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Share::mutable_nominal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_nominal();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Share.nominal)
  return _msg;
}
inline void Share::set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nominal_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.nominal)
}

// .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
inline void Share::clear_trading_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trading_status_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus Share::trading_status() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.trading_status)
  return _internal_trading_status();
}
inline void Share::set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value) {
  _internal_set_trading_status(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.trading_status)
}
inline ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus Share::_internal_trading_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus>(_impl_.trading_status_);
}
inline void Share::_internal_set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trading_status_ = value;
}

// bool otc_flag = 26;
inline void Share::clear_otc_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.otc_flag_ = false;
}
inline bool Share::otc_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.otc_flag)
  return _internal_otc_flag();
}
inline void Share::set_otc_flag(bool value) {
  _internal_set_otc_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.otc_flag)
}
inline bool Share::_internal_otc_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.otc_flag_;
}
inline void Share::_internal_set_otc_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.otc_flag_ = value;
}

// bool buy_available_flag = 27;
inline void Share::clear_buy_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.buy_available_flag_ = false;
}
inline bool Share::buy_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.buy_available_flag)
  return _internal_buy_available_flag();
}
inline void Share::set_buy_available_flag(bool value) {
  _internal_set_buy_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.buy_available_flag)
}
inline bool Share::_internal_buy_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.buy_available_flag_;
}
inline void Share::_internal_set_buy_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.buy_available_flag_ = value;
}

// bool sell_available_flag = 28;
inline void Share::clear_sell_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sell_available_flag_ = false;
}
inline bool Share::sell_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.sell_available_flag)
  return _internal_sell_available_flag();
}
inline void Share::set_sell_available_flag(bool value) {
  _internal_set_sell_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.sell_available_flag)
}
inline bool Share::_internal_sell_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sell_available_flag_;
}
inline void Share::_internal_set_sell_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sell_available_flag_ = value;
}

// bool div_yield_flag = 29;
inline void Share::clear_div_yield_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.div_yield_flag_ = false;
}
inline bool Share::div_yield_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.div_yield_flag)
  return _internal_div_yield_flag();
}
inline void Share::set_div_yield_flag(bool value) {
  _internal_set_div_yield_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.div_yield_flag)
}
inline bool Share::_internal_div_yield_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.div_yield_flag_;
}
inline void Share::_internal_set_div_yield_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.div_yield_flag_ = value;
}

// .tinkoff.public_.invest.api.contract.v1.ShareType share_type = 30;
inline void Share::clear_share_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.share_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::ShareType Share::share_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.share_type)
  return _internal_share_type();
}
inline void Share::set_share_type(::tinkoff::public_::invest::api::contract::v1::ShareType value) {
  _internal_set_share_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.share_type)
}
inline ::tinkoff::public_::invest::api::contract::v1::ShareType Share::_internal_share_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::ShareType>(_impl_.share_type_);
}
inline void Share::_internal_set_share_type(::tinkoff::public_::invest::api::contract::v1::ShareType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.share_type_ = value;
}

// .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 31;
inline bool Share::has_min_price_increment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.min_price_increment_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Share::_internal_min_price_increment() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.min_price_increment_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Share::min_price_increment() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.min_price_increment)
  return _internal_min_price_increment();
}
inline void Share::unsafe_arena_set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_price_increment_);
  }
  _impl_.min_price_increment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.min_price_increment)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::release_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.min_price_increment_;
  _impl_.min_price_increment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::unsafe_arena_release_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Share.min_price_increment)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.min_price_increment_;
  _impl_.min_price_increment_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::_internal_mutable_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.min_price_increment_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.min_price_increment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.min_price_increment_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Share::mutable_min_price_increment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_min_price_increment();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Share.min_price_increment)
  return _msg;
}
inline void Share::set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_price_increment_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.min_price_increment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.min_price_increment)
}

// bool api_trade_available_flag = 32;
inline void Share::clear_api_trade_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.api_trade_available_flag_ = false;
}
inline bool Share::api_trade_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.api_trade_available_flag)
  return _internal_api_trade_available_flag();
}
inline void Share::set_api_trade_available_flag(bool value) {
  _internal_set_api_trade_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.api_trade_available_flag)
}
inline bool Share::_internal_api_trade_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.api_trade_available_flag_;
}
inline void Share::_internal_set_api_trade_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.api_trade_available_flag_ = value;
}

// string uid = 33;
inline void Share::clear_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& Share::uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.uid)
  return _internal_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Share::set_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.uid)
}
inline std::string* Share::mutable_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Share.uid)
  return _s;
}
inline const std::string& Share::_internal_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uid_.Get();
}
inline void Share::_internal_set_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(value, GetArena());
}
inline std::string* Share::_internal_mutable_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.uid_.Mutable( GetArena());
}
inline std::string* Share::release_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Share.uid)
  return _impl_.uid_.Release();
}
inline void Share::set_allocated_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uid_.IsDefault()) {
          _impl_.uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.uid)
}

// .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 34;
inline void Share::clear_real_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.real_exchange_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::RealExchange Share::real_exchange() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.real_exchange)
  return _internal_real_exchange();
}
inline void Share::set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value) {
  _internal_set_real_exchange(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.real_exchange)
}
inline ::tinkoff::public_::invest::api::contract::v1::RealExchange Share::_internal_real_exchange() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::RealExchange>(_impl_.real_exchange_);
}
inline void Share::_internal_set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.real_exchange_ = value;
}

// string position_uid = 35;
inline void Share::clear_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.position_uid_.ClearToEmpty();
}
inline const std::string& Share::position_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.position_uid)
  return _internal_position_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Share::set_position_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.position_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.position_uid)
}
inline std::string* Share::mutable_position_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_position_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Share.position_uid)
  return _s;
}
inline const std::string& Share::_internal_position_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.position_uid_.Get();
}
inline void Share::_internal_set_position_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.position_uid_.Set(value, GetArena());
}
inline std::string* Share::_internal_mutable_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.position_uid_.Mutable( GetArena());
}
inline std::string* Share::release_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Share.position_uid)
  return _impl_.position_uid_.Release();
}
inline void Share::set_allocated_position_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.position_uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.position_uid_.IsDefault()) {
          _impl_.position_uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.position_uid)
}

// string asset_uid = 36;
inline void Share::clear_asset_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.asset_uid_.ClearToEmpty();
}
inline const std::string& Share::asset_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.asset_uid)
  return _internal_asset_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Share::set_asset_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.asset_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.asset_uid)
}
inline std::string* Share::mutable_asset_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_asset_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Share.asset_uid)
  return _s;
}
inline const std::string& Share::_internal_asset_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.asset_uid_.Get();
}
inline void Share::_internal_set_asset_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.asset_uid_.Set(value, GetArena());
}
inline std::string* Share::_internal_mutable_asset_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.asset_uid_.Mutable( GetArena());
}
inline std::string* Share::release_asset_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Share.asset_uid)
  return _impl_.asset_uid_.Release();
}
inline void Share::set_allocated_asset_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.asset_uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.asset_uid_.IsDefault()) {
          _impl_.asset_uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.asset_uid)
}

// bool for_iis_flag = 46;
inline void Share::clear_for_iis_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.for_iis_flag_ = false;
}
inline bool Share::for_iis_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.for_iis_flag)
  return _internal_for_iis_flag();
}
inline void Share::set_for_iis_flag(bool value) {
  _internal_set_for_iis_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.for_iis_flag)
}
inline bool Share::_internal_for_iis_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.for_iis_flag_;
}
inline void Share::_internal_set_for_iis_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.for_iis_flag_ = value;
}

// bool for_qual_investor_flag = 47;
inline void Share::clear_for_qual_investor_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.for_qual_investor_flag_ = false;
}
inline bool Share::for_qual_investor_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.for_qual_investor_flag)
  return _internal_for_qual_investor_flag();
}
inline void Share::set_for_qual_investor_flag(bool value) {
  _internal_set_for_qual_investor_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.for_qual_investor_flag)
}
inline bool Share::_internal_for_qual_investor_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.for_qual_investor_flag_;
}
inline void Share::_internal_set_for_qual_investor_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.for_qual_investor_flag_ = value;
}

// bool weekend_flag = 48;
inline void Share::clear_weekend_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.weekend_flag_ = false;
}
inline bool Share::weekend_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.weekend_flag)
  return _internal_weekend_flag();
}
inline void Share::set_weekend_flag(bool value) {
  _internal_set_weekend_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.weekend_flag)
}
inline bool Share::_internal_weekend_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.weekend_flag_;
}
inline void Share::_internal_set_weekend_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.weekend_flag_ = value;
}

// bool blocked_tca_flag = 49;
inline void Share::clear_blocked_tca_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.blocked_tca_flag_ = false;
}
inline bool Share::blocked_tca_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.blocked_tca_flag)
  return _internal_blocked_tca_flag();
}
inline void Share::set_blocked_tca_flag(bool value) {
  _internal_set_blocked_tca_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.blocked_tca_flag)
}
inline bool Share::_internal_blocked_tca_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.blocked_tca_flag_;
}
inline void Share::_internal_set_blocked_tca_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.blocked_tca_flag_ = value;
}

// bool liquidity_flag = 50;
inline void Share::clear_liquidity_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.liquidity_flag_ = false;
}
inline bool Share::liquidity_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.liquidity_flag)
  return _internal_liquidity_flag();
}
inline void Share::set_liquidity_flag(bool value) {
  _internal_set_liquidity_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Share.liquidity_flag)
}
inline bool Share::_internal_liquidity_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.liquidity_flag_;
}
inline void Share::_internal_set_liquidity_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.liquidity_flag_ = value;
}

// .google.protobuf.Timestamp first_1min_candle_date = 56;
inline bool Share::has_first_1min_candle_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.first_1min_candle_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Share::_internal_first_1min_candle_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.first_1min_candle_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Share::first_1min_candle_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.first_1min_candle_date)
  return _internal_first_1min_candle_date();
}
inline void Share::unsafe_arena_set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1min_candle_date_);
  }
  _impl_.first_1min_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.first_1min_candle_date)
}
inline ::google::protobuf::Timestamp* Share::release_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::google::protobuf::Timestamp* released = _impl_.first_1min_candle_date_;
  _impl_.first_1min_candle_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Share::unsafe_arena_release_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Share.first_1min_candle_date)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::google::protobuf::Timestamp* temp = _impl_.first_1min_candle_date_;
  _impl_.first_1min_candle_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Share::_internal_mutable_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.first_1min_candle_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.first_1min_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.first_1min_candle_date_;
}
inline ::google::protobuf::Timestamp* Share::mutable_first_1min_candle_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_first_1min_candle_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Share.first_1min_candle_date)
  return _msg;
}
inline void Share::set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1min_candle_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.first_1min_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.first_1min_candle_date)
}

// .google.protobuf.Timestamp first_1day_candle_date = 57;
inline bool Share::has_first_1day_candle_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.first_1day_candle_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Share::_internal_first_1day_candle_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.first_1day_candle_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Share::first_1day_candle_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.first_1day_candle_date)
  return _internal_first_1day_candle_date();
}
inline void Share::unsafe_arena_set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1day_candle_date_);
  }
  _impl_.first_1day_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.first_1day_candle_date)
}
inline ::google::protobuf::Timestamp* Share::release_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::google::protobuf::Timestamp* released = _impl_.first_1day_candle_date_;
  _impl_.first_1day_candle_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Share::unsafe_arena_release_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Share.first_1day_candle_date)

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::google::protobuf::Timestamp* temp = _impl_.first_1day_candle_date_;
  _impl_.first_1day_candle_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Share::_internal_mutable_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.first_1day_candle_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.first_1day_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.first_1day_candle_date_;
}
inline ::google::protobuf::Timestamp* Share::mutable_first_1day_candle_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_first_1day_candle_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Share.first_1day_candle_date)
  return _msg;
}
inline void Share::set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1day_candle_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }

  _impl_.first_1day_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.first_1day_candle_date)
}

// .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
inline bool Share::has_brand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.brand_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::BrandData& Share::_internal_brand() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::BrandData* p = _impl_.brand_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::BrandData&>(::tinkoff::public_::invest::api::contract::v1::_BrandData_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::BrandData& Share::brand() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Share.brand)
  return _internal_brand();
}
inline void Share::unsafe_arena_set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.brand_);
  }
  _impl_.brand_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::BrandData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.brand)
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Share::release_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::tinkoff::public_::invest::api::contract::v1::BrandData* released = _impl_.brand_;
  _impl_.brand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Share::unsafe_arena_release_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Share.brand)

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::tinkoff::public_::invest::api::contract::v1::BrandData* temp = _impl_.brand_;
  _impl_.brand_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Share::_internal_mutable_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.brand_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::BrandData>(GetArena());
    _impl_.brand_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::BrandData*>(p);
  }
  return _impl_.brand_;
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Share::mutable_brand() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::BrandData* _msg = _internal_mutable_brand();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Share.brand)
  return _msg;
}
inline void Share::set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.brand_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }

  _impl_.brand_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::BrandData*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Share.brand)
}

// -------------------------------------------------------------------

// GetAccruedInterestsRequest

// string figi = 1 [deprecated = true];
inline void GetAccruedInterestsRequest::clear_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& GetAccruedInterestsRequest::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetAccruedInterestsRequest::set_figi(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.figi)
}
inline std::string* GetAccruedInterestsRequest::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.figi)
  return _s;
}
inline const std::string& GetAccruedInterestsRequest::_internal_figi() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.figi_.Get();
}
inline void GetAccruedInterestsRequest::_internal_set_figi(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* GetAccruedInterestsRequest::_internal_mutable_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* GetAccruedInterestsRequest::release_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.figi)
  return _impl_.figi_.Release();
}
inline void GetAccruedInterestsRequest::set_allocated_figi(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.figi_.IsDefault()) {
          _impl_.figi_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.figi)
}

// .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool GetAccruedInterestsRequest::has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.from_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetAccruedInterestsRequest::_internal_from() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetAccruedInterestsRequest::from() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.from)
  return _internal_from();
}
inline void GetAccruedInterestsRequest::unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.from)
}
inline ::google::protobuf::Timestamp* GetAccruedInterestsRequest::release_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.from_;
  _impl_.from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetAccruedInterestsRequest::unsafe_arena_release_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.from)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetAccruedInterestsRequest::_internal_mutable_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.from_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.from_;
}
inline ::google::protobuf::Timestamp* GetAccruedInterestsRequest::mutable_from() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.from)
  return _msg;
}
inline void GetAccruedInterestsRequest::set_allocated_from(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.from)
}

// .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool GetAccruedInterestsRequest::has_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.to_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetAccruedInterestsRequest::_internal_to() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetAccruedInterestsRequest::to() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.to)
  return _internal_to();
}
inline void GetAccruedInterestsRequest::unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.to)
}
inline ::google::protobuf::Timestamp* GetAccruedInterestsRequest::release_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetAccruedInterestsRequest::unsafe_arena_release_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.to)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetAccruedInterestsRequest::_internal_mutable_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.to_;
}
inline ::google::protobuf::Timestamp* GetAccruedInterestsRequest::mutable_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.to)
  return _msg;
}
inline void GetAccruedInterestsRequest::set_allocated_to(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.to)
}

// string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
inline void GetAccruedInterestsRequest::clear_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_id_.ClearToEmpty();
}
inline const std::string& GetAccruedInterestsRequest::instrument_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.instrument_id)
  return _internal_instrument_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetAccruedInterestsRequest::set_instrument_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.instrument_id)
}
inline std::string* GetAccruedInterestsRequest::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.instrument_id)
  return _s;
}
inline const std::string& GetAccruedInterestsRequest::_internal_instrument_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instrument_id_.Get();
}
inline void GetAccruedInterestsRequest::_internal_set_instrument_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_id_.Set(value, GetArena());
}
inline std::string* GetAccruedInterestsRequest::_internal_mutable_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.instrument_id_.Mutable( GetArena());
}
inline std::string* GetAccruedInterestsRequest::release_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.instrument_id)
  return _impl_.instrument_id_.Release();
}
inline void GetAccruedInterestsRequest::set_allocated_instrument_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.instrument_id_.IsDefault()) {
          _impl_.instrument_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsRequest.instrument_id)
}

// -------------------------------------------------------------------

// GetAccruedInterestsResponse

// repeated .tinkoff.public_.invest.api.contract.v1.AccruedInterest accrued_interests = 1;
inline int GetAccruedInterestsResponse::_internal_accrued_interests_size() const {
  return _internal_accrued_interests().size();
}
inline int GetAccruedInterestsResponse::accrued_interests_size() const {
  return _internal_accrued_interests_size();
}
inline void GetAccruedInterestsResponse::clear_accrued_interests() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.accrued_interests_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::AccruedInterest* GetAccruedInterestsResponse::mutable_accrued_interests(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse.accrued_interests)
  return _internal_mutable_accrued_interests()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AccruedInterest>* GetAccruedInterestsResponse::mutable_accrued_interests()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse.accrued_interests)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_accrued_interests();
}
inline const ::tinkoff::public_::invest::api::contract::v1::AccruedInterest& GetAccruedInterestsResponse::accrued_interests(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse.accrued_interests)
  return _internal_accrued_interests().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::AccruedInterest* GetAccruedInterestsResponse::add_accrued_interests() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::AccruedInterest* _add = _internal_mutable_accrued_interests()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse.accrued_interests)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AccruedInterest>& GetAccruedInterestsResponse::accrued_interests() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.GetAccruedInterestsResponse.accrued_interests)
  return _internal_accrued_interests();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AccruedInterest>&
GetAccruedInterestsResponse::_internal_accrued_interests() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.accrued_interests_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AccruedInterest>*
GetAccruedInterestsResponse::_internal_mutable_accrued_interests() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.accrued_interests_;
}

// -------------------------------------------------------------------

// AccruedInterest

// .google.protobuf.Timestamp date = 1;
inline bool AccruedInterest::has_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& AccruedInterest::_internal_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& AccruedInterest::date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AccruedInterest.date)
  return _internal_date();
}
inline void AccruedInterest::unsafe_arena_set_allocated_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.date_);
  }
  _impl_.date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AccruedInterest.date)
}
inline ::google::protobuf::Timestamp* AccruedInterest::release_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.date_;
  _impl_.date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* AccruedInterest::unsafe_arena_release_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AccruedInterest.date)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.date_;
  _impl_.date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AccruedInterest::_internal_mutable_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.date_;
}
inline ::google::protobuf::Timestamp* AccruedInterest::mutable_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AccruedInterest.date)
  return _msg;
}
inline void AccruedInterest::set_allocated_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AccruedInterest.date)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation value = 2;
inline bool AccruedInterest::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AccruedInterest::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AccruedInterest::value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AccruedInterest.value)
  return _internal_value();
}
inline void AccruedInterest::unsafe_arena_set_allocated_value(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AccruedInterest.value)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AccruedInterest::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AccruedInterest::unsafe_arena_release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AccruedInterest.value)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AccruedInterest::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.value_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.value_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AccruedInterest::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AccruedInterest.value)
  return _msg;
}
inline void AccruedInterest::set_allocated_value(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.value_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AccruedInterest.value)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation value_percent = 3;
inline bool AccruedInterest::has_value_percent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_percent_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AccruedInterest::_internal_value_percent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.value_percent_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AccruedInterest::value_percent() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AccruedInterest.value_percent)
  return _internal_value_percent();
}
inline void AccruedInterest::unsafe_arena_set_allocated_value_percent(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_percent_);
  }
  _impl_.value_percent_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AccruedInterest.value_percent)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AccruedInterest::release_value_percent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.value_percent_;
  _impl_.value_percent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AccruedInterest::unsafe_arena_release_value_percent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AccruedInterest.value_percent)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.value_percent_;
  _impl_.value_percent_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AccruedInterest::_internal_mutable_value_percent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.value_percent_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.value_percent_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.value_percent_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AccruedInterest::mutable_value_percent() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_value_percent();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AccruedInterest.value_percent)
  return _msg;
}
inline void AccruedInterest::set_allocated_value_percent(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_percent_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.value_percent_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AccruedInterest.value_percent)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 4;
inline bool AccruedInterest::has_nominal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nominal_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AccruedInterest::_internal_nominal() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.nominal_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AccruedInterest::nominal() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AccruedInterest.nominal)
  return _internal_nominal();
}
inline void AccruedInterest::unsafe_arena_set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nominal_);
  }
  _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AccruedInterest.nominal)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AccruedInterest::release_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.nominal_;
  _impl_.nominal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AccruedInterest::unsafe_arena_release_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AccruedInterest.nominal)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.nominal_;
  _impl_.nominal_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AccruedInterest::_internal_mutable_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.nominal_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.nominal_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AccruedInterest::mutable_nominal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_nominal();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AccruedInterest.nominal)
  return _msg;
}
inline void AccruedInterest::set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nominal_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AccruedInterest.nominal)
}

// -------------------------------------------------------------------

// GetFuturesMarginRequest

// string figi = 1 [deprecated = true];
inline void GetFuturesMarginRequest::clear_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& GetFuturesMarginRequest::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetFuturesMarginRequest::set_figi(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest.figi)
}
inline std::string* GetFuturesMarginRequest::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest.figi)
  return _s;
}
inline const std::string& GetFuturesMarginRequest::_internal_figi() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.figi_.Get();
}
inline void GetFuturesMarginRequest::_internal_set_figi(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* GetFuturesMarginRequest::_internal_mutable_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* GetFuturesMarginRequest::release_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest.figi)
  return _impl_.figi_.Release();
}
inline void GetFuturesMarginRequest::set_allocated_figi(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.figi_.IsDefault()) {
          _impl_.figi_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest.figi)
}

// string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
inline void GetFuturesMarginRequest::clear_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_id_.ClearToEmpty();
}
inline const std::string& GetFuturesMarginRequest::instrument_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest.instrument_id)
  return _internal_instrument_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetFuturesMarginRequest::set_instrument_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest.instrument_id)
}
inline std::string* GetFuturesMarginRequest::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest.instrument_id)
  return _s;
}
inline const std::string& GetFuturesMarginRequest::_internal_instrument_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instrument_id_.Get();
}
inline void GetFuturesMarginRequest::_internal_set_instrument_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_id_.Set(value, GetArena());
}
inline std::string* GetFuturesMarginRequest::_internal_mutable_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.instrument_id_.Mutable( GetArena());
}
inline std::string* GetFuturesMarginRequest::release_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest.instrument_id)
  return _impl_.instrument_id_.Release();
}
inline void GetFuturesMarginRequest::set_allocated_instrument_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.instrument_id_.IsDefault()) {
          _impl_.instrument_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginRequest.instrument_id)
}

// -------------------------------------------------------------------

// GetFuturesMarginResponse

// .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_buy = 1;
inline bool GetFuturesMarginResponse::has_initial_margin_on_buy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.initial_margin_on_buy_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetFuturesMarginResponse::_internal_initial_margin_on_buy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.initial_margin_on_buy_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetFuturesMarginResponse::initial_margin_on_buy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse.initial_margin_on_buy)
  return _internal_initial_margin_on_buy();
}
inline void GetFuturesMarginResponse::unsafe_arena_set_allocated_initial_margin_on_buy(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_margin_on_buy_);
  }
  _impl_.initial_margin_on_buy_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse.initial_margin_on_buy)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetFuturesMarginResponse::release_initial_margin_on_buy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.initial_margin_on_buy_;
  _impl_.initial_margin_on_buy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetFuturesMarginResponse::unsafe_arena_release_initial_margin_on_buy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse.initial_margin_on_buy)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_margin_on_buy_;
  _impl_.initial_margin_on_buy_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetFuturesMarginResponse::_internal_mutable_initial_margin_on_buy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.initial_margin_on_buy_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
    _impl_.initial_margin_on_buy_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
  }
  return _impl_.initial_margin_on_buy_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetFuturesMarginResponse::mutable_initial_margin_on_buy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_initial_margin_on_buy();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse.initial_margin_on_buy)
  return _msg;
}
inline void GetFuturesMarginResponse::set_allocated_initial_margin_on_buy(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_margin_on_buy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.initial_margin_on_buy_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse.initial_margin_on_buy)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue initial_margin_on_sell = 2;
inline bool GetFuturesMarginResponse::has_initial_margin_on_sell() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.initial_margin_on_sell_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetFuturesMarginResponse::_internal_initial_margin_on_sell() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.initial_margin_on_sell_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& GetFuturesMarginResponse::initial_margin_on_sell() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse.initial_margin_on_sell)
  return _internal_initial_margin_on_sell();
}
inline void GetFuturesMarginResponse::unsafe_arena_set_allocated_initial_margin_on_sell(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_margin_on_sell_);
  }
  _impl_.initial_margin_on_sell_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse.initial_margin_on_sell)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetFuturesMarginResponse::release_initial_margin_on_sell() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.initial_margin_on_sell_;
  _impl_.initial_margin_on_sell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetFuturesMarginResponse::unsafe_arena_release_initial_margin_on_sell() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse.initial_margin_on_sell)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.initial_margin_on_sell_;
  _impl_.initial_margin_on_sell_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetFuturesMarginResponse::_internal_mutable_initial_margin_on_sell() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.initial_margin_on_sell_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
    _impl_.initial_margin_on_sell_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
  }
  return _impl_.initial_margin_on_sell_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* GetFuturesMarginResponse::mutable_initial_margin_on_sell() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_initial_margin_on_sell();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse.initial_margin_on_sell)
  return _msg;
}
inline void GetFuturesMarginResponse::set_allocated_initial_margin_on_sell(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_margin_on_sell_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.initial_margin_on_sell_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse.initial_margin_on_sell)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 3;
inline bool GetFuturesMarginResponse::has_min_price_increment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.min_price_increment_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetFuturesMarginResponse::_internal_min_price_increment() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.min_price_increment_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetFuturesMarginResponse::min_price_increment() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse.min_price_increment)
  return _internal_min_price_increment();
}
inline void GetFuturesMarginResponse::unsafe_arena_set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_price_increment_);
  }
  _impl_.min_price_increment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse.min_price_increment)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetFuturesMarginResponse::release_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.min_price_increment_;
  _impl_.min_price_increment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetFuturesMarginResponse::unsafe_arena_release_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse.min_price_increment)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.min_price_increment_;
  _impl_.min_price_increment_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetFuturesMarginResponse::_internal_mutable_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.min_price_increment_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.min_price_increment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.min_price_increment_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetFuturesMarginResponse::mutable_min_price_increment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_min_price_increment();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse.min_price_increment)
  return _msg;
}
inline void GetFuturesMarginResponse::set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_price_increment_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.min_price_increment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse.min_price_increment)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment_amount = 4;
inline bool GetFuturesMarginResponse::has_min_price_increment_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.min_price_increment_amount_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetFuturesMarginResponse::_internal_min_price_increment_amount() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.min_price_increment_amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetFuturesMarginResponse::min_price_increment_amount() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse.min_price_increment_amount)
  return _internal_min_price_increment_amount();
}
inline void GetFuturesMarginResponse::unsafe_arena_set_allocated_min_price_increment_amount(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_price_increment_amount_);
  }
  _impl_.min_price_increment_amount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse.min_price_increment_amount)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetFuturesMarginResponse::release_min_price_increment_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.min_price_increment_amount_;
  _impl_.min_price_increment_amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetFuturesMarginResponse::unsafe_arena_release_min_price_increment_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse.min_price_increment_amount)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.min_price_increment_amount_;
  _impl_.min_price_increment_amount_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetFuturesMarginResponse::_internal_mutable_min_price_increment_amount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.min_price_increment_amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.min_price_increment_amount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.min_price_increment_amount_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetFuturesMarginResponse::mutable_min_price_increment_amount() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_min_price_increment_amount();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse.min_price_increment_amount)
  return _msg;
}
inline void GetFuturesMarginResponse::set_allocated_min_price_increment_amount(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_price_increment_amount_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.min_price_increment_amount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetFuturesMarginResponse.min_price_increment_amount)
}

// -------------------------------------------------------------------

// InstrumentResponse

// .tinkoff.public_.invest.api.contract.v1.Instrument instrument = 1;
inline bool InstrumentResponse::has_instrument() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.instrument_ != nullptr);
  return value;
}
inline void InstrumentResponse::clear_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.instrument_ != nullptr) _impl_.instrument_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Instrument& InstrumentResponse::_internal_instrument() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Instrument* p = _impl_.instrument_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Instrument&>(::tinkoff::public_::invest::api::contract::v1::_Instrument_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Instrument& InstrumentResponse::instrument() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.InstrumentResponse.instrument)
  return _internal_instrument();
}
inline void InstrumentResponse::unsafe_arena_set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Instrument* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.instrument_);
  }
  _impl_.instrument_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Instrument*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.InstrumentResponse.instrument)
}
inline ::tinkoff::public_::invest::api::contract::v1::Instrument* InstrumentResponse::release_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Instrument* released = _impl_.instrument_;
  _impl_.instrument_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Instrument* InstrumentResponse::unsafe_arena_release_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.InstrumentResponse.instrument)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Instrument* temp = _impl_.instrument_;
  _impl_.instrument_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Instrument* InstrumentResponse::_internal_mutable_instrument() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.instrument_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Instrument>(GetArena());
    _impl_.instrument_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Instrument*>(p);
  }
  return _impl_.instrument_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Instrument* InstrumentResponse::mutable_instrument() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Instrument* _msg = _internal_mutable_instrument();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.InstrumentResponse.instrument)
  return _msg;
}
inline void InstrumentResponse::set_allocated_instrument(::tinkoff::public_::invest::api::contract::v1::Instrument* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Instrument*>(_impl_.instrument_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Instrument*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.instrument_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Instrument*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.InstrumentResponse.instrument)
}

// -------------------------------------------------------------------

// Instrument

// string figi = 1;
inline void Instrument::clear_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& Instrument::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Instrument::set_figi(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.figi)
}
inline std::string* Instrument::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Instrument.figi)
  return _s;
}
inline const std::string& Instrument::_internal_figi() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.figi_.Get();
}
inline void Instrument::_internal_set_figi(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* Instrument::_internal_mutable_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* Instrument::release_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Instrument.figi)
  return _impl_.figi_.Release();
}
inline void Instrument::set_allocated_figi(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.figi_.IsDefault()) {
          _impl_.figi_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.figi)
}

// string ticker = 2;
inline void Instrument::clear_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.ClearToEmpty();
}
inline const std::string& Instrument::ticker() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.ticker)
  return _internal_ticker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Instrument::set_ticker(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.ticker)
}
inline std::string* Instrument::mutable_ticker() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ticker();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Instrument.ticker)
  return _s;
}
inline const std::string& Instrument::_internal_ticker() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ticker_.Get();
}
inline void Instrument::_internal_set_ticker(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(value, GetArena());
}
inline std::string* Instrument::_internal_mutable_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ticker_.Mutable( GetArena());
}
inline std::string* Instrument::release_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Instrument.ticker)
  return _impl_.ticker_.Release();
}
inline void Instrument::set_allocated_ticker(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ticker_.IsDefault()) {
          _impl_.ticker_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.ticker)
}

// string class_code = 3;
inline void Instrument::clear_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_code_.ClearToEmpty();
}
inline const std::string& Instrument::class_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.class_code)
  return _internal_class_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Instrument::set_class_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.class_code)
}
inline std::string* Instrument::mutable_class_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_class_code();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Instrument.class_code)
  return _s;
}
inline const std::string& Instrument::_internal_class_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.class_code_.Get();
}
inline void Instrument::_internal_set_class_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class_code_.Set(value, GetArena());
}
inline std::string* Instrument::_internal_mutable_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.class_code_.Mutable( GetArena());
}
inline std::string* Instrument::release_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Instrument.class_code)
  return _impl_.class_code_.Release();
}
inline void Instrument::set_allocated_class_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.class_code_.IsDefault()) {
          _impl_.class_code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.class_code)
}

// string isin = 4;
inline void Instrument::clear_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.isin_.ClearToEmpty();
}
inline const std::string& Instrument::isin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.isin)
  return _internal_isin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Instrument::set_isin(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.isin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.isin)
}
inline std::string* Instrument::mutable_isin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_isin();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Instrument.isin)
  return _s;
}
inline const std::string& Instrument::_internal_isin() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.isin_.Get();
}
inline void Instrument::_internal_set_isin(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.isin_.Set(value, GetArena());
}
inline std::string* Instrument::_internal_mutable_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.isin_.Mutable( GetArena());
}
inline std::string* Instrument::release_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Instrument.isin)
  return _impl_.isin_.Release();
}
inline void Instrument::set_allocated_isin(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.isin_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.isin_.IsDefault()) {
          _impl_.isin_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.isin)
}

// int32 lot = 5;
inline void Instrument::clear_lot() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lot_ = 0;
}
inline ::int32_t Instrument::lot() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.lot)
  return _internal_lot();
}
inline void Instrument::set_lot(::int32_t value) {
  _internal_set_lot(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.lot)
}
inline ::int32_t Instrument::_internal_lot() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lot_;
}
inline void Instrument::_internal_set_lot(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lot_ = value;
}

// string currency = 6;
inline void Instrument::clear_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.ClearToEmpty();
}
inline const std::string& Instrument::currency() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.currency)
  return _internal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Instrument::set_currency(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.currency)
}
inline std::string* Instrument::mutable_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Instrument.currency)
  return _s;
}
inline const std::string& Instrument::_internal_currency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.currency_.Get();
}
inline void Instrument::_internal_set_currency(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(value, GetArena());
}
inline std::string* Instrument::_internal_mutable_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.currency_.Mutable( GetArena());
}
inline std::string* Instrument::release_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Instrument.currency)
  return _impl_.currency_.Release();
}
inline void Instrument::set_allocated_currency(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.currency_.IsDefault()) {
          _impl_.currency_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.currency)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation klong = 7;
inline bool Instrument::has_klong() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.klong_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Instrument::_internal_klong() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.klong_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Instrument::klong() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.klong)
  return _internal_klong();
}
inline void Instrument::unsafe_arena_set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.klong_);
  }
  _impl_.klong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.klong)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::release_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.klong_;
  _impl_.klong_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::unsafe_arena_release_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Instrument.klong)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.klong_;
  _impl_.klong_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::_internal_mutable_klong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.klong_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.klong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.klong_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::mutable_klong() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_klong();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Instrument.klong)
  return _msg;
}
inline void Instrument::set_allocated_klong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.klong_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.klong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.klong)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation kshort = 8;
inline bool Instrument::has_kshort() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kshort_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Instrument::_internal_kshort() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.kshort_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Instrument::kshort() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.kshort)
  return _internal_kshort();
}
inline void Instrument::unsafe_arena_set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kshort_);
  }
  _impl_.kshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.kshort)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::release_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.kshort_;
  _impl_.kshort_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::unsafe_arena_release_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Instrument.kshort)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.kshort_;
  _impl_.kshort_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::_internal_mutable_kshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.kshort_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.kshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.kshort_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::mutable_kshort() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_kshort();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Instrument.kshort)
  return _msg;
}
inline void Instrument::set_allocated_kshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kshort_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.kshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.kshort)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dlong = 9;
inline bool Instrument::has_dlong() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dlong_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Instrument::_internal_dlong() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dlong_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Instrument::dlong() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.dlong)
  return _internal_dlong();
}
inline void Instrument::unsafe_arena_set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_);
  }
  _impl_.dlong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.dlong)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::release_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dlong_;
  _impl_.dlong_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::unsafe_arena_release_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Instrument.dlong)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dlong_;
  _impl_.dlong_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::_internal_mutable_dlong() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.dlong_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dlong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dlong_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::mutable_dlong() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dlong();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Instrument.dlong)
  return _msg;
}
inline void Instrument::set_allocated_dlong(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.dlong_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.dlong)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dshort = 10;
inline bool Instrument::has_dshort() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dshort_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Instrument::_internal_dshort() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dshort_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Instrument::dshort() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.dshort)
  return _internal_dshort();
}
inline void Instrument::unsafe_arena_set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_);
  }
  _impl_.dshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.dshort)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::release_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dshort_;
  _impl_.dshort_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::unsafe_arena_release_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Instrument.dshort)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dshort_;
  _impl_.dshort_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::_internal_mutable_dshort() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.dshort_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dshort_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::mutable_dshort() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dshort();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Instrument.dshort)
  return _msg;
}
inline void Instrument::set_allocated_dshort(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.dshort_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.dshort)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dlong_min = 11;
inline bool Instrument::has_dlong_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dlong_min_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Instrument::_internal_dlong_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dlong_min_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Instrument::dlong_min() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.dlong_min)
  return _internal_dlong_min();
}
inline void Instrument::unsafe_arena_set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_min_);
  }
  _impl_.dlong_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.dlong_min)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::release_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dlong_min_;
  _impl_.dlong_min_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::unsafe_arena_release_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Instrument.dlong_min)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dlong_min_;
  _impl_.dlong_min_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::_internal_mutable_dlong_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.dlong_min_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dlong_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dlong_min_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::mutable_dlong_min() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dlong_min();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Instrument.dlong_min)
  return _msg;
}
inline void Instrument::set_allocated_dlong_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dlong_min_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.dlong_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.dlong_min)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dshort_min = 12;
inline bool Instrument::has_dshort_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dshort_min_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Instrument::_internal_dshort_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dshort_min_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Instrument::dshort_min() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.dshort_min)
  return _internal_dshort_min();
}
inline void Instrument::unsafe_arena_set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_min_);
  }
  _impl_.dshort_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.dshort_min)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::release_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dshort_min_;
  _impl_.dshort_min_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::unsafe_arena_release_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Instrument.dshort_min)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dshort_min_;
  _impl_.dshort_min_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::_internal_mutable_dshort_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.dshort_min_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dshort_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dshort_min_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::mutable_dshort_min() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dshort_min();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Instrument.dshort_min)
  return _msg;
}
inline void Instrument::set_allocated_dshort_min(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dshort_min_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.dshort_min_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.dshort_min)
}

// bool short_enabled_flag = 13;
inline void Instrument::clear_short_enabled_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.short_enabled_flag_ = false;
}
inline bool Instrument::short_enabled_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.short_enabled_flag)
  return _internal_short_enabled_flag();
}
inline void Instrument::set_short_enabled_flag(bool value) {
  _internal_set_short_enabled_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.short_enabled_flag)
}
inline bool Instrument::_internal_short_enabled_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.short_enabled_flag_;
}
inline void Instrument::_internal_set_short_enabled_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.short_enabled_flag_ = value;
}

// string name = 14;
inline void Instrument::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Instrument::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Instrument::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.name)
}
inline std::string* Instrument::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Instrument.name)
  return _s;
}
inline const std::string& Instrument::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Instrument::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Instrument::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Instrument::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Instrument.name)
  return _impl_.name_.Release();
}
inline void Instrument::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.name)
}

// string exchange = 15;
inline void Instrument::clear_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_.ClearToEmpty();
}
inline const std::string& Instrument::exchange() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.exchange)
  return _internal_exchange();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Instrument::set_exchange(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.exchange)
}
inline std::string* Instrument::mutable_exchange() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_exchange();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Instrument.exchange)
  return _s;
}
inline const std::string& Instrument::_internal_exchange() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exchange_.Get();
}
inline void Instrument::_internal_set_exchange(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_.Set(value, GetArena());
}
inline std::string* Instrument::_internal_mutable_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.exchange_.Mutable( GetArena());
}
inline std::string* Instrument::release_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Instrument.exchange)
  return _impl_.exchange_.Release();
}
inline void Instrument::set_allocated_exchange(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_.IsDefault()) {
          _impl_.exchange_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.exchange)
}

// string country_of_risk = 16;
inline void Instrument::clear_country_of_risk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_.ClearToEmpty();
}
inline const std::string& Instrument::country_of_risk() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.country_of_risk)
  return _internal_country_of_risk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Instrument::set_country_of_risk(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.country_of_risk)
}
inline std::string* Instrument::mutable_country_of_risk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_country_of_risk();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Instrument.country_of_risk)
  return _s;
}
inline const std::string& Instrument::_internal_country_of_risk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.country_of_risk_.Get();
}
inline void Instrument::_internal_set_country_of_risk(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_.Set(value, GetArena());
}
inline std::string* Instrument::_internal_mutable_country_of_risk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.country_of_risk_.Mutable( GetArena());
}
inline std::string* Instrument::release_country_of_risk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Instrument.country_of_risk)
  return _impl_.country_of_risk_.Release();
}
inline void Instrument::set_allocated_country_of_risk(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.country_of_risk_.IsDefault()) {
          _impl_.country_of_risk_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.country_of_risk)
}

// string country_of_risk_name = 17;
inline void Instrument::clear_country_of_risk_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_name_.ClearToEmpty();
}
inline const std::string& Instrument::country_of_risk_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.country_of_risk_name)
  return _internal_country_of_risk_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Instrument::set_country_of_risk_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.country_of_risk_name)
}
inline std::string* Instrument::mutable_country_of_risk_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_country_of_risk_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Instrument.country_of_risk_name)
  return _s;
}
inline const std::string& Instrument::_internal_country_of_risk_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.country_of_risk_name_.Get();
}
inline void Instrument::_internal_set_country_of_risk_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_name_.Set(value, GetArena());
}
inline std::string* Instrument::_internal_mutable_country_of_risk_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.country_of_risk_name_.Mutable( GetArena());
}
inline std::string* Instrument::release_country_of_risk_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Instrument.country_of_risk_name)
  return _impl_.country_of_risk_name_.Release();
}
inline void Instrument::set_allocated_country_of_risk_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.country_of_risk_name_.IsDefault()) {
          _impl_.country_of_risk_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.country_of_risk_name)
}

// string instrument_type = 18;
inline void Instrument::clear_instrument_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_type_.ClearToEmpty();
}
inline const std::string& Instrument::instrument_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.instrument_type)
  return _internal_instrument_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Instrument::set_instrument_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.instrument_type)
}
inline std::string* Instrument::mutable_instrument_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_type();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Instrument.instrument_type)
  return _s;
}
inline const std::string& Instrument::_internal_instrument_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instrument_type_.Get();
}
inline void Instrument::_internal_set_instrument_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_type_.Set(value, GetArena());
}
inline std::string* Instrument::_internal_mutable_instrument_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.instrument_type_.Mutable( GetArena());
}
inline std::string* Instrument::release_instrument_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Instrument.instrument_type)
  return _impl_.instrument_type_.Release();
}
inline void Instrument::set_allocated_instrument_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.instrument_type_.IsDefault()) {
          _impl_.instrument_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.instrument_type)
}

// .tinkoff.public_.invest.api.contract.v1.SecurityTradingStatus trading_status = 19;
inline void Instrument::clear_trading_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trading_status_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus Instrument::trading_status() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.trading_status)
  return _internal_trading_status();
}
inline void Instrument::set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value) {
  _internal_set_trading_status(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.trading_status)
}
inline ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus Instrument::_internal_trading_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus>(_impl_.trading_status_);
}
inline void Instrument::_internal_set_trading_status(::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trading_status_ = value;
}

// bool otc_flag = 20;
inline void Instrument::clear_otc_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.otc_flag_ = false;
}
inline bool Instrument::otc_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.otc_flag)
  return _internal_otc_flag();
}
inline void Instrument::set_otc_flag(bool value) {
  _internal_set_otc_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.otc_flag)
}
inline bool Instrument::_internal_otc_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.otc_flag_;
}
inline void Instrument::_internal_set_otc_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.otc_flag_ = value;
}

// bool buy_available_flag = 21;
inline void Instrument::clear_buy_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.buy_available_flag_ = false;
}
inline bool Instrument::buy_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.buy_available_flag)
  return _internal_buy_available_flag();
}
inline void Instrument::set_buy_available_flag(bool value) {
  _internal_set_buy_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.buy_available_flag)
}
inline bool Instrument::_internal_buy_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.buy_available_flag_;
}
inline void Instrument::_internal_set_buy_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.buy_available_flag_ = value;
}

// bool sell_available_flag = 22;
inline void Instrument::clear_sell_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sell_available_flag_ = false;
}
inline bool Instrument::sell_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.sell_available_flag)
  return _internal_sell_available_flag();
}
inline void Instrument::set_sell_available_flag(bool value) {
  _internal_set_sell_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.sell_available_flag)
}
inline bool Instrument::_internal_sell_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sell_available_flag_;
}
inline void Instrument::_internal_set_sell_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sell_available_flag_ = value;
}

// .tinkoff.public_.invest.api.contract.v1.Quotation min_price_increment = 23;
inline bool Instrument::has_min_price_increment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.min_price_increment_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Instrument::_internal_min_price_increment() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.min_price_increment_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Instrument::min_price_increment() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.min_price_increment)
  return _internal_min_price_increment();
}
inline void Instrument::unsafe_arena_set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_price_increment_);
  }
  _impl_.min_price_increment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.min_price_increment)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::release_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.min_price_increment_;
  _impl_.min_price_increment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::unsafe_arena_release_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Instrument.min_price_increment)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.min_price_increment_;
  _impl_.min_price_increment_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::_internal_mutable_min_price_increment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.min_price_increment_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.min_price_increment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.min_price_increment_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Instrument::mutable_min_price_increment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_min_price_increment();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Instrument.min_price_increment)
  return _msg;
}
inline void Instrument::set_allocated_min_price_increment(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_price_increment_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.min_price_increment_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.min_price_increment)
}

// bool api_trade_available_flag = 24;
inline void Instrument::clear_api_trade_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.api_trade_available_flag_ = false;
}
inline bool Instrument::api_trade_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.api_trade_available_flag)
  return _internal_api_trade_available_flag();
}
inline void Instrument::set_api_trade_available_flag(bool value) {
  _internal_set_api_trade_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.api_trade_available_flag)
}
inline bool Instrument::_internal_api_trade_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.api_trade_available_flag_;
}
inline void Instrument::_internal_set_api_trade_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.api_trade_available_flag_ = value;
}

// string uid = 25;
inline void Instrument::clear_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& Instrument::uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.uid)
  return _internal_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Instrument::set_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.uid)
}
inline std::string* Instrument::mutable_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Instrument.uid)
  return _s;
}
inline const std::string& Instrument::_internal_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uid_.Get();
}
inline void Instrument::_internal_set_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(value, GetArena());
}
inline std::string* Instrument::_internal_mutable_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.uid_.Mutable( GetArena());
}
inline std::string* Instrument::release_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Instrument.uid)
  return _impl_.uid_.Release();
}
inline void Instrument::set_allocated_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uid_.IsDefault()) {
          _impl_.uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.uid)
}

// .tinkoff.public_.invest.api.contract.v1.RealExchange real_exchange = 26;
inline void Instrument::clear_real_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.real_exchange_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::RealExchange Instrument::real_exchange() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.real_exchange)
  return _internal_real_exchange();
}
inline void Instrument::set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value) {
  _internal_set_real_exchange(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.real_exchange)
}
inline ::tinkoff::public_::invest::api::contract::v1::RealExchange Instrument::_internal_real_exchange() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::RealExchange>(_impl_.real_exchange_);
}
inline void Instrument::_internal_set_real_exchange(::tinkoff::public_::invest::api::contract::v1::RealExchange value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.real_exchange_ = value;
}

// string position_uid = 27;
inline void Instrument::clear_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.position_uid_.ClearToEmpty();
}
inline const std::string& Instrument::position_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.position_uid)
  return _internal_position_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Instrument::set_position_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.position_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.position_uid)
}
inline std::string* Instrument::mutable_position_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_position_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Instrument.position_uid)
  return _s;
}
inline const std::string& Instrument::_internal_position_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.position_uid_.Get();
}
inline void Instrument::_internal_set_position_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.position_uid_.Set(value, GetArena());
}
inline std::string* Instrument::_internal_mutable_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.position_uid_.Mutable( GetArena());
}
inline std::string* Instrument::release_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Instrument.position_uid)
  return _impl_.position_uid_.Release();
}
inline void Instrument::set_allocated_position_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.position_uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.position_uid_.IsDefault()) {
          _impl_.position_uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.position_uid)
}

// string asset_uid = 28;
inline void Instrument::clear_asset_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.asset_uid_.ClearToEmpty();
}
inline const std::string& Instrument::asset_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.asset_uid)
  return _internal_asset_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Instrument::set_asset_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.asset_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.asset_uid)
}
inline std::string* Instrument::mutable_asset_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_asset_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Instrument.asset_uid)
  return _s;
}
inline const std::string& Instrument::_internal_asset_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.asset_uid_.Get();
}
inline void Instrument::_internal_set_asset_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.asset_uid_.Set(value, GetArena());
}
inline std::string* Instrument::_internal_mutable_asset_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.asset_uid_.Mutable( GetArena());
}
inline std::string* Instrument::release_asset_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Instrument.asset_uid)
  return _impl_.asset_uid_.Release();
}
inline void Instrument::set_allocated_asset_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.asset_uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.asset_uid_.IsDefault()) {
          _impl_.asset_uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.asset_uid)
}

// bool for_iis_flag = 36;
inline void Instrument::clear_for_iis_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.for_iis_flag_ = false;
}
inline bool Instrument::for_iis_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.for_iis_flag)
  return _internal_for_iis_flag();
}
inline void Instrument::set_for_iis_flag(bool value) {
  _internal_set_for_iis_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.for_iis_flag)
}
inline bool Instrument::_internal_for_iis_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.for_iis_flag_;
}
inline void Instrument::_internal_set_for_iis_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.for_iis_flag_ = value;
}

// bool for_qual_investor_flag = 37;
inline void Instrument::clear_for_qual_investor_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.for_qual_investor_flag_ = false;
}
inline bool Instrument::for_qual_investor_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.for_qual_investor_flag)
  return _internal_for_qual_investor_flag();
}
inline void Instrument::set_for_qual_investor_flag(bool value) {
  _internal_set_for_qual_investor_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.for_qual_investor_flag)
}
inline bool Instrument::_internal_for_qual_investor_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.for_qual_investor_flag_;
}
inline void Instrument::_internal_set_for_qual_investor_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.for_qual_investor_flag_ = value;
}

// bool weekend_flag = 38;
inline void Instrument::clear_weekend_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.weekend_flag_ = false;
}
inline bool Instrument::weekend_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.weekend_flag)
  return _internal_weekend_flag();
}
inline void Instrument::set_weekend_flag(bool value) {
  _internal_set_weekend_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.weekend_flag)
}
inline bool Instrument::_internal_weekend_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.weekend_flag_;
}
inline void Instrument::_internal_set_weekend_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.weekend_flag_ = value;
}

// bool blocked_tca_flag = 39;
inline void Instrument::clear_blocked_tca_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.blocked_tca_flag_ = false;
}
inline bool Instrument::blocked_tca_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.blocked_tca_flag)
  return _internal_blocked_tca_flag();
}
inline void Instrument::set_blocked_tca_flag(bool value) {
  _internal_set_blocked_tca_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.blocked_tca_flag)
}
inline bool Instrument::_internal_blocked_tca_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.blocked_tca_flag_;
}
inline void Instrument::_internal_set_blocked_tca_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.blocked_tca_flag_ = value;
}

// .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 40;
inline void Instrument::clear_instrument_kind() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_kind_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentType Instrument::instrument_kind() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.instrument_kind)
  return _internal_instrument_kind();
}
inline void Instrument::set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value) {
  _internal_set_instrument_kind(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Instrument.instrument_kind)
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentType Instrument::_internal_instrument_kind() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::InstrumentType>(_impl_.instrument_kind_);
}
inline void Instrument::_internal_set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_kind_ = value;
}

// .google.protobuf.Timestamp first_1min_candle_date = 56;
inline bool Instrument::has_first_1min_candle_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.first_1min_candle_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Instrument::_internal_first_1min_candle_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.first_1min_candle_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Instrument::first_1min_candle_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.first_1min_candle_date)
  return _internal_first_1min_candle_date();
}
inline void Instrument::unsafe_arena_set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1min_candle_date_);
  }
  _impl_.first_1min_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.first_1min_candle_date)
}
inline ::google::protobuf::Timestamp* Instrument::release_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::google::protobuf::Timestamp* released = _impl_.first_1min_candle_date_;
  _impl_.first_1min_candle_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Instrument::unsafe_arena_release_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Instrument.first_1min_candle_date)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::google::protobuf::Timestamp* temp = _impl_.first_1min_candle_date_;
  _impl_.first_1min_candle_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Instrument::_internal_mutable_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.first_1min_candle_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.first_1min_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.first_1min_candle_date_;
}
inline ::google::protobuf::Timestamp* Instrument::mutable_first_1min_candle_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_first_1min_candle_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Instrument.first_1min_candle_date)
  return _msg;
}
inline void Instrument::set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1min_candle_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.first_1min_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.first_1min_candle_date)
}

// .google.protobuf.Timestamp first_1day_candle_date = 57;
inline bool Instrument::has_first_1day_candle_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.first_1day_candle_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Instrument::_internal_first_1day_candle_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.first_1day_candle_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Instrument::first_1day_candle_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.first_1day_candle_date)
  return _internal_first_1day_candle_date();
}
inline void Instrument::unsafe_arena_set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1day_candle_date_);
  }
  _impl_.first_1day_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.first_1day_candle_date)
}
inline ::google::protobuf::Timestamp* Instrument::release_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::google::protobuf::Timestamp* released = _impl_.first_1day_candle_date_;
  _impl_.first_1day_candle_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Instrument::unsafe_arena_release_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Instrument.first_1day_candle_date)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::google::protobuf::Timestamp* temp = _impl_.first_1day_candle_date_;
  _impl_.first_1day_candle_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Instrument::_internal_mutable_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.first_1day_candle_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.first_1day_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.first_1day_candle_date_;
}
inline ::google::protobuf::Timestamp* Instrument::mutable_first_1day_candle_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_first_1day_candle_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Instrument.first_1day_candle_date)
  return _msg;
}
inline void Instrument::set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1day_candle_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.first_1day_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.first_1day_candle_date)
}

// .tinkoff.public_.invest.api.contract.v1.BrandData brand = 60;
inline bool Instrument::has_brand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.brand_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::BrandData& Instrument::_internal_brand() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::BrandData* p = _impl_.brand_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::BrandData&>(::tinkoff::public_::invest::api::contract::v1::_BrandData_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::BrandData& Instrument::brand() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Instrument.brand)
  return _internal_brand();
}
inline void Instrument::unsafe_arena_set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.brand_);
  }
  _impl_.brand_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::BrandData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.brand)
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Instrument::release_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::tinkoff::public_::invest::api::contract::v1::BrandData* released = _impl_.brand_;
  _impl_.brand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Instrument::unsafe_arena_release_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Instrument.brand)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::tinkoff::public_::invest::api::contract::v1::BrandData* temp = _impl_.brand_;
  _impl_.brand_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Instrument::_internal_mutable_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.brand_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::BrandData>(GetArena());
    _impl_.brand_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::BrandData*>(p);
  }
  return _impl_.brand_;
}
inline ::tinkoff::public_::invest::api::contract::v1::BrandData* Instrument::mutable_brand() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::BrandData* _msg = _internal_mutable_brand();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Instrument.brand)
  return _msg;
}
inline void Instrument::set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::BrandData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.brand_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.brand_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::BrandData*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Instrument.brand)
}

// -------------------------------------------------------------------

// GetDividendsRequest

// string figi = 1 [deprecated = true];
inline void GetDividendsRequest::clear_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& GetDividendsRequest::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetDividendsRequest::set_figi(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.figi)
}
inline std::string* GetDividendsRequest::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.figi)
  return _s;
}
inline const std::string& GetDividendsRequest::_internal_figi() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.figi_.Get();
}
inline void GetDividendsRequest::_internal_set_figi(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* GetDividendsRequest::_internal_mutable_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* GetDividendsRequest::release_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.figi)
  return _impl_.figi_.Release();
}
inline void GetDividendsRequest::set_allocated_figi(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.figi_.IsDefault()) {
          _impl_.figi_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.figi)
}

// optional .google.protobuf.Timestamp from = 2;
inline bool GetDividendsRequest::has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.from_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetDividendsRequest::_internal_from() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetDividendsRequest::from() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.from)
  return _internal_from();
}
inline void GetDividendsRequest::unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.from)
}
inline ::google::protobuf::Timestamp* GetDividendsRequest::release_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.from_;
  _impl_.from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetDividendsRequest::unsafe_arena_release_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.from)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetDividendsRequest::_internal_mutable_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.from_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.from_;
}
inline ::google::protobuf::Timestamp* GetDividendsRequest::mutable_from() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.from)
  return _msg;
}
inline void GetDividendsRequest::set_allocated_from(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.from)
}

// optional .google.protobuf.Timestamp to = 3;
inline bool GetDividendsRequest::has_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.to_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetDividendsRequest::_internal_to() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetDividendsRequest::to() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.to)
  return _internal_to();
}
inline void GetDividendsRequest::unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.to)
}
inline ::google::protobuf::Timestamp* GetDividendsRequest::release_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetDividendsRequest::unsafe_arena_release_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.to)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetDividendsRequest::_internal_mutable_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.to_;
}
inline ::google::protobuf::Timestamp* GetDividendsRequest::mutable_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.to)
  return _msg;
}
inline void GetDividendsRequest::set_allocated_to(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.to)
}

// string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
inline void GetDividendsRequest::clear_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_id_.ClearToEmpty();
}
inline const std::string& GetDividendsRequest::instrument_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.instrument_id)
  return _internal_instrument_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetDividendsRequest::set_instrument_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.instrument_id)
}
inline std::string* GetDividendsRequest::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.instrument_id)
  return _s;
}
inline const std::string& GetDividendsRequest::_internal_instrument_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instrument_id_.Get();
}
inline void GetDividendsRequest::_internal_set_instrument_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_id_.Set(value, GetArena());
}
inline std::string* GetDividendsRequest::_internal_mutable_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.instrument_id_.Mutable( GetArena());
}
inline std::string* GetDividendsRequest::release_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.instrument_id)
  return _impl_.instrument_id_.Release();
}
inline void GetDividendsRequest::set_allocated_instrument_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.instrument_id_.IsDefault()) {
          _impl_.instrument_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetDividendsRequest.instrument_id)
}

// -------------------------------------------------------------------

// GetDividendsResponse

// repeated .tinkoff.public_.invest.api.contract.v1.Dividend dividends = 1;
inline int GetDividendsResponse::_internal_dividends_size() const {
  return _internal_dividends().size();
}
inline int GetDividendsResponse::dividends_size() const {
  return _internal_dividends_size();
}
inline void GetDividendsResponse::clear_dividends() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dividends_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::Dividend* GetDividendsResponse::mutable_dividends(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetDividendsResponse.dividends)
  return _internal_mutable_dividends()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Dividend>* GetDividendsResponse::mutable_dividends()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.GetDividendsResponse.dividends)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_dividends();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Dividend& GetDividendsResponse::dividends(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetDividendsResponse.dividends)
  return _internal_dividends().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::Dividend* GetDividendsResponse::add_dividends() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::Dividend* _add = _internal_mutable_dividends()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.GetDividendsResponse.dividends)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Dividend>& GetDividendsResponse::dividends() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.GetDividendsResponse.dividends)
  return _internal_dividends();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Dividend>&
GetDividendsResponse::_internal_dividends() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dividends_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Dividend>*
GetDividendsResponse::_internal_mutable_dividends() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.dividends_;
}

// -------------------------------------------------------------------

// Dividend

// .tinkoff.public_.invest.api.contract.v1.MoneyValue dividend_net = 1;
inline bool Dividend::has_dividend_net() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dividend_net_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Dividend::_internal_dividend_net() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.dividend_net_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Dividend::dividend_net() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Dividend.dividend_net)
  return _internal_dividend_net();
}
inline void Dividend::unsafe_arena_set_allocated_dividend_net(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dividend_net_);
  }
  _impl_.dividend_net_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Dividend.dividend_net)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Dividend::release_dividend_net() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.dividend_net_;
  _impl_.dividend_net_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Dividend::unsafe_arena_release_dividend_net() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Dividend.dividend_net)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.dividend_net_;
  _impl_.dividend_net_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Dividend::_internal_mutable_dividend_net() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.dividend_net_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
    _impl_.dividend_net_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
  }
  return _impl_.dividend_net_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Dividend::mutable_dividend_net() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_dividend_net();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Dividend.dividend_net)
  return _msg;
}
inline void Dividend::set_allocated_dividend_net(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dividend_net_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.dividend_net_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Dividend.dividend_net)
}

// .google.protobuf.Timestamp payment_date = 2;
inline bool Dividend::has_payment_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.payment_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Dividend::_internal_payment_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.payment_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Dividend::payment_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Dividend.payment_date)
  return _internal_payment_date();
}
inline void Dividend::unsafe_arena_set_allocated_payment_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.payment_date_);
  }
  _impl_.payment_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Dividend.payment_date)
}
inline ::google::protobuf::Timestamp* Dividend::release_payment_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.payment_date_;
  _impl_.payment_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Dividend::unsafe_arena_release_payment_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Dividend.payment_date)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.payment_date_;
  _impl_.payment_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Dividend::_internal_mutable_payment_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.payment_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.payment_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.payment_date_;
}
inline ::google::protobuf::Timestamp* Dividend::mutable_payment_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_payment_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Dividend.payment_date)
  return _msg;
}
inline void Dividend::set_allocated_payment_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.payment_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.payment_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Dividend.payment_date)
}

// .google.protobuf.Timestamp declared_date = 3;
inline bool Dividend::has_declared_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.declared_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Dividend::_internal_declared_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.declared_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Dividend::declared_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Dividend.declared_date)
  return _internal_declared_date();
}
inline void Dividend::unsafe_arena_set_allocated_declared_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.declared_date_);
  }
  _impl_.declared_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Dividend.declared_date)
}
inline ::google::protobuf::Timestamp* Dividend::release_declared_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* released = _impl_.declared_date_;
  _impl_.declared_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Dividend::unsafe_arena_release_declared_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Dividend.declared_date)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* temp = _impl_.declared_date_;
  _impl_.declared_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Dividend::_internal_mutable_declared_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.declared_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.declared_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.declared_date_;
}
inline ::google::protobuf::Timestamp* Dividend::mutable_declared_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_declared_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Dividend.declared_date)
  return _msg;
}
inline void Dividend::set_allocated_declared_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.declared_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.declared_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Dividend.declared_date)
}

// .google.protobuf.Timestamp last_buy_date = 4;
inline bool Dividend::has_last_buy_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_buy_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Dividend::_internal_last_buy_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.last_buy_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Dividend::last_buy_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Dividend.last_buy_date)
  return _internal_last_buy_date();
}
inline void Dividend::unsafe_arena_set_allocated_last_buy_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_buy_date_);
  }
  _impl_.last_buy_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Dividend.last_buy_date)
}
inline ::google::protobuf::Timestamp* Dividend::release_last_buy_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Timestamp* released = _impl_.last_buy_date_;
  _impl_.last_buy_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Dividend::unsafe_arena_release_last_buy_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Dividend.last_buy_date)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Timestamp* temp = _impl_.last_buy_date_;
  _impl_.last_buy_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Dividend::_internal_mutable_last_buy_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.last_buy_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.last_buy_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.last_buy_date_;
}
inline ::google::protobuf::Timestamp* Dividend::mutable_last_buy_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_last_buy_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Dividend.last_buy_date)
  return _msg;
}
inline void Dividend::set_allocated_last_buy_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_buy_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.last_buy_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Dividend.last_buy_date)
}

// string dividend_type = 5;
inline void Dividend::clear_dividend_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dividend_type_.ClearToEmpty();
}
inline const std::string& Dividend::dividend_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Dividend.dividend_type)
  return _internal_dividend_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Dividend::set_dividend_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dividend_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Dividend.dividend_type)
}
inline std::string* Dividend::mutable_dividend_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dividend_type();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Dividend.dividend_type)
  return _s;
}
inline const std::string& Dividend::_internal_dividend_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dividend_type_.Get();
}
inline void Dividend::_internal_set_dividend_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dividend_type_.Set(value, GetArena());
}
inline std::string* Dividend::_internal_mutable_dividend_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.dividend_type_.Mutable( GetArena());
}
inline std::string* Dividend::release_dividend_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Dividend.dividend_type)
  return _impl_.dividend_type_.Release();
}
inline void Dividend::set_allocated_dividend_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dividend_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dividend_type_.IsDefault()) {
          _impl_.dividend_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Dividend.dividend_type)
}

// .google.protobuf.Timestamp record_date = 6;
inline bool Dividend::has_record_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.record_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Dividend::_internal_record_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.record_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Dividend::record_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Dividend.record_date)
  return _internal_record_date();
}
inline void Dividend::unsafe_arena_set_allocated_record_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.record_date_);
  }
  _impl_.record_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Dividend.record_date)
}
inline ::google::protobuf::Timestamp* Dividend::release_record_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* released = _impl_.record_date_;
  _impl_.record_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Dividend::unsafe_arena_release_record_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Dividend.record_date)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* temp = _impl_.record_date_;
  _impl_.record_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Dividend::_internal_mutable_record_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.record_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.record_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.record_date_;
}
inline ::google::protobuf::Timestamp* Dividend::mutable_record_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_record_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Dividend.record_date)
  return _msg;
}
inline void Dividend::set_allocated_record_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.record_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.record_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Dividend.record_date)
}

// string regularity = 7;
inline void Dividend::clear_regularity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.regularity_.ClearToEmpty();
}
inline const std::string& Dividend::regularity() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Dividend.regularity)
  return _internal_regularity();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Dividend::set_regularity(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.regularity_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Dividend.regularity)
}
inline std::string* Dividend::mutable_regularity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_regularity();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Dividend.regularity)
  return _s;
}
inline const std::string& Dividend::_internal_regularity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.regularity_.Get();
}
inline void Dividend::_internal_set_regularity(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.regularity_.Set(value, GetArena());
}
inline std::string* Dividend::_internal_mutable_regularity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.regularity_.Mutable( GetArena());
}
inline std::string* Dividend::release_regularity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Dividend.regularity)
  return _impl_.regularity_.Release();
}
inline void Dividend::set_allocated_regularity(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.regularity_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.regularity_.IsDefault()) {
          _impl_.regularity_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Dividend.regularity)
}

// .tinkoff.public_.invest.api.contract.v1.MoneyValue close_price = 8;
inline bool Dividend::has_close_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.close_price_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Dividend::_internal_close_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::MoneyValue* p = _impl_.close_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::MoneyValue&>(::tinkoff::public_::invest::api::contract::v1::_MoneyValue_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::MoneyValue& Dividend::close_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Dividend.close_price)
  return _internal_close_price();
}
inline void Dividend::unsafe_arena_set_allocated_close_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.close_price_);
  }
  _impl_.close_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Dividend.close_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Dividend::release_close_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* released = _impl_.close_price_;
  _impl_.close_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Dividend::unsafe_arena_release_close_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Dividend.close_price)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* temp = _impl_.close_price_;
  _impl_.close_price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Dividend::_internal_mutable_close_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.close_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(GetArena());
    _impl_.close_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(p);
  }
  return _impl_.close_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::MoneyValue* Dividend::mutable_close_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::MoneyValue* _msg = _internal_mutable_close_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Dividend.close_price)
  return _msg;
}
inline void Dividend::set_allocated_close_price(::tinkoff::public_::invest::api::contract::v1::MoneyValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.close_price_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.close_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::MoneyValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Dividend.close_price)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation yield_value = 9;
inline bool Dividend::has_yield_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.yield_value_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Dividend::_internal_yield_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.yield_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& Dividend::yield_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Dividend.yield_value)
  return _internal_yield_value();
}
inline void Dividend::unsafe_arena_set_allocated_yield_value(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.yield_value_);
  }
  _impl_.yield_value_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Dividend.yield_value)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Dividend::release_yield_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.yield_value_;
  _impl_.yield_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Dividend::unsafe_arena_release_yield_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Dividend.yield_value)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.yield_value_;
  _impl_.yield_value_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Dividend::_internal_mutable_yield_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.yield_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.yield_value_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.yield_value_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* Dividend::mutable_yield_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_yield_value();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Dividend.yield_value)
  return _msg;
}
inline void Dividend::set_allocated_yield_value(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.yield_value_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.yield_value_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Dividend.yield_value)
}

// .google.protobuf.Timestamp created_at = 10;
inline bool Dividend::has_created_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.created_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Dividend::_internal_created_at() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Dividend::created_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Dividend.created_at)
  return _internal_created_at();
}
inline void Dividend::unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.Dividend.created_at)
}
inline ::google::protobuf::Timestamp* Dividend::release_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::google::protobuf::Timestamp* released = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Dividend::unsafe_arena_release_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Dividend.created_at)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::google::protobuf::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Dividend::_internal_mutable_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.created_at_;
}
inline ::google::protobuf::Timestamp* Dividend::mutable_created_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Dividend.created_at)
  return _msg;
}
inline void Dividend::set_allocated_created_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Dividend.created_at)
}

// -------------------------------------------------------------------

// AssetRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void AssetRequest::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& AssetRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetRequest.id)
}
inline std::string* AssetRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetRequest.id)
  return _s;
}
inline const std::string& AssetRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void AssetRequest::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* AssetRequest::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* AssetRequest::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetRequest.id)
  return _impl_.id_.Release();
}
inline void AssetRequest::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetRequest.id)
}

// -------------------------------------------------------------------

// AssetResponse

// .tinkoff.public_.invest.api.contract.v1.AssetFull asset = 1;
inline bool AssetResponse::has_asset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.asset_ != nullptr);
  return value;
}
inline void AssetResponse::clear_asset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.asset_ != nullptr) _impl_.asset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tinkoff::public_::invest::api::contract::v1::AssetFull& AssetResponse::_internal_asset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::AssetFull* p = _impl_.asset_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::AssetFull&>(::tinkoff::public_::invest::api::contract::v1::_AssetFull_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::AssetFull& AssetResponse::asset() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetResponse.asset)
  return _internal_asset();
}
inline void AssetResponse::unsafe_arena_set_allocated_asset(::tinkoff::public_::invest::api::contract::v1::AssetFull* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.asset_);
  }
  _impl_.asset_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::AssetFull*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetResponse.asset)
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetFull* AssetResponse::release_asset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::AssetFull* released = _impl_.asset_;
  _impl_.asset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetFull* AssetResponse::unsafe_arena_release_asset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetResponse.asset)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::AssetFull* temp = _impl_.asset_;
  _impl_.asset_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetFull* AssetResponse::_internal_mutable_asset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.asset_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::AssetFull>(GetArena());
    _impl_.asset_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::AssetFull*>(p);
  }
  return _impl_.asset_;
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetFull* AssetResponse::mutable_asset() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::AssetFull* _msg = _internal_mutable_asset();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetResponse.asset)
  return _msg;
}
inline void AssetResponse::set_allocated_asset(::tinkoff::public_::invest::api::contract::v1::AssetFull* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::AssetFull*>(_impl_.asset_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::AssetFull*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.asset_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::AssetFull*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetResponse.asset)
}

// -------------------------------------------------------------------

// AssetsRequest

// optional .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_type = 1;
inline bool AssetsRequest::has_instrument_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AssetsRequest::clear_instrument_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentType AssetsRequest::instrument_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetsRequest.instrument_type)
  return _internal_instrument_type();
}
inline void AssetsRequest::set_instrument_type(::tinkoff::public_::invest::api::contract::v1::InstrumentType value) {
  _internal_set_instrument_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetsRequest.instrument_type)
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentType AssetsRequest::_internal_instrument_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::InstrumentType>(_impl_.instrument_type_);
}
inline void AssetsRequest::_internal_set_instrument_type(::tinkoff::public_::invest::api::contract::v1::InstrumentType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.instrument_type_ = value;
}

// -------------------------------------------------------------------

// AssetsResponse

// repeated .tinkoff.public_.invest.api.contract.v1.Asset assets = 1;
inline int AssetsResponse::_internal_assets_size() const {
  return _internal_assets().size();
}
inline int AssetsResponse::assets_size() const {
  return _internal_assets_size();
}
inline void AssetsResponse::clear_assets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.assets_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::Asset* AssetsResponse::mutable_assets(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetsResponse.assets)
  return _internal_mutable_assets()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Asset>* AssetsResponse::mutable_assets()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.AssetsResponse.assets)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_assets();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Asset& AssetsResponse::assets(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetsResponse.assets)
  return _internal_assets().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::Asset* AssetsResponse::add_assets() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::Asset* _add = _internal_mutable_assets()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.AssetsResponse.assets)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Asset>& AssetsResponse::assets() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.AssetsResponse.assets)
  return _internal_assets();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Asset>&
AssetsResponse::_internal_assets() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.assets_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Asset>*
AssetsResponse::_internal_mutable_assets() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.assets_;
}

// -------------------------------------------------------------------

// AssetFull

// string uid = 1;
inline void AssetFull::clear_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& AssetFull::uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetFull.uid)
  return _internal_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetFull::set_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetFull.uid)
}
inline std::string* AssetFull::mutable_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetFull.uid)
  return _s;
}
inline const std::string& AssetFull::_internal_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uid_.Get();
}
inline void AssetFull::_internal_set_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(value, GetArena());
}
inline std::string* AssetFull::_internal_mutable_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.uid_.Mutable( GetArena());
}
inline std::string* AssetFull::release_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetFull.uid)
  return _impl_.uid_.Release();
}
inline void AssetFull::set_allocated_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uid_.IsDefault()) {
          _impl_.uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetFull.uid)
}

// .tinkoff.public_.invest.api.contract.v1.AssetType type = 2;
inline void AssetFull::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetType AssetFull::type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetFull.type)
  return _internal_type();
}
inline void AssetFull::set_type(::tinkoff::public_::invest::api::contract::v1::AssetType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetFull.type)
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetType AssetFull::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::AssetType>(_impl_.type_);
}
inline void AssetFull::_internal_set_type(::tinkoff::public_::invest::api::contract::v1::AssetType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// string name = 3;
inline void AssetFull::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AssetFull::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetFull.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetFull::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetFull.name)
}
inline std::string* AssetFull::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetFull.name)
  return _s;
}
inline const std::string& AssetFull::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void AssetFull::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* AssetFull::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* AssetFull::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetFull.name)
  return _impl_.name_.Release();
}
inline void AssetFull::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetFull.name)
}

// string name_brief = 4;
inline void AssetFull::clear_name_brief() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_brief_.ClearToEmpty();
}
inline const std::string& AssetFull::name_brief() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetFull.name_brief)
  return _internal_name_brief();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetFull::set_name_brief(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_brief_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetFull.name_brief)
}
inline std::string* AssetFull::mutable_name_brief() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name_brief();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetFull.name_brief)
  return _s;
}
inline const std::string& AssetFull::_internal_name_brief() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_brief_.Get();
}
inline void AssetFull::_internal_set_name_brief(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_brief_.Set(value, GetArena());
}
inline std::string* AssetFull::_internal_mutable_name_brief() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_brief_.Mutable( GetArena());
}
inline std::string* AssetFull::release_name_brief() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetFull.name_brief)
  return _impl_.name_brief_.Release();
}
inline void AssetFull::set_allocated_name_brief(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_brief_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_brief_.IsDefault()) {
          _impl_.name_brief_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetFull.name_brief)
}

// string description = 5;
inline void AssetFull::clear_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& AssetFull::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetFull.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetFull::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetFull.description)
}
inline std::string* AssetFull::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetFull.description)
  return _s;
}
inline const std::string& AssetFull::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void AssetFull::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArena());
}
inline std::string* AssetFull::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* AssetFull::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetFull.description)
  return _impl_.description_.Release();
}
inline void AssetFull::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetFull.description)
}

// .google.protobuf.Timestamp deleted_at = 6;
inline bool AssetFull::has_deleted_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deleted_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& AssetFull::_internal_deleted_at() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.deleted_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& AssetFull::deleted_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetFull.deleted_at)
  return _internal_deleted_at();
}
inline void AssetFull::unsafe_arena_set_allocated_deleted_at(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.deleted_at_);
  }
  _impl_.deleted_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetFull.deleted_at)
}
inline ::google::protobuf::Timestamp* AssetFull::release_deleted_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.deleted_at_;
  _impl_.deleted_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* AssetFull::unsafe_arena_release_deleted_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetFull.deleted_at)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.deleted_at_;
  _impl_.deleted_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AssetFull::_internal_mutable_deleted_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.deleted_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.deleted_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.deleted_at_;
}
inline ::google::protobuf::Timestamp* AssetFull::mutable_deleted_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_deleted_at();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetFull.deleted_at)
  return _msg;
}
inline void AssetFull::set_allocated_deleted_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.deleted_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.deleted_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetFull.deleted_at)
}

// repeated string required_tests = 7;
inline int AssetFull::_internal_required_tests_size() const {
  return _internal_required_tests().size();
}
inline int AssetFull::required_tests_size() const {
  return _internal_required_tests_size();
}
inline void AssetFull::clear_required_tests() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.required_tests_.Clear();
}
inline std::string* AssetFull::add_required_tests()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_required_tests()->Add();
  // @@protoc_insertion_point(field_add_mutable:tinkoff.public_.invest.api.contract.v1.AssetFull.required_tests)
  return _s;
}
inline const std::string& AssetFull::required_tests(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetFull.required_tests)
  return _internal_required_tests().Get(index);
}
inline std::string* AssetFull::mutable_required_tests(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetFull.required_tests)
  return _internal_mutable_required_tests()->Mutable(index);
}
inline void AssetFull::set_required_tests(int index, const std::string& value) {
  _internal_mutable_required_tests()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetFull.required_tests)
}
inline void AssetFull::set_required_tests(int index, std::string&& value) {
  _internal_mutable_required_tests()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetFull.required_tests)
}
inline void AssetFull::set_required_tests(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_required_tests()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tinkoff.public_.invest.api.contract.v1.AssetFull.required_tests)
}
inline void AssetFull::set_required_tests(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_required_tests()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinkoff.public_.invest.api.contract.v1.AssetFull.required_tests)
}
inline void AssetFull::set_required_tests(int index, absl::string_view value) {
  _internal_mutable_required_tests()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:tinkoff.public_.invest.api.contract.v1.AssetFull.required_tests)
}
inline void AssetFull::add_required_tests(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_required_tests()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.AssetFull.required_tests)
}
inline void AssetFull::add_required_tests(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_required_tests()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.AssetFull.required_tests)
}
inline void AssetFull::add_required_tests(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_required_tests()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tinkoff.public_.invest.api.contract.v1.AssetFull.required_tests)
}
inline void AssetFull::add_required_tests(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_required_tests()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tinkoff.public_.invest.api.contract.v1.AssetFull.required_tests)
}
inline void AssetFull::add_required_tests(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_required_tests()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:tinkoff.public_.invest.api.contract.v1.AssetFull.required_tests)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AssetFull::required_tests() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.AssetFull.required_tests)
  return _internal_required_tests();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AssetFull::mutable_required_tests() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.AssetFull.required_tests)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_required_tests();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AssetFull::_internal_required_tests() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.required_tests_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AssetFull::_internal_mutable_required_tests() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.required_tests_;
}

// .tinkoff.public_.invest.api.contract.v1.AssetCurrency currency = 8;
inline bool AssetFull::has_currency() const {
  return ext_case() == kCurrency;
}
inline bool AssetFull::_internal_has_currency() const {
  return ext_case() == kCurrency;
}
inline void AssetFull::set_has_currency() {
  _impl_._oneof_case_[0] = kCurrency;
}
inline void AssetFull::clear_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (ext_case() == kCurrency) {
    if (GetArena() == nullptr) {
      delete _impl_.ext_.currency_;
    }
    clear_has_ext();
  }
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetCurrency* AssetFull::release_currency() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetFull.currency)
  if (ext_case() == kCurrency) {
    clear_has_ext();
    auto* temp = _impl_.ext_.currency_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ext_.currency_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::public_::invest::api::contract::v1::AssetCurrency& AssetFull::_internal_currency() const {
  return ext_case() == kCurrency ? *_impl_.ext_.currency_ : reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::AssetCurrency&>(::tinkoff::public_::invest::api::contract::v1::_AssetCurrency_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::AssetCurrency& AssetFull::currency() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetFull.currency)
  return _internal_currency();
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetCurrency* AssetFull::unsafe_arena_release_currency() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public_.invest.api.contract.v1.AssetFull.currency)
  if (ext_case() == kCurrency) {
    clear_has_ext();
    auto* temp = _impl_.ext_.currency_;
    _impl_.ext_.currency_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AssetFull::unsafe_arena_set_allocated_currency(::tinkoff::public_::invest::api::contract::v1::AssetCurrency* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_ext();
  if (value) {
    set_has_currency();
    _impl_.ext_.currency_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetFull.currency)
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetCurrency* AssetFull::_internal_mutable_currency() {
  if (ext_case() != kCurrency) {
    clear_ext();
    set_has_currency();
    _impl_.ext_.currency_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::AssetCurrency>(GetArena());
  }
  return _impl_.ext_.currency_;
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetCurrency* AssetFull::mutable_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::AssetCurrency* _msg = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetFull.currency)
  return _msg;
}

// .tinkoff.public_.invest.api.contract.v1.AssetSecurity security = 9;
inline bool AssetFull::has_security() const {
  return ext_case() == kSecurity;
}
inline bool AssetFull::_internal_has_security() const {
  return ext_case() == kSecurity;
}
inline void AssetFull::set_has_security() {
  _impl_._oneof_case_[0] = kSecurity;
}
inline void AssetFull::clear_security() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (ext_case() == kSecurity) {
    if (GetArena() == nullptr) {
      delete _impl_.ext_.security_;
    }
    clear_has_ext();
  }
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetSecurity* AssetFull::release_security() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetFull.security)
  if (ext_case() == kSecurity) {
    clear_has_ext();
    auto* temp = _impl_.ext_.security_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ext_.security_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::public_::invest::api::contract::v1::AssetSecurity& AssetFull::_internal_security() const {
  return ext_case() == kSecurity ? *_impl_.ext_.security_ : reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::AssetSecurity&>(::tinkoff::public_::invest::api::contract::v1::_AssetSecurity_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::AssetSecurity& AssetFull::security() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetFull.security)
  return _internal_security();
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetSecurity* AssetFull::unsafe_arena_release_security() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public_.invest.api.contract.v1.AssetFull.security)
  if (ext_case() == kSecurity) {
    clear_has_ext();
    auto* temp = _impl_.ext_.security_;
    _impl_.ext_.security_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AssetFull::unsafe_arena_set_allocated_security(::tinkoff::public_::invest::api::contract::v1::AssetSecurity* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_ext();
  if (value) {
    set_has_security();
    _impl_.ext_.security_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetFull.security)
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetSecurity* AssetFull::_internal_mutable_security() {
  if (ext_case() != kSecurity) {
    clear_ext();
    set_has_security();
    _impl_.ext_.security_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::AssetSecurity>(GetArena());
  }
  return _impl_.ext_.security_;
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetSecurity* AssetFull::mutable_security() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::AssetSecurity* _msg = _internal_mutable_security();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetFull.security)
  return _msg;
}

// string gos_reg_code = 10;
inline void AssetFull::clear_gos_reg_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gos_reg_code_.ClearToEmpty();
}
inline const std::string& AssetFull::gos_reg_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetFull.gos_reg_code)
  return _internal_gos_reg_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetFull::set_gos_reg_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gos_reg_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetFull.gos_reg_code)
}
inline std::string* AssetFull::mutable_gos_reg_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_gos_reg_code();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetFull.gos_reg_code)
  return _s;
}
inline const std::string& AssetFull::_internal_gos_reg_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gos_reg_code_.Get();
}
inline void AssetFull::_internal_set_gos_reg_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gos_reg_code_.Set(value, GetArena());
}
inline std::string* AssetFull::_internal_mutable_gos_reg_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.gos_reg_code_.Mutable( GetArena());
}
inline std::string* AssetFull::release_gos_reg_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetFull.gos_reg_code)
  return _impl_.gos_reg_code_.Release();
}
inline void AssetFull::set_allocated_gos_reg_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gos_reg_code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.gos_reg_code_.IsDefault()) {
          _impl_.gos_reg_code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetFull.gos_reg_code)
}

// string cfi = 11;
inline void AssetFull::clear_cfi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cfi_.ClearToEmpty();
}
inline const std::string& AssetFull::cfi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetFull.cfi)
  return _internal_cfi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetFull::set_cfi(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cfi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetFull.cfi)
}
inline std::string* AssetFull::mutable_cfi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cfi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetFull.cfi)
  return _s;
}
inline const std::string& AssetFull::_internal_cfi() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cfi_.Get();
}
inline void AssetFull::_internal_set_cfi(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cfi_.Set(value, GetArena());
}
inline std::string* AssetFull::_internal_mutable_cfi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.cfi_.Mutable( GetArena());
}
inline std::string* AssetFull::release_cfi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetFull.cfi)
  return _impl_.cfi_.Release();
}
inline void AssetFull::set_allocated_cfi(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cfi_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cfi_.IsDefault()) {
          _impl_.cfi_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetFull.cfi)
}

// string code_nsd = 12;
inline void AssetFull::clear_code_nsd() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_nsd_.ClearToEmpty();
}
inline const std::string& AssetFull::code_nsd() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetFull.code_nsd)
  return _internal_code_nsd();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetFull::set_code_nsd(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_nsd_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetFull.code_nsd)
}
inline std::string* AssetFull::mutable_code_nsd() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_code_nsd();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetFull.code_nsd)
  return _s;
}
inline const std::string& AssetFull::_internal_code_nsd() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.code_nsd_.Get();
}
inline void AssetFull::_internal_set_code_nsd(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_nsd_.Set(value, GetArena());
}
inline std::string* AssetFull::_internal_mutable_code_nsd() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.code_nsd_.Mutable( GetArena());
}
inline std::string* AssetFull::release_code_nsd() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetFull.code_nsd)
  return _impl_.code_nsd_.Release();
}
inline void AssetFull::set_allocated_code_nsd(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_nsd_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_nsd_.IsDefault()) {
          _impl_.code_nsd_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetFull.code_nsd)
}

// string status = 13;
inline void AssetFull::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_.ClearToEmpty();
}
inline const std::string& AssetFull::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetFull.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetFull::set_status(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetFull.status)
}
inline std::string* AssetFull::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetFull.status)
  return _s;
}
inline const std::string& AssetFull::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_.Get();
}
inline void AssetFull::_internal_set_status(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_.Set(value, GetArena());
}
inline std::string* AssetFull::_internal_mutable_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* AssetFull::release_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetFull.status)
  return _impl_.status_.Release();
}
inline void AssetFull::set_allocated_status(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_.IsDefault()) {
          _impl_.status_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetFull.status)
}

// .tinkoff.public_.invest.api.contract.v1.Brand brand = 14;
inline bool AssetFull::has_brand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.brand_ != nullptr);
  return value;
}
inline void AssetFull::clear_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.brand_ != nullptr) _impl_.brand_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Brand& AssetFull::_internal_brand() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Brand* p = _impl_.brand_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Brand&>(::tinkoff::public_::invest::api::contract::v1::_Brand_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Brand& AssetFull::brand() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetFull.brand)
  return _internal_brand();
}
inline void AssetFull::unsafe_arena_set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::Brand* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.brand_);
  }
  _impl_.brand_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Brand*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetFull.brand)
}
inline ::tinkoff::public_::invest::api::contract::v1::Brand* AssetFull::release_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Brand* released = _impl_.brand_;
  _impl_.brand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Brand* AssetFull::unsafe_arena_release_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetFull.brand)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Brand* temp = _impl_.brand_;
  _impl_.brand_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Brand* AssetFull::_internal_mutable_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.brand_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Brand>(GetArena());
    _impl_.brand_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Brand*>(p);
  }
  return _impl_.brand_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Brand* AssetFull::mutable_brand() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Brand* _msg = _internal_mutable_brand();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetFull.brand)
  return _msg;
}
inline void AssetFull::set_allocated_brand(::tinkoff::public_::invest::api::contract::v1::Brand* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Brand*>(_impl_.brand_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Brand*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.brand_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Brand*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetFull.brand)
}

// .google.protobuf.Timestamp updated_at = 15;
inline bool AssetFull::has_updated_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.updated_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& AssetFull::_internal_updated_at() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& AssetFull::updated_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetFull.updated_at)
  return _internal_updated_at();
}
inline void AssetFull::unsafe_arena_set_allocated_updated_at(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.updated_at_);
  }
  _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetFull.updated_at)
}
inline ::google::protobuf::Timestamp* AssetFull::release_updated_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* released = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* AssetFull::unsafe_arena_release_updated_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetFull.updated_at)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AssetFull::_internal_mutable_updated_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.updated_at_;
}
inline ::google::protobuf::Timestamp* AssetFull::mutable_updated_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetFull.updated_at)
  return _msg;
}
inline void AssetFull::set_allocated_updated_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.updated_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetFull.updated_at)
}

// string br_code = 16;
inline void AssetFull::clear_br_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.br_code_.ClearToEmpty();
}
inline const std::string& AssetFull::br_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetFull.br_code)
  return _internal_br_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetFull::set_br_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.br_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetFull.br_code)
}
inline std::string* AssetFull::mutable_br_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_br_code();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetFull.br_code)
  return _s;
}
inline const std::string& AssetFull::_internal_br_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.br_code_.Get();
}
inline void AssetFull::_internal_set_br_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.br_code_.Set(value, GetArena());
}
inline std::string* AssetFull::_internal_mutable_br_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.br_code_.Mutable( GetArena());
}
inline std::string* AssetFull::release_br_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetFull.br_code)
  return _impl_.br_code_.Release();
}
inline void AssetFull::set_allocated_br_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.br_code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.br_code_.IsDefault()) {
          _impl_.br_code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetFull.br_code)
}

// string br_code_name = 17;
inline void AssetFull::clear_br_code_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.br_code_name_.ClearToEmpty();
}
inline const std::string& AssetFull::br_code_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetFull.br_code_name)
  return _internal_br_code_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetFull::set_br_code_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.br_code_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetFull.br_code_name)
}
inline std::string* AssetFull::mutable_br_code_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_br_code_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetFull.br_code_name)
  return _s;
}
inline const std::string& AssetFull::_internal_br_code_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.br_code_name_.Get();
}
inline void AssetFull::_internal_set_br_code_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.br_code_name_.Set(value, GetArena());
}
inline std::string* AssetFull::_internal_mutable_br_code_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.br_code_name_.Mutable( GetArena());
}
inline std::string* AssetFull::release_br_code_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetFull.br_code_name)
  return _impl_.br_code_name_.Release();
}
inline void AssetFull::set_allocated_br_code_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.br_code_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.br_code_name_.IsDefault()) {
          _impl_.br_code_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetFull.br_code_name)
}

// repeated .tinkoff.public_.invest.api.contract.v1.AssetInstrument instruments = 18;
inline int AssetFull::_internal_instruments_size() const {
  return _internal_instruments().size();
}
inline int AssetFull::instruments_size() const {
  return _internal_instruments_size();
}
inline void AssetFull::clear_instruments() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instruments_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetInstrument* AssetFull::mutable_instruments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetFull.instruments)
  return _internal_mutable_instruments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AssetInstrument>* AssetFull::mutable_instruments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.AssetFull.instruments)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_instruments();
}
inline const ::tinkoff::public_::invest::api::contract::v1::AssetInstrument& AssetFull::instruments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetFull.instruments)
  return _internal_instruments().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetInstrument* AssetFull::add_instruments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::AssetInstrument* _add = _internal_mutable_instruments()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.AssetFull.instruments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AssetInstrument>& AssetFull::instruments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.AssetFull.instruments)
  return _internal_instruments();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AssetInstrument>&
AssetFull::_internal_instruments() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instruments_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AssetInstrument>*
AssetFull::_internal_mutable_instruments() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.instruments_;
}

inline bool AssetFull::has_ext() const {
  return ext_case() != EXT_NOT_SET;
}
inline void AssetFull::clear_has_ext() {
  _impl_._oneof_case_[0] = EXT_NOT_SET;
}
inline AssetFull::ExtCase AssetFull::ext_case() const {
  return AssetFull::ExtCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Asset

// string uid = 1;
inline void Asset::clear_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& Asset::uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Asset.uid)
  return _internal_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Asset::set_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Asset.uid)
}
inline std::string* Asset::mutable_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Asset.uid)
  return _s;
}
inline const std::string& Asset::_internal_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uid_.Get();
}
inline void Asset::_internal_set_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(value, GetArena());
}
inline std::string* Asset::_internal_mutable_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.uid_.Mutable( GetArena());
}
inline std::string* Asset::release_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Asset.uid)
  return _impl_.uid_.Release();
}
inline void Asset::set_allocated_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uid_.IsDefault()) {
          _impl_.uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Asset.uid)
}

// .tinkoff.public_.invest.api.contract.v1.AssetType type = 2;
inline void Asset::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetType Asset::type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Asset.type)
  return _internal_type();
}
inline void Asset::set_type(::tinkoff::public_::invest::api::contract::v1::AssetType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Asset.type)
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetType Asset::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::AssetType>(_impl_.type_);
}
inline void Asset::_internal_set_type(::tinkoff::public_::invest::api::contract::v1::AssetType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// string name = 3;
inline void Asset::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Asset::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Asset.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Asset::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Asset.name)
}
inline std::string* Asset::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Asset.name)
  return _s;
}
inline const std::string& Asset::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Asset::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Asset::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Asset::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Asset.name)
  return _impl_.name_.Release();
}
inline void Asset::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Asset.name)
}

// repeated .tinkoff.public_.invest.api.contract.v1.AssetInstrument instruments = 4;
inline int Asset::_internal_instruments_size() const {
  return _internal_instruments().size();
}
inline int Asset::instruments_size() const {
  return _internal_instruments_size();
}
inline void Asset::clear_instruments() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instruments_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetInstrument* Asset::mutable_instruments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Asset.instruments)
  return _internal_mutable_instruments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AssetInstrument>* Asset::mutable_instruments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.Asset.instruments)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_instruments();
}
inline const ::tinkoff::public_::invest::api::contract::v1::AssetInstrument& Asset::instruments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Asset.instruments)
  return _internal_instruments().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetInstrument* Asset::add_instruments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::AssetInstrument* _add = _internal_mutable_instruments()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.Asset.instruments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AssetInstrument>& Asset::instruments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.Asset.instruments)
  return _internal_instruments();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AssetInstrument>&
Asset::_internal_instruments() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instruments_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::AssetInstrument>*
Asset::_internal_mutable_instruments() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.instruments_;
}

// -------------------------------------------------------------------

// AssetCurrency

// string base_currency = 1;
inline void AssetCurrency::clear_base_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.base_currency_.ClearToEmpty();
}
inline const std::string& AssetCurrency::base_currency() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetCurrency.base_currency)
  return _internal_base_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetCurrency::set_base_currency(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.base_currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetCurrency.base_currency)
}
inline std::string* AssetCurrency::mutable_base_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_base_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetCurrency.base_currency)
  return _s;
}
inline const std::string& AssetCurrency::_internal_base_currency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.base_currency_.Get();
}
inline void AssetCurrency::_internal_set_base_currency(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.base_currency_.Set(value, GetArena());
}
inline std::string* AssetCurrency::_internal_mutable_base_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.base_currency_.Mutable( GetArena());
}
inline std::string* AssetCurrency::release_base_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetCurrency.base_currency)
  return _impl_.base_currency_.Release();
}
inline void AssetCurrency::set_allocated_base_currency(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.base_currency_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.base_currency_.IsDefault()) {
          _impl_.base_currency_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetCurrency.base_currency)
}

// -------------------------------------------------------------------

// AssetSecurity

// string isin = 1;
inline void AssetSecurity::clear_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.isin_.ClearToEmpty();
}
inline const std::string& AssetSecurity::isin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetSecurity.isin)
  return _internal_isin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetSecurity::set_isin(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.isin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetSecurity.isin)
}
inline std::string* AssetSecurity::mutable_isin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_isin();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetSecurity.isin)
  return _s;
}
inline const std::string& AssetSecurity::_internal_isin() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.isin_.Get();
}
inline void AssetSecurity::_internal_set_isin(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.isin_.Set(value, GetArena());
}
inline std::string* AssetSecurity::_internal_mutable_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.isin_.Mutable( GetArena());
}
inline std::string* AssetSecurity::release_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetSecurity.isin)
  return _impl_.isin_.Release();
}
inline void AssetSecurity::set_allocated_isin(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.isin_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.isin_.IsDefault()) {
          _impl_.isin_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetSecurity.isin)
}

// string type = 2;
inline void AssetSecurity::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& AssetSecurity::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetSecurity.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetSecurity::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetSecurity.type)
}
inline std::string* AssetSecurity::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetSecurity.type)
  return _s;
}
inline const std::string& AssetSecurity::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void AssetSecurity::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(value, GetArena());
}
inline std::string* AssetSecurity::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* AssetSecurity::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetSecurity.type)
  return _impl_.type_.Release();
}
inline void AssetSecurity::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetSecurity.type)
}

// .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
inline void AssetSecurity::clear_instrument_kind() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_kind_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentType AssetSecurity::instrument_kind() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetSecurity.instrument_kind)
  return _internal_instrument_kind();
}
inline void AssetSecurity::set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value) {
  _internal_set_instrument_kind(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetSecurity.instrument_kind)
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentType AssetSecurity::_internal_instrument_kind() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::InstrumentType>(_impl_.instrument_kind_);
}
inline void AssetSecurity::_internal_set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_kind_ = value;
}

// .tinkoff.public_.invest.api.contract.v1.AssetShare share = 3;
inline bool AssetSecurity::has_share() const {
  return ext_case() == kShare;
}
inline bool AssetSecurity::_internal_has_share() const {
  return ext_case() == kShare;
}
inline void AssetSecurity::set_has_share() {
  _impl_._oneof_case_[0] = kShare;
}
inline void AssetSecurity::clear_share() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (ext_case() == kShare) {
    if (GetArena() == nullptr) {
      delete _impl_.ext_.share_;
    }
    clear_has_ext();
  }
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetShare* AssetSecurity::release_share() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetSecurity.share)
  if (ext_case() == kShare) {
    clear_has_ext();
    auto* temp = _impl_.ext_.share_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ext_.share_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::public_::invest::api::contract::v1::AssetShare& AssetSecurity::_internal_share() const {
  return ext_case() == kShare ? *_impl_.ext_.share_ : reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::AssetShare&>(::tinkoff::public_::invest::api::contract::v1::_AssetShare_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::AssetShare& AssetSecurity::share() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetSecurity.share)
  return _internal_share();
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetShare* AssetSecurity::unsafe_arena_release_share() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public_.invest.api.contract.v1.AssetSecurity.share)
  if (ext_case() == kShare) {
    clear_has_ext();
    auto* temp = _impl_.ext_.share_;
    _impl_.ext_.share_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AssetSecurity::unsafe_arena_set_allocated_share(::tinkoff::public_::invest::api::contract::v1::AssetShare* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_ext();
  if (value) {
    set_has_share();
    _impl_.ext_.share_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetSecurity.share)
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetShare* AssetSecurity::_internal_mutable_share() {
  if (ext_case() != kShare) {
    clear_ext();
    set_has_share();
    _impl_.ext_.share_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::AssetShare>(GetArena());
  }
  return _impl_.ext_.share_;
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetShare* AssetSecurity::mutable_share() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::AssetShare* _msg = _internal_mutable_share();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetSecurity.share)
  return _msg;
}

// .tinkoff.public_.invest.api.contract.v1.AssetBond bond = 4;
inline bool AssetSecurity::has_bond() const {
  return ext_case() == kBond;
}
inline bool AssetSecurity::_internal_has_bond() const {
  return ext_case() == kBond;
}
inline void AssetSecurity::set_has_bond() {
  _impl_._oneof_case_[0] = kBond;
}
inline void AssetSecurity::clear_bond() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (ext_case() == kBond) {
    if (GetArena() == nullptr) {
      delete _impl_.ext_.bond_;
    }
    clear_has_ext();
  }
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetBond* AssetSecurity::release_bond() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetSecurity.bond)
  if (ext_case() == kBond) {
    clear_has_ext();
    auto* temp = _impl_.ext_.bond_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ext_.bond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::public_::invest::api::contract::v1::AssetBond& AssetSecurity::_internal_bond() const {
  return ext_case() == kBond ? *_impl_.ext_.bond_ : reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::AssetBond&>(::tinkoff::public_::invest::api::contract::v1::_AssetBond_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::AssetBond& AssetSecurity::bond() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetSecurity.bond)
  return _internal_bond();
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetBond* AssetSecurity::unsafe_arena_release_bond() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public_.invest.api.contract.v1.AssetSecurity.bond)
  if (ext_case() == kBond) {
    clear_has_ext();
    auto* temp = _impl_.ext_.bond_;
    _impl_.ext_.bond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AssetSecurity::unsafe_arena_set_allocated_bond(::tinkoff::public_::invest::api::contract::v1::AssetBond* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_ext();
  if (value) {
    set_has_bond();
    _impl_.ext_.bond_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetSecurity.bond)
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetBond* AssetSecurity::_internal_mutable_bond() {
  if (ext_case() != kBond) {
    clear_ext();
    set_has_bond();
    _impl_.ext_.bond_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::AssetBond>(GetArena());
  }
  return _impl_.ext_.bond_;
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetBond* AssetSecurity::mutable_bond() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::AssetBond* _msg = _internal_mutable_bond();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetSecurity.bond)
  return _msg;
}

// .tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct sp = 5;
inline bool AssetSecurity::has_sp() const {
  return ext_case() == kSp;
}
inline bool AssetSecurity::_internal_has_sp() const {
  return ext_case() == kSp;
}
inline void AssetSecurity::set_has_sp() {
  _impl_._oneof_case_[0] = kSp;
}
inline void AssetSecurity::clear_sp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (ext_case() == kSp) {
    if (GetArena() == nullptr) {
      delete _impl_.ext_.sp_;
    }
    clear_has_ext();
  }
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct* AssetSecurity::release_sp() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetSecurity.sp)
  if (ext_case() == kSp) {
    clear_has_ext();
    auto* temp = _impl_.ext_.sp_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ext_.sp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct& AssetSecurity::_internal_sp() const {
  return ext_case() == kSp ? *_impl_.ext_.sp_ : reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct&>(::tinkoff::public_::invest::api::contract::v1::_AssetStructuredProduct_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct& AssetSecurity::sp() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetSecurity.sp)
  return _internal_sp();
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct* AssetSecurity::unsafe_arena_release_sp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public_.invest.api.contract.v1.AssetSecurity.sp)
  if (ext_case() == kSp) {
    clear_has_ext();
    auto* temp = _impl_.ext_.sp_;
    _impl_.ext_.sp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AssetSecurity::unsafe_arena_set_allocated_sp(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_ext();
  if (value) {
    set_has_sp();
    _impl_.ext_.sp_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetSecurity.sp)
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct* AssetSecurity::_internal_mutable_sp() {
  if (ext_case() != kSp) {
    clear_ext();
    set_has_sp();
    _impl_.ext_.sp_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct>(GetArena());
  }
  return _impl_.ext_.sp_;
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct* AssetSecurity::mutable_sp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct* _msg = _internal_mutable_sp();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetSecurity.sp)
  return _msg;
}

// .tinkoff.public_.invest.api.contract.v1.AssetEtf etf = 6;
inline bool AssetSecurity::has_etf() const {
  return ext_case() == kEtf;
}
inline bool AssetSecurity::_internal_has_etf() const {
  return ext_case() == kEtf;
}
inline void AssetSecurity::set_has_etf() {
  _impl_._oneof_case_[0] = kEtf;
}
inline void AssetSecurity::clear_etf() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (ext_case() == kEtf) {
    if (GetArena() == nullptr) {
      delete _impl_.ext_.etf_;
    }
    clear_has_ext();
  }
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetEtf* AssetSecurity::release_etf() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetSecurity.etf)
  if (ext_case() == kEtf) {
    clear_has_ext();
    auto* temp = _impl_.ext_.etf_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ext_.etf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::public_::invest::api::contract::v1::AssetEtf& AssetSecurity::_internal_etf() const {
  return ext_case() == kEtf ? *_impl_.ext_.etf_ : reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::AssetEtf&>(::tinkoff::public_::invest::api::contract::v1::_AssetEtf_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::AssetEtf& AssetSecurity::etf() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetSecurity.etf)
  return _internal_etf();
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetEtf* AssetSecurity::unsafe_arena_release_etf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public_.invest.api.contract.v1.AssetSecurity.etf)
  if (ext_case() == kEtf) {
    clear_has_ext();
    auto* temp = _impl_.ext_.etf_;
    _impl_.ext_.etf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AssetSecurity::unsafe_arena_set_allocated_etf(::tinkoff::public_::invest::api::contract::v1::AssetEtf* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_ext();
  if (value) {
    set_has_etf();
    _impl_.ext_.etf_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetSecurity.etf)
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetEtf* AssetSecurity::_internal_mutable_etf() {
  if (ext_case() != kEtf) {
    clear_ext();
    set_has_etf();
    _impl_.ext_.etf_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::AssetEtf>(GetArena());
  }
  return _impl_.ext_.etf_;
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetEtf* AssetSecurity::mutable_etf() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::AssetEtf* _msg = _internal_mutable_etf();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetSecurity.etf)
  return _msg;
}

// .tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate clearing_certificate = 7;
inline bool AssetSecurity::has_clearing_certificate() const {
  return ext_case() == kClearingCertificate;
}
inline bool AssetSecurity::_internal_has_clearing_certificate() const {
  return ext_case() == kClearingCertificate;
}
inline void AssetSecurity::set_has_clearing_certificate() {
  _impl_._oneof_case_[0] = kClearingCertificate;
}
inline void AssetSecurity::clear_clearing_certificate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (ext_case() == kClearingCertificate) {
    if (GetArena() == nullptr) {
      delete _impl_.ext_.clearing_certificate_;
    }
    clear_has_ext();
  }
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate* AssetSecurity::release_clearing_certificate() {
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetSecurity.clearing_certificate)
  if (ext_case() == kClearingCertificate) {
    clear_has_ext();
    auto* temp = _impl_.ext_.clearing_certificate_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ext_.clearing_certificate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate& AssetSecurity::_internal_clearing_certificate() const {
  return ext_case() == kClearingCertificate ? *_impl_.ext_.clearing_certificate_ : reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate&>(::tinkoff::public_::invest::api::contract::v1::_AssetClearingCertificate_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate& AssetSecurity::clearing_certificate() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetSecurity.clearing_certificate)
  return _internal_clearing_certificate();
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate* AssetSecurity::unsafe_arena_release_clearing_certificate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.public_.invest.api.contract.v1.AssetSecurity.clearing_certificate)
  if (ext_case() == kClearingCertificate) {
    clear_has_ext();
    auto* temp = _impl_.ext_.clearing_certificate_;
    _impl_.ext_.clearing_certificate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AssetSecurity::unsafe_arena_set_allocated_clearing_certificate(::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_ext();
  if (value) {
    set_has_clearing_certificate();
    _impl_.ext_.clearing_certificate_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetSecurity.clearing_certificate)
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate* AssetSecurity::_internal_mutable_clearing_certificate() {
  if (ext_case() != kClearingCertificate) {
    clear_ext();
    set_has_clearing_certificate();
    _impl_.ext_.clearing_certificate_ = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate>(GetArena());
  }
  return _impl_.ext_.clearing_certificate_;
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate* AssetSecurity::mutable_clearing_certificate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate* _msg = _internal_mutable_clearing_certificate();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetSecurity.clearing_certificate)
  return _msg;
}

inline bool AssetSecurity::has_ext() const {
  return ext_case() != EXT_NOT_SET;
}
inline void AssetSecurity::clear_has_ext() {
  _impl_._oneof_case_[0] = EXT_NOT_SET;
}
inline AssetSecurity::ExtCase AssetSecurity::ext_case() const {
  return AssetSecurity::ExtCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AssetShare

// .tinkoff.public_.invest.api.contract.v1.ShareType type = 1;
inline void AssetShare::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::ShareType AssetShare::type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetShare.type)
  return _internal_type();
}
inline void AssetShare::set_type(::tinkoff::public_::invest::api::contract::v1::ShareType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetShare.type)
}
inline ::tinkoff::public_::invest::api::contract::v1::ShareType AssetShare::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::ShareType>(_impl_.type_);
}
inline void AssetShare::_internal_set_type(::tinkoff::public_::invest::api::contract::v1::ShareType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 2;
inline bool AssetShare::has_issue_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.issue_size_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetShare::_internal_issue_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.issue_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetShare::issue_size() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetShare.issue_size)
  return _internal_issue_size();
}
inline void AssetShare::unsafe_arena_set_allocated_issue_size(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.issue_size_);
  }
  _impl_.issue_size_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetShare.issue_size)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetShare::release_issue_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.issue_size_;
  _impl_.issue_size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetShare::unsafe_arena_release_issue_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetShare.issue_size)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.issue_size_;
  _impl_.issue_size_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetShare::_internal_mutable_issue_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.issue_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.issue_size_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.issue_size_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetShare::mutable_issue_size() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_issue_size();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetShare.issue_size)
  return _msg;
}
inline void AssetShare::set_allocated_issue_size(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.issue_size_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.issue_size_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetShare.issue_size)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 3;
inline bool AssetShare::has_nominal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nominal_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetShare::_internal_nominal() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.nominal_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetShare::nominal() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetShare.nominal)
  return _internal_nominal();
}
inline void AssetShare::unsafe_arena_set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nominal_);
  }
  _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetShare.nominal)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetShare::release_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.nominal_;
  _impl_.nominal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetShare::unsafe_arena_release_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetShare.nominal)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.nominal_;
  _impl_.nominal_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetShare::_internal_mutable_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.nominal_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.nominal_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetShare::mutable_nominal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_nominal();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetShare.nominal)
  return _msg;
}
inline void AssetShare::set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nominal_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetShare.nominal)
}

// string nominal_currency = 4;
inline void AssetShare::clear_nominal_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nominal_currency_.ClearToEmpty();
}
inline const std::string& AssetShare::nominal_currency() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetShare.nominal_currency)
  return _internal_nominal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetShare::set_nominal_currency(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nominal_currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetShare.nominal_currency)
}
inline std::string* AssetShare::mutable_nominal_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nominal_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetShare.nominal_currency)
  return _s;
}
inline const std::string& AssetShare::_internal_nominal_currency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nominal_currency_.Get();
}
inline void AssetShare::_internal_set_nominal_currency(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nominal_currency_.Set(value, GetArena());
}
inline std::string* AssetShare::_internal_mutable_nominal_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nominal_currency_.Mutable( GetArena());
}
inline std::string* AssetShare::release_nominal_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetShare.nominal_currency)
  return _impl_.nominal_currency_.Release();
}
inline void AssetShare::set_allocated_nominal_currency(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nominal_currency_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nominal_currency_.IsDefault()) {
          _impl_.nominal_currency_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetShare.nominal_currency)
}

// string primary_index = 5;
inline void AssetShare::clear_primary_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.primary_index_.ClearToEmpty();
}
inline const std::string& AssetShare::primary_index() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetShare.primary_index)
  return _internal_primary_index();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetShare::set_primary_index(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.primary_index_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetShare.primary_index)
}
inline std::string* AssetShare::mutable_primary_index() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_primary_index();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetShare.primary_index)
  return _s;
}
inline const std::string& AssetShare::_internal_primary_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.primary_index_.Get();
}
inline void AssetShare::_internal_set_primary_index(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.primary_index_.Set(value, GetArena());
}
inline std::string* AssetShare::_internal_mutable_primary_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.primary_index_.Mutable( GetArena());
}
inline std::string* AssetShare::release_primary_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetShare.primary_index)
  return _impl_.primary_index_.Release();
}
inline void AssetShare::set_allocated_primary_index(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.primary_index_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.primary_index_.IsDefault()) {
          _impl_.primary_index_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetShare.primary_index)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation dividend_rate = 6;
inline bool AssetShare::has_dividend_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dividend_rate_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetShare::_internal_dividend_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.dividend_rate_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetShare::dividend_rate() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetShare.dividend_rate)
  return _internal_dividend_rate();
}
inline void AssetShare::unsafe_arena_set_allocated_dividend_rate(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dividend_rate_);
  }
  _impl_.dividend_rate_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetShare.dividend_rate)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetShare::release_dividend_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.dividend_rate_;
  _impl_.dividend_rate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetShare::unsafe_arena_release_dividend_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetShare.dividend_rate)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.dividend_rate_;
  _impl_.dividend_rate_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetShare::_internal_mutable_dividend_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.dividend_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.dividend_rate_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.dividend_rate_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetShare::mutable_dividend_rate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_dividend_rate();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetShare.dividend_rate)
  return _msg;
}
inline void AssetShare::set_allocated_dividend_rate(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dividend_rate_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.dividend_rate_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetShare.dividend_rate)
}

// string preferred_share_type = 7;
inline void AssetShare::clear_preferred_share_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.preferred_share_type_.ClearToEmpty();
}
inline const std::string& AssetShare::preferred_share_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetShare.preferred_share_type)
  return _internal_preferred_share_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetShare::set_preferred_share_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.preferred_share_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetShare.preferred_share_type)
}
inline std::string* AssetShare::mutable_preferred_share_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_preferred_share_type();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetShare.preferred_share_type)
  return _s;
}
inline const std::string& AssetShare::_internal_preferred_share_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.preferred_share_type_.Get();
}
inline void AssetShare::_internal_set_preferred_share_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.preferred_share_type_.Set(value, GetArena());
}
inline std::string* AssetShare::_internal_mutable_preferred_share_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.preferred_share_type_.Mutable( GetArena());
}
inline std::string* AssetShare::release_preferred_share_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetShare.preferred_share_type)
  return _impl_.preferred_share_type_.Release();
}
inline void AssetShare::set_allocated_preferred_share_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.preferred_share_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.preferred_share_type_.IsDefault()) {
          _impl_.preferred_share_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetShare.preferred_share_type)
}

// .google.protobuf.Timestamp ipo_date = 8;
inline bool AssetShare::has_ipo_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ipo_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& AssetShare::_internal_ipo_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.ipo_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& AssetShare::ipo_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetShare.ipo_date)
  return _internal_ipo_date();
}
inline void AssetShare::unsafe_arena_set_allocated_ipo_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ipo_date_);
  }
  _impl_.ipo_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetShare.ipo_date)
}
inline ::google::protobuf::Timestamp* AssetShare::release_ipo_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Timestamp* released = _impl_.ipo_date_;
  _impl_.ipo_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* AssetShare::unsafe_arena_release_ipo_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetShare.ipo_date)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Timestamp* temp = _impl_.ipo_date_;
  _impl_.ipo_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AssetShare::_internal_mutable_ipo_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.ipo_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.ipo_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.ipo_date_;
}
inline ::google::protobuf::Timestamp* AssetShare::mutable_ipo_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_ipo_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetShare.ipo_date)
  return _msg;
}
inline void AssetShare::set_allocated_ipo_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ipo_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.ipo_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetShare.ipo_date)
}

// .google.protobuf.Timestamp registry_date = 9;
inline bool AssetShare::has_registry_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.registry_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& AssetShare::_internal_registry_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.registry_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& AssetShare::registry_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetShare.registry_date)
  return _internal_registry_date();
}
inline void AssetShare::unsafe_arena_set_allocated_registry_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.registry_date_);
  }
  _impl_.registry_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetShare.registry_date)
}
inline ::google::protobuf::Timestamp* AssetShare::release_registry_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* released = _impl_.registry_date_;
  _impl_.registry_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* AssetShare::unsafe_arena_release_registry_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetShare.registry_date)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* temp = _impl_.registry_date_;
  _impl_.registry_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AssetShare::_internal_mutable_registry_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.registry_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.registry_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.registry_date_;
}
inline ::google::protobuf::Timestamp* AssetShare::mutable_registry_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_registry_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetShare.registry_date)
  return _msg;
}
inline void AssetShare::set_allocated_registry_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.registry_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.registry_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetShare.registry_date)
}

// bool div_yield_flag = 10;
inline void AssetShare::clear_div_yield_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.div_yield_flag_ = false;
}
inline bool AssetShare::div_yield_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetShare.div_yield_flag)
  return _internal_div_yield_flag();
}
inline void AssetShare::set_div_yield_flag(bool value) {
  _internal_set_div_yield_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetShare.div_yield_flag)
}
inline bool AssetShare::_internal_div_yield_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.div_yield_flag_;
}
inline void AssetShare::_internal_set_div_yield_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.div_yield_flag_ = value;
}

// string issue_kind = 11;
inline void AssetShare::clear_issue_kind() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.issue_kind_.ClearToEmpty();
}
inline const std::string& AssetShare::issue_kind() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetShare.issue_kind)
  return _internal_issue_kind();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetShare::set_issue_kind(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.issue_kind_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetShare.issue_kind)
}
inline std::string* AssetShare::mutable_issue_kind() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_issue_kind();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetShare.issue_kind)
  return _s;
}
inline const std::string& AssetShare::_internal_issue_kind() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.issue_kind_.Get();
}
inline void AssetShare::_internal_set_issue_kind(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.issue_kind_.Set(value, GetArena());
}
inline std::string* AssetShare::_internal_mutable_issue_kind() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.issue_kind_.Mutable( GetArena());
}
inline std::string* AssetShare::release_issue_kind() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetShare.issue_kind)
  return _impl_.issue_kind_.Release();
}
inline void AssetShare::set_allocated_issue_kind(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.issue_kind_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.issue_kind_.IsDefault()) {
          _impl_.issue_kind_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetShare.issue_kind)
}

// .google.protobuf.Timestamp placement_date = 12;
inline bool AssetShare::has_placement_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.placement_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& AssetShare::_internal_placement_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.placement_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& AssetShare::placement_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetShare.placement_date)
  return _internal_placement_date();
}
inline void AssetShare::unsafe_arena_set_allocated_placement_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.placement_date_);
  }
  _impl_.placement_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetShare.placement_date)
}
inline ::google::protobuf::Timestamp* AssetShare::release_placement_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Timestamp* released = _impl_.placement_date_;
  _impl_.placement_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* AssetShare::unsafe_arena_release_placement_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetShare.placement_date)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Timestamp* temp = _impl_.placement_date_;
  _impl_.placement_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AssetShare::_internal_mutable_placement_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.placement_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.placement_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.placement_date_;
}
inline ::google::protobuf::Timestamp* AssetShare::mutable_placement_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_placement_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetShare.placement_date)
  return _msg;
}
inline void AssetShare::set_allocated_placement_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.placement_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.placement_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetShare.placement_date)
}

// string repres_isin = 13;
inline void AssetShare::clear_repres_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.repres_isin_.ClearToEmpty();
}
inline const std::string& AssetShare::repres_isin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetShare.repres_isin)
  return _internal_repres_isin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetShare::set_repres_isin(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.repres_isin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetShare.repres_isin)
}
inline std::string* AssetShare::mutable_repres_isin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_repres_isin();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetShare.repres_isin)
  return _s;
}
inline const std::string& AssetShare::_internal_repres_isin() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.repres_isin_.Get();
}
inline void AssetShare::_internal_set_repres_isin(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.repres_isin_.Set(value, GetArena());
}
inline std::string* AssetShare::_internal_mutable_repres_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.repres_isin_.Mutable( GetArena());
}
inline std::string* AssetShare::release_repres_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetShare.repres_isin)
  return _impl_.repres_isin_.Release();
}
inline void AssetShare::set_allocated_repres_isin(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.repres_isin_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.repres_isin_.IsDefault()) {
          _impl_.repres_isin_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetShare.repres_isin)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 14;
inline bool AssetShare::has_issue_size_plan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.issue_size_plan_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetShare::_internal_issue_size_plan() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.issue_size_plan_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetShare::issue_size_plan() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetShare.issue_size_plan)
  return _internal_issue_size_plan();
}
inline void AssetShare::unsafe_arena_set_allocated_issue_size_plan(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.issue_size_plan_);
  }
  _impl_.issue_size_plan_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetShare.issue_size_plan)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetShare::release_issue_size_plan() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.issue_size_plan_;
  _impl_.issue_size_plan_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetShare::unsafe_arena_release_issue_size_plan() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetShare.issue_size_plan)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.issue_size_plan_;
  _impl_.issue_size_plan_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetShare::_internal_mutable_issue_size_plan() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.issue_size_plan_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.issue_size_plan_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.issue_size_plan_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetShare::mutable_issue_size_plan() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_issue_size_plan();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetShare.issue_size_plan)
  return _msg;
}
inline void AssetShare::set_allocated_issue_size_plan(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.issue_size_plan_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.issue_size_plan_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetShare.issue_size_plan)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation total_float = 15;
inline bool AssetShare::has_total_float() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.total_float_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetShare::_internal_total_float() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.total_float_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetShare::total_float() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetShare.total_float)
  return _internal_total_float();
}
inline void AssetShare::unsafe_arena_set_allocated_total_float(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_float_);
  }
  _impl_.total_float_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetShare.total_float)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetShare::release_total_float() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.total_float_;
  _impl_.total_float_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetShare::unsafe_arena_release_total_float() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetShare.total_float)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.total_float_;
  _impl_.total_float_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetShare::_internal_mutable_total_float() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.total_float_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.total_float_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.total_float_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetShare::mutable_total_float() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_total_float();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetShare.total_float)
  return _msg;
}
inline void AssetShare::set_allocated_total_float(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_float_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.total_float_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetShare.total_float)
}

// -------------------------------------------------------------------

// AssetBond

// .tinkoff.public_.invest.api.contract.v1.Quotation current_nominal = 1;
inline bool AssetBond::has_current_nominal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.current_nominal_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetBond::_internal_current_nominal() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.current_nominal_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetBond::current_nominal() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetBond.current_nominal)
  return _internal_current_nominal();
}
inline void AssetBond::unsafe_arena_set_allocated_current_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_nominal_);
  }
  _impl_.current_nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetBond.current_nominal)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetBond::release_current_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.current_nominal_;
  _impl_.current_nominal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetBond::unsafe_arena_release_current_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetBond.current_nominal)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.current_nominal_;
  _impl_.current_nominal_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetBond::_internal_mutable_current_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.current_nominal_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.current_nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.current_nominal_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetBond::mutable_current_nominal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_current_nominal();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetBond.current_nominal)
  return _msg;
}
inline void AssetBond::set_allocated_current_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_nominal_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.current_nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetBond.current_nominal)
}

// string borrow_name = 2;
inline void AssetBond::clear_borrow_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.borrow_name_.ClearToEmpty();
}
inline const std::string& AssetBond::borrow_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetBond.borrow_name)
  return _internal_borrow_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetBond::set_borrow_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.borrow_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetBond.borrow_name)
}
inline std::string* AssetBond::mutable_borrow_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_borrow_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetBond.borrow_name)
  return _s;
}
inline const std::string& AssetBond::_internal_borrow_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.borrow_name_.Get();
}
inline void AssetBond::_internal_set_borrow_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.borrow_name_.Set(value, GetArena());
}
inline std::string* AssetBond::_internal_mutable_borrow_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.borrow_name_.Mutable( GetArena());
}
inline std::string* AssetBond::release_borrow_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetBond.borrow_name)
  return _impl_.borrow_name_.Release();
}
inline void AssetBond::set_allocated_borrow_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.borrow_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.borrow_name_.IsDefault()) {
          _impl_.borrow_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetBond.borrow_name)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 3;
inline bool AssetBond::has_issue_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.issue_size_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetBond::_internal_issue_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.issue_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetBond::issue_size() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetBond.issue_size)
  return _internal_issue_size();
}
inline void AssetBond::unsafe_arena_set_allocated_issue_size(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.issue_size_);
  }
  _impl_.issue_size_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetBond.issue_size)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetBond::release_issue_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.issue_size_;
  _impl_.issue_size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetBond::unsafe_arena_release_issue_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetBond.issue_size)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.issue_size_;
  _impl_.issue_size_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetBond::_internal_mutable_issue_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.issue_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.issue_size_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.issue_size_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetBond::mutable_issue_size() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_issue_size();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetBond.issue_size)
  return _msg;
}
inline void AssetBond::set_allocated_issue_size(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.issue_size_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.issue_size_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetBond.issue_size)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 4;
inline bool AssetBond::has_nominal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nominal_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetBond::_internal_nominal() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.nominal_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetBond::nominal() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetBond.nominal)
  return _internal_nominal();
}
inline void AssetBond::unsafe_arena_set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nominal_);
  }
  _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetBond.nominal)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetBond::release_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.nominal_;
  _impl_.nominal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetBond::unsafe_arena_release_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetBond.nominal)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.nominal_;
  _impl_.nominal_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetBond::_internal_mutable_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.nominal_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.nominal_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetBond::mutable_nominal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_nominal();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetBond.nominal)
  return _msg;
}
inline void AssetBond::set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nominal_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetBond.nominal)
}

// string nominal_currency = 5;
inline void AssetBond::clear_nominal_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nominal_currency_.ClearToEmpty();
}
inline const std::string& AssetBond::nominal_currency() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetBond.nominal_currency)
  return _internal_nominal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetBond::set_nominal_currency(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nominal_currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetBond.nominal_currency)
}
inline std::string* AssetBond::mutable_nominal_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nominal_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetBond.nominal_currency)
  return _s;
}
inline const std::string& AssetBond::_internal_nominal_currency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nominal_currency_.Get();
}
inline void AssetBond::_internal_set_nominal_currency(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nominal_currency_.Set(value, GetArena());
}
inline std::string* AssetBond::_internal_mutable_nominal_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nominal_currency_.Mutable( GetArena());
}
inline std::string* AssetBond::release_nominal_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetBond.nominal_currency)
  return _impl_.nominal_currency_.Release();
}
inline void AssetBond::set_allocated_nominal_currency(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nominal_currency_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nominal_currency_.IsDefault()) {
          _impl_.nominal_currency_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetBond.nominal_currency)
}

// string issue_kind = 6;
inline void AssetBond::clear_issue_kind() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.issue_kind_.ClearToEmpty();
}
inline const std::string& AssetBond::issue_kind() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetBond.issue_kind)
  return _internal_issue_kind();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetBond::set_issue_kind(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.issue_kind_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetBond.issue_kind)
}
inline std::string* AssetBond::mutable_issue_kind() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_issue_kind();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetBond.issue_kind)
  return _s;
}
inline const std::string& AssetBond::_internal_issue_kind() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.issue_kind_.Get();
}
inline void AssetBond::_internal_set_issue_kind(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.issue_kind_.Set(value, GetArena());
}
inline std::string* AssetBond::_internal_mutable_issue_kind() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.issue_kind_.Mutable( GetArena());
}
inline std::string* AssetBond::release_issue_kind() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetBond.issue_kind)
  return _impl_.issue_kind_.Release();
}
inline void AssetBond::set_allocated_issue_kind(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.issue_kind_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.issue_kind_.IsDefault()) {
          _impl_.issue_kind_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetBond.issue_kind)
}

// string interest_kind = 7;
inline void AssetBond::clear_interest_kind() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.interest_kind_.ClearToEmpty();
}
inline const std::string& AssetBond::interest_kind() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetBond.interest_kind)
  return _internal_interest_kind();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetBond::set_interest_kind(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.interest_kind_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetBond.interest_kind)
}
inline std::string* AssetBond::mutable_interest_kind() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_interest_kind();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetBond.interest_kind)
  return _s;
}
inline const std::string& AssetBond::_internal_interest_kind() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.interest_kind_.Get();
}
inline void AssetBond::_internal_set_interest_kind(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.interest_kind_.Set(value, GetArena());
}
inline std::string* AssetBond::_internal_mutable_interest_kind() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.interest_kind_.Mutable( GetArena());
}
inline std::string* AssetBond::release_interest_kind() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetBond.interest_kind)
  return _impl_.interest_kind_.Release();
}
inline void AssetBond::set_allocated_interest_kind(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.interest_kind_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.interest_kind_.IsDefault()) {
          _impl_.interest_kind_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetBond.interest_kind)
}

// int32 coupon_quantity_per_year = 8;
inline void AssetBond::clear_coupon_quantity_per_year() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.coupon_quantity_per_year_ = 0;
}
inline ::int32_t AssetBond::coupon_quantity_per_year() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetBond.coupon_quantity_per_year)
  return _internal_coupon_quantity_per_year();
}
inline void AssetBond::set_coupon_quantity_per_year(::int32_t value) {
  _internal_set_coupon_quantity_per_year(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetBond.coupon_quantity_per_year)
}
inline ::int32_t AssetBond::_internal_coupon_quantity_per_year() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.coupon_quantity_per_year_;
}
inline void AssetBond::_internal_set_coupon_quantity_per_year(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.coupon_quantity_per_year_ = value;
}

// bool indexed_nominal_flag = 9;
inline void AssetBond::clear_indexed_nominal_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.indexed_nominal_flag_ = false;
}
inline bool AssetBond::indexed_nominal_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetBond.indexed_nominal_flag)
  return _internal_indexed_nominal_flag();
}
inline void AssetBond::set_indexed_nominal_flag(bool value) {
  _internal_set_indexed_nominal_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetBond.indexed_nominal_flag)
}
inline bool AssetBond::_internal_indexed_nominal_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.indexed_nominal_flag_;
}
inline void AssetBond::_internal_set_indexed_nominal_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.indexed_nominal_flag_ = value;
}

// bool subordinated_flag = 10;
inline void AssetBond::clear_subordinated_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subordinated_flag_ = false;
}
inline bool AssetBond::subordinated_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetBond.subordinated_flag)
  return _internal_subordinated_flag();
}
inline void AssetBond::set_subordinated_flag(bool value) {
  _internal_set_subordinated_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetBond.subordinated_flag)
}
inline bool AssetBond::_internal_subordinated_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.subordinated_flag_;
}
inline void AssetBond::_internal_set_subordinated_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.subordinated_flag_ = value;
}

// bool collateral_flag = 11;
inline void AssetBond::clear_collateral_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.collateral_flag_ = false;
}
inline bool AssetBond::collateral_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetBond.collateral_flag)
  return _internal_collateral_flag();
}
inline void AssetBond::set_collateral_flag(bool value) {
  _internal_set_collateral_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetBond.collateral_flag)
}
inline bool AssetBond::_internal_collateral_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.collateral_flag_;
}
inline void AssetBond::_internal_set_collateral_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.collateral_flag_ = value;
}

// bool tax_free_flag = 12;
inline void AssetBond::clear_tax_free_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tax_free_flag_ = false;
}
inline bool AssetBond::tax_free_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetBond.tax_free_flag)
  return _internal_tax_free_flag();
}
inline void AssetBond::set_tax_free_flag(bool value) {
  _internal_set_tax_free_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetBond.tax_free_flag)
}
inline bool AssetBond::_internal_tax_free_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tax_free_flag_;
}
inline void AssetBond::_internal_set_tax_free_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tax_free_flag_ = value;
}

// bool amortization_flag = 13;
inline void AssetBond::clear_amortization_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.amortization_flag_ = false;
}
inline bool AssetBond::amortization_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetBond.amortization_flag)
  return _internal_amortization_flag();
}
inline void AssetBond::set_amortization_flag(bool value) {
  _internal_set_amortization_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetBond.amortization_flag)
}
inline bool AssetBond::_internal_amortization_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.amortization_flag_;
}
inline void AssetBond::_internal_set_amortization_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.amortization_flag_ = value;
}

// bool floating_coupon_flag = 14;
inline void AssetBond::clear_floating_coupon_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.floating_coupon_flag_ = false;
}
inline bool AssetBond::floating_coupon_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetBond.floating_coupon_flag)
  return _internal_floating_coupon_flag();
}
inline void AssetBond::set_floating_coupon_flag(bool value) {
  _internal_set_floating_coupon_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetBond.floating_coupon_flag)
}
inline bool AssetBond::_internal_floating_coupon_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.floating_coupon_flag_;
}
inline void AssetBond::_internal_set_floating_coupon_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.floating_coupon_flag_ = value;
}

// bool perpetual_flag = 15;
inline void AssetBond::clear_perpetual_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.perpetual_flag_ = false;
}
inline bool AssetBond::perpetual_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetBond.perpetual_flag)
  return _internal_perpetual_flag();
}
inline void AssetBond::set_perpetual_flag(bool value) {
  _internal_set_perpetual_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetBond.perpetual_flag)
}
inline bool AssetBond::_internal_perpetual_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.perpetual_flag_;
}
inline void AssetBond::_internal_set_perpetual_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.perpetual_flag_ = value;
}

// .google.protobuf.Timestamp maturity_date = 16;
inline bool AssetBond::has_maturity_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.maturity_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& AssetBond::_internal_maturity_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.maturity_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& AssetBond::maturity_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetBond.maturity_date)
  return _internal_maturity_date();
}
inline void AssetBond::unsafe_arena_set_allocated_maturity_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.maturity_date_);
  }
  _impl_.maturity_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetBond.maturity_date)
}
inline ::google::protobuf::Timestamp* AssetBond::release_maturity_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Timestamp* released = _impl_.maturity_date_;
  _impl_.maturity_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* AssetBond::unsafe_arena_release_maturity_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetBond.maturity_date)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Timestamp* temp = _impl_.maturity_date_;
  _impl_.maturity_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AssetBond::_internal_mutable_maturity_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.maturity_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.maturity_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.maturity_date_;
}
inline ::google::protobuf::Timestamp* AssetBond::mutable_maturity_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_maturity_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetBond.maturity_date)
  return _msg;
}
inline void AssetBond::set_allocated_maturity_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.maturity_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.maturity_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetBond.maturity_date)
}

// string return_condition = 17;
inline void AssetBond::clear_return_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.return_condition_.ClearToEmpty();
}
inline const std::string& AssetBond::return_condition() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetBond.return_condition)
  return _internal_return_condition();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetBond::set_return_condition(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.return_condition_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetBond.return_condition)
}
inline std::string* AssetBond::mutable_return_condition() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_return_condition();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetBond.return_condition)
  return _s;
}
inline const std::string& AssetBond::_internal_return_condition() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.return_condition_.Get();
}
inline void AssetBond::_internal_set_return_condition(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.return_condition_.Set(value, GetArena());
}
inline std::string* AssetBond::_internal_mutable_return_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.return_condition_.Mutable( GetArena());
}
inline std::string* AssetBond::release_return_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetBond.return_condition)
  return _impl_.return_condition_.Release();
}
inline void AssetBond::set_allocated_return_condition(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.return_condition_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.return_condition_.IsDefault()) {
          _impl_.return_condition_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetBond.return_condition)
}

// .google.protobuf.Timestamp state_reg_date = 18;
inline bool AssetBond::has_state_reg_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_reg_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& AssetBond::_internal_state_reg_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.state_reg_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& AssetBond::state_reg_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetBond.state_reg_date)
  return _internal_state_reg_date();
}
inline void AssetBond::unsafe_arena_set_allocated_state_reg_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_reg_date_);
  }
  _impl_.state_reg_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetBond.state_reg_date)
}
inline ::google::protobuf::Timestamp* AssetBond::release_state_reg_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* released = _impl_.state_reg_date_;
  _impl_.state_reg_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* AssetBond::unsafe_arena_release_state_reg_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetBond.state_reg_date)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* temp = _impl_.state_reg_date_;
  _impl_.state_reg_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AssetBond::_internal_mutable_state_reg_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.state_reg_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.state_reg_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.state_reg_date_;
}
inline ::google::protobuf::Timestamp* AssetBond::mutable_state_reg_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_state_reg_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetBond.state_reg_date)
  return _msg;
}
inline void AssetBond::set_allocated_state_reg_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_reg_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.state_reg_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetBond.state_reg_date)
}

// .google.protobuf.Timestamp placement_date = 19;
inline bool AssetBond::has_placement_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.placement_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& AssetBond::_internal_placement_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.placement_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& AssetBond::placement_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetBond.placement_date)
  return _internal_placement_date();
}
inline void AssetBond::unsafe_arena_set_allocated_placement_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.placement_date_);
  }
  _impl_.placement_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetBond.placement_date)
}
inline ::google::protobuf::Timestamp* AssetBond::release_placement_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Timestamp* released = _impl_.placement_date_;
  _impl_.placement_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* AssetBond::unsafe_arena_release_placement_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetBond.placement_date)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Timestamp* temp = _impl_.placement_date_;
  _impl_.placement_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AssetBond::_internal_mutable_placement_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.placement_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.placement_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.placement_date_;
}
inline ::google::protobuf::Timestamp* AssetBond::mutable_placement_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_placement_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetBond.placement_date)
  return _msg;
}
inline void AssetBond::set_allocated_placement_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.placement_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.placement_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetBond.placement_date)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation placement_price = 20;
inline bool AssetBond::has_placement_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.placement_price_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetBond::_internal_placement_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.placement_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetBond::placement_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetBond.placement_price)
  return _internal_placement_price();
}
inline void AssetBond::unsafe_arena_set_allocated_placement_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.placement_price_);
  }
  _impl_.placement_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetBond.placement_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetBond::release_placement_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.placement_price_;
  _impl_.placement_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetBond::unsafe_arena_release_placement_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetBond.placement_price)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.placement_price_;
  _impl_.placement_price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetBond::_internal_mutable_placement_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.placement_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.placement_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.placement_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetBond::mutable_placement_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_placement_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetBond.placement_price)
  return _msg;
}
inline void AssetBond::set_allocated_placement_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.placement_price_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.placement_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetBond.placement_price)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 21;
inline bool AssetBond::has_issue_size_plan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.issue_size_plan_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetBond::_internal_issue_size_plan() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.issue_size_plan_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetBond::issue_size_plan() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetBond.issue_size_plan)
  return _internal_issue_size_plan();
}
inline void AssetBond::unsafe_arena_set_allocated_issue_size_plan(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.issue_size_plan_);
  }
  _impl_.issue_size_plan_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetBond.issue_size_plan)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetBond::release_issue_size_plan() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.issue_size_plan_;
  _impl_.issue_size_plan_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetBond::unsafe_arena_release_issue_size_plan() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetBond.issue_size_plan)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.issue_size_plan_;
  _impl_.issue_size_plan_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetBond::_internal_mutable_issue_size_plan() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.issue_size_plan_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.issue_size_plan_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.issue_size_plan_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetBond::mutable_issue_size_plan() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_issue_size_plan();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetBond.issue_size_plan)
  return _msg;
}
inline void AssetBond::set_allocated_issue_size_plan(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.issue_size_plan_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.issue_size_plan_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetBond.issue_size_plan)
}

// -------------------------------------------------------------------

// AssetStructuredProduct

// string borrow_name = 1;
inline void AssetStructuredProduct::clear_borrow_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.borrow_name_.ClearToEmpty();
}
inline const std::string& AssetStructuredProduct::borrow_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.borrow_name)
  return _internal_borrow_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetStructuredProduct::set_borrow_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.borrow_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.borrow_name)
}
inline std::string* AssetStructuredProduct::mutable_borrow_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_borrow_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.borrow_name)
  return _s;
}
inline const std::string& AssetStructuredProduct::_internal_borrow_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.borrow_name_.Get();
}
inline void AssetStructuredProduct::_internal_set_borrow_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.borrow_name_.Set(value, GetArena());
}
inline std::string* AssetStructuredProduct::_internal_mutable_borrow_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.borrow_name_.Mutable( GetArena());
}
inline std::string* AssetStructuredProduct::release_borrow_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.borrow_name)
  return _impl_.borrow_name_.Release();
}
inline void AssetStructuredProduct::set_allocated_borrow_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.borrow_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.borrow_name_.IsDefault()) {
          _impl_.borrow_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.borrow_name)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 2;
inline bool AssetStructuredProduct::has_nominal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nominal_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetStructuredProduct::_internal_nominal() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.nominal_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetStructuredProduct::nominal() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.nominal)
  return _internal_nominal();
}
inline void AssetStructuredProduct::unsafe_arena_set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nominal_);
  }
  _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.nominal)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetStructuredProduct::release_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.nominal_;
  _impl_.nominal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetStructuredProduct::unsafe_arena_release_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.nominal)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.nominal_;
  _impl_.nominal_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetStructuredProduct::_internal_mutable_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.nominal_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.nominal_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetStructuredProduct::mutable_nominal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_nominal();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.nominal)
  return _msg;
}
inline void AssetStructuredProduct::set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nominal_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.nominal)
}

// string nominal_currency = 3;
inline void AssetStructuredProduct::clear_nominal_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nominal_currency_.ClearToEmpty();
}
inline const std::string& AssetStructuredProduct::nominal_currency() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.nominal_currency)
  return _internal_nominal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetStructuredProduct::set_nominal_currency(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nominal_currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.nominal_currency)
}
inline std::string* AssetStructuredProduct::mutable_nominal_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nominal_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.nominal_currency)
  return _s;
}
inline const std::string& AssetStructuredProduct::_internal_nominal_currency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nominal_currency_.Get();
}
inline void AssetStructuredProduct::_internal_set_nominal_currency(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nominal_currency_.Set(value, GetArena());
}
inline std::string* AssetStructuredProduct::_internal_mutable_nominal_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nominal_currency_.Mutable( GetArena());
}
inline std::string* AssetStructuredProduct::release_nominal_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.nominal_currency)
  return _impl_.nominal_currency_.Release();
}
inline void AssetStructuredProduct::set_allocated_nominal_currency(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nominal_currency_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nominal_currency_.IsDefault()) {
          _impl_.nominal_currency_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.nominal_currency)
}

// .tinkoff.public_.invest.api.contract.v1.StructuredProductType type = 4;
inline void AssetStructuredProduct::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::StructuredProductType AssetStructuredProduct::type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.type)
  return _internal_type();
}
inline void AssetStructuredProduct::set_type(::tinkoff::public_::invest::api::contract::v1::StructuredProductType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.type)
}
inline ::tinkoff::public_::invest::api::contract::v1::StructuredProductType AssetStructuredProduct::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::StructuredProductType>(_impl_.type_);
}
inline void AssetStructuredProduct::_internal_set_type(::tinkoff::public_::invest::api::contract::v1::StructuredProductType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// string logic_portfolio = 5;
inline void AssetStructuredProduct::clear_logic_portfolio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.logic_portfolio_.ClearToEmpty();
}
inline const std::string& AssetStructuredProduct::logic_portfolio() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.logic_portfolio)
  return _internal_logic_portfolio();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetStructuredProduct::set_logic_portfolio(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.logic_portfolio_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.logic_portfolio)
}
inline std::string* AssetStructuredProduct::mutable_logic_portfolio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_logic_portfolio();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.logic_portfolio)
  return _s;
}
inline const std::string& AssetStructuredProduct::_internal_logic_portfolio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.logic_portfolio_.Get();
}
inline void AssetStructuredProduct::_internal_set_logic_portfolio(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.logic_portfolio_.Set(value, GetArena());
}
inline std::string* AssetStructuredProduct::_internal_mutable_logic_portfolio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.logic_portfolio_.Mutable( GetArena());
}
inline std::string* AssetStructuredProduct::release_logic_portfolio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.logic_portfolio)
  return _impl_.logic_portfolio_.Release();
}
inline void AssetStructuredProduct::set_allocated_logic_portfolio(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.logic_portfolio_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.logic_portfolio_.IsDefault()) {
          _impl_.logic_portfolio_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.logic_portfolio)
}

// .tinkoff.public_.invest.api.contract.v1.AssetType asset_type = 6;
inline void AssetStructuredProduct::clear_asset_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.asset_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetType AssetStructuredProduct::asset_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.asset_type)
  return _internal_asset_type();
}
inline void AssetStructuredProduct::set_asset_type(::tinkoff::public_::invest::api::contract::v1::AssetType value) {
  _internal_set_asset_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.asset_type)
}
inline ::tinkoff::public_::invest::api::contract::v1::AssetType AssetStructuredProduct::_internal_asset_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::AssetType>(_impl_.asset_type_);
}
inline void AssetStructuredProduct::_internal_set_asset_type(::tinkoff::public_::invest::api::contract::v1::AssetType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.asset_type_ = value;
}

// string basic_asset = 7;
inline void AssetStructuredProduct::clear_basic_asset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.basic_asset_.ClearToEmpty();
}
inline const std::string& AssetStructuredProduct::basic_asset() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.basic_asset)
  return _internal_basic_asset();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetStructuredProduct::set_basic_asset(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.basic_asset_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.basic_asset)
}
inline std::string* AssetStructuredProduct::mutable_basic_asset() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_basic_asset();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.basic_asset)
  return _s;
}
inline const std::string& AssetStructuredProduct::_internal_basic_asset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.basic_asset_.Get();
}
inline void AssetStructuredProduct::_internal_set_basic_asset(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.basic_asset_.Set(value, GetArena());
}
inline std::string* AssetStructuredProduct::_internal_mutable_basic_asset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.basic_asset_.Mutable( GetArena());
}
inline std::string* AssetStructuredProduct::release_basic_asset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.basic_asset)
  return _impl_.basic_asset_.Release();
}
inline void AssetStructuredProduct::set_allocated_basic_asset(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.basic_asset_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.basic_asset_.IsDefault()) {
          _impl_.basic_asset_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.basic_asset)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation safety_barrier = 8;
inline bool AssetStructuredProduct::has_safety_barrier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.safety_barrier_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetStructuredProduct::_internal_safety_barrier() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.safety_barrier_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetStructuredProduct::safety_barrier() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.safety_barrier)
  return _internal_safety_barrier();
}
inline void AssetStructuredProduct::unsafe_arena_set_allocated_safety_barrier(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.safety_barrier_);
  }
  _impl_.safety_barrier_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.safety_barrier)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetStructuredProduct::release_safety_barrier() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.safety_barrier_;
  _impl_.safety_barrier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetStructuredProduct::unsafe_arena_release_safety_barrier() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.safety_barrier)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.safety_barrier_;
  _impl_.safety_barrier_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetStructuredProduct::_internal_mutable_safety_barrier() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.safety_barrier_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.safety_barrier_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.safety_barrier_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetStructuredProduct::mutable_safety_barrier() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_safety_barrier();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.safety_barrier)
  return _msg;
}
inline void AssetStructuredProduct::set_allocated_safety_barrier(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.safety_barrier_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.safety_barrier_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.safety_barrier)
}

// .google.protobuf.Timestamp maturity_date = 9;
inline bool AssetStructuredProduct::has_maturity_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.maturity_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& AssetStructuredProduct::_internal_maturity_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.maturity_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& AssetStructuredProduct::maturity_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.maturity_date)
  return _internal_maturity_date();
}
inline void AssetStructuredProduct::unsafe_arena_set_allocated_maturity_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.maturity_date_);
  }
  _impl_.maturity_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.maturity_date)
}
inline ::google::protobuf::Timestamp* AssetStructuredProduct::release_maturity_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* released = _impl_.maturity_date_;
  _impl_.maturity_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* AssetStructuredProduct::unsafe_arena_release_maturity_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.maturity_date)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* temp = _impl_.maturity_date_;
  _impl_.maturity_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AssetStructuredProduct::_internal_mutable_maturity_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.maturity_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.maturity_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.maturity_date_;
}
inline ::google::protobuf::Timestamp* AssetStructuredProduct::mutable_maturity_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_maturity_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.maturity_date)
  return _msg;
}
inline void AssetStructuredProduct::set_allocated_maturity_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.maturity_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.maturity_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.maturity_date)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation issue_size_plan = 10;
inline bool AssetStructuredProduct::has_issue_size_plan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.issue_size_plan_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetStructuredProduct::_internal_issue_size_plan() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.issue_size_plan_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetStructuredProduct::issue_size_plan() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.issue_size_plan)
  return _internal_issue_size_plan();
}
inline void AssetStructuredProduct::unsafe_arena_set_allocated_issue_size_plan(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.issue_size_plan_);
  }
  _impl_.issue_size_plan_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.issue_size_plan)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetStructuredProduct::release_issue_size_plan() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.issue_size_plan_;
  _impl_.issue_size_plan_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetStructuredProduct::unsafe_arena_release_issue_size_plan() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.issue_size_plan)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.issue_size_plan_;
  _impl_.issue_size_plan_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetStructuredProduct::_internal_mutable_issue_size_plan() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.issue_size_plan_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.issue_size_plan_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.issue_size_plan_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetStructuredProduct::mutable_issue_size_plan() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_issue_size_plan();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.issue_size_plan)
  return _msg;
}
inline void AssetStructuredProduct::set_allocated_issue_size_plan(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.issue_size_plan_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.issue_size_plan_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.issue_size_plan)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation issue_size = 11;
inline bool AssetStructuredProduct::has_issue_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.issue_size_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetStructuredProduct::_internal_issue_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.issue_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetStructuredProduct::issue_size() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.issue_size)
  return _internal_issue_size();
}
inline void AssetStructuredProduct::unsafe_arena_set_allocated_issue_size(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.issue_size_);
  }
  _impl_.issue_size_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.issue_size)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetStructuredProduct::release_issue_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.issue_size_;
  _impl_.issue_size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetStructuredProduct::unsafe_arena_release_issue_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.issue_size)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.issue_size_;
  _impl_.issue_size_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetStructuredProduct::_internal_mutable_issue_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.issue_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.issue_size_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.issue_size_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetStructuredProduct::mutable_issue_size() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_issue_size();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.issue_size)
  return _msg;
}
inline void AssetStructuredProduct::set_allocated_issue_size(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.issue_size_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.issue_size_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.issue_size)
}

// .google.protobuf.Timestamp placement_date = 12;
inline bool AssetStructuredProduct::has_placement_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.placement_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& AssetStructuredProduct::_internal_placement_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.placement_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& AssetStructuredProduct::placement_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.placement_date)
  return _internal_placement_date();
}
inline void AssetStructuredProduct::unsafe_arena_set_allocated_placement_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.placement_date_);
  }
  _impl_.placement_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.placement_date)
}
inline ::google::protobuf::Timestamp* AssetStructuredProduct::release_placement_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Timestamp* released = _impl_.placement_date_;
  _impl_.placement_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* AssetStructuredProduct::unsafe_arena_release_placement_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.placement_date)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Timestamp* temp = _impl_.placement_date_;
  _impl_.placement_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AssetStructuredProduct::_internal_mutable_placement_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.placement_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.placement_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.placement_date_;
}
inline ::google::protobuf::Timestamp* AssetStructuredProduct::mutable_placement_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_placement_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.placement_date)
  return _msg;
}
inline void AssetStructuredProduct::set_allocated_placement_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.placement_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.placement_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.placement_date)
}

// string issue_kind = 13;
inline void AssetStructuredProduct::clear_issue_kind() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.issue_kind_.ClearToEmpty();
}
inline const std::string& AssetStructuredProduct::issue_kind() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.issue_kind)
  return _internal_issue_kind();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetStructuredProduct::set_issue_kind(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.issue_kind_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.issue_kind)
}
inline std::string* AssetStructuredProduct::mutable_issue_kind() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_issue_kind();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.issue_kind)
  return _s;
}
inline const std::string& AssetStructuredProduct::_internal_issue_kind() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.issue_kind_.Get();
}
inline void AssetStructuredProduct::_internal_set_issue_kind(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.issue_kind_.Set(value, GetArena());
}
inline std::string* AssetStructuredProduct::_internal_mutable_issue_kind() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.issue_kind_.Mutable( GetArena());
}
inline std::string* AssetStructuredProduct::release_issue_kind() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.issue_kind)
  return _impl_.issue_kind_.Release();
}
inline void AssetStructuredProduct::set_allocated_issue_kind(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.issue_kind_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.issue_kind_.IsDefault()) {
          _impl_.issue_kind_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetStructuredProduct.issue_kind)
}

// -------------------------------------------------------------------

// AssetEtf

// .tinkoff.public_.invest.api.contract.v1.Quotation total_expense = 1;
inline bool AssetEtf::has_total_expense() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.total_expense_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::_internal_total_expense() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.total_expense_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::total_expense() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.total_expense)
  return _internal_total_expense();
}
inline void AssetEtf::unsafe_arena_set_allocated_total_expense(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_expense_);
  }
  _impl_.total_expense_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.total_expense)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::release_total_expense() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.total_expense_;
  _impl_.total_expense_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::unsafe_arena_release_total_expense() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetEtf.total_expense)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.total_expense_;
  _impl_.total_expense_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::_internal_mutable_total_expense() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.total_expense_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.total_expense_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.total_expense_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::mutable_total_expense() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_total_expense();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.total_expense)
  return _msg;
}
inline void AssetEtf::set_allocated_total_expense(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_expense_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.total_expense_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.total_expense)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation hurdle_rate = 2;
inline bool AssetEtf::has_hurdle_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hurdle_rate_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::_internal_hurdle_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.hurdle_rate_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::hurdle_rate() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.hurdle_rate)
  return _internal_hurdle_rate();
}
inline void AssetEtf::unsafe_arena_set_allocated_hurdle_rate(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.hurdle_rate_);
  }
  _impl_.hurdle_rate_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.hurdle_rate)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::release_hurdle_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.hurdle_rate_;
  _impl_.hurdle_rate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::unsafe_arena_release_hurdle_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetEtf.hurdle_rate)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.hurdle_rate_;
  _impl_.hurdle_rate_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::_internal_mutable_hurdle_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.hurdle_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.hurdle_rate_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.hurdle_rate_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::mutable_hurdle_rate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_hurdle_rate();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.hurdle_rate)
  return _msg;
}
inline void AssetEtf::set_allocated_hurdle_rate(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.hurdle_rate_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.hurdle_rate_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.hurdle_rate)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation performance_fee = 3;
inline bool AssetEtf::has_performance_fee() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.performance_fee_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::_internal_performance_fee() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.performance_fee_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::performance_fee() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.performance_fee)
  return _internal_performance_fee();
}
inline void AssetEtf::unsafe_arena_set_allocated_performance_fee(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.performance_fee_);
  }
  _impl_.performance_fee_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.performance_fee)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::release_performance_fee() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.performance_fee_;
  _impl_.performance_fee_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::unsafe_arena_release_performance_fee() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetEtf.performance_fee)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.performance_fee_;
  _impl_.performance_fee_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::_internal_mutable_performance_fee() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.performance_fee_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.performance_fee_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.performance_fee_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::mutable_performance_fee() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_performance_fee();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.performance_fee)
  return _msg;
}
inline void AssetEtf::set_allocated_performance_fee(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.performance_fee_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.performance_fee_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.performance_fee)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation fixed_commission = 4;
inline bool AssetEtf::has_fixed_commission() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fixed_commission_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::_internal_fixed_commission() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.fixed_commission_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::fixed_commission() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.fixed_commission)
  return _internal_fixed_commission();
}
inline void AssetEtf::unsafe_arena_set_allocated_fixed_commission(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fixed_commission_);
  }
  _impl_.fixed_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.fixed_commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::release_fixed_commission() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.fixed_commission_;
  _impl_.fixed_commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::unsafe_arena_release_fixed_commission() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetEtf.fixed_commission)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.fixed_commission_;
  _impl_.fixed_commission_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::_internal_mutable_fixed_commission() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.fixed_commission_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.fixed_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.fixed_commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::mutable_fixed_commission() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_fixed_commission();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.fixed_commission)
  return _msg;
}
inline void AssetEtf::set_allocated_fixed_commission(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fixed_commission_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.fixed_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.fixed_commission)
}

// string payment_type = 5;
inline void AssetEtf::clear_payment_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.payment_type_.ClearToEmpty();
}
inline const std::string& AssetEtf::payment_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.payment_type)
  return _internal_payment_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetEtf::set_payment_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.payment_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetEtf.payment_type)
}
inline std::string* AssetEtf::mutable_payment_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_payment_type();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.payment_type)
  return _s;
}
inline const std::string& AssetEtf::_internal_payment_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.payment_type_.Get();
}
inline void AssetEtf::_internal_set_payment_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.payment_type_.Set(value, GetArena());
}
inline std::string* AssetEtf::_internal_mutable_payment_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.payment_type_.Mutable( GetArena());
}
inline std::string* AssetEtf::release_payment_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetEtf.payment_type)
  return _impl_.payment_type_.Release();
}
inline void AssetEtf::set_allocated_payment_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.payment_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payment_type_.IsDefault()) {
          _impl_.payment_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.payment_type)
}

// bool watermark_flag = 6;
inline void AssetEtf::clear_watermark_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.watermark_flag_ = false;
}
inline bool AssetEtf::watermark_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.watermark_flag)
  return _internal_watermark_flag();
}
inline void AssetEtf::set_watermark_flag(bool value) {
  _internal_set_watermark_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetEtf.watermark_flag)
}
inline bool AssetEtf::_internal_watermark_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.watermark_flag_;
}
inline void AssetEtf::_internal_set_watermark_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.watermark_flag_ = value;
}

// .tinkoff.public_.invest.api.contract.v1.Quotation buy_premium = 7;
inline bool AssetEtf::has_buy_premium() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.buy_premium_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::_internal_buy_premium() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.buy_premium_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::buy_premium() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.buy_premium)
  return _internal_buy_premium();
}
inline void AssetEtf::unsafe_arena_set_allocated_buy_premium(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.buy_premium_);
  }
  _impl_.buy_premium_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.buy_premium)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::release_buy_premium() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.buy_premium_;
  _impl_.buy_premium_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::unsafe_arena_release_buy_premium() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetEtf.buy_premium)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.buy_premium_;
  _impl_.buy_premium_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::_internal_mutable_buy_premium() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.buy_premium_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.buy_premium_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.buy_premium_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::mutable_buy_premium() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_buy_premium();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.buy_premium)
  return _msg;
}
inline void AssetEtf::set_allocated_buy_premium(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.buy_premium_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.buy_premium_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.buy_premium)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation sell_discount = 8;
inline bool AssetEtf::has_sell_discount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sell_discount_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::_internal_sell_discount() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.sell_discount_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::sell_discount() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.sell_discount)
  return _internal_sell_discount();
}
inline void AssetEtf::unsafe_arena_set_allocated_sell_discount(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sell_discount_);
  }
  _impl_.sell_discount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.sell_discount)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::release_sell_discount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.sell_discount_;
  _impl_.sell_discount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::unsafe_arena_release_sell_discount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetEtf.sell_discount)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.sell_discount_;
  _impl_.sell_discount_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::_internal_mutable_sell_discount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.sell_discount_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.sell_discount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.sell_discount_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::mutable_sell_discount() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_sell_discount();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.sell_discount)
  return _msg;
}
inline void AssetEtf::set_allocated_sell_discount(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sell_discount_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.sell_discount_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.sell_discount)
}

// bool rebalancing_flag = 9;
inline void AssetEtf::clear_rebalancing_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rebalancing_flag_ = false;
}
inline bool AssetEtf::rebalancing_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.rebalancing_flag)
  return _internal_rebalancing_flag();
}
inline void AssetEtf::set_rebalancing_flag(bool value) {
  _internal_set_rebalancing_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetEtf.rebalancing_flag)
}
inline bool AssetEtf::_internal_rebalancing_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rebalancing_flag_;
}
inline void AssetEtf::_internal_set_rebalancing_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rebalancing_flag_ = value;
}

// string rebalancing_freq = 10;
inline void AssetEtf::clear_rebalancing_freq() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rebalancing_freq_.ClearToEmpty();
}
inline const std::string& AssetEtf::rebalancing_freq() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.rebalancing_freq)
  return _internal_rebalancing_freq();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetEtf::set_rebalancing_freq(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rebalancing_freq_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetEtf.rebalancing_freq)
}
inline std::string* AssetEtf::mutable_rebalancing_freq() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rebalancing_freq();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.rebalancing_freq)
  return _s;
}
inline const std::string& AssetEtf::_internal_rebalancing_freq() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rebalancing_freq_.Get();
}
inline void AssetEtf::_internal_set_rebalancing_freq(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rebalancing_freq_.Set(value, GetArena());
}
inline std::string* AssetEtf::_internal_mutable_rebalancing_freq() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.rebalancing_freq_.Mutable( GetArena());
}
inline std::string* AssetEtf::release_rebalancing_freq() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetEtf.rebalancing_freq)
  return _impl_.rebalancing_freq_.Release();
}
inline void AssetEtf::set_allocated_rebalancing_freq(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rebalancing_freq_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rebalancing_freq_.IsDefault()) {
          _impl_.rebalancing_freq_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.rebalancing_freq)
}

// string management_type = 11;
inline void AssetEtf::clear_management_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.management_type_.ClearToEmpty();
}
inline const std::string& AssetEtf::management_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.management_type)
  return _internal_management_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetEtf::set_management_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.management_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetEtf.management_type)
}
inline std::string* AssetEtf::mutable_management_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_management_type();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.management_type)
  return _s;
}
inline const std::string& AssetEtf::_internal_management_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.management_type_.Get();
}
inline void AssetEtf::_internal_set_management_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.management_type_.Set(value, GetArena());
}
inline std::string* AssetEtf::_internal_mutable_management_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.management_type_.Mutable( GetArena());
}
inline std::string* AssetEtf::release_management_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetEtf.management_type)
  return _impl_.management_type_.Release();
}
inline void AssetEtf::set_allocated_management_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.management_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.management_type_.IsDefault()) {
          _impl_.management_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.management_type)
}

// string primary_index = 12;
inline void AssetEtf::clear_primary_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.primary_index_.ClearToEmpty();
}
inline const std::string& AssetEtf::primary_index() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index)
  return _internal_primary_index();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetEtf::set_primary_index(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.primary_index_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index)
}
inline std::string* AssetEtf::mutable_primary_index() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_primary_index();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index)
  return _s;
}
inline const std::string& AssetEtf::_internal_primary_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.primary_index_.Get();
}
inline void AssetEtf::_internal_set_primary_index(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.primary_index_.Set(value, GetArena());
}
inline std::string* AssetEtf::_internal_mutable_primary_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.primary_index_.Mutable( GetArena());
}
inline std::string* AssetEtf::release_primary_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index)
  return _impl_.primary_index_.Release();
}
inline void AssetEtf::set_allocated_primary_index(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.primary_index_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.primary_index_.IsDefault()) {
          _impl_.primary_index_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index)
}

// string focus_type = 13;
inline void AssetEtf::clear_focus_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.focus_type_.ClearToEmpty();
}
inline const std::string& AssetEtf::focus_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.focus_type)
  return _internal_focus_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetEtf::set_focus_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.focus_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetEtf.focus_type)
}
inline std::string* AssetEtf::mutable_focus_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_focus_type();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.focus_type)
  return _s;
}
inline const std::string& AssetEtf::_internal_focus_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.focus_type_.Get();
}
inline void AssetEtf::_internal_set_focus_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.focus_type_.Set(value, GetArena());
}
inline std::string* AssetEtf::_internal_mutable_focus_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.focus_type_.Mutable( GetArena());
}
inline std::string* AssetEtf::release_focus_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetEtf.focus_type)
  return _impl_.focus_type_.Release();
}
inline void AssetEtf::set_allocated_focus_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.focus_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.focus_type_.IsDefault()) {
          _impl_.focus_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.focus_type)
}

// bool leveraged_flag = 14;
inline void AssetEtf::clear_leveraged_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leveraged_flag_ = false;
}
inline bool AssetEtf::leveraged_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.leveraged_flag)
  return _internal_leveraged_flag();
}
inline void AssetEtf::set_leveraged_flag(bool value) {
  _internal_set_leveraged_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetEtf.leveraged_flag)
}
inline bool AssetEtf::_internal_leveraged_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.leveraged_flag_;
}
inline void AssetEtf::_internal_set_leveraged_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.leveraged_flag_ = value;
}

// .tinkoff.public_.invest.api.contract.v1.Quotation num_share = 15;
inline bool AssetEtf::has_num_share() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.num_share_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::_internal_num_share() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.num_share_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::num_share() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.num_share)
  return _internal_num_share();
}
inline void AssetEtf::unsafe_arena_set_allocated_num_share(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.num_share_);
  }
  _impl_.num_share_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.num_share)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::release_num_share() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.num_share_;
  _impl_.num_share_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::unsafe_arena_release_num_share() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetEtf.num_share)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.num_share_;
  _impl_.num_share_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::_internal_mutable_num_share() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.num_share_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.num_share_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.num_share_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::mutable_num_share() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_num_share();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.num_share)
  return _msg;
}
inline void AssetEtf::set_allocated_num_share(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.num_share_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.num_share_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.num_share)
}

// bool ucits_flag = 16;
inline void AssetEtf::clear_ucits_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ucits_flag_ = false;
}
inline bool AssetEtf::ucits_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.ucits_flag)
  return _internal_ucits_flag();
}
inline void AssetEtf::set_ucits_flag(bool value) {
  _internal_set_ucits_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetEtf.ucits_flag)
}
inline bool AssetEtf::_internal_ucits_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ucits_flag_;
}
inline void AssetEtf::_internal_set_ucits_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ucits_flag_ = value;
}

// .google.protobuf.Timestamp released_date = 17;
inline bool AssetEtf::has_released_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.released_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& AssetEtf::_internal_released_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.released_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& AssetEtf::released_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.released_date)
  return _internal_released_date();
}
inline void AssetEtf::unsafe_arena_set_allocated_released_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.released_date_);
  }
  _impl_.released_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.released_date)
}
inline ::google::protobuf::Timestamp* AssetEtf::release_released_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::google::protobuf::Timestamp* released = _impl_.released_date_;
  _impl_.released_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* AssetEtf::unsafe_arena_release_released_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetEtf.released_date)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::google::protobuf::Timestamp* temp = _impl_.released_date_;
  _impl_.released_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AssetEtf::_internal_mutable_released_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.released_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.released_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.released_date_;
}
inline ::google::protobuf::Timestamp* AssetEtf::mutable_released_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_released_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.released_date)
  return _msg;
}
inline void AssetEtf::set_allocated_released_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.released_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.released_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.released_date)
}

// string description = 18;
inline void AssetEtf::clear_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& AssetEtf::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetEtf::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetEtf.description)
}
inline std::string* AssetEtf::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.description)
  return _s;
}
inline const std::string& AssetEtf::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void AssetEtf::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArena());
}
inline std::string* AssetEtf::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* AssetEtf::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetEtf.description)
  return _impl_.description_.Release();
}
inline void AssetEtf::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.description)
}

// string primary_index_description = 19;
inline void AssetEtf::clear_primary_index_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.primary_index_description_.ClearToEmpty();
}
inline const std::string& AssetEtf::primary_index_description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index_description)
  return _internal_primary_index_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetEtf::set_primary_index_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.primary_index_description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index_description)
}
inline std::string* AssetEtf::mutable_primary_index_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_primary_index_description();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index_description)
  return _s;
}
inline const std::string& AssetEtf::_internal_primary_index_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.primary_index_description_.Get();
}
inline void AssetEtf::_internal_set_primary_index_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.primary_index_description_.Set(value, GetArena());
}
inline std::string* AssetEtf::_internal_mutable_primary_index_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.primary_index_description_.Mutable( GetArena());
}
inline std::string* AssetEtf::release_primary_index_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index_description)
  return _impl_.primary_index_description_.Release();
}
inline void AssetEtf::set_allocated_primary_index_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.primary_index_description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.primary_index_description_.IsDefault()) {
          _impl_.primary_index_description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index_description)
}

// string primary_index_company = 20;
inline void AssetEtf::clear_primary_index_company() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.primary_index_company_.ClearToEmpty();
}
inline const std::string& AssetEtf::primary_index_company() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index_company)
  return _internal_primary_index_company();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetEtf::set_primary_index_company(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.primary_index_company_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index_company)
}
inline std::string* AssetEtf::mutable_primary_index_company() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_primary_index_company();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index_company)
  return _s;
}
inline const std::string& AssetEtf::_internal_primary_index_company() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.primary_index_company_.Get();
}
inline void AssetEtf::_internal_set_primary_index_company(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.primary_index_company_.Set(value, GetArena());
}
inline std::string* AssetEtf::_internal_mutable_primary_index_company() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.primary_index_company_.Mutable( GetArena());
}
inline std::string* AssetEtf::release_primary_index_company() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index_company)
  return _impl_.primary_index_company_.Release();
}
inline void AssetEtf::set_allocated_primary_index_company(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.primary_index_company_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.primary_index_company_.IsDefault()) {
          _impl_.primary_index_company_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index_company)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation index_recovery_period = 21;
inline bool AssetEtf::has_index_recovery_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.index_recovery_period_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::_internal_index_recovery_period() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.index_recovery_period_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::index_recovery_period() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.index_recovery_period)
  return _internal_index_recovery_period();
}
inline void AssetEtf::unsafe_arena_set_allocated_index_recovery_period(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.index_recovery_period_);
  }
  _impl_.index_recovery_period_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.index_recovery_period)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::release_index_recovery_period() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.index_recovery_period_;
  _impl_.index_recovery_period_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::unsafe_arena_release_index_recovery_period() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetEtf.index_recovery_period)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.index_recovery_period_;
  _impl_.index_recovery_period_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::_internal_mutable_index_recovery_period() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.index_recovery_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.index_recovery_period_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.index_recovery_period_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::mutable_index_recovery_period() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_index_recovery_period();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.index_recovery_period)
  return _msg;
}
inline void AssetEtf::set_allocated_index_recovery_period(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.index_recovery_period_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.index_recovery_period_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.index_recovery_period)
}

// string inav_code = 22;
inline void AssetEtf::clear_inav_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.inav_code_.ClearToEmpty();
}
inline const std::string& AssetEtf::inav_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.inav_code)
  return _internal_inav_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetEtf::set_inav_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.inav_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetEtf.inav_code)
}
inline std::string* AssetEtf::mutable_inav_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_inav_code();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.inav_code)
  return _s;
}
inline const std::string& AssetEtf::_internal_inav_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.inav_code_.Get();
}
inline void AssetEtf::_internal_set_inav_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.inav_code_.Set(value, GetArena());
}
inline std::string* AssetEtf::_internal_mutable_inav_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.inav_code_.Mutable( GetArena());
}
inline std::string* AssetEtf::release_inav_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetEtf.inav_code)
  return _impl_.inav_code_.Release();
}
inline void AssetEtf::set_allocated_inav_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.inav_code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.inav_code_.IsDefault()) {
          _impl_.inav_code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.inav_code)
}

// bool div_yield_flag = 23;
inline void AssetEtf::clear_div_yield_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.div_yield_flag_ = false;
}
inline bool AssetEtf::div_yield_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.div_yield_flag)
  return _internal_div_yield_flag();
}
inline void AssetEtf::set_div_yield_flag(bool value) {
  _internal_set_div_yield_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetEtf.div_yield_flag)
}
inline bool AssetEtf::_internal_div_yield_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.div_yield_flag_;
}
inline void AssetEtf::_internal_set_div_yield_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.div_yield_flag_ = value;
}

// .tinkoff.public_.invest.api.contract.v1.Quotation expense_commission = 24;
inline bool AssetEtf::has_expense_commission() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.expense_commission_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::_internal_expense_commission() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.expense_commission_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::expense_commission() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.expense_commission)
  return _internal_expense_commission();
}
inline void AssetEtf::unsafe_arena_set_allocated_expense_commission(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expense_commission_);
  }
  _impl_.expense_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.expense_commission)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::release_expense_commission() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.expense_commission_;
  _impl_.expense_commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::unsafe_arena_release_expense_commission() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetEtf.expense_commission)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.expense_commission_;
  _impl_.expense_commission_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::_internal_mutable_expense_commission() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.expense_commission_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.expense_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.expense_commission_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::mutable_expense_commission() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_expense_commission();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.expense_commission)
  return _msg;
}
inline void AssetEtf::set_allocated_expense_commission(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expense_commission_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.expense_commission_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.expense_commission)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation primary_index_tracking_error = 25;
inline bool AssetEtf::has_primary_index_tracking_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.primary_index_tracking_error_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::_internal_primary_index_tracking_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.primary_index_tracking_error_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::primary_index_tracking_error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index_tracking_error)
  return _internal_primary_index_tracking_error();
}
inline void AssetEtf::unsafe_arena_set_allocated_primary_index_tracking_error(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.primary_index_tracking_error_);
  }
  _impl_.primary_index_tracking_error_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index_tracking_error)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::release_primary_index_tracking_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.primary_index_tracking_error_;
  _impl_.primary_index_tracking_error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::unsafe_arena_release_primary_index_tracking_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index_tracking_error)

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.primary_index_tracking_error_;
  _impl_.primary_index_tracking_error_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::_internal_mutable_primary_index_tracking_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.primary_index_tracking_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.primary_index_tracking_error_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.primary_index_tracking_error_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::mutable_primary_index_tracking_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_primary_index_tracking_error();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index_tracking_error)
  return _msg;
}
inline void AssetEtf::set_allocated_primary_index_tracking_error(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.primary_index_tracking_error_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }

  _impl_.primary_index_tracking_error_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.primary_index_tracking_error)
}

// string rebalancing_plan = 26;
inline void AssetEtf::clear_rebalancing_plan() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rebalancing_plan_.ClearToEmpty();
}
inline const std::string& AssetEtf::rebalancing_plan() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.rebalancing_plan)
  return _internal_rebalancing_plan();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetEtf::set_rebalancing_plan(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rebalancing_plan_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetEtf.rebalancing_plan)
}
inline std::string* AssetEtf::mutable_rebalancing_plan() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rebalancing_plan();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.rebalancing_plan)
  return _s;
}
inline const std::string& AssetEtf::_internal_rebalancing_plan() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rebalancing_plan_.Get();
}
inline void AssetEtf::_internal_set_rebalancing_plan(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rebalancing_plan_.Set(value, GetArena());
}
inline std::string* AssetEtf::_internal_mutable_rebalancing_plan() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.rebalancing_plan_.Mutable( GetArena());
}
inline std::string* AssetEtf::release_rebalancing_plan() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetEtf.rebalancing_plan)
  return _impl_.rebalancing_plan_.Release();
}
inline void AssetEtf::set_allocated_rebalancing_plan(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rebalancing_plan_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rebalancing_plan_.IsDefault()) {
          _impl_.rebalancing_plan_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.rebalancing_plan)
}

// string tax_rate = 27;
inline void AssetEtf::clear_tax_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tax_rate_.ClearToEmpty();
}
inline const std::string& AssetEtf::tax_rate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.tax_rate)
  return _internal_tax_rate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetEtf::set_tax_rate(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tax_rate_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetEtf.tax_rate)
}
inline std::string* AssetEtf::mutable_tax_rate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tax_rate();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.tax_rate)
  return _s;
}
inline const std::string& AssetEtf::_internal_tax_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tax_rate_.Get();
}
inline void AssetEtf::_internal_set_tax_rate(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tax_rate_.Set(value, GetArena());
}
inline std::string* AssetEtf::_internal_mutable_tax_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.tax_rate_.Mutable( GetArena());
}
inline std::string* AssetEtf::release_tax_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetEtf.tax_rate)
  return _impl_.tax_rate_.Release();
}
inline void AssetEtf::set_allocated_tax_rate(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tax_rate_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tax_rate_.IsDefault()) {
          _impl_.tax_rate_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.tax_rate)
}

// repeated .google.protobuf.Timestamp rebalancing_dates = 28;
inline int AssetEtf::_internal_rebalancing_dates_size() const {
  return _internal_rebalancing_dates().size();
}
inline int AssetEtf::rebalancing_dates_size() const {
  return _internal_rebalancing_dates_size();
}
inline ::google::protobuf::Timestamp* AssetEtf::mutable_rebalancing_dates(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.rebalancing_dates)
  return _internal_mutable_rebalancing_dates()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Timestamp>* AssetEtf::mutable_rebalancing_dates()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.AssetEtf.rebalancing_dates)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_rebalancing_dates();
}
inline const ::google::protobuf::Timestamp& AssetEtf::rebalancing_dates(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.rebalancing_dates)
  return _internal_rebalancing_dates().Get(index);
}
inline ::google::protobuf::Timestamp* AssetEtf::add_rebalancing_dates() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::google::protobuf::Timestamp* _add = _internal_mutable_rebalancing_dates()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.AssetEtf.rebalancing_dates)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Timestamp>& AssetEtf::rebalancing_dates() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.AssetEtf.rebalancing_dates)
  return _internal_rebalancing_dates();
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Timestamp>&
AssetEtf::_internal_rebalancing_dates() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rebalancing_dates_;
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Timestamp>*
AssetEtf::_internal_mutable_rebalancing_dates() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.rebalancing_dates_;
}

// string issue_kind = 29;
inline void AssetEtf::clear_issue_kind() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.issue_kind_.ClearToEmpty();
}
inline const std::string& AssetEtf::issue_kind() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.issue_kind)
  return _internal_issue_kind();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetEtf::set_issue_kind(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.issue_kind_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetEtf.issue_kind)
}
inline std::string* AssetEtf::mutable_issue_kind() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_issue_kind();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.issue_kind)
  return _s;
}
inline const std::string& AssetEtf::_internal_issue_kind() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.issue_kind_.Get();
}
inline void AssetEtf::_internal_set_issue_kind(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.issue_kind_.Set(value, GetArena());
}
inline std::string* AssetEtf::_internal_mutable_issue_kind() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.issue_kind_.Mutable( GetArena());
}
inline std::string* AssetEtf::release_issue_kind() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetEtf.issue_kind)
  return _impl_.issue_kind_.Release();
}
inline void AssetEtf::set_allocated_issue_kind(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.issue_kind_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.issue_kind_.IsDefault()) {
          _impl_.issue_kind_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.issue_kind)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 30;
inline bool AssetEtf::has_nominal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nominal_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::_internal_nominal() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.nominal_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetEtf::nominal() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.nominal)
  return _internal_nominal();
}
inline void AssetEtf::unsafe_arena_set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nominal_);
  }
  _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.nominal)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::release_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.nominal_;
  _impl_.nominal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::unsafe_arena_release_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetEtf.nominal)

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.nominal_;
  _impl_.nominal_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::_internal_mutable_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.nominal_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.nominal_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetEtf::mutable_nominal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_nominal();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.nominal)
  return _msg;
}
inline void AssetEtf::set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nominal_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }

  _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.nominal)
}

// string nominal_currency = 31;
inline void AssetEtf::clear_nominal_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nominal_currency_.ClearToEmpty();
}
inline const std::string& AssetEtf::nominal_currency() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetEtf.nominal_currency)
  return _internal_nominal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetEtf::set_nominal_currency(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nominal_currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetEtf.nominal_currency)
}
inline std::string* AssetEtf::mutable_nominal_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nominal_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetEtf.nominal_currency)
  return _s;
}
inline const std::string& AssetEtf::_internal_nominal_currency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nominal_currency_.Get();
}
inline void AssetEtf::_internal_set_nominal_currency(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nominal_currency_.Set(value, GetArena());
}
inline std::string* AssetEtf::_internal_mutable_nominal_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nominal_currency_.Mutable( GetArena());
}
inline std::string* AssetEtf::release_nominal_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetEtf.nominal_currency)
  return _impl_.nominal_currency_.Release();
}
inline void AssetEtf::set_allocated_nominal_currency(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nominal_currency_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nominal_currency_.IsDefault()) {
          _impl_.nominal_currency_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetEtf.nominal_currency)
}

// -------------------------------------------------------------------

// AssetClearingCertificate

// .tinkoff.public_.invest.api.contract.v1.Quotation nominal = 1;
inline bool AssetClearingCertificate::has_nominal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nominal_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetClearingCertificate::_internal_nominal() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.nominal_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& AssetClearingCertificate::nominal() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate.nominal)
  return _internal_nominal();
}
inline void AssetClearingCertificate::unsafe_arena_set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nominal_);
  }
  _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate.nominal)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetClearingCertificate::release_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.nominal_;
  _impl_.nominal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetClearingCertificate::unsafe_arena_release_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate.nominal)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.nominal_;
  _impl_.nominal_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetClearingCertificate::_internal_mutable_nominal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.nominal_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.nominal_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* AssetClearingCertificate::mutable_nominal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_nominal();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate.nominal)
  return _msg;
}
inline void AssetClearingCertificate::set_allocated_nominal(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nominal_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.nominal_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate.nominal)
}

// string nominal_currency = 2;
inline void AssetClearingCertificate::clear_nominal_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nominal_currency_.ClearToEmpty();
}
inline const std::string& AssetClearingCertificate::nominal_currency() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate.nominal_currency)
  return _internal_nominal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetClearingCertificate::set_nominal_currency(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nominal_currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate.nominal_currency)
}
inline std::string* AssetClearingCertificate::mutable_nominal_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nominal_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate.nominal_currency)
  return _s;
}
inline const std::string& AssetClearingCertificate::_internal_nominal_currency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nominal_currency_.Get();
}
inline void AssetClearingCertificate::_internal_set_nominal_currency(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nominal_currency_.Set(value, GetArena());
}
inline std::string* AssetClearingCertificate::_internal_mutable_nominal_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nominal_currency_.Mutable( GetArena());
}
inline std::string* AssetClearingCertificate::release_nominal_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate.nominal_currency)
  return _impl_.nominal_currency_.Release();
}
inline void AssetClearingCertificate::set_allocated_nominal_currency(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nominal_currency_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nominal_currency_.IsDefault()) {
          _impl_.nominal_currency_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetClearingCertificate.nominal_currency)
}

// -------------------------------------------------------------------

// Brand

// string uid = 1;
inline void Brand::clear_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& Brand::uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Brand.uid)
  return _internal_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Brand::set_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Brand.uid)
}
inline std::string* Brand::mutable_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Brand.uid)
  return _s;
}
inline const std::string& Brand::_internal_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uid_.Get();
}
inline void Brand::_internal_set_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(value, GetArena());
}
inline std::string* Brand::_internal_mutable_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.uid_.Mutable( GetArena());
}
inline std::string* Brand::release_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Brand.uid)
  return _impl_.uid_.Release();
}
inline void Brand::set_allocated_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uid_.IsDefault()) {
          _impl_.uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Brand.uid)
}

// string name = 2;
inline void Brand::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Brand::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Brand.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Brand::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Brand.name)
}
inline std::string* Brand::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Brand.name)
  return _s;
}
inline const std::string& Brand::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Brand::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Brand::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Brand::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Brand.name)
  return _impl_.name_.Release();
}
inline void Brand::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Brand.name)
}

// string description = 3;
inline void Brand::clear_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Brand::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Brand.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Brand::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Brand.description)
}
inline std::string* Brand::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Brand.description)
  return _s;
}
inline const std::string& Brand::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void Brand::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArena());
}
inline std::string* Brand::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* Brand::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Brand.description)
  return _impl_.description_.Release();
}
inline void Brand::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Brand.description)
}

// string info = 4;
inline void Brand::clear_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.info_.ClearToEmpty();
}
inline const std::string& Brand::info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Brand.info)
  return _internal_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Brand::set_info(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.info_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Brand.info)
}
inline std::string* Brand::mutable_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Brand.info)
  return _s;
}
inline const std::string& Brand::_internal_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.info_.Get();
}
inline void Brand::_internal_set_info(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.info_.Set(value, GetArena());
}
inline std::string* Brand::_internal_mutable_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.info_.Mutable( GetArena());
}
inline std::string* Brand::release_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Brand.info)
  return _impl_.info_.Release();
}
inline void Brand::set_allocated_info(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.info_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.info_.IsDefault()) {
          _impl_.info_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Brand.info)
}

// string company = 5;
inline void Brand::clear_company() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.company_.ClearToEmpty();
}
inline const std::string& Brand::company() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Brand.company)
  return _internal_company();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Brand::set_company(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.company_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Brand.company)
}
inline std::string* Brand::mutable_company() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_company();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Brand.company)
  return _s;
}
inline const std::string& Brand::_internal_company() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.company_.Get();
}
inline void Brand::_internal_set_company(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.company_.Set(value, GetArena());
}
inline std::string* Brand::_internal_mutable_company() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.company_.Mutable( GetArena());
}
inline std::string* Brand::release_company() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Brand.company)
  return _impl_.company_.Release();
}
inline void Brand::set_allocated_company(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.company_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.company_.IsDefault()) {
          _impl_.company_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Brand.company)
}

// string sector = 6;
inline void Brand::clear_sector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sector_.ClearToEmpty();
}
inline const std::string& Brand::sector() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Brand.sector)
  return _internal_sector();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Brand::set_sector(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sector_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Brand.sector)
}
inline std::string* Brand::mutable_sector() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sector();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Brand.sector)
  return _s;
}
inline const std::string& Brand::_internal_sector() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sector_.Get();
}
inline void Brand::_internal_set_sector(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sector_.Set(value, GetArena());
}
inline std::string* Brand::_internal_mutable_sector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.sector_.Mutable( GetArena());
}
inline std::string* Brand::release_sector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Brand.sector)
  return _impl_.sector_.Release();
}
inline void Brand::set_allocated_sector(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sector_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sector_.IsDefault()) {
          _impl_.sector_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Brand.sector)
}

// string country_of_risk = 7;
inline void Brand::clear_country_of_risk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_.ClearToEmpty();
}
inline const std::string& Brand::country_of_risk() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Brand.country_of_risk)
  return _internal_country_of_risk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Brand::set_country_of_risk(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Brand.country_of_risk)
}
inline std::string* Brand::mutable_country_of_risk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_country_of_risk();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Brand.country_of_risk)
  return _s;
}
inline const std::string& Brand::_internal_country_of_risk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.country_of_risk_.Get();
}
inline void Brand::_internal_set_country_of_risk(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_.Set(value, GetArena());
}
inline std::string* Brand::_internal_mutable_country_of_risk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.country_of_risk_.Mutable( GetArena());
}
inline std::string* Brand::release_country_of_risk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Brand.country_of_risk)
  return _impl_.country_of_risk_.Release();
}
inline void Brand::set_allocated_country_of_risk(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.country_of_risk_.IsDefault()) {
          _impl_.country_of_risk_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Brand.country_of_risk)
}

// string country_of_risk_name = 8;
inline void Brand::clear_country_of_risk_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_name_.ClearToEmpty();
}
inline const std::string& Brand::country_of_risk_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.Brand.country_of_risk_name)
  return _internal_country_of_risk_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Brand::set_country_of_risk_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.Brand.country_of_risk_name)
}
inline std::string* Brand::mutable_country_of_risk_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_country_of_risk_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.Brand.country_of_risk_name)
  return _s;
}
inline const std::string& Brand::_internal_country_of_risk_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.country_of_risk_name_.Get();
}
inline void Brand::_internal_set_country_of_risk_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_of_risk_name_.Set(value, GetArena());
}
inline std::string* Brand::_internal_mutable_country_of_risk_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.country_of_risk_name_.Mutable( GetArena());
}
inline std::string* Brand::release_country_of_risk_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.Brand.country_of_risk_name)
  return _impl_.country_of_risk_name_.Release();
}
inline void Brand::set_allocated_country_of_risk_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_of_risk_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.country_of_risk_name_.IsDefault()) {
          _impl_.country_of_risk_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.Brand.country_of_risk_name)
}

// -------------------------------------------------------------------

// AssetInstrument

// string uid = 1;
inline void AssetInstrument::clear_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& AssetInstrument::uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetInstrument.uid)
  return _internal_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetInstrument::set_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetInstrument.uid)
}
inline std::string* AssetInstrument::mutable_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetInstrument.uid)
  return _s;
}
inline const std::string& AssetInstrument::_internal_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uid_.Get();
}
inline void AssetInstrument::_internal_set_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(value, GetArena());
}
inline std::string* AssetInstrument::_internal_mutable_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.uid_.Mutable( GetArena());
}
inline std::string* AssetInstrument::release_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetInstrument.uid)
  return _impl_.uid_.Release();
}
inline void AssetInstrument::set_allocated_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uid_.IsDefault()) {
          _impl_.uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetInstrument.uid)
}

// string figi = 2;
inline void AssetInstrument::clear_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& AssetInstrument::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetInstrument.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetInstrument::set_figi(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetInstrument.figi)
}
inline std::string* AssetInstrument::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetInstrument.figi)
  return _s;
}
inline const std::string& AssetInstrument::_internal_figi() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.figi_.Get();
}
inline void AssetInstrument::_internal_set_figi(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* AssetInstrument::_internal_mutable_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* AssetInstrument::release_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetInstrument.figi)
  return _impl_.figi_.Release();
}
inline void AssetInstrument::set_allocated_figi(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.figi_.IsDefault()) {
          _impl_.figi_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetInstrument.figi)
}

// string instrument_type = 3;
inline void AssetInstrument::clear_instrument_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_type_.ClearToEmpty();
}
inline const std::string& AssetInstrument::instrument_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetInstrument.instrument_type)
  return _internal_instrument_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetInstrument::set_instrument_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetInstrument.instrument_type)
}
inline std::string* AssetInstrument::mutable_instrument_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_type();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetInstrument.instrument_type)
  return _s;
}
inline const std::string& AssetInstrument::_internal_instrument_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instrument_type_.Get();
}
inline void AssetInstrument::_internal_set_instrument_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_type_.Set(value, GetArena());
}
inline std::string* AssetInstrument::_internal_mutable_instrument_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.instrument_type_.Mutable( GetArena());
}
inline std::string* AssetInstrument::release_instrument_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetInstrument.instrument_type)
  return _impl_.instrument_type_.Release();
}
inline void AssetInstrument::set_allocated_instrument_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.instrument_type_.IsDefault()) {
          _impl_.instrument_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetInstrument.instrument_type)
}

// string ticker = 4;
inline void AssetInstrument::clear_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.ClearToEmpty();
}
inline const std::string& AssetInstrument::ticker() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetInstrument.ticker)
  return _internal_ticker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetInstrument::set_ticker(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetInstrument.ticker)
}
inline std::string* AssetInstrument::mutable_ticker() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ticker();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetInstrument.ticker)
  return _s;
}
inline const std::string& AssetInstrument::_internal_ticker() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ticker_.Get();
}
inline void AssetInstrument::_internal_set_ticker(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(value, GetArena());
}
inline std::string* AssetInstrument::_internal_mutable_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ticker_.Mutable( GetArena());
}
inline std::string* AssetInstrument::release_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetInstrument.ticker)
  return _impl_.ticker_.Release();
}
inline void AssetInstrument::set_allocated_ticker(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ticker_.IsDefault()) {
          _impl_.ticker_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetInstrument.ticker)
}

// string class_code = 5;
inline void AssetInstrument::clear_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_code_.ClearToEmpty();
}
inline const std::string& AssetInstrument::class_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetInstrument.class_code)
  return _internal_class_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetInstrument::set_class_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetInstrument.class_code)
}
inline std::string* AssetInstrument::mutable_class_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_class_code();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetInstrument.class_code)
  return _s;
}
inline const std::string& AssetInstrument::_internal_class_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.class_code_.Get();
}
inline void AssetInstrument::_internal_set_class_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class_code_.Set(value, GetArena());
}
inline std::string* AssetInstrument::_internal_mutable_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.class_code_.Mutable( GetArena());
}
inline std::string* AssetInstrument::release_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetInstrument.class_code)
  return _impl_.class_code_.Release();
}
inline void AssetInstrument::set_allocated_class_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.class_code_.IsDefault()) {
          _impl_.class_code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetInstrument.class_code)
}

// repeated .tinkoff.public_.invest.api.contract.v1.InstrumentLink links = 6;
inline int AssetInstrument::_internal_links_size() const {
  return _internal_links().size();
}
inline int AssetInstrument::links_size() const {
  return _internal_links_size();
}
inline void AssetInstrument::clear_links() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.links_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentLink* AssetInstrument::mutable_links(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetInstrument.links)
  return _internal_mutable_links()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::InstrumentLink>* AssetInstrument::mutable_links()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.AssetInstrument.links)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_links();
}
inline const ::tinkoff::public_::invest::api::contract::v1::InstrumentLink& AssetInstrument::links(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetInstrument.links)
  return _internal_links().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentLink* AssetInstrument::add_links() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::InstrumentLink* _add = _internal_mutable_links()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.AssetInstrument.links)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::InstrumentLink>& AssetInstrument::links() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.AssetInstrument.links)
  return _internal_links();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::InstrumentLink>&
AssetInstrument::_internal_links() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.links_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::InstrumentLink>*
AssetInstrument::_internal_mutable_links() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.links_;
}

// .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
inline void AssetInstrument::clear_instrument_kind() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_kind_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentType AssetInstrument::instrument_kind() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetInstrument.instrument_kind)
  return _internal_instrument_kind();
}
inline void AssetInstrument::set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value) {
  _internal_set_instrument_kind(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetInstrument.instrument_kind)
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentType AssetInstrument::_internal_instrument_kind() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::InstrumentType>(_impl_.instrument_kind_);
}
inline void AssetInstrument::_internal_set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_kind_ = value;
}

// string position_uid = 11;
inline void AssetInstrument::clear_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.position_uid_.ClearToEmpty();
}
inline const std::string& AssetInstrument::position_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.AssetInstrument.position_uid)
  return _internal_position_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetInstrument::set_position_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.position_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.AssetInstrument.position_uid)
}
inline std::string* AssetInstrument::mutable_position_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_position_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.AssetInstrument.position_uid)
  return _s;
}
inline const std::string& AssetInstrument::_internal_position_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.position_uid_.Get();
}
inline void AssetInstrument::_internal_set_position_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.position_uid_.Set(value, GetArena());
}
inline std::string* AssetInstrument::_internal_mutable_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.position_uid_.Mutable( GetArena());
}
inline std::string* AssetInstrument::release_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.AssetInstrument.position_uid)
  return _impl_.position_uid_.Release();
}
inline void AssetInstrument::set_allocated_position_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.position_uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.position_uid_.IsDefault()) {
          _impl_.position_uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.AssetInstrument.position_uid)
}

// -------------------------------------------------------------------

// InstrumentLink

// string type = 1;
inline void InstrumentLink::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& InstrumentLink::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.InstrumentLink.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InstrumentLink::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.InstrumentLink.type)
}
inline std::string* InstrumentLink::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.InstrumentLink.type)
  return _s;
}
inline const std::string& InstrumentLink::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void InstrumentLink::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(value, GetArena());
}
inline std::string* InstrumentLink::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* InstrumentLink::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.InstrumentLink.type)
  return _impl_.type_.Release();
}
inline void InstrumentLink::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.InstrumentLink.type)
}

// string instrument_uid = 2;
inline void InstrumentLink::clear_instrument_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& InstrumentLink::instrument_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.InstrumentLink.instrument_uid)
  return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InstrumentLink::set_instrument_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.InstrumentLink.instrument_uid)
}
inline std::string* InstrumentLink::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.InstrumentLink.instrument_uid)
  return _s;
}
inline const std::string& InstrumentLink::_internal_instrument_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instrument_uid_.Get();
}
inline void InstrumentLink::_internal_set_instrument_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* InstrumentLink::_internal_mutable_instrument_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* InstrumentLink::release_instrument_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.InstrumentLink.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void InstrumentLink::set_allocated_instrument_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.instrument_uid_.IsDefault()) {
          _impl_.instrument_uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.InstrumentLink.instrument_uid)
}

// -------------------------------------------------------------------

// GetFavoritesRequest

// -------------------------------------------------------------------

// GetFavoritesResponse

// repeated .tinkoff.public_.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
inline int GetFavoritesResponse::_internal_favorite_instruments_size() const {
  return _internal_favorite_instruments().size();
}
inline int GetFavoritesResponse::favorite_instruments_size() const {
  return _internal_favorite_instruments_size();
}
inline void GetFavoritesResponse::clear_favorite_instruments() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.favorite_instruments_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument* GetFavoritesResponse::mutable_favorite_instruments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse.favorite_instruments)
  return _internal_mutable_favorite_instruments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument>* GetFavoritesResponse::mutable_favorite_instruments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse.favorite_instruments)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_favorite_instruments();
}
inline const ::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument& GetFavoritesResponse::favorite_instruments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse.favorite_instruments)
  return _internal_favorite_instruments().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument* GetFavoritesResponse::add_favorite_instruments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument* _add = _internal_mutable_favorite_instruments()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse.favorite_instruments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument>& GetFavoritesResponse::favorite_instruments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.GetFavoritesResponse.favorite_instruments)
  return _internal_favorite_instruments();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument>&
GetFavoritesResponse::_internal_favorite_instruments() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.favorite_instruments_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument>*
GetFavoritesResponse::_internal_mutable_favorite_instruments() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.favorite_instruments_;
}

// -------------------------------------------------------------------

// FavoriteInstrument

// string figi = 1;
inline void FavoriteInstrument::clear_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& FavoriteInstrument::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FavoriteInstrument::set_figi(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.figi)
}
inline std::string* FavoriteInstrument::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.figi)
  return _s;
}
inline const std::string& FavoriteInstrument::_internal_figi() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.figi_.Get();
}
inline void FavoriteInstrument::_internal_set_figi(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* FavoriteInstrument::_internal_mutable_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* FavoriteInstrument::release_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.figi)
  return _impl_.figi_.Release();
}
inline void FavoriteInstrument::set_allocated_figi(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.figi_.IsDefault()) {
          _impl_.figi_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.figi)
}

// string ticker = 2;
inline void FavoriteInstrument::clear_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.ClearToEmpty();
}
inline const std::string& FavoriteInstrument::ticker() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.ticker)
  return _internal_ticker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FavoriteInstrument::set_ticker(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.ticker)
}
inline std::string* FavoriteInstrument::mutable_ticker() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ticker();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.ticker)
  return _s;
}
inline const std::string& FavoriteInstrument::_internal_ticker() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ticker_.Get();
}
inline void FavoriteInstrument::_internal_set_ticker(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(value, GetArena());
}
inline std::string* FavoriteInstrument::_internal_mutable_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ticker_.Mutable( GetArena());
}
inline std::string* FavoriteInstrument::release_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.ticker)
  return _impl_.ticker_.Release();
}
inline void FavoriteInstrument::set_allocated_ticker(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ticker_.IsDefault()) {
          _impl_.ticker_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.ticker)
}

// string class_code = 3;
inline void FavoriteInstrument::clear_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_code_.ClearToEmpty();
}
inline const std::string& FavoriteInstrument::class_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.class_code)
  return _internal_class_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FavoriteInstrument::set_class_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.class_code)
}
inline std::string* FavoriteInstrument::mutable_class_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_class_code();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.class_code)
  return _s;
}
inline const std::string& FavoriteInstrument::_internal_class_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.class_code_.Get();
}
inline void FavoriteInstrument::_internal_set_class_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class_code_.Set(value, GetArena());
}
inline std::string* FavoriteInstrument::_internal_mutable_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.class_code_.Mutable( GetArena());
}
inline std::string* FavoriteInstrument::release_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.class_code)
  return _impl_.class_code_.Release();
}
inline void FavoriteInstrument::set_allocated_class_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.class_code_.IsDefault()) {
          _impl_.class_code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.class_code)
}

// string isin = 4;
inline void FavoriteInstrument::clear_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.isin_.ClearToEmpty();
}
inline const std::string& FavoriteInstrument::isin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.isin)
  return _internal_isin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FavoriteInstrument::set_isin(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.isin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.isin)
}
inline std::string* FavoriteInstrument::mutable_isin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_isin();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.isin)
  return _s;
}
inline const std::string& FavoriteInstrument::_internal_isin() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.isin_.Get();
}
inline void FavoriteInstrument::_internal_set_isin(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.isin_.Set(value, GetArena());
}
inline std::string* FavoriteInstrument::_internal_mutable_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.isin_.Mutable( GetArena());
}
inline std::string* FavoriteInstrument::release_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.isin)
  return _impl_.isin_.Release();
}
inline void FavoriteInstrument::set_allocated_isin(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.isin_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.isin_.IsDefault()) {
          _impl_.isin_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.isin)
}

// string instrument_type = 11;
inline void FavoriteInstrument::clear_instrument_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_type_.ClearToEmpty();
}
inline const std::string& FavoriteInstrument::instrument_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.instrument_type)
  return _internal_instrument_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FavoriteInstrument::set_instrument_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.instrument_type)
}
inline std::string* FavoriteInstrument::mutable_instrument_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_type();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.instrument_type)
  return _s;
}
inline const std::string& FavoriteInstrument::_internal_instrument_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instrument_type_.Get();
}
inline void FavoriteInstrument::_internal_set_instrument_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_type_.Set(value, GetArena());
}
inline std::string* FavoriteInstrument::_internal_mutable_instrument_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.instrument_type_.Mutable( GetArena());
}
inline std::string* FavoriteInstrument::release_instrument_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.instrument_type)
  return _impl_.instrument_type_.Release();
}
inline void FavoriteInstrument::set_allocated_instrument_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.instrument_type_.IsDefault()) {
          _impl_.instrument_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.instrument_type)
}

// string name = 12;
inline void FavoriteInstrument::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& FavoriteInstrument::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FavoriteInstrument::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.name)
}
inline std::string* FavoriteInstrument::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.name)
  return _s;
}
inline const std::string& FavoriteInstrument::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void FavoriteInstrument::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* FavoriteInstrument::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* FavoriteInstrument::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.name)
  return _impl_.name_.Release();
}
inline void FavoriteInstrument::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.name)
}

// string uid = 13;
inline void FavoriteInstrument::clear_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& FavoriteInstrument::uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.uid)
  return _internal_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FavoriteInstrument::set_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.uid)
}
inline std::string* FavoriteInstrument::mutable_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.uid)
  return _s;
}
inline const std::string& FavoriteInstrument::_internal_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uid_.Get();
}
inline void FavoriteInstrument::_internal_set_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(value, GetArena());
}
inline std::string* FavoriteInstrument::_internal_mutable_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.uid_.Mutable( GetArena());
}
inline std::string* FavoriteInstrument::release_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.uid)
  return _impl_.uid_.Release();
}
inline void FavoriteInstrument::set_allocated_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uid_.IsDefault()) {
          _impl_.uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.uid)
}

// bool otc_flag = 16;
inline void FavoriteInstrument::clear_otc_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.otc_flag_ = false;
}
inline bool FavoriteInstrument::otc_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.otc_flag)
  return _internal_otc_flag();
}
inline void FavoriteInstrument::set_otc_flag(bool value) {
  _internal_set_otc_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.otc_flag)
}
inline bool FavoriteInstrument::_internal_otc_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.otc_flag_;
}
inline void FavoriteInstrument::_internal_set_otc_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.otc_flag_ = value;
}

// bool api_trade_available_flag = 17;
inline void FavoriteInstrument::clear_api_trade_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.api_trade_available_flag_ = false;
}
inline bool FavoriteInstrument::api_trade_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.api_trade_available_flag)
  return _internal_api_trade_available_flag();
}
inline void FavoriteInstrument::set_api_trade_available_flag(bool value) {
  _internal_set_api_trade_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.api_trade_available_flag)
}
inline bool FavoriteInstrument::_internal_api_trade_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.api_trade_available_flag_;
}
inline void FavoriteInstrument::_internal_set_api_trade_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.api_trade_available_flag_ = value;
}

// .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 18;
inline void FavoriteInstrument::clear_instrument_kind() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_kind_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentType FavoriteInstrument::instrument_kind() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.instrument_kind)
  return _internal_instrument_kind();
}
inline void FavoriteInstrument::set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value) {
  _internal_set_instrument_kind(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.FavoriteInstrument.instrument_kind)
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentType FavoriteInstrument::_internal_instrument_kind() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::InstrumentType>(_impl_.instrument_kind_);
}
inline void FavoriteInstrument::_internal_set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_kind_ = value;
}

// -------------------------------------------------------------------

// EditFavoritesRequest

// repeated .tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument instruments = 1 [(.google.api.field_behavior) = REQUIRED];
inline int EditFavoritesRequest::_internal_instruments_size() const {
  return _internal_instruments().size();
}
inline int EditFavoritesRequest::instruments_size() const {
  return _internal_instruments_size();
}
inline void EditFavoritesRequest::clear_instruments() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instruments_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument* EditFavoritesRequest::mutable_instruments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest.instruments)
  return _internal_mutable_instruments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument>* EditFavoritesRequest::mutable_instruments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest.instruments)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_instruments();
}
inline const ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument& EditFavoritesRequest::instruments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest.instruments)
  return _internal_instruments().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument* EditFavoritesRequest::add_instruments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument* _add = _internal_mutable_instruments()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest.instruments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument>& EditFavoritesRequest::instruments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest.instruments)
  return _internal_instruments();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument>&
EditFavoritesRequest::_internal_instruments() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instruments_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument>*
EditFavoritesRequest::_internal_mutable_instruments() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.instruments_;
}

// .tinkoff.public_.invest.api.contract.v1.EditFavoritesActionType action_type = 6 [(.google.api.field_behavior) = REQUIRED];
inline void EditFavoritesRequest::clear_action_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.action_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::EditFavoritesActionType EditFavoritesRequest::action_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest.action_type)
  return _internal_action_type();
}
inline void EditFavoritesRequest::set_action_type(::tinkoff::public_::invest::api::contract::v1::EditFavoritesActionType value) {
  _internal_set_action_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequest.action_type)
}
inline ::tinkoff::public_::invest::api::contract::v1::EditFavoritesActionType EditFavoritesRequest::_internal_action_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::EditFavoritesActionType>(_impl_.action_type_);
}
inline void EditFavoritesRequest::_internal_set_action_type(::tinkoff::public_::invest::api::contract::v1::EditFavoritesActionType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.action_type_ = value;
}

// -------------------------------------------------------------------

// EditFavoritesRequestInstrument

// optional string figi = 1 [deprecated = true];
inline bool EditFavoritesRequestInstrument::has_figi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EditFavoritesRequestInstrument::clear_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EditFavoritesRequestInstrument::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EditFavoritesRequestInstrument::set_figi(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument.figi)
}
inline std::string* EditFavoritesRequestInstrument::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument.figi)
  return _s;
}
inline const std::string& EditFavoritesRequestInstrument::_internal_figi() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.figi_.Get();
}
inline void EditFavoritesRequestInstrument::_internal_set_figi(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* EditFavoritesRequestInstrument::_internal_mutable_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* EditFavoritesRequestInstrument::release_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument.figi)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.figi_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.figi_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EditFavoritesRequestInstrument::set_allocated_figi(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.figi_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.figi_.IsDefault()) {
          _impl_.figi_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument.figi)
}

// string instrument_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void EditFavoritesRequestInstrument::clear_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_id_.ClearToEmpty();
}
inline const std::string& EditFavoritesRequestInstrument::instrument_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument.instrument_id)
  return _internal_instrument_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EditFavoritesRequestInstrument::set_instrument_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument.instrument_id)
}
inline std::string* EditFavoritesRequestInstrument::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument.instrument_id)
  return _s;
}
inline const std::string& EditFavoritesRequestInstrument::_internal_instrument_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instrument_id_.Get();
}
inline void EditFavoritesRequestInstrument::_internal_set_instrument_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_id_.Set(value, GetArena());
}
inline std::string* EditFavoritesRequestInstrument::_internal_mutable_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.instrument_id_.Mutable( GetArena());
}
inline std::string* EditFavoritesRequestInstrument::release_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument.instrument_id)
  return _impl_.instrument_id_.Release();
}
inline void EditFavoritesRequestInstrument::set_allocated_instrument_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.instrument_id_.IsDefault()) {
          _impl_.instrument_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.EditFavoritesRequestInstrument.instrument_id)
}

// -------------------------------------------------------------------

// EditFavoritesResponse

// repeated .tinkoff.public_.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
inline int EditFavoritesResponse::_internal_favorite_instruments_size() const {
  return _internal_favorite_instruments().size();
}
inline int EditFavoritesResponse::favorite_instruments_size() const {
  return _internal_favorite_instruments_size();
}
inline void EditFavoritesResponse::clear_favorite_instruments() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.favorite_instruments_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument* EditFavoritesResponse::mutable_favorite_instruments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse.favorite_instruments)
  return _internal_mutable_favorite_instruments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument>* EditFavoritesResponse::mutable_favorite_instruments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse.favorite_instruments)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_favorite_instruments();
}
inline const ::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument& EditFavoritesResponse::favorite_instruments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse.favorite_instruments)
  return _internal_favorite_instruments().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument* EditFavoritesResponse::add_favorite_instruments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument* _add = _internal_mutable_favorite_instruments()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse.favorite_instruments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument>& EditFavoritesResponse::favorite_instruments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.EditFavoritesResponse.favorite_instruments)
  return _internal_favorite_instruments();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument>&
EditFavoritesResponse::_internal_favorite_instruments() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.favorite_instruments_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument>*
EditFavoritesResponse::_internal_mutable_favorite_instruments() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.favorite_instruments_;
}

// -------------------------------------------------------------------

// GetCountriesRequest

// -------------------------------------------------------------------

// GetCountriesResponse

// repeated .tinkoff.public_.invest.api.contract.v1.CountryResponse countries = 1;
inline int GetCountriesResponse::_internal_countries_size() const {
  return _internal_countries().size();
}
inline int GetCountriesResponse::countries_size() const {
  return _internal_countries_size();
}
inline void GetCountriesResponse::clear_countries() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.countries_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::CountryResponse* GetCountriesResponse::mutable_countries(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetCountriesResponse.countries)
  return _internal_mutable_countries()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::CountryResponse>* GetCountriesResponse::mutable_countries()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.GetCountriesResponse.countries)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_countries();
}
inline const ::tinkoff::public_::invest::api::contract::v1::CountryResponse& GetCountriesResponse::countries(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetCountriesResponse.countries)
  return _internal_countries().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::CountryResponse* GetCountriesResponse::add_countries() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::CountryResponse* _add = _internal_mutable_countries()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.GetCountriesResponse.countries)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::CountryResponse>& GetCountriesResponse::countries() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.GetCountriesResponse.countries)
  return _internal_countries();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::CountryResponse>&
GetCountriesResponse::_internal_countries() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.countries_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::CountryResponse>*
GetCountriesResponse::_internal_mutable_countries() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.countries_;
}

// -------------------------------------------------------------------

// IndicativesRequest

// -------------------------------------------------------------------

// IndicativesResponse

// repeated .tinkoff.public_.invest.api.contract.v1.IndicativeResponse instruments = 1;
inline int IndicativesResponse::_internal_instruments_size() const {
  return _internal_instruments().size();
}
inline int IndicativesResponse::instruments_size() const {
  return _internal_instruments_size();
}
inline void IndicativesResponse::clear_instruments() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instruments_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::IndicativeResponse* IndicativesResponse::mutable_instruments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.IndicativesResponse.instruments)
  return _internal_mutable_instruments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::IndicativeResponse>* IndicativesResponse::mutable_instruments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.IndicativesResponse.instruments)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_instruments();
}
inline const ::tinkoff::public_::invest::api::contract::v1::IndicativeResponse& IndicativesResponse::instruments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.IndicativesResponse.instruments)
  return _internal_instruments().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::IndicativeResponse* IndicativesResponse::add_instruments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::IndicativeResponse* _add = _internal_mutable_instruments()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.IndicativesResponse.instruments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::IndicativeResponse>& IndicativesResponse::instruments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.IndicativesResponse.instruments)
  return _internal_instruments();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::IndicativeResponse>&
IndicativesResponse::_internal_instruments() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instruments_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::IndicativeResponse>*
IndicativesResponse::_internal_mutable_instruments() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.instruments_;
}

// -------------------------------------------------------------------

// IndicativeResponse

// string figi = 1;
inline void IndicativeResponse::clear_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& IndicativeResponse::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IndicativeResponse::set_figi(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.figi)
}
inline std::string* IndicativeResponse::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.figi)
  return _s;
}
inline const std::string& IndicativeResponse::_internal_figi() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.figi_.Get();
}
inline void IndicativeResponse::_internal_set_figi(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* IndicativeResponse::_internal_mutable_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* IndicativeResponse::release_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.figi)
  return _impl_.figi_.Release();
}
inline void IndicativeResponse::set_allocated_figi(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.figi_.IsDefault()) {
          _impl_.figi_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.figi)
}

// string ticker = 2;
inline void IndicativeResponse::clear_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.ClearToEmpty();
}
inline const std::string& IndicativeResponse::ticker() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.ticker)
  return _internal_ticker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IndicativeResponse::set_ticker(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.ticker)
}
inline std::string* IndicativeResponse::mutable_ticker() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ticker();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.ticker)
  return _s;
}
inline const std::string& IndicativeResponse::_internal_ticker() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ticker_.Get();
}
inline void IndicativeResponse::_internal_set_ticker(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(value, GetArena());
}
inline std::string* IndicativeResponse::_internal_mutable_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ticker_.Mutable( GetArena());
}
inline std::string* IndicativeResponse::release_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.ticker)
  return _impl_.ticker_.Release();
}
inline void IndicativeResponse::set_allocated_ticker(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ticker_.IsDefault()) {
          _impl_.ticker_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.ticker)
}

// string class_code = 3;
inline void IndicativeResponse::clear_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_code_.ClearToEmpty();
}
inline const std::string& IndicativeResponse::class_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.class_code)
  return _internal_class_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IndicativeResponse::set_class_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.class_code)
}
inline std::string* IndicativeResponse::mutable_class_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_class_code();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.class_code)
  return _s;
}
inline const std::string& IndicativeResponse::_internal_class_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.class_code_.Get();
}
inline void IndicativeResponse::_internal_set_class_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class_code_.Set(value, GetArena());
}
inline std::string* IndicativeResponse::_internal_mutable_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.class_code_.Mutable( GetArena());
}
inline std::string* IndicativeResponse::release_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.class_code)
  return _impl_.class_code_.Release();
}
inline void IndicativeResponse::set_allocated_class_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.class_code_.IsDefault()) {
          _impl_.class_code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.class_code)
}

// string currency = 4;
inline void IndicativeResponse::clear_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.ClearToEmpty();
}
inline const std::string& IndicativeResponse::currency() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.currency)
  return _internal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IndicativeResponse::set_currency(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.currency)
}
inline std::string* IndicativeResponse::mutable_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.currency)
  return _s;
}
inline const std::string& IndicativeResponse::_internal_currency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.currency_.Get();
}
inline void IndicativeResponse::_internal_set_currency(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(value, GetArena());
}
inline std::string* IndicativeResponse::_internal_mutable_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.currency_.Mutable( GetArena());
}
inline std::string* IndicativeResponse::release_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.currency)
  return _impl_.currency_.Release();
}
inline void IndicativeResponse::set_allocated_currency(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.currency_.IsDefault()) {
          _impl_.currency_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.currency)
}

// .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
inline void IndicativeResponse::clear_instrument_kind() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_kind_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentType IndicativeResponse::instrument_kind() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.instrument_kind)
  return _internal_instrument_kind();
}
inline void IndicativeResponse::set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value) {
  _internal_set_instrument_kind(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.instrument_kind)
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentType IndicativeResponse::_internal_instrument_kind() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::InstrumentType>(_impl_.instrument_kind_);
}
inline void IndicativeResponse::_internal_set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_kind_ = value;
}

// string name = 12;
inline void IndicativeResponse::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& IndicativeResponse::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IndicativeResponse::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.name)
}
inline std::string* IndicativeResponse::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.name)
  return _s;
}
inline const std::string& IndicativeResponse::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void IndicativeResponse::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* IndicativeResponse::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* IndicativeResponse::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.name)
  return _impl_.name_.Release();
}
inline void IndicativeResponse::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.name)
}

// string exchange = 13;
inline void IndicativeResponse::clear_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_.ClearToEmpty();
}
inline const std::string& IndicativeResponse::exchange() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.exchange)
  return _internal_exchange();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IndicativeResponse::set_exchange(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.exchange)
}
inline std::string* IndicativeResponse::mutable_exchange() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_exchange();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.exchange)
  return _s;
}
inline const std::string& IndicativeResponse::_internal_exchange() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exchange_.Get();
}
inline void IndicativeResponse::_internal_set_exchange(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_.Set(value, GetArena());
}
inline std::string* IndicativeResponse::_internal_mutable_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.exchange_.Mutable( GetArena());
}
inline std::string* IndicativeResponse::release_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.exchange)
  return _impl_.exchange_.Release();
}
inline void IndicativeResponse::set_allocated_exchange(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_.IsDefault()) {
          _impl_.exchange_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.exchange)
}

// string uid = 14;
inline void IndicativeResponse::clear_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& IndicativeResponse::uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.uid)
  return _internal_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IndicativeResponse::set_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.uid)
}
inline std::string* IndicativeResponse::mutable_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.uid)
  return _s;
}
inline const std::string& IndicativeResponse::_internal_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uid_.Get();
}
inline void IndicativeResponse::_internal_set_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(value, GetArena());
}
inline std::string* IndicativeResponse::_internal_mutable_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.uid_.Mutable( GetArena());
}
inline std::string* IndicativeResponse::release_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.uid)
  return _impl_.uid_.Release();
}
inline void IndicativeResponse::set_allocated_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uid_.IsDefault()) {
          _impl_.uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.uid)
}

// bool buy_available_flag = 404;
inline void IndicativeResponse::clear_buy_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.buy_available_flag_ = false;
}
inline bool IndicativeResponse::buy_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.buy_available_flag)
  return _internal_buy_available_flag();
}
inline void IndicativeResponse::set_buy_available_flag(bool value) {
  _internal_set_buy_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.buy_available_flag)
}
inline bool IndicativeResponse::_internal_buy_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.buy_available_flag_;
}
inline void IndicativeResponse::_internal_set_buy_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.buy_available_flag_ = value;
}

// bool sell_available_flag = 405;
inline void IndicativeResponse::clear_sell_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sell_available_flag_ = false;
}
inline bool IndicativeResponse::sell_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.sell_available_flag)
  return _internal_sell_available_flag();
}
inline void IndicativeResponse::set_sell_available_flag(bool value) {
  _internal_set_sell_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.IndicativeResponse.sell_available_flag)
}
inline bool IndicativeResponse::_internal_sell_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sell_available_flag_;
}
inline void IndicativeResponse::_internal_set_sell_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sell_available_flag_ = value;
}

// -------------------------------------------------------------------

// CountryResponse

// string alfa_two = 1;
inline void CountryResponse::clear_alfa_two() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.alfa_two_.ClearToEmpty();
}
inline const std::string& CountryResponse::alfa_two() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.CountryResponse.alfa_two)
  return _internal_alfa_two();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CountryResponse::set_alfa_two(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.alfa_two_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.CountryResponse.alfa_two)
}
inline std::string* CountryResponse::mutable_alfa_two() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_alfa_two();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.CountryResponse.alfa_two)
  return _s;
}
inline const std::string& CountryResponse::_internal_alfa_two() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.alfa_two_.Get();
}
inline void CountryResponse::_internal_set_alfa_two(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.alfa_two_.Set(value, GetArena());
}
inline std::string* CountryResponse::_internal_mutable_alfa_two() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.alfa_two_.Mutable( GetArena());
}
inline std::string* CountryResponse::release_alfa_two() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.CountryResponse.alfa_two)
  return _impl_.alfa_two_.Release();
}
inline void CountryResponse::set_allocated_alfa_two(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.alfa_two_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.alfa_two_.IsDefault()) {
          _impl_.alfa_two_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.CountryResponse.alfa_two)
}

// string alfa_three = 2;
inline void CountryResponse::clear_alfa_three() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.alfa_three_.ClearToEmpty();
}
inline const std::string& CountryResponse::alfa_three() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.CountryResponse.alfa_three)
  return _internal_alfa_three();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CountryResponse::set_alfa_three(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.alfa_three_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.CountryResponse.alfa_three)
}
inline std::string* CountryResponse::mutable_alfa_three() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_alfa_three();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.CountryResponse.alfa_three)
  return _s;
}
inline const std::string& CountryResponse::_internal_alfa_three() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.alfa_three_.Get();
}
inline void CountryResponse::_internal_set_alfa_three(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.alfa_three_.Set(value, GetArena());
}
inline std::string* CountryResponse::_internal_mutable_alfa_three() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.alfa_three_.Mutable( GetArena());
}
inline std::string* CountryResponse::release_alfa_three() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.CountryResponse.alfa_three)
  return _impl_.alfa_three_.Release();
}
inline void CountryResponse::set_allocated_alfa_three(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.alfa_three_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.alfa_three_.IsDefault()) {
          _impl_.alfa_three_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.CountryResponse.alfa_three)
}

// string name = 3;
inline void CountryResponse::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CountryResponse::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.CountryResponse.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CountryResponse::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.CountryResponse.name)
}
inline std::string* CountryResponse::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.CountryResponse.name)
  return _s;
}
inline const std::string& CountryResponse::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void CountryResponse::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* CountryResponse::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* CountryResponse::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.CountryResponse.name)
  return _impl_.name_.Release();
}
inline void CountryResponse::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.CountryResponse.name)
}

// string name_brief = 4;
inline void CountryResponse::clear_name_brief() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_brief_.ClearToEmpty();
}
inline const std::string& CountryResponse::name_brief() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.CountryResponse.name_brief)
  return _internal_name_brief();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CountryResponse::set_name_brief(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_brief_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.CountryResponse.name_brief)
}
inline std::string* CountryResponse::mutable_name_brief() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name_brief();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.CountryResponse.name_brief)
  return _s;
}
inline const std::string& CountryResponse::_internal_name_brief() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_brief_.Get();
}
inline void CountryResponse::_internal_set_name_brief(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_brief_.Set(value, GetArena());
}
inline std::string* CountryResponse::_internal_mutable_name_brief() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_brief_.Mutable( GetArena());
}
inline std::string* CountryResponse::release_name_brief() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.CountryResponse.name_brief)
  return _impl_.name_brief_.Release();
}
inline void CountryResponse::set_allocated_name_brief(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_brief_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_brief_.IsDefault()) {
          _impl_.name_brief_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.CountryResponse.name_brief)
}

// -------------------------------------------------------------------

// FindInstrumentRequest

// string query = 1 [(.google.api.field_behavior) = REQUIRED];
inline void FindInstrumentRequest::clear_query() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.query_.ClearToEmpty();
}
inline const std::string& FindInstrumentRequest::query() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest.query)
  return _internal_query();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FindInstrumentRequest::set_query(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.query_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest.query)
}
inline std::string* FindInstrumentRequest::mutable_query() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest.query)
  return _s;
}
inline const std::string& FindInstrumentRequest::_internal_query() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.query_.Get();
}
inline void FindInstrumentRequest::_internal_set_query(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.query_.Set(value, GetArena());
}
inline std::string* FindInstrumentRequest::_internal_mutable_query() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.query_.Mutable( GetArena());
}
inline std::string* FindInstrumentRequest::release_query() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest.query)
  return _impl_.query_.Release();
}
inline void FindInstrumentRequest::set_allocated_query(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.query_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.query_.IsDefault()) {
          _impl_.query_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest.query)
}

// optional .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 2;
inline bool FindInstrumentRequest::has_instrument_kind() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FindInstrumentRequest::clear_instrument_kind() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_kind_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentType FindInstrumentRequest::instrument_kind() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest.instrument_kind)
  return _internal_instrument_kind();
}
inline void FindInstrumentRequest::set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value) {
  _internal_set_instrument_kind(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest.instrument_kind)
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentType FindInstrumentRequest::_internal_instrument_kind() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::InstrumentType>(_impl_.instrument_kind_);
}
inline void FindInstrumentRequest::_internal_set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.instrument_kind_ = value;
}

// optional bool api_trade_available_flag = 3;
inline bool FindInstrumentRequest::has_api_trade_available_flag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FindInstrumentRequest::clear_api_trade_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.api_trade_available_flag_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool FindInstrumentRequest::api_trade_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest.api_trade_available_flag)
  return _internal_api_trade_available_flag();
}
inline void FindInstrumentRequest::set_api_trade_available_flag(bool value) {
  _internal_set_api_trade_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.FindInstrumentRequest.api_trade_available_flag)
}
inline bool FindInstrumentRequest::_internal_api_trade_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.api_trade_available_flag_;
}
inline void FindInstrumentRequest::_internal_set_api_trade_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.api_trade_available_flag_ = value;
}

// -------------------------------------------------------------------

// FindInstrumentResponse

// repeated .tinkoff.public_.invest.api.contract.v1.InstrumentShort instruments = 1;
inline int FindInstrumentResponse::_internal_instruments_size() const {
  return _internal_instruments().size();
}
inline int FindInstrumentResponse::instruments_size() const {
  return _internal_instruments_size();
}
inline void FindInstrumentResponse::clear_instruments() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instruments_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentShort* FindInstrumentResponse::mutable_instruments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse.instruments)
  return _internal_mutable_instruments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::InstrumentShort>* FindInstrumentResponse::mutable_instruments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse.instruments)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_instruments();
}
inline const ::tinkoff::public_::invest::api::contract::v1::InstrumentShort& FindInstrumentResponse::instruments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse.instruments)
  return _internal_instruments().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentShort* FindInstrumentResponse::add_instruments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::InstrumentShort* _add = _internal_mutable_instruments()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse.instruments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::InstrumentShort>& FindInstrumentResponse::instruments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.FindInstrumentResponse.instruments)
  return _internal_instruments();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::InstrumentShort>&
FindInstrumentResponse::_internal_instruments() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instruments_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::InstrumentShort>*
FindInstrumentResponse::_internal_mutable_instruments() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.instruments_;
}

// -------------------------------------------------------------------

// InstrumentShort

// string isin = 1;
inline void InstrumentShort::clear_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.isin_.ClearToEmpty();
}
inline const std::string& InstrumentShort::isin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.InstrumentShort.isin)
  return _internal_isin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InstrumentShort::set_isin(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.isin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.InstrumentShort.isin)
}
inline std::string* InstrumentShort::mutable_isin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_isin();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.InstrumentShort.isin)
  return _s;
}
inline const std::string& InstrumentShort::_internal_isin() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.isin_.Get();
}
inline void InstrumentShort::_internal_set_isin(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.isin_.Set(value, GetArena());
}
inline std::string* InstrumentShort::_internal_mutable_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.isin_.Mutable( GetArena());
}
inline std::string* InstrumentShort::release_isin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.InstrumentShort.isin)
  return _impl_.isin_.Release();
}
inline void InstrumentShort::set_allocated_isin(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.isin_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.isin_.IsDefault()) {
          _impl_.isin_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.InstrumentShort.isin)
}

// string figi = 2;
inline void InstrumentShort::clear_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& InstrumentShort::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.InstrumentShort.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InstrumentShort::set_figi(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.InstrumentShort.figi)
}
inline std::string* InstrumentShort::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.InstrumentShort.figi)
  return _s;
}
inline const std::string& InstrumentShort::_internal_figi() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.figi_.Get();
}
inline void InstrumentShort::_internal_set_figi(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* InstrumentShort::_internal_mutable_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* InstrumentShort::release_figi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.InstrumentShort.figi)
  return _impl_.figi_.Release();
}
inline void InstrumentShort::set_allocated_figi(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.figi_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.figi_.IsDefault()) {
          _impl_.figi_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.InstrumentShort.figi)
}

// string ticker = 3;
inline void InstrumentShort::clear_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.ClearToEmpty();
}
inline const std::string& InstrumentShort::ticker() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.InstrumentShort.ticker)
  return _internal_ticker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InstrumentShort::set_ticker(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.InstrumentShort.ticker)
}
inline std::string* InstrumentShort::mutable_ticker() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ticker();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.InstrumentShort.ticker)
  return _s;
}
inline const std::string& InstrumentShort::_internal_ticker() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ticker_.Get();
}
inline void InstrumentShort::_internal_set_ticker(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(value, GetArena());
}
inline std::string* InstrumentShort::_internal_mutable_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ticker_.Mutable( GetArena());
}
inline std::string* InstrumentShort::release_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.InstrumentShort.ticker)
  return _impl_.ticker_.Release();
}
inline void InstrumentShort::set_allocated_ticker(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ticker_.IsDefault()) {
          _impl_.ticker_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.InstrumentShort.ticker)
}

// string class_code = 4;
inline void InstrumentShort::clear_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_code_.ClearToEmpty();
}
inline const std::string& InstrumentShort::class_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.InstrumentShort.class_code)
  return _internal_class_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InstrumentShort::set_class_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.InstrumentShort.class_code)
}
inline std::string* InstrumentShort::mutable_class_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_class_code();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.InstrumentShort.class_code)
  return _s;
}
inline const std::string& InstrumentShort::_internal_class_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.class_code_.Get();
}
inline void InstrumentShort::_internal_set_class_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class_code_.Set(value, GetArena());
}
inline std::string* InstrumentShort::_internal_mutable_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.class_code_.Mutable( GetArena());
}
inline std::string* InstrumentShort::release_class_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.InstrumentShort.class_code)
  return _impl_.class_code_.Release();
}
inline void InstrumentShort::set_allocated_class_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.class_code_.IsDefault()) {
          _impl_.class_code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.InstrumentShort.class_code)
}

// string instrument_type = 5;
inline void InstrumentShort::clear_instrument_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_type_.ClearToEmpty();
}
inline const std::string& InstrumentShort::instrument_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.InstrumentShort.instrument_type)
  return _internal_instrument_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InstrumentShort::set_instrument_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.InstrumentShort.instrument_type)
}
inline std::string* InstrumentShort::mutable_instrument_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_type();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.InstrumentShort.instrument_type)
  return _s;
}
inline const std::string& InstrumentShort::_internal_instrument_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instrument_type_.Get();
}
inline void InstrumentShort::_internal_set_instrument_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_type_.Set(value, GetArena());
}
inline std::string* InstrumentShort::_internal_mutable_instrument_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.instrument_type_.Mutable( GetArena());
}
inline std::string* InstrumentShort::release_instrument_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.InstrumentShort.instrument_type)
  return _impl_.instrument_type_.Release();
}
inline void InstrumentShort::set_allocated_instrument_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.instrument_type_.IsDefault()) {
          _impl_.instrument_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.InstrumentShort.instrument_type)
}

// string name = 6;
inline void InstrumentShort::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& InstrumentShort::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.InstrumentShort.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InstrumentShort::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.InstrumentShort.name)
}
inline std::string* InstrumentShort::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.InstrumentShort.name)
  return _s;
}
inline const std::string& InstrumentShort::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void InstrumentShort::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* InstrumentShort::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* InstrumentShort::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.InstrumentShort.name)
  return _impl_.name_.Release();
}
inline void InstrumentShort::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.InstrumentShort.name)
}

// string uid = 7;
inline void InstrumentShort::clear_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& InstrumentShort::uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.InstrumentShort.uid)
  return _internal_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InstrumentShort::set_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.InstrumentShort.uid)
}
inline std::string* InstrumentShort::mutable_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.InstrumentShort.uid)
  return _s;
}
inline const std::string& InstrumentShort::_internal_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uid_.Get();
}
inline void InstrumentShort::_internal_set_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(value, GetArena());
}
inline std::string* InstrumentShort::_internal_mutable_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.uid_.Mutable( GetArena());
}
inline std::string* InstrumentShort::release_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.InstrumentShort.uid)
  return _impl_.uid_.Release();
}
inline void InstrumentShort::set_allocated_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uid_.IsDefault()) {
          _impl_.uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.InstrumentShort.uid)
}

// string position_uid = 8;
inline void InstrumentShort::clear_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.position_uid_.ClearToEmpty();
}
inline const std::string& InstrumentShort::position_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.InstrumentShort.position_uid)
  return _internal_position_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InstrumentShort::set_position_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.position_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.InstrumentShort.position_uid)
}
inline std::string* InstrumentShort::mutable_position_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_position_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.InstrumentShort.position_uid)
  return _s;
}
inline const std::string& InstrumentShort::_internal_position_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.position_uid_.Get();
}
inline void InstrumentShort::_internal_set_position_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.position_uid_.Set(value, GetArena());
}
inline std::string* InstrumentShort::_internal_mutable_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.position_uid_.Mutable( GetArena());
}
inline std::string* InstrumentShort::release_position_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.InstrumentShort.position_uid)
  return _impl_.position_uid_.Release();
}
inline void InstrumentShort::set_allocated_position_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.position_uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.position_uid_.IsDefault()) {
          _impl_.position_uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.InstrumentShort.position_uid)
}

// .tinkoff.public_.invest.api.contract.v1.InstrumentType instrument_kind = 10;
inline void InstrumentShort::clear_instrument_kind() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_kind_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentType InstrumentShort::instrument_kind() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.InstrumentShort.instrument_kind)
  return _internal_instrument_kind();
}
inline void InstrumentShort::set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value) {
  _internal_set_instrument_kind(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.InstrumentShort.instrument_kind)
}
inline ::tinkoff::public_::invest::api::contract::v1::InstrumentType InstrumentShort::_internal_instrument_kind() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::InstrumentType>(_impl_.instrument_kind_);
}
inline void InstrumentShort::_internal_set_instrument_kind(::tinkoff::public_::invest::api::contract::v1::InstrumentType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_kind_ = value;
}

// bool api_trade_available_flag = 11;
inline void InstrumentShort::clear_api_trade_available_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.api_trade_available_flag_ = false;
}
inline bool InstrumentShort::api_trade_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.InstrumentShort.api_trade_available_flag)
  return _internal_api_trade_available_flag();
}
inline void InstrumentShort::set_api_trade_available_flag(bool value) {
  _internal_set_api_trade_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.InstrumentShort.api_trade_available_flag)
}
inline bool InstrumentShort::_internal_api_trade_available_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.api_trade_available_flag_;
}
inline void InstrumentShort::_internal_set_api_trade_available_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.api_trade_available_flag_ = value;
}

// bool for_iis_flag = 12;
inline void InstrumentShort::clear_for_iis_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.for_iis_flag_ = false;
}
inline bool InstrumentShort::for_iis_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.InstrumentShort.for_iis_flag)
  return _internal_for_iis_flag();
}
inline void InstrumentShort::set_for_iis_flag(bool value) {
  _internal_set_for_iis_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.InstrumentShort.for_iis_flag)
}
inline bool InstrumentShort::_internal_for_iis_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.for_iis_flag_;
}
inline void InstrumentShort::_internal_set_for_iis_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.for_iis_flag_ = value;
}

// .google.protobuf.Timestamp first_1min_candle_date = 26;
inline bool InstrumentShort::has_first_1min_candle_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.first_1min_candle_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& InstrumentShort::_internal_first_1min_candle_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.first_1min_candle_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& InstrumentShort::first_1min_candle_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.InstrumentShort.first_1min_candle_date)
  return _internal_first_1min_candle_date();
}
inline void InstrumentShort::unsafe_arena_set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1min_candle_date_);
  }
  _impl_.first_1min_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.InstrumentShort.first_1min_candle_date)
}
inline ::google::protobuf::Timestamp* InstrumentShort::release_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.first_1min_candle_date_;
  _impl_.first_1min_candle_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* InstrumentShort::unsafe_arena_release_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.InstrumentShort.first_1min_candle_date)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.first_1min_candle_date_;
  _impl_.first_1min_candle_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* InstrumentShort::_internal_mutable_first_1min_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.first_1min_candle_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.first_1min_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.first_1min_candle_date_;
}
inline ::google::protobuf::Timestamp* InstrumentShort::mutable_first_1min_candle_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_first_1min_candle_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.InstrumentShort.first_1min_candle_date)
  return _msg;
}
inline void InstrumentShort::set_allocated_first_1min_candle_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1min_candle_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.first_1min_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.InstrumentShort.first_1min_candle_date)
}

// .google.protobuf.Timestamp first_1day_candle_date = 27;
inline bool InstrumentShort::has_first_1day_candle_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.first_1day_candle_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& InstrumentShort::_internal_first_1day_candle_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.first_1day_candle_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& InstrumentShort::first_1day_candle_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.InstrumentShort.first_1day_candle_date)
  return _internal_first_1day_candle_date();
}
inline void InstrumentShort::unsafe_arena_set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1day_candle_date_);
  }
  _impl_.first_1day_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.InstrumentShort.first_1day_candle_date)
}
inline ::google::protobuf::Timestamp* InstrumentShort::release_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.first_1day_candle_date_;
  _impl_.first_1day_candle_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* InstrumentShort::unsafe_arena_release_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.InstrumentShort.first_1day_candle_date)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.first_1day_candle_date_;
  _impl_.first_1day_candle_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* InstrumentShort::_internal_mutable_first_1day_candle_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.first_1day_candle_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.first_1day_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.first_1day_candle_date_;
}
inline ::google::protobuf::Timestamp* InstrumentShort::mutable_first_1day_candle_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_first_1day_candle_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.InstrumentShort.first_1day_candle_date)
  return _msg;
}
inline void InstrumentShort::set_allocated_first_1day_candle_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_1day_candle_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.first_1day_candle_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.InstrumentShort.first_1day_candle_date)
}

// bool for_qual_investor_flag = 28;
inline void InstrumentShort::clear_for_qual_investor_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.for_qual_investor_flag_ = false;
}
inline bool InstrumentShort::for_qual_investor_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.InstrumentShort.for_qual_investor_flag)
  return _internal_for_qual_investor_flag();
}
inline void InstrumentShort::set_for_qual_investor_flag(bool value) {
  _internal_set_for_qual_investor_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.InstrumentShort.for_qual_investor_flag)
}
inline bool InstrumentShort::_internal_for_qual_investor_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.for_qual_investor_flag_;
}
inline void InstrumentShort::_internal_set_for_qual_investor_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.for_qual_investor_flag_ = value;
}

// bool weekend_flag = 29;
inline void InstrumentShort::clear_weekend_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.weekend_flag_ = false;
}
inline bool InstrumentShort::weekend_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.InstrumentShort.weekend_flag)
  return _internal_weekend_flag();
}
inline void InstrumentShort::set_weekend_flag(bool value) {
  _internal_set_weekend_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.InstrumentShort.weekend_flag)
}
inline bool InstrumentShort::_internal_weekend_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.weekend_flag_;
}
inline void InstrumentShort::_internal_set_weekend_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.weekend_flag_ = value;
}

// bool blocked_tca_flag = 30;
inline void InstrumentShort::clear_blocked_tca_flag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.blocked_tca_flag_ = false;
}
inline bool InstrumentShort::blocked_tca_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.InstrumentShort.blocked_tca_flag)
  return _internal_blocked_tca_flag();
}
inline void InstrumentShort::set_blocked_tca_flag(bool value) {
  _internal_set_blocked_tca_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.InstrumentShort.blocked_tca_flag)
}
inline bool InstrumentShort::_internal_blocked_tca_flag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.blocked_tca_flag_;
}
inline void InstrumentShort::_internal_set_blocked_tca_flag(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.blocked_tca_flag_ = value;
}

// -------------------------------------------------------------------

// GetBrandsRequest

// .tinkoff.public_.invest.api.contract.v1.Page paging = 1;
inline bool GetBrandsRequest::has_paging() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.paging_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Page& GetBrandsRequest::_internal_paging() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Page* p = _impl_.paging_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Page&>(::tinkoff::public_::invest::api::contract::v1::_Page_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Page& GetBrandsRequest::paging() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBrandsRequest.paging)
  return _internal_paging();
}
inline void GetBrandsRequest::unsafe_arena_set_allocated_paging(::tinkoff::public_::invest::api::contract::v1::Page* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.paging_);
  }
  _impl_.paging_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Page*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBrandsRequest.paging)
}
inline ::tinkoff::public_::invest::api::contract::v1::Page* GetBrandsRequest::release_paging() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Page* released = _impl_.paging_;
  _impl_.paging_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Page* GetBrandsRequest::unsafe_arena_release_paging() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBrandsRequest.paging)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Page* temp = _impl_.paging_;
  _impl_.paging_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Page* GetBrandsRequest::_internal_mutable_paging() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.paging_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Page>(GetArena());
    _impl_.paging_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Page*>(p);
  }
  return _impl_.paging_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Page* GetBrandsRequest::mutable_paging() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Page* _msg = _internal_mutable_paging();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBrandsRequest.paging)
  return _msg;
}
inline void GetBrandsRequest::set_allocated_paging(::tinkoff::public_::invest::api::contract::v1::Page* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.paging_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.paging_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Page*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBrandsRequest.paging)
}

// -------------------------------------------------------------------

// GetBrandRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void GetBrandRequest::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& GetBrandRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBrandRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetBrandRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetBrandRequest.id)
}
inline std::string* GetBrandRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBrandRequest.id)
  return _s;
}
inline const std::string& GetBrandRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void GetBrandRequest::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* GetBrandRequest::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* GetBrandRequest::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBrandRequest.id)
  return _impl_.id_.Release();
}
inline void GetBrandRequest::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBrandRequest.id)
}

// -------------------------------------------------------------------

// GetBrandsResponse

// repeated .tinkoff.public_.invest.api.contract.v1.Brand brands = 1;
inline int GetBrandsResponse::_internal_brands_size() const {
  return _internal_brands().size();
}
inline int GetBrandsResponse::brands_size() const {
  return _internal_brands_size();
}
inline void GetBrandsResponse::clear_brands() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.brands_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::Brand* GetBrandsResponse::mutable_brands(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse.brands)
  return _internal_mutable_brands()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Brand>* GetBrandsResponse::mutable_brands()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse.brands)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_brands();
}
inline const ::tinkoff::public_::invest::api::contract::v1::Brand& GetBrandsResponse::brands(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse.brands)
  return _internal_brands().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::Brand* GetBrandsResponse::add_brands() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::Brand* _add = _internal_mutable_brands()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse.brands)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Brand>& GetBrandsResponse::brands() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse.brands)
  return _internal_brands();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Brand>&
GetBrandsResponse::_internal_brands() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.brands_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::Brand>*
GetBrandsResponse::_internal_mutable_brands() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.brands_;
}

// .tinkoff.public_.invest.api.contract.v1.PageResponse paging = 2;
inline bool GetBrandsResponse::has_paging() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.paging_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::PageResponse& GetBrandsResponse::_internal_paging() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::PageResponse* p = _impl_.paging_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::PageResponse&>(::tinkoff::public_::invest::api::contract::v1::_PageResponse_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::PageResponse& GetBrandsResponse::paging() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse.paging)
  return _internal_paging();
}
inline void GetBrandsResponse::unsafe_arena_set_allocated_paging(::tinkoff::public_::invest::api::contract::v1::PageResponse* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.paging_);
  }
  _impl_.paging_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::PageResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse.paging)
}
inline ::tinkoff::public_::invest::api::contract::v1::PageResponse* GetBrandsResponse::release_paging() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::PageResponse* released = _impl_.paging_;
  _impl_.paging_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::PageResponse* GetBrandsResponse::unsafe_arena_release_paging() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse.paging)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::PageResponse* temp = _impl_.paging_;
  _impl_.paging_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::PageResponse* GetBrandsResponse::_internal_mutable_paging() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.paging_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PageResponse>(GetArena());
    _impl_.paging_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::PageResponse*>(p);
  }
  return _impl_.paging_;
}
inline ::tinkoff::public_::invest::api::contract::v1::PageResponse* GetBrandsResponse::mutable_paging() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::PageResponse* _msg = _internal_mutable_paging();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse.paging)
  return _msg;
}
inline void GetBrandsResponse::set_allocated_paging(::tinkoff::public_::invest::api::contract::v1::PageResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.paging_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.paging_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::PageResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetBrandsResponse.paging)
}

// -------------------------------------------------------------------

// GetAssetFundamentalsRequest

// repeated string assets = 1 [(.google.api.field_behavior) = REQUIRED];
inline int GetAssetFundamentalsRequest::_internal_assets_size() const {
  return _internal_assets().size();
}
inline int GetAssetFundamentalsRequest::assets_size() const {
  return _internal_assets_size();
}
inline void GetAssetFundamentalsRequest::clear_assets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.assets_.Clear();
}
inline std::string* GetAssetFundamentalsRequest::add_assets()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_assets()->Add();
  // @@protoc_insertion_point(field_add_mutable:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest.assets)
  return _s;
}
inline const std::string& GetAssetFundamentalsRequest::assets(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest.assets)
  return _internal_assets().Get(index);
}
inline std::string* GetAssetFundamentalsRequest::mutable_assets(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest.assets)
  return _internal_mutable_assets()->Mutable(index);
}
inline void GetAssetFundamentalsRequest::set_assets(int index, const std::string& value) {
  _internal_mutable_assets()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest.assets)
}
inline void GetAssetFundamentalsRequest::set_assets(int index, std::string&& value) {
  _internal_mutable_assets()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest.assets)
}
inline void GetAssetFundamentalsRequest::set_assets(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_assets()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest.assets)
}
inline void GetAssetFundamentalsRequest::set_assets(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_assets()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest.assets)
}
inline void GetAssetFundamentalsRequest::set_assets(int index, absl::string_view value) {
  _internal_mutable_assets()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest.assets)
}
inline void GetAssetFundamentalsRequest::add_assets(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_assets()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest.assets)
}
inline void GetAssetFundamentalsRequest::add_assets(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_assets()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest.assets)
}
inline void GetAssetFundamentalsRequest::add_assets(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_assets()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest.assets)
}
inline void GetAssetFundamentalsRequest::add_assets(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_assets()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest.assets)
}
inline void GetAssetFundamentalsRequest::add_assets(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_assets()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest.assets)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetAssetFundamentalsRequest::assets() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest.assets)
  return _internal_assets();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetAssetFundamentalsRequest::mutable_assets() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsRequest.assets)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_assets();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetAssetFundamentalsRequest::_internal_assets() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.assets_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetAssetFundamentalsRequest::_internal_mutable_assets() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.assets_;
}

// -------------------------------------------------------------------

// GetAssetFundamentalsResponse_StatisticResponse

// string asset_uid = 1;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_asset_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.asset_uid_.ClearToEmpty();
}
inline const std::string& GetAssetFundamentalsResponse_StatisticResponse::asset_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.asset_uid)
  return _internal_asset_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetAssetFundamentalsResponse_StatisticResponse::set_asset_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.asset_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.asset_uid)
}
inline std::string* GetAssetFundamentalsResponse_StatisticResponse::mutable_asset_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_asset_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.asset_uid)
  return _s;
}
inline const std::string& GetAssetFundamentalsResponse_StatisticResponse::_internal_asset_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.asset_uid_.Get();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_asset_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.asset_uid_.Set(value, GetArena());
}
inline std::string* GetAssetFundamentalsResponse_StatisticResponse::_internal_mutable_asset_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.asset_uid_.Mutable( GetArena());
}
inline std::string* GetAssetFundamentalsResponse_StatisticResponse::release_asset_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.asset_uid)
  return _impl_.asset_uid_.Release();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_allocated_asset_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.asset_uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.asset_uid_.IsDefault()) {
          _impl_.asset_uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.asset_uid)
}

// string currency = 2;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.ClearToEmpty();
}
inline const std::string& GetAssetFundamentalsResponse_StatisticResponse::currency() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.currency)
  return _internal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetAssetFundamentalsResponse_StatisticResponse::set_currency(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.currency)
}
inline std::string* GetAssetFundamentalsResponse_StatisticResponse::mutable_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.currency)
  return _s;
}
inline const std::string& GetAssetFundamentalsResponse_StatisticResponse::_internal_currency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.currency_.Get();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_currency(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(value, GetArena());
}
inline std::string* GetAssetFundamentalsResponse_StatisticResponse::_internal_mutable_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.currency_.Mutable( GetArena());
}
inline std::string* GetAssetFundamentalsResponse_StatisticResponse::release_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.currency)
  return _impl_.currency_.Release();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_allocated_currency(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.currency_.IsDefault()) {
          _impl_.currency_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.currency)
}

// double market_capitalization = 3;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_market_capitalization() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.market_capitalization_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::market_capitalization() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.market_capitalization)
  return _internal_market_capitalization();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_market_capitalization(double value) {
  _internal_set_market_capitalization(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.market_capitalization)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_market_capitalization() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.market_capitalization_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_market_capitalization(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.market_capitalization_ = value;
}

// double high_price_last_52_weeks = 4;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_high_price_last_52_weeks() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.high_price_last_52_weeks_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::high_price_last_52_weeks() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.high_price_last_52_weeks)
  return _internal_high_price_last_52_weeks();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_high_price_last_52_weeks(double value) {
  _internal_set_high_price_last_52_weeks(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.high_price_last_52_weeks)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_high_price_last_52_weeks() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.high_price_last_52_weeks_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_high_price_last_52_weeks(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.high_price_last_52_weeks_ = value;
}

// double low_price_last_52_weeks = 5;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_low_price_last_52_weeks() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.low_price_last_52_weeks_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::low_price_last_52_weeks() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.low_price_last_52_weeks)
  return _internal_low_price_last_52_weeks();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_low_price_last_52_weeks(double value) {
  _internal_set_low_price_last_52_weeks(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.low_price_last_52_weeks)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_low_price_last_52_weeks() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.low_price_last_52_weeks_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_low_price_last_52_weeks(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.low_price_last_52_weeks_ = value;
}

// double average_daily_volume_last_10_days = 6;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_average_daily_volume_last_10_days() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.average_daily_volume_last_10_days_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::average_daily_volume_last_10_days() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.average_daily_volume_last_10_days)
  return _internal_average_daily_volume_last_10_days();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_average_daily_volume_last_10_days(double value) {
  _internal_set_average_daily_volume_last_10_days(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.average_daily_volume_last_10_days)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_average_daily_volume_last_10_days() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.average_daily_volume_last_10_days_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_average_daily_volume_last_10_days(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.average_daily_volume_last_10_days_ = value;
}

// double average_daily_volume_last_4_weeks = 7;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_average_daily_volume_last_4_weeks() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.average_daily_volume_last_4_weeks_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::average_daily_volume_last_4_weeks() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.average_daily_volume_last_4_weeks)
  return _internal_average_daily_volume_last_4_weeks();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_average_daily_volume_last_4_weeks(double value) {
  _internal_set_average_daily_volume_last_4_weeks(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.average_daily_volume_last_4_weeks)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_average_daily_volume_last_4_weeks() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.average_daily_volume_last_4_weeks_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_average_daily_volume_last_4_weeks(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.average_daily_volume_last_4_weeks_ = value;
}

// double beta = 8;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_beta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.beta_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::beta() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.beta)
  return _internal_beta();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_beta(double value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.beta)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_beta() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.beta_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_beta(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.beta_ = value;
}

// double free_float = 9;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_free_float() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.free_float_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::free_float() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.free_float)
  return _internal_free_float();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_free_float(double value) {
  _internal_set_free_float(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.free_float)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_free_float() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.free_float_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_free_float(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.free_float_ = value;
}

// double forward_annual_dividend_yield = 10;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_forward_annual_dividend_yield() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.forward_annual_dividend_yield_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::forward_annual_dividend_yield() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.forward_annual_dividend_yield)
  return _internal_forward_annual_dividend_yield();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_forward_annual_dividend_yield(double value) {
  _internal_set_forward_annual_dividend_yield(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.forward_annual_dividend_yield)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_forward_annual_dividend_yield() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.forward_annual_dividend_yield_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_forward_annual_dividend_yield(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.forward_annual_dividend_yield_ = value;
}

// double shares_outstanding = 11;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_shares_outstanding() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.shares_outstanding_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::shares_outstanding() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.shares_outstanding)
  return _internal_shares_outstanding();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_shares_outstanding(double value) {
  _internal_set_shares_outstanding(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.shares_outstanding)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_shares_outstanding() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.shares_outstanding_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_shares_outstanding(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.shares_outstanding_ = value;
}

// double revenue_ttm = 12;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_revenue_ttm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.revenue_ttm_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::revenue_ttm() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.revenue_ttm)
  return _internal_revenue_ttm();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_revenue_ttm(double value) {
  _internal_set_revenue_ttm(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.revenue_ttm)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_revenue_ttm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.revenue_ttm_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_revenue_ttm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.revenue_ttm_ = value;
}

// double ebitda_ttm = 13;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_ebitda_ttm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ebitda_ttm_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::ebitda_ttm() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.ebitda_ttm)
  return _internal_ebitda_ttm();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_ebitda_ttm(double value) {
  _internal_set_ebitda_ttm(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.ebitda_ttm)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_ebitda_ttm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ebitda_ttm_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_ebitda_ttm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ebitda_ttm_ = value;
}

// double net_income_ttm = 14;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_net_income_ttm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.net_income_ttm_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::net_income_ttm() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.net_income_ttm)
  return _internal_net_income_ttm();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_net_income_ttm(double value) {
  _internal_set_net_income_ttm(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.net_income_ttm)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_net_income_ttm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.net_income_ttm_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_net_income_ttm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.net_income_ttm_ = value;
}

// double eps_ttm = 15;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_eps_ttm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eps_ttm_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::eps_ttm() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.eps_ttm)
  return _internal_eps_ttm();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_eps_ttm(double value) {
  _internal_set_eps_ttm(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.eps_ttm)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_eps_ttm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eps_ttm_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_eps_ttm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.eps_ttm_ = value;
}

// double diluted_eps_ttm = 16;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_diluted_eps_ttm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.diluted_eps_ttm_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::diluted_eps_ttm() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.diluted_eps_ttm)
  return _internal_diluted_eps_ttm();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_diluted_eps_ttm(double value) {
  _internal_set_diluted_eps_ttm(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.diluted_eps_ttm)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_diluted_eps_ttm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.diluted_eps_ttm_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_diluted_eps_ttm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.diluted_eps_ttm_ = value;
}

// double free_cash_flow_ttm = 17;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_free_cash_flow_ttm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.free_cash_flow_ttm_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::free_cash_flow_ttm() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.free_cash_flow_ttm)
  return _internal_free_cash_flow_ttm();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_free_cash_flow_ttm(double value) {
  _internal_set_free_cash_flow_ttm(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.free_cash_flow_ttm)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_free_cash_flow_ttm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.free_cash_flow_ttm_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_free_cash_flow_ttm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.free_cash_flow_ttm_ = value;
}

// double five_year_annual_revenue_growth_rate = 18;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_five_year_annual_revenue_growth_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.five_year_annual_revenue_growth_rate_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::five_year_annual_revenue_growth_rate() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.five_year_annual_revenue_growth_rate)
  return _internal_five_year_annual_revenue_growth_rate();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_five_year_annual_revenue_growth_rate(double value) {
  _internal_set_five_year_annual_revenue_growth_rate(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.five_year_annual_revenue_growth_rate)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_five_year_annual_revenue_growth_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.five_year_annual_revenue_growth_rate_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_five_year_annual_revenue_growth_rate(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.five_year_annual_revenue_growth_rate_ = value;
}

// double three_year_annual_revenue_growth_rate = 19;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_three_year_annual_revenue_growth_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.three_year_annual_revenue_growth_rate_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::three_year_annual_revenue_growth_rate() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.three_year_annual_revenue_growth_rate)
  return _internal_three_year_annual_revenue_growth_rate();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_three_year_annual_revenue_growth_rate(double value) {
  _internal_set_three_year_annual_revenue_growth_rate(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.three_year_annual_revenue_growth_rate)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_three_year_annual_revenue_growth_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.three_year_annual_revenue_growth_rate_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_three_year_annual_revenue_growth_rate(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.three_year_annual_revenue_growth_rate_ = value;
}

// double pe_ratio_ttm = 20;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_pe_ratio_ttm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pe_ratio_ttm_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::pe_ratio_ttm() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.pe_ratio_ttm)
  return _internal_pe_ratio_ttm();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_pe_ratio_ttm(double value) {
  _internal_set_pe_ratio_ttm(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.pe_ratio_ttm)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_pe_ratio_ttm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pe_ratio_ttm_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_pe_ratio_ttm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pe_ratio_ttm_ = value;
}

// double price_to_sales_ttm = 21;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_price_to_sales_ttm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.price_to_sales_ttm_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::price_to_sales_ttm() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.price_to_sales_ttm)
  return _internal_price_to_sales_ttm();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_price_to_sales_ttm(double value) {
  _internal_set_price_to_sales_ttm(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.price_to_sales_ttm)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_price_to_sales_ttm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.price_to_sales_ttm_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_price_to_sales_ttm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.price_to_sales_ttm_ = value;
}

// double price_to_book_ttm = 22;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_price_to_book_ttm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.price_to_book_ttm_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::price_to_book_ttm() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.price_to_book_ttm)
  return _internal_price_to_book_ttm();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_price_to_book_ttm(double value) {
  _internal_set_price_to_book_ttm(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.price_to_book_ttm)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_price_to_book_ttm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.price_to_book_ttm_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_price_to_book_ttm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.price_to_book_ttm_ = value;
}

// double price_to_free_cash_flow_ttm = 23;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_price_to_free_cash_flow_ttm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.price_to_free_cash_flow_ttm_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::price_to_free_cash_flow_ttm() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.price_to_free_cash_flow_ttm)
  return _internal_price_to_free_cash_flow_ttm();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_price_to_free_cash_flow_ttm(double value) {
  _internal_set_price_to_free_cash_flow_ttm(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.price_to_free_cash_flow_ttm)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_price_to_free_cash_flow_ttm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.price_to_free_cash_flow_ttm_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_price_to_free_cash_flow_ttm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.price_to_free_cash_flow_ttm_ = value;
}

// double total_enterprise_value_mrq = 24;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_total_enterprise_value_mrq() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_enterprise_value_mrq_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::total_enterprise_value_mrq() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.total_enterprise_value_mrq)
  return _internal_total_enterprise_value_mrq();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_total_enterprise_value_mrq(double value) {
  _internal_set_total_enterprise_value_mrq(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.total_enterprise_value_mrq)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_total_enterprise_value_mrq() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_enterprise_value_mrq_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_total_enterprise_value_mrq(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_enterprise_value_mrq_ = value;
}

// double ev_to_ebitda_mrq = 25;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_ev_to_ebitda_mrq() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ev_to_ebitda_mrq_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::ev_to_ebitda_mrq() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.ev_to_ebitda_mrq)
  return _internal_ev_to_ebitda_mrq();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_ev_to_ebitda_mrq(double value) {
  _internal_set_ev_to_ebitda_mrq(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.ev_to_ebitda_mrq)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_ev_to_ebitda_mrq() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ev_to_ebitda_mrq_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_ev_to_ebitda_mrq(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ev_to_ebitda_mrq_ = value;
}

// double net_margin_mrq = 26;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_net_margin_mrq() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.net_margin_mrq_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::net_margin_mrq() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.net_margin_mrq)
  return _internal_net_margin_mrq();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_net_margin_mrq(double value) {
  _internal_set_net_margin_mrq(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.net_margin_mrq)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_net_margin_mrq() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.net_margin_mrq_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_net_margin_mrq(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.net_margin_mrq_ = value;
}

// double net_interest_margin_mrq = 27;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_net_interest_margin_mrq() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.net_interest_margin_mrq_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::net_interest_margin_mrq() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.net_interest_margin_mrq)
  return _internal_net_interest_margin_mrq();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_net_interest_margin_mrq(double value) {
  _internal_set_net_interest_margin_mrq(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.net_interest_margin_mrq)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_net_interest_margin_mrq() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.net_interest_margin_mrq_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_net_interest_margin_mrq(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.net_interest_margin_mrq_ = value;
}

// double roe = 28;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_roe() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.roe_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::roe() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.roe)
  return _internal_roe();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_roe(double value) {
  _internal_set_roe(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.roe)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_roe() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.roe_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_roe(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.roe_ = value;
}

// double roa = 29;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_roa() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.roa_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::roa() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.roa)
  return _internal_roa();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_roa(double value) {
  _internal_set_roa(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.roa)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_roa() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.roa_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_roa(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.roa_ = value;
}

// double roic = 30;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_roic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.roic_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::roic() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.roic)
  return _internal_roic();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_roic(double value) {
  _internal_set_roic(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.roic)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_roic() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.roic_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_roic(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.roic_ = value;
}

// double total_debt_mrq = 31;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_total_debt_mrq() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_debt_mrq_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::total_debt_mrq() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.total_debt_mrq)
  return _internal_total_debt_mrq();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_total_debt_mrq(double value) {
  _internal_set_total_debt_mrq(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.total_debt_mrq)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_total_debt_mrq() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_debt_mrq_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_total_debt_mrq(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_debt_mrq_ = value;
}

// double total_debt_to_equity_mrq = 32;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_total_debt_to_equity_mrq() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_debt_to_equity_mrq_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::total_debt_to_equity_mrq() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.total_debt_to_equity_mrq)
  return _internal_total_debt_to_equity_mrq();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_total_debt_to_equity_mrq(double value) {
  _internal_set_total_debt_to_equity_mrq(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.total_debt_to_equity_mrq)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_total_debt_to_equity_mrq() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_debt_to_equity_mrq_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_total_debt_to_equity_mrq(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_debt_to_equity_mrq_ = value;
}

// double total_debt_to_ebitda_mrq = 33;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_total_debt_to_ebitda_mrq() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_debt_to_ebitda_mrq_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::total_debt_to_ebitda_mrq() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.total_debt_to_ebitda_mrq)
  return _internal_total_debt_to_ebitda_mrq();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_total_debt_to_ebitda_mrq(double value) {
  _internal_set_total_debt_to_ebitda_mrq(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.total_debt_to_ebitda_mrq)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_total_debt_to_ebitda_mrq() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_debt_to_ebitda_mrq_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_total_debt_to_ebitda_mrq(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_debt_to_ebitda_mrq_ = value;
}

// double free_cash_flow_to_price = 34;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_free_cash_flow_to_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.free_cash_flow_to_price_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::free_cash_flow_to_price() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.free_cash_flow_to_price)
  return _internal_free_cash_flow_to_price();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_free_cash_flow_to_price(double value) {
  _internal_set_free_cash_flow_to_price(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.free_cash_flow_to_price)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_free_cash_flow_to_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.free_cash_flow_to_price_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_free_cash_flow_to_price(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.free_cash_flow_to_price_ = value;
}

// double net_debt_to_ebitda = 35;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_net_debt_to_ebitda() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.net_debt_to_ebitda_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::net_debt_to_ebitda() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.net_debt_to_ebitda)
  return _internal_net_debt_to_ebitda();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_net_debt_to_ebitda(double value) {
  _internal_set_net_debt_to_ebitda(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.net_debt_to_ebitda)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_net_debt_to_ebitda() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.net_debt_to_ebitda_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_net_debt_to_ebitda(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.net_debt_to_ebitda_ = value;
}

// double current_ratio_mrq = 36;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_current_ratio_mrq() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.current_ratio_mrq_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::current_ratio_mrq() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.current_ratio_mrq)
  return _internal_current_ratio_mrq();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_current_ratio_mrq(double value) {
  _internal_set_current_ratio_mrq(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.current_ratio_mrq)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_current_ratio_mrq() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.current_ratio_mrq_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_current_ratio_mrq(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.current_ratio_mrq_ = value;
}

// double fixed_charge_coverage_ratio_fy = 37;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_fixed_charge_coverage_ratio_fy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fixed_charge_coverage_ratio_fy_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::fixed_charge_coverage_ratio_fy() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.fixed_charge_coverage_ratio_fy)
  return _internal_fixed_charge_coverage_ratio_fy();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_fixed_charge_coverage_ratio_fy(double value) {
  _internal_set_fixed_charge_coverage_ratio_fy(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.fixed_charge_coverage_ratio_fy)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_fixed_charge_coverage_ratio_fy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fixed_charge_coverage_ratio_fy_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_fixed_charge_coverage_ratio_fy(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fixed_charge_coverage_ratio_fy_ = value;
}

// double dividend_yield_daily_ttm = 38;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_dividend_yield_daily_ttm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dividend_yield_daily_ttm_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::dividend_yield_daily_ttm() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.dividend_yield_daily_ttm)
  return _internal_dividend_yield_daily_ttm();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_dividend_yield_daily_ttm(double value) {
  _internal_set_dividend_yield_daily_ttm(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.dividend_yield_daily_ttm)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_dividend_yield_daily_ttm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dividend_yield_daily_ttm_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_dividend_yield_daily_ttm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dividend_yield_daily_ttm_ = value;
}

// double dividend_rate_ttm = 39;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_dividend_rate_ttm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dividend_rate_ttm_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::dividend_rate_ttm() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.dividend_rate_ttm)
  return _internal_dividend_rate_ttm();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_dividend_rate_ttm(double value) {
  _internal_set_dividend_rate_ttm(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.dividend_rate_ttm)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_dividend_rate_ttm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dividend_rate_ttm_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_dividend_rate_ttm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dividend_rate_ttm_ = value;
}

// double dividends_per_share = 40;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_dividends_per_share() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dividends_per_share_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::dividends_per_share() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.dividends_per_share)
  return _internal_dividends_per_share();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_dividends_per_share(double value) {
  _internal_set_dividends_per_share(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.dividends_per_share)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_dividends_per_share() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dividends_per_share_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_dividends_per_share(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dividends_per_share_ = value;
}

// double five_years_average_dividend_yield = 41;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_five_years_average_dividend_yield() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.five_years_average_dividend_yield_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::five_years_average_dividend_yield() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.five_years_average_dividend_yield)
  return _internal_five_years_average_dividend_yield();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_five_years_average_dividend_yield(double value) {
  _internal_set_five_years_average_dividend_yield(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.five_years_average_dividend_yield)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_five_years_average_dividend_yield() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.five_years_average_dividend_yield_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_five_years_average_dividend_yield(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.five_years_average_dividend_yield_ = value;
}

// double five_year_annual_dividend_growth_rate = 42;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_five_year_annual_dividend_growth_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.five_year_annual_dividend_growth_rate_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::five_year_annual_dividend_growth_rate() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.five_year_annual_dividend_growth_rate)
  return _internal_five_year_annual_dividend_growth_rate();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_five_year_annual_dividend_growth_rate(double value) {
  _internal_set_five_year_annual_dividend_growth_rate(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.five_year_annual_dividend_growth_rate)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_five_year_annual_dividend_growth_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.five_year_annual_dividend_growth_rate_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_five_year_annual_dividend_growth_rate(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.five_year_annual_dividend_growth_rate_ = value;
}

// double dividend_payout_ratio_fy = 43;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_dividend_payout_ratio_fy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dividend_payout_ratio_fy_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::dividend_payout_ratio_fy() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.dividend_payout_ratio_fy)
  return _internal_dividend_payout_ratio_fy();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_dividend_payout_ratio_fy(double value) {
  _internal_set_dividend_payout_ratio_fy(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.dividend_payout_ratio_fy)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_dividend_payout_ratio_fy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dividend_payout_ratio_fy_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_dividend_payout_ratio_fy(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dividend_payout_ratio_fy_ = value;
}

// double buy_back_ttm = 44;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_buy_back_ttm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.buy_back_ttm_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::buy_back_ttm() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.buy_back_ttm)
  return _internal_buy_back_ttm();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_buy_back_ttm(double value) {
  _internal_set_buy_back_ttm(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.buy_back_ttm)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_buy_back_ttm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.buy_back_ttm_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_buy_back_ttm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.buy_back_ttm_ = value;
}

// double one_year_annual_revenue_growth_rate = 45;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_one_year_annual_revenue_growth_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.one_year_annual_revenue_growth_rate_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::one_year_annual_revenue_growth_rate() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.one_year_annual_revenue_growth_rate)
  return _internal_one_year_annual_revenue_growth_rate();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_one_year_annual_revenue_growth_rate(double value) {
  _internal_set_one_year_annual_revenue_growth_rate(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.one_year_annual_revenue_growth_rate)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_one_year_annual_revenue_growth_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.one_year_annual_revenue_growth_rate_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_one_year_annual_revenue_growth_rate(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.one_year_annual_revenue_growth_rate_ = value;
}

// string domicile_indicator_code = 46;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_domicile_indicator_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.domicile_indicator_code_.ClearToEmpty();
}
inline const std::string& GetAssetFundamentalsResponse_StatisticResponse::domicile_indicator_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.domicile_indicator_code)
  return _internal_domicile_indicator_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetAssetFundamentalsResponse_StatisticResponse::set_domicile_indicator_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.domicile_indicator_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.domicile_indicator_code)
}
inline std::string* GetAssetFundamentalsResponse_StatisticResponse::mutable_domicile_indicator_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_domicile_indicator_code();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.domicile_indicator_code)
  return _s;
}
inline const std::string& GetAssetFundamentalsResponse_StatisticResponse::_internal_domicile_indicator_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.domicile_indicator_code_.Get();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_domicile_indicator_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.domicile_indicator_code_.Set(value, GetArena());
}
inline std::string* GetAssetFundamentalsResponse_StatisticResponse::_internal_mutable_domicile_indicator_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.domicile_indicator_code_.Mutable( GetArena());
}
inline std::string* GetAssetFundamentalsResponse_StatisticResponse::release_domicile_indicator_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.domicile_indicator_code)
  return _impl_.domicile_indicator_code_.Release();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_allocated_domicile_indicator_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.domicile_indicator_code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.domicile_indicator_code_.IsDefault()) {
          _impl_.domicile_indicator_code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.domicile_indicator_code)
}

// double adr_to_common_share_ratio = 47;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_adr_to_common_share_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.adr_to_common_share_ratio_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::adr_to_common_share_ratio() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.adr_to_common_share_ratio)
  return _internal_adr_to_common_share_ratio();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_adr_to_common_share_ratio(double value) {
  _internal_set_adr_to_common_share_ratio(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.adr_to_common_share_ratio)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_adr_to_common_share_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.adr_to_common_share_ratio_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_adr_to_common_share_ratio(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.adr_to_common_share_ratio_ = value;
}

// double number_of_employees = 48;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_number_of_employees() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.number_of_employees_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::number_of_employees() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.number_of_employees)
  return _internal_number_of_employees();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_number_of_employees(double value) {
  _internal_set_number_of_employees(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.number_of_employees)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_number_of_employees() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.number_of_employees_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_number_of_employees(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.number_of_employees_ = value;
}

// .google.protobuf.Timestamp ex_dividend_date = 49;
inline bool GetAssetFundamentalsResponse_StatisticResponse::has_ex_dividend_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ex_dividend_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetAssetFundamentalsResponse_StatisticResponse::_internal_ex_dividend_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.ex_dividend_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetAssetFundamentalsResponse_StatisticResponse::ex_dividend_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.ex_dividend_date)
  return _internal_ex_dividend_date();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::unsafe_arena_set_allocated_ex_dividend_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ex_dividend_date_);
  }
  _impl_.ex_dividend_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.ex_dividend_date)
}
inline ::google::protobuf::Timestamp* GetAssetFundamentalsResponse_StatisticResponse::release_ex_dividend_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.ex_dividend_date_;
  _impl_.ex_dividend_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetAssetFundamentalsResponse_StatisticResponse::unsafe_arena_release_ex_dividend_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.ex_dividend_date)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.ex_dividend_date_;
  _impl_.ex_dividend_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetAssetFundamentalsResponse_StatisticResponse::_internal_mutable_ex_dividend_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ex_dividend_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.ex_dividend_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.ex_dividend_date_;
}
inline ::google::protobuf::Timestamp* GetAssetFundamentalsResponse_StatisticResponse::mutable_ex_dividend_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_ex_dividend_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.ex_dividend_date)
  return _msg;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_allocated_ex_dividend_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ex_dividend_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.ex_dividend_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.ex_dividend_date)
}

// .google.protobuf.Timestamp fiscal_period_start_date = 50;
inline bool GetAssetFundamentalsResponse_StatisticResponse::has_fiscal_period_start_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fiscal_period_start_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetAssetFundamentalsResponse_StatisticResponse::_internal_fiscal_period_start_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.fiscal_period_start_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetAssetFundamentalsResponse_StatisticResponse::fiscal_period_start_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.fiscal_period_start_date)
  return _internal_fiscal_period_start_date();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::unsafe_arena_set_allocated_fiscal_period_start_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fiscal_period_start_date_);
  }
  _impl_.fiscal_period_start_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.fiscal_period_start_date)
}
inline ::google::protobuf::Timestamp* GetAssetFundamentalsResponse_StatisticResponse::release_fiscal_period_start_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.fiscal_period_start_date_;
  _impl_.fiscal_period_start_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetAssetFundamentalsResponse_StatisticResponse::unsafe_arena_release_fiscal_period_start_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.fiscal_period_start_date)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.fiscal_period_start_date_;
  _impl_.fiscal_period_start_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetAssetFundamentalsResponse_StatisticResponse::_internal_mutable_fiscal_period_start_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.fiscal_period_start_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.fiscal_period_start_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.fiscal_period_start_date_;
}
inline ::google::protobuf::Timestamp* GetAssetFundamentalsResponse_StatisticResponse::mutable_fiscal_period_start_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_fiscal_period_start_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.fiscal_period_start_date)
  return _msg;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_allocated_fiscal_period_start_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fiscal_period_start_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.fiscal_period_start_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.fiscal_period_start_date)
}

// .google.protobuf.Timestamp fiscal_period_end_date = 51;
inline bool GetAssetFundamentalsResponse_StatisticResponse::has_fiscal_period_end_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fiscal_period_end_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetAssetFundamentalsResponse_StatisticResponse::_internal_fiscal_period_end_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.fiscal_period_end_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetAssetFundamentalsResponse_StatisticResponse::fiscal_period_end_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.fiscal_period_end_date)
  return _internal_fiscal_period_end_date();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::unsafe_arena_set_allocated_fiscal_period_end_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fiscal_period_end_date_);
  }
  _impl_.fiscal_period_end_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.fiscal_period_end_date)
}
inline ::google::protobuf::Timestamp* GetAssetFundamentalsResponse_StatisticResponse::release_fiscal_period_end_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* released = _impl_.fiscal_period_end_date_;
  _impl_.fiscal_period_end_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetAssetFundamentalsResponse_StatisticResponse::unsafe_arena_release_fiscal_period_end_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.fiscal_period_end_date)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* temp = _impl_.fiscal_period_end_date_;
  _impl_.fiscal_period_end_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetAssetFundamentalsResponse_StatisticResponse::_internal_mutable_fiscal_period_end_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.fiscal_period_end_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.fiscal_period_end_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.fiscal_period_end_date_;
}
inline ::google::protobuf::Timestamp* GetAssetFundamentalsResponse_StatisticResponse::mutable_fiscal_period_end_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_fiscal_period_end_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.fiscal_period_end_date)
  return _msg;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_allocated_fiscal_period_end_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fiscal_period_end_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.fiscal_period_end_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.fiscal_period_end_date)
}

// double revenue_change_five_years = 53;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_revenue_change_five_years() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.revenue_change_five_years_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::revenue_change_five_years() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.revenue_change_five_years)
  return _internal_revenue_change_five_years();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_revenue_change_five_years(double value) {
  _internal_set_revenue_change_five_years(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.revenue_change_five_years)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_revenue_change_five_years() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.revenue_change_five_years_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_revenue_change_five_years(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.revenue_change_five_years_ = value;
}

// double eps_change_five_years = 54;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_eps_change_five_years() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eps_change_five_years_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::eps_change_five_years() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.eps_change_five_years)
  return _internal_eps_change_five_years();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_eps_change_five_years(double value) {
  _internal_set_eps_change_five_years(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.eps_change_five_years)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_eps_change_five_years() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eps_change_five_years_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_eps_change_five_years(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.eps_change_five_years_ = value;
}

// double ebitda_change_five_years = 55;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_ebitda_change_five_years() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ebitda_change_five_years_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::ebitda_change_five_years() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.ebitda_change_five_years)
  return _internal_ebitda_change_five_years();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_ebitda_change_five_years(double value) {
  _internal_set_ebitda_change_five_years(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.ebitda_change_five_years)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_ebitda_change_five_years() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ebitda_change_five_years_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_ebitda_change_five_years(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ebitda_change_five_years_ = value;
}

// double total_debt_change_five_years = 56;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_total_debt_change_five_years() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_debt_change_five_years_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::total_debt_change_five_years() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.total_debt_change_five_years)
  return _internal_total_debt_change_five_years();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_total_debt_change_five_years(double value) {
  _internal_set_total_debt_change_five_years(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.total_debt_change_five_years)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_total_debt_change_five_years() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_debt_change_five_years_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_total_debt_change_five_years(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_debt_change_five_years_ = value;
}

// double ev_to_sales = 57;
inline void GetAssetFundamentalsResponse_StatisticResponse::clear_ev_to_sales() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ev_to_sales_ = 0;
}
inline double GetAssetFundamentalsResponse_StatisticResponse::ev_to_sales() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.ev_to_sales)
  return _internal_ev_to_sales();
}
inline void GetAssetFundamentalsResponse_StatisticResponse::set_ev_to_sales(double value) {
  _internal_set_ev_to_sales(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.ev_to_sales)
}
inline double GetAssetFundamentalsResponse_StatisticResponse::_internal_ev_to_sales() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ev_to_sales_;
}
inline void GetAssetFundamentalsResponse_StatisticResponse::_internal_set_ev_to_sales(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ev_to_sales_ = value;
}

// -------------------------------------------------------------------

// GetAssetFundamentalsResponse

// repeated .tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse fundamentals = 1;
inline int GetAssetFundamentalsResponse::_internal_fundamentals_size() const {
  return _internal_fundamentals().size();
}
inline int GetAssetFundamentalsResponse::fundamentals_size() const {
  return _internal_fundamentals_size();
}
inline void GetAssetFundamentalsResponse::clear_fundamentals() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fundamentals_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse* GetAssetFundamentalsResponse::mutable_fundamentals(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.fundamentals)
  return _internal_mutable_fundamentals()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse>* GetAssetFundamentalsResponse::mutable_fundamentals()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.fundamentals)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_fundamentals();
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse& GetAssetFundamentalsResponse::fundamentals(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.fundamentals)
  return _internal_fundamentals().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse* GetAssetFundamentalsResponse::add_fundamentals() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse* _add = _internal_mutable_fundamentals()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.fundamentals)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse>& GetAssetFundamentalsResponse::fundamentals() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.GetAssetFundamentalsResponse.fundamentals)
  return _internal_fundamentals();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse>&
GetAssetFundamentalsResponse::_internal_fundamentals() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fundamentals_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse>*
GetAssetFundamentalsResponse::_internal_mutable_fundamentals() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.fundamentals_;
}

// -------------------------------------------------------------------

// GetAssetReportsRequest

// string instrument_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void GetAssetReportsRequest::clear_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_id_.ClearToEmpty();
}
inline const std::string& GetAssetReportsRequest::instrument_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest.instrument_id)
  return _internal_instrument_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetAssetReportsRequest::set_instrument_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest.instrument_id)
}
inline std::string* GetAssetReportsRequest::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest.instrument_id)
  return _s;
}
inline const std::string& GetAssetReportsRequest::_internal_instrument_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instrument_id_.Get();
}
inline void GetAssetReportsRequest::_internal_set_instrument_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_id_.Set(value, GetArena());
}
inline std::string* GetAssetReportsRequest::_internal_mutable_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.instrument_id_.Mutable( GetArena());
}
inline std::string* GetAssetReportsRequest::release_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest.instrument_id)
  return _impl_.instrument_id_.Release();
}
inline void GetAssetReportsRequest::set_allocated_instrument_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.instrument_id_.IsDefault()) {
          _impl_.instrument_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest.instrument_id)
}

// optional .google.protobuf.Timestamp from = 2;
inline bool GetAssetReportsRequest::has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.from_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetAssetReportsRequest::_internal_from() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetAssetReportsRequest::from() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest.from)
  return _internal_from();
}
inline void GetAssetReportsRequest::unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest.from)
}
inline ::google::protobuf::Timestamp* GetAssetReportsRequest::release_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.from_;
  _impl_.from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetAssetReportsRequest::unsafe_arena_release_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest.from)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetAssetReportsRequest::_internal_mutable_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.from_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.from_;
}
inline ::google::protobuf::Timestamp* GetAssetReportsRequest::mutable_from() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest.from)
  return _msg;
}
inline void GetAssetReportsRequest::set_allocated_from(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest.from)
}

// optional .google.protobuf.Timestamp to = 3;
inline bool GetAssetReportsRequest::has_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.to_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetAssetReportsRequest::_internal_to() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetAssetReportsRequest::to() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest.to)
  return _internal_to();
}
inline void GetAssetReportsRequest::unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest.to)
}
inline ::google::protobuf::Timestamp* GetAssetReportsRequest::release_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetAssetReportsRequest::unsafe_arena_release_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest.to)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetAssetReportsRequest::_internal_mutable_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.to_;
}
inline ::google::protobuf::Timestamp* GetAssetReportsRequest::mutable_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest.to)
  return _msg;
}
inline void GetAssetReportsRequest::set_allocated_to(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetAssetReportsRequest.to)
}

// -------------------------------------------------------------------

// GetAssetReportsResponse_GetAssetReportsEvent

// string instrument_id = 1;
inline void GetAssetReportsResponse_GetAssetReportsEvent::clear_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_id_.ClearToEmpty();
}
inline const std::string& GetAssetReportsResponse_GetAssetReportsEvent::instrument_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent.instrument_id)
  return _internal_instrument_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetAssetReportsResponse_GetAssetReportsEvent::set_instrument_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent.instrument_id)
}
inline std::string* GetAssetReportsResponse_GetAssetReportsEvent::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent.instrument_id)
  return _s;
}
inline const std::string& GetAssetReportsResponse_GetAssetReportsEvent::_internal_instrument_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instrument_id_.Get();
}
inline void GetAssetReportsResponse_GetAssetReportsEvent::_internal_set_instrument_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_id_.Set(value, GetArena());
}
inline std::string* GetAssetReportsResponse_GetAssetReportsEvent::_internal_mutable_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.instrument_id_.Mutable( GetArena());
}
inline std::string* GetAssetReportsResponse_GetAssetReportsEvent::release_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent.instrument_id)
  return _impl_.instrument_id_.Release();
}
inline void GetAssetReportsResponse_GetAssetReportsEvent::set_allocated_instrument_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.instrument_id_.IsDefault()) {
          _impl_.instrument_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent.instrument_id)
}

// .google.protobuf.Timestamp report_date = 2;
inline bool GetAssetReportsResponse_GetAssetReportsEvent::has_report_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.report_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetAssetReportsResponse_GetAssetReportsEvent::_internal_report_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.report_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetAssetReportsResponse_GetAssetReportsEvent::report_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent.report_date)
  return _internal_report_date();
}
inline void GetAssetReportsResponse_GetAssetReportsEvent::unsafe_arena_set_allocated_report_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.report_date_);
  }
  _impl_.report_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent.report_date)
}
inline ::google::protobuf::Timestamp* GetAssetReportsResponse_GetAssetReportsEvent::release_report_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.report_date_;
  _impl_.report_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetAssetReportsResponse_GetAssetReportsEvent::unsafe_arena_release_report_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent.report_date)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.report_date_;
  _impl_.report_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetAssetReportsResponse_GetAssetReportsEvent::_internal_mutable_report_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.report_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.report_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.report_date_;
}
inline ::google::protobuf::Timestamp* GetAssetReportsResponse_GetAssetReportsEvent::mutable_report_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_report_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent.report_date)
  return _msg;
}
inline void GetAssetReportsResponse_GetAssetReportsEvent::set_allocated_report_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.report_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.report_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent.report_date)
}

// int32 period_year = 3;
inline void GetAssetReportsResponse_GetAssetReportsEvent::clear_period_year() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.period_year_ = 0;
}
inline ::int32_t GetAssetReportsResponse_GetAssetReportsEvent::period_year() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent.period_year)
  return _internal_period_year();
}
inline void GetAssetReportsResponse_GetAssetReportsEvent::set_period_year(::int32_t value) {
  _internal_set_period_year(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent.period_year)
}
inline ::int32_t GetAssetReportsResponse_GetAssetReportsEvent::_internal_period_year() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.period_year_;
}
inline void GetAssetReportsResponse_GetAssetReportsEvent::_internal_set_period_year(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.period_year_ = value;
}

// int32 period_num = 4;
inline void GetAssetReportsResponse_GetAssetReportsEvent::clear_period_num() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.period_num_ = 0;
}
inline ::int32_t GetAssetReportsResponse_GetAssetReportsEvent::period_num() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent.period_num)
  return _internal_period_num();
}
inline void GetAssetReportsResponse_GetAssetReportsEvent::set_period_num(::int32_t value) {
  _internal_set_period_num(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent.period_num)
}
inline ::int32_t GetAssetReportsResponse_GetAssetReportsEvent::_internal_period_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.period_num_;
}
inline void GetAssetReportsResponse_GetAssetReportsEvent::_internal_set_period_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.period_num_ = value;
}

// .tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.AssetReportPeriodType period_type = 5;
inline void GetAssetReportsResponse_GetAssetReportsEvent::clear_period_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.period_type_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_AssetReportPeriodType GetAssetReportsResponse_GetAssetReportsEvent::period_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent.period_type)
  return _internal_period_type();
}
inline void GetAssetReportsResponse_GetAssetReportsEvent::set_period_type(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_AssetReportPeriodType value) {
  _internal_set_period_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent.period_type)
}
inline ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_AssetReportPeriodType GetAssetReportsResponse_GetAssetReportsEvent::_internal_period_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_AssetReportPeriodType>(_impl_.period_type_);
}
inline void GetAssetReportsResponse_GetAssetReportsEvent::_internal_set_period_type(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_AssetReportPeriodType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.period_type_ = value;
}

// .google.protobuf.Timestamp created_at = 6;
inline bool GetAssetReportsResponse_GetAssetReportsEvent::has_created_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.created_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetAssetReportsResponse_GetAssetReportsEvent::_internal_created_at() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetAssetReportsResponse_GetAssetReportsEvent::created_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent.created_at)
  return _internal_created_at();
}
inline void GetAssetReportsResponse_GetAssetReportsEvent::unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent.created_at)
}
inline ::google::protobuf::Timestamp* GetAssetReportsResponse_GetAssetReportsEvent::release_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetAssetReportsResponse_GetAssetReportsEvent::unsafe_arena_release_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent.created_at)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetAssetReportsResponse_GetAssetReportsEvent::_internal_mutable_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.created_at_;
}
inline ::google::protobuf::Timestamp* GetAssetReportsResponse_GetAssetReportsEvent::mutable_created_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent.created_at)
  return _msg;
}
inline void GetAssetReportsResponse_GetAssetReportsEvent::set_allocated_created_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent.created_at)
}

// -------------------------------------------------------------------

// GetAssetReportsResponse

// repeated .tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent events = 1;
inline int GetAssetReportsResponse::_internal_events_size() const {
  return _internal_events().size();
}
inline int GetAssetReportsResponse::events_size() const {
  return _internal_events_size();
}
inline void GetAssetReportsResponse::clear_events() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.events_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent* GetAssetReportsResponse::mutable_events(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.events)
  return _internal_mutable_events()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent>* GetAssetReportsResponse::mutable_events()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.events)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_events();
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent& GetAssetReportsResponse::events(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.events)
  return _internal_events().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent* GetAssetReportsResponse::add_events() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent* _add = _internal_mutable_events()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.events)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent>& GetAssetReportsResponse::events() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.GetAssetReportsResponse.events)
  return _internal_events();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent>&
GetAssetReportsResponse::_internal_events() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.events_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent>*
GetAssetReportsResponse::_internal_mutable_events() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.events_;
}

// -------------------------------------------------------------------

// GetConsensusForecastsRequest

// optional .tinkoff.public_.invest.api.contract.v1.Page paging = 1;
inline bool GetConsensusForecastsRequest::has_paging() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.paging_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Page& GetConsensusForecastsRequest::_internal_paging() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Page* p = _impl_.paging_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Page&>(::tinkoff::public_::invest::api::contract::v1::_Page_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Page& GetConsensusForecastsRequest::paging() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest.paging)
  return _internal_paging();
}
inline void GetConsensusForecastsRequest::unsafe_arena_set_allocated_paging(::tinkoff::public_::invest::api::contract::v1::Page* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.paging_);
  }
  _impl_.paging_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Page*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest.paging)
}
inline ::tinkoff::public_::invest::api::contract::v1::Page* GetConsensusForecastsRequest::release_paging() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Page* released = _impl_.paging_;
  _impl_.paging_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Page* GetConsensusForecastsRequest::unsafe_arena_release_paging() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest.paging)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Page* temp = _impl_.paging_;
  _impl_.paging_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Page* GetConsensusForecastsRequest::_internal_mutable_paging() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.paging_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Page>(GetArena());
    _impl_.paging_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Page*>(p);
  }
  return _impl_.paging_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Page* GetConsensusForecastsRequest::mutable_paging() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Page* _msg = _internal_mutable_paging();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest.paging)
  return _msg;
}
inline void GetConsensusForecastsRequest::set_allocated_paging(::tinkoff::public_::invest::api::contract::v1::Page* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.paging_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.paging_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Page*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsRequest.paging)
}

// -------------------------------------------------------------------

// GetConsensusForecastsResponse_ConsensusForecastsItem

// string uid = 1;
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::clear_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& GetConsensusForecastsResponse_ConsensusForecastsItem::uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.uid)
  return _internal_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetConsensusForecastsResponse_ConsensusForecastsItem::set_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.uid)
}
inline std::string* GetConsensusForecastsResponse_ConsensusForecastsItem::mutable_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.uid)
  return _s;
}
inline const std::string& GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uid_.Get();
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_set_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(value, GetArena());
}
inline std::string* GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_mutable_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.uid_.Mutable( GetArena());
}
inline std::string* GetConsensusForecastsResponse_ConsensusForecastsItem::release_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.uid)
  return _impl_.uid_.Release();
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::set_allocated_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uid_.IsDefault()) {
          _impl_.uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.uid)
}

// string asset_uid = 2;
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::clear_asset_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.asset_uid_.ClearToEmpty();
}
inline const std::string& GetConsensusForecastsResponse_ConsensusForecastsItem::asset_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.asset_uid)
  return _internal_asset_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetConsensusForecastsResponse_ConsensusForecastsItem::set_asset_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.asset_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.asset_uid)
}
inline std::string* GetConsensusForecastsResponse_ConsensusForecastsItem::mutable_asset_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_asset_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.asset_uid)
  return _s;
}
inline const std::string& GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_asset_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.asset_uid_.Get();
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_set_asset_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.asset_uid_.Set(value, GetArena());
}
inline std::string* GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_mutable_asset_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.asset_uid_.Mutable( GetArena());
}
inline std::string* GetConsensusForecastsResponse_ConsensusForecastsItem::release_asset_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.asset_uid)
  return _impl_.asset_uid_.Release();
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::set_allocated_asset_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.asset_uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.asset_uid_.IsDefault()) {
          _impl_.asset_uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.asset_uid)
}

// .google.protobuf.Timestamp created_at = 3;
inline bool GetConsensusForecastsResponse_ConsensusForecastsItem::has_created_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.created_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_created_at() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetConsensusForecastsResponse_ConsensusForecastsItem::created_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.created_at)
  return _internal_created_at();
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.created_at)
}
inline ::google::protobuf::Timestamp* GetConsensusForecastsResponse_ConsensusForecastsItem::release_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetConsensusForecastsResponse_ConsensusForecastsItem::unsafe_arena_release_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.created_at)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_mutable_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.created_at_;
}
inline ::google::protobuf::Timestamp* GetConsensusForecastsResponse_ConsensusForecastsItem::mutable_created_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.created_at)
  return _msg;
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::set_allocated_created_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.created_at)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation best_target_price = 4;
inline bool GetConsensusForecastsResponse_ConsensusForecastsItem::has_best_target_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.best_target_price_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_best_target_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.best_target_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetConsensusForecastsResponse_ConsensusForecastsItem::best_target_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.best_target_price)
  return _internal_best_target_price();
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::unsafe_arena_set_allocated_best_target_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.best_target_price_);
  }
  _impl_.best_target_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.best_target_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetConsensusForecastsResponse_ConsensusForecastsItem::release_best_target_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.best_target_price_;
  _impl_.best_target_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetConsensusForecastsResponse_ConsensusForecastsItem::unsafe_arena_release_best_target_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.best_target_price)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.best_target_price_;
  _impl_.best_target_price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_mutable_best_target_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.best_target_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.best_target_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.best_target_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetConsensusForecastsResponse_ConsensusForecastsItem::mutable_best_target_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_best_target_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.best_target_price)
  return _msg;
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::set_allocated_best_target_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.best_target_price_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.best_target_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.best_target_price)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation best_target_low = 5;
inline bool GetConsensusForecastsResponse_ConsensusForecastsItem::has_best_target_low() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.best_target_low_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_best_target_low() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.best_target_low_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetConsensusForecastsResponse_ConsensusForecastsItem::best_target_low() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.best_target_low)
  return _internal_best_target_low();
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::unsafe_arena_set_allocated_best_target_low(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.best_target_low_);
  }
  _impl_.best_target_low_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.best_target_low)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetConsensusForecastsResponse_ConsensusForecastsItem::release_best_target_low() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.best_target_low_;
  _impl_.best_target_low_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetConsensusForecastsResponse_ConsensusForecastsItem::unsafe_arena_release_best_target_low() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.best_target_low)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.best_target_low_;
  _impl_.best_target_low_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_mutable_best_target_low() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.best_target_low_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.best_target_low_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.best_target_low_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetConsensusForecastsResponse_ConsensusForecastsItem::mutable_best_target_low() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_best_target_low();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.best_target_low)
  return _msg;
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::set_allocated_best_target_low(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.best_target_low_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.best_target_low_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.best_target_low)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation best_target_high = 6;
inline bool GetConsensusForecastsResponse_ConsensusForecastsItem::has_best_target_high() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.best_target_high_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_best_target_high() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.best_target_high_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetConsensusForecastsResponse_ConsensusForecastsItem::best_target_high() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.best_target_high)
  return _internal_best_target_high();
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::unsafe_arena_set_allocated_best_target_high(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.best_target_high_);
  }
  _impl_.best_target_high_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.best_target_high)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetConsensusForecastsResponse_ConsensusForecastsItem::release_best_target_high() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.best_target_high_;
  _impl_.best_target_high_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetConsensusForecastsResponse_ConsensusForecastsItem::unsafe_arena_release_best_target_high() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.best_target_high)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.best_target_high_;
  _impl_.best_target_high_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_mutable_best_target_high() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.best_target_high_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.best_target_high_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.best_target_high_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetConsensusForecastsResponse_ConsensusForecastsItem::mutable_best_target_high() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_best_target_high();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.best_target_high)
  return _msg;
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::set_allocated_best_target_high(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.best_target_high_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.best_target_high_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.best_target_high)
}

// int32 total_buy_recommend = 7;
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::clear_total_buy_recommend() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_buy_recommend_ = 0;
}
inline ::int32_t GetConsensusForecastsResponse_ConsensusForecastsItem::total_buy_recommend() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.total_buy_recommend)
  return _internal_total_buy_recommend();
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::set_total_buy_recommend(::int32_t value) {
  _internal_set_total_buy_recommend(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.total_buy_recommend)
}
inline ::int32_t GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_total_buy_recommend() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_buy_recommend_;
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_set_total_buy_recommend(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_buy_recommend_ = value;
}

// int32 total_hold_recommend = 8;
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::clear_total_hold_recommend() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_hold_recommend_ = 0;
}
inline ::int32_t GetConsensusForecastsResponse_ConsensusForecastsItem::total_hold_recommend() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.total_hold_recommend)
  return _internal_total_hold_recommend();
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::set_total_hold_recommend(::int32_t value) {
  _internal_set_total_hold_recommend(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.total_hold_recommend)
}
inline ::int32_t GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_total_hold_recommend() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_hold_recommend_;
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_set_total_hold_recommend(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_hold_recommend_ = value;
}

// int32 total_sell_recommend = 9;
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::clear_total_sell_recommend() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_sell_recommend_ = 0;
}
inline ::int32_t GetConsensusForecastsResponse_ConsensusForecastsItem::total_sell_recommend() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.total_sell_recommend)
  return _internal_total_sell_recommend();
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::set_total_sell_recommend(::int32_t value) {
  _internal_set_total_sell_recommend(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.total_sell_recommend)
}
inline ::int32_t GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_total_sell_recommend() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_sell_recommend_;
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_set_total_sell_recommend(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_sell_recommend_ = value;
}

// string currency = 10;
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::clear_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.ClearToEmpty();
}
inline const std::string& GetConsensusForecastsResponse_ConsensusForecastsItem::currency() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.currency)
  return _internal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetConsensusForecastsResponse_ConsensusForecastsItem::set_currency(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.currency)
}
inline std::string* GetConsensusForecastsResponse_ConsensusForecastsItem::mutable_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.currency)
  return _s;
}
inline const std::string& GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_currency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.currency_.Get();
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_set_currency(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(value, GetArena());
}
inline std::string* GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_mutable_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.currency_.Mutable( GetArena());
}
inline std::string* GetConsensusForecastsResponse_ConsensusForecastsItem::release_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.currency)
  return _impl_.currency_.Release();
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::set_allocated_currency(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.currency_.IsDefault()) {
          _impl_.currency_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.currency)
}

// .tinkoff.public_.invest.api.contract.v1.Recommendation consensus = 11;
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::clear_consensus() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.consensus_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::Recommendation GetConsensusForecastsResponse_ConsensusForecastsItem::consensus() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.consensus)
  return _internal_consensus();
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::set_consensus(::tinkoff::public_::invest::api::contract::v1::Recommendation value) {
  _internal_set_consensus(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.consensus)
}
inline ::tinkoff::public_::invest::api::contract::v1::Recommendation GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_consensus() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::Recommendation>(_impl_.consensus_);
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_set_consensus(::tinkoff::public_::invest::api::contract::v1::Recommendation value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.consensus_ = value;
}

// .google.protobuf.Timestamp prognosis_date = 12;
inline bool GetConsensusForecastsResponse_ConsensusForecastsItem::has_prognosis_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.prognosis_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_prognosis_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.prognosis_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetConsensusForecastsResponse_ConsensusForecastsItem::prognosis_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.prognosis_date)
  return _internal_prognosis_date();
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::unsafe_arena_set_allocated_prognosis_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.prognosis_date_);
  }
  _impl_.prognosis_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.prognosis_date)
}
inline ::google::protobuf::Timestamp* GetConsensusForecastsResponse_ConsensusForecastsItem::release_prognosis_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* released = _impl_.prognosis_date_;
  _impl_.prognosis_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetConsensusForecastsResponse_ConsensusForecastsItem::unsafe_arena_release_prognosis_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.prognosis_date)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* temp = _impl_.prognosis_date_;
  _impl_.prognosis_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetConsensusForecastsResponse_ConsensusForecastsItem::_internal_mutable_prognosis_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.prognosis_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.prognosis_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.prognosis_date_;
}
inline ::google::protobuf::Timestamp* GetConsensusForecastsResponse_ConsensusForecastsItem::mutable_prognosis_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_prognosis_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.prognosis_date)
  return _msg;
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::set_allocated_prognosis_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.prognosis_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.prognosis_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.prognosis_date)
}

// -------------------------------------------------------------------

// GetConsensusForecastsResponse

// repeated .tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem items = 1;
inline int GetConsensusForecastsResponse::_internal_items_size() const {
  return _internal_items().size();
}
inline int GetConsensusForecastsResponse::items_size() const {
  return _internal_items_size();
}
inline void GetConsensusForecastsResponse::clear_items() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.items_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem* GetConsensusForecastsResponse::mutable_items(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem>* GetConsensusForecastsResponse::mutable_items()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.items)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_items();
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem& GetConsensusForecastsResponse::items(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.items)
  return _internal_items().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem* GetConsensusForecastsResponse::add_items() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem* _add = _internal_mutable_items()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.items)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem>& GetConsensusForecastsResponse::items() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.items)
  return _internal_items();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem>&
GetConsensusForecastsResponse::_internal_items() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.items_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem>*
GetConsensusForecastsResponse::_internal_mutable_items() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.items_;
}

// .tinkoff.public_.invest.api.contract.v1.PageResponse page = 2;
inline bool GetConsensusForecastsResponse::has_page() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.page_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::PageResponse& GetConsensusForecastsResponse::_internal_page() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::PageResponse* p = _impl_.page_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::PageResponse&>(::tinkoff::public_::invest::api::contract::v1::_PageResponse_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::PageResponse& GetConsensusForecastsResponse::page() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.page)
  return _internal_page();
}
inline void GetConsensusForecastsResponse::unsafe_arena_set_allocated_page(::tinkoff::public_::invest::api::contract::v1::PageResponse* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.page_);
  }
  _impl_.page_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::PageResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.page)
}
inline ::tinkoff::public_::invest::api::contract::v1::PageResponse* GetConsensusForecastsResponse::release_page() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::PageResponse* released = _impl_.page_;
  _impl_.page_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::PageResponse* GetConsensusForecastsResponse::unsafe_arena_release_page() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.page)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::PageResponse* temp = _impl_.page_;
  _impl_.page_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::PageResponse* GetConsensusForecastsResponse::_internal_mutable_page() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.page_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::PageResponse>(GetArena());
    _impl_.page_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::PageResponse*>(p);
  }
  return _impl_.page_;
}
inline ::tinkoff::public_::invest::api::contract::v1::PageResponse* GetConsensusForecastsResponse::mutable_page() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::PageResponse* _msg = _internal_mutable_page();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.page)
  return _msg;
}
inline void GetConsensusForecastsResponse::set_allocated_page(::tinkoff::public_::invest::api::contract::v1::PageResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.page_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.page_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::PageResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetConsensusForecastsResponse.page)
}

// -------------------------------------------------------------------

// GetForecastRequest

// string instrument_id = 1;
inline void GetForecastRequest::clear_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_id_.ClearToEmpty();
}
inline const std::string& GetForecastRequest::instrument_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetForecastRequest.instrument_id)
  return _internal_instrument_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetForecastRequest::set_instrument_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetForecastRequest.instrument_id)
}
inline std::string* GetForecastRequest::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetForecastRequest.instrument_id)
  return _s;
}
inline const std::string& GetForecastRequest::_internal_instrument_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instrument_id_.Get();
}
inline void GetForecastRequest::_internal_set_instrument_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.instrument_id_.Set(value, GetArena());
}
inline std::string* GetForecastRequest::_internal_mutable_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.instrument_id_.Mutable( GetArena());
}
inline std::string* GetForecastRequest::release_instrument_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetForecastRequest.instrument_id)
  return _impl_.instrument_id_.Release();
}
inline void GetForecastRequest::set_allocated_instrument_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instrument_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.instrument_id_.IsDefault()) {
          _impl_.instrument_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastRequest.instrument_id)
}

// -------------------------------------------------------------------

// GetForecastResponse_TargetItem

// string uid = 1;
inline void GetForecastResponse_TargetItem::clear_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& GetForecastResponse_TargetItem::uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.uid)
  return _internal_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetForecastResponse_TargetItem::set_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.uid)
}
inline std::string* GetForecastResponse_TargetItem::mutable_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.uid)
  return _s;
}
inline const std::string& GetForecastResponse_TargetItem::_internal_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uid_.Get();
}
inline void GetForecastResponse_TargetItem::_internal_set_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(value, GetArena());
}
inline std::string* GetForecastResponse_TargetItem::_internal_mutable_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.uid_.Mutable( GetArena());
}
inline std::string* GetForecastResponse_TargetItem::release_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.uid)
  return _impl_.uid_.Release();
}
inline void GetForecastResponse_TargetItem::set_allocated_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uid_.IsDefault()) {
          _impl_.uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.uid)
}

// string ticker = 2;
inline void GetForecastResponse_TargetItem::clear_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.ClearToEmpty();
}
inline const std::string& GetForecastResponse_TargetItem::ticker() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.ticker)
  return _internal_ticker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetForecastResponse_TargetItem::set_ticker(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.ticker)
}
inline std::string* GetForecastResponse_TargetItem::mutable_ticker() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ticker();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.ticker)
  return _s;
}
inline const std::string& GetForecastResponse_TargetItem::_internal_ticker() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ticker_.Get();
}
inline void GetForecastResponse_TargetItem::_internal_set_ticker(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(value, GetArena());
}
inline std::string* GetForecastResponse_TargetItem::_internal_mutable_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ticker_.Mutable( GetArena());
}
inline std::string* GetForecastResponse_TargetItem::release_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.ticker)
  return _impl_.ticker_.Release();
}
inline void GetForecastResponse_TargetItem::set_allocated_ticker(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ticker_.IsDefault()) {
          _impl_.ticker_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.ticker)
}

// string company = 3;
inline void GetForecastResponse_TargetItem::clear_company() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.company_.ClearToEmpty();
}
inline const std::string& GetForecastResponse_TargetItem::company() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.company)
  return _internal_company();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetForecastResponse_TargetItem::set_company(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.company_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.company)
}
inline std::string* GetForecastResponse_TargetItem::mutable_company() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_company();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.company)
  return _s;
}
inline const std::string& GetForecastResponse_TargetItem::_internal_company() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.company_.Get();
}
inline void GetForecastResponse_TargetItem::_internal_set_company(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.company_.Set(value, GetArena());
}
inline std::string* GetForecastResponse_TargetItem::_internal_mutable_company() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.company_.Mutable( GetArena());
}
inline std::string* GetForecastResponse_TargetItem::release_company() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.company)
  return _impl_.company_.Release();
}
inline void GetForecastResponse_TargetItem::set_allocated_company(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.company_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.company_.IsDefault()) {
          _impl_.company_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.company)
}

// .tinkoff.public_.invest.api.contract.v1.Recommendation recommendation = 4;
inline void GetForecastResponse_TargetItem::clear_recommendation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.recommendation_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::Recommendation GetForecastResponse_TargetItem::recommendation() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.recommendation)
  return _internal_recommendation();
}
inline void GetForecastResponse_TargetItem::set_recommendation(::tinkoff::public_::invest::api::contract::v1::Recommendation value) {
  _internal_set_recommendation(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.recommendation)
}
inline ::tinkoff::public_::invest::api::contract::v1::Recommendation GetForecastResponse_TargetItem::_internal_recommendation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::Recommendation>(_impl_.recommendation_);
}
inline void GetForecastResponse_TargetItem::_internal_set_recommendation(::tinkoff::public_::invest::api::contract::v1::Recommendation value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.recommendation_ = value;
}

// .google.protobuf.Timestamp recommendation_date = 5;
inline bool GetForecastResponse_TargetItem::has_recommendation_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.recommendation_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetForecastResponse_TargetItem::_internal_recommendation_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.recommendation_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetForecastResponse_TargetItem::recommendation_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.recommendation_date)
  return _internal_recommendation_date();
}
inline void GetForecastResponse_TargetItem::unsafe_arena_set_allocated_recommendation_date(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.recommendation_date_);
  }
  _impl_.recommendation_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.recommendation_date)
}
inline ::google::protobuf::Timestamp* GetForecastResponse_TargetItem::release_recommendation_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.recommendation_date_;
  _impl_.recommendation_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* GetForecastResponse_TargetItem::unsafe_arena_release_recommendation_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.recommendation_date)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.recommendation_date_;
  _impl_.recommendation_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetForecastResponse_TargetItem::_internal_mutable_recommendation_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.recommendation_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.recommendation_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.recommendation_date_;
}
inline ::google::protobuf::Timestamp* GetForecastResponse_TargetItem::mutable_recommendation_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_recommendation_date();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.recommendation_date)
  return _msg;
}
inline void GetForecastResponse_TargetItem::set_allocated_recommendation_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.recommendation_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.recommendation_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.recommendation_date)
}

// string currency = 6;
inline void GetForecastResponse_TargetItem::clear_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.ClearToEmpty();
}
inline const std::string& GetForecastResponse_TargetItem::currency() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.currency)
  return _internal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetForecastResponse_TargetItem::set_currency(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.currency)
}
inline std::string* GetForecastResponse_TargetItem::mutable_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.currency)
  return _s;
}
inline const std::string& GetForecastResponse_TargetItem::_internal_currency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.currency_.Get();
}
inline void GetForecastResponse_TargetItem::_internal_set_currency(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(value, GetArena());
}
inline std::string* GetForecastResponse_TargetItem::_internal_mutable_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.currency_.Mutable( GetArena());
}
inline std::string* GetForecastResponse_TargetItem::release_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.currency)
  return _impl_.currency_.Release();
}
inline void GetForecastResponse_TargetItem::set_allocated_currency(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.currency_.IsDefault()) {
          _impl_.currency_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.currency)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation current_price = 7;
inline bool GetForecastResponse_TargetItem::has_current_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.current_price_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_TargetItem::_internal_current_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.current_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_TargetItem::current_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.current_price)
  return _internal_current_price();
}
inline void GetForecastResponse_TargetItem::unsafe_arena_set_allocated_current_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_price_);
  }
  _impl_.current_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.current_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_TargetItem::release_current_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.current_price_;
  _impl_.current_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_TargetItem::unsafe_arena_release_current_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.current_price)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.current_price_;
  _impl_.current_price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_TargetItem::_internal_mutable_current_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.current_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.current_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.current_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_TargetItem::mutable_current_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_current_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.current_price)
  return _msg;
}
inline void GetForecastResponse_TargetItem::set_allocated_current_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_price_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.current_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.current_price)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation target_price = 8;
inline bool GetForecastResponse_TargetItem::has_target_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_price_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_TargetItem::_internal_target_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.target_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_TargetItem::target_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.target_price)
  return _internal_target_price();
}
inline void GetForecastResponse_TargetItem::unsafe_arena_set_allocated_target_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.target_price_);
  }
  _impl_.target_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.target_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_TargetItem::release_target_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.target_price_;
  _impl_.target_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_TargetItem::unsafe_arena_release_target_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.target_price)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.target_price_;
  _impl_.target_price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_TargetItem::_internal_mutable_target_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.target_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.target_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.target_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_TargetItem::mutable_target_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_target_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.target_price)
  return _msg;
}
inline void GetForecastResponse_TargetItem::set_allocated_target_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.target_price_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.target_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.target_price)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation price_change = 9;
inline bool GetForecastResponse_TargetItem::has_price_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.price_change_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_TargetItem::_internal_price_change() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.price_change_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_TargetItem::price_change() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.price_change)
  return _internal_price_change();
}
inline void GetForecastResponse_TargetItem::unsafe_arena_set_allocated_price_change(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_change_);
  }
  _impl_.price_change_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.price_change)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_TargetItem::release_price_change() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.price_change_;
  _impl_.price_change_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_TargetItem::unsafe_arena_release_price_change() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.price_change)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.price_change_;
  _impl_.price_change_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_TargetItem::_internal_mutable_price_change() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.price_change_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.price_change_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.price_change_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_TargetItem::mutable_price_change() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_price_change();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.price_change)
  return _msg;
}
inline void GetForecastResponse_TargetItem::set_allocated_price_change(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_change_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.price_change_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.price_change)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation price_change_rel = 10;
inline bool GetForecastResponse_TargetItem::has_price_change_rel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.price_change_rel_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_TargetItem::_internal_price_change_rel() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.price_change_rel_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_TargetItem::price_change_rel() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.price_change_rel)
  return _internal_price_change_rel();
}
inline void GetForecastResponse_TargetItem::unsafe_arena_set_allocated_price_change_rel(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_change_rel_);
  }
  _impl_.price_change_rel_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.price_change_rel)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_TargetItem::release_price_change_rel() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.price_change_rel_;
  _impl_.price_change_rel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_TargetItem::unsafe_arena_release_price_change_rel() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.price_change_rel)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.price_change_rel_;
  _impl_.price_change_rel_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_TargetItem::_internal_mutable_price_change_rel() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.price_change_rel_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.price_change_rel_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.price_change_rel_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_TargetItem::mutable_price_change_rel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_price_change_rel();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.price_change_rel)
  return _msg;
}
inline void GetForecastResponse_TargetItem::set_allocated_price_change_rel(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_change_rel_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.price_change_rel_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.price_change_rel)
}

// string show_name = 11;
inline void GetForecastResponse_TargetItem::clear_show_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.show_name_.ClearToEmpty();
}
inline const std::string& GetForecastResponse_TargetItem::show_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.show_name)
  return _internal_show_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetForecastResponse_TargetItem::set_show_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.show_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.show_name)
}
inline std::string* GetForecastResponse_TargetItem::mutable_show_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_show_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.show_name)
  return _s;
}
inline const std::string& GetForecastResponse_TargetItem::_internal_show_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.show_name_.Get();
}
inline void GetForecastResponse_TargetItem::_internal_set_show_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.show_name_.Set(value, GetArena());
}
inline std::string* GetForecastResponse_TargetItem::_internal_mutable_show_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.show_name_.Mutable( GetArena());
}
inline std::string* GetForecastResponse_TargetItem::release_show_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.show_name)
  return _impl_.show_name_.Release();
}
inline void GetForecastResponse_TargetItem::set_allocated_show_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.show_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.show_name_.IsDefault()) {
          _impl_.show_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem.show_name)
}

// -------------------------------------------------------------------

// GetForecastResponse_ConsensusItem

// string uid = 1;
inline void GetForecastResponse_ConsensusItem::clear_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& GetForecastResponse_ConsensusItem::uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.uid)
  return _internal_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetForecastResponse_ConsensusItem::set_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.uid)
}
inline std::string* GetForecastResponse_ConsensusItem::mutable_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.uid)
  return _s;
}
inline const std::string& GetForecastResponse_ConsensusItem::_internal_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uid_.Get();
}
inline void GetForecastResponse_ConsensusItem::_internal_set_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(value, GetArena());
}
inline std::string* GetForecastResponse_ConsensusItem::_internal_mutable_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.uid_.Mutable( GetArena());
}
inline std::string* GetForecastResponse_ConsensusItem::release_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.uid)
  return _impl_.uid_.Release();
}
inline void GetForecastResponse_ConsensusItem::set_allocated_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uid_.IsDefault()) {
          _impl_.uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.uid)
}

// string ticker = 2;
inline void GetForecastResponse_ConsensusItem::clear_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.ClearToEmpty();
}
inline const std::string& GetForecastResponse_ConsensusItem::ticker() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.ticker)
  return _internal_ticker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetForecastResponse_ConsensusItem::set_ticker(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.ticker)
}
inline std::string* GetForecastResponse_ConsensusItem::mutable_ticker() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ticker();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.ticker)
  return _s;
}
inline const std::string& GetForecastResponse_ConsensusItem::_internal_ticker() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ticker_.Get();
}
inline void GetForecastResponse_ConsensusItem::_internal_set_ticker(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ticker_.Set(value, GetArena());
}
inline std::string* GetForecastResponse_ConsensusItem::_internal_mutable_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ticker_.Mutable( GetArena());
}
inline std::string* GetForecastResponse_ConsensusItem::release_ticker() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.ticker)
  return _impl_.ticker_.Release();
}
inline void GetForecastResponse_ConsensusItem::set_allocated_ticker(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticker_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ticker_.IsDefault()) {
          _impl_.ticker_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.ticker)
}

// .tinkoff.public_.invest.api.contract.v1.Recommendation recommendation = 3;
inline void GetForecastResponse_ConsensusItem::clear_recommendation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.recommendation_ = 0;
}
inline ::tinkoff::public_::invest::api::contract::v1::Recommendation GetForecastResponse_ConsensusItem::recommendation() const {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.recommendation)
  return _internal_recommendation();
}
inline void GetForecastResponse_ConsensusItem::set_recommendation(::tinkoff::public_::invest::api::contract::v1::Recommendation value) {
  _internal_set_recommendation(value);
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.recommendation)
}
inline ::tinkoff::public_::invest::api::contract::v1::Recommendation GetForecastResponse_ConsensusItem::_internal_recommendation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::tinkoff::public_::invest::api::contract::v1::Recommendation>(_impl_.recommendation_);
}
inline void GetForecastResponse_ConsensusItem::_internal_set_recommendation(::tinkoff::public_::invest::api::contract::v1::Recommendation value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.recommendation_ = value;
}

// string currency = 4;
inline void GetForecastResponse_ConsensusItem::clear_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.ClearToEmpty();
}
inline const std::string& GetForecastResponse_ConsensusItem::currency() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.currency)
  return _internal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetForecastResponse_ConsensusItem::set_currency(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.currency)
}
inline std::string* GetForecastResponse_ConsensusItem::mutable_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.currency)
  return _s;
}
inline const std::string& GetForecastResponse_ConsensusItem::_internal_currency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.currency_.Get();
}
inline void GetForecastResponse_ConsensusItem::_internal_set_currency(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(value, GetArena());
}
inline std::string* GetForecastResponse_ConsensusItem::_internal_mutable_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.currency_.Mutable( GetArena());
}
inline std::string* GetForecastResponse_ConsensusItem::release_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.currency)
  return _impl_.currency_.Release();
}
inline void GetForecastResponse_ConsensusItem::set_allocated_currency(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.currency_.IsDefault()) {
          _impl_.currency_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.currency)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation current_price = 5;
inline bool GetForecastResponse_ConsensusItem::has_current_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.current_price_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_ConsensusItem::_internal_current_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.current_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_ConsensusItem::current_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.current_price)
  return _internal_current_price();
}
inline void GetForecastResponse_ConsensusItem::unsafe_arena_set_allocated_current_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_price_);
  }
  _impl_.current_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.current_price)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_ConsensusItem::release_current_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.current_price_;
  _impl_.current_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_ConsensusItem::unsafe_arena_release_current_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.current_price)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.current_price_;
  _impl_.current_price_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_ConsensusItem::_internal_mutable_current_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.current_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.current_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.current_price_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_ConsensusItem::mutable_current_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_current_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.current_price)
  return _msg;
}
inline void GetForecastResponse_ConsensusItem::set_allocated_current_price(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_price_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.current_price_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.current_price)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation consensus = 6;
inline bool GetForecastResponse_ConsensusItem::has_consensus() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.consensus_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_ConsensusItem::_internal_consensus() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.consensus_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_ConsensusItem::consensus() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.consensus)
  return _internal_consensus();
}
inline void GetForecastResponse_ConsensusItem::unsafe_arena_set_allocated_consensus(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.consensus_);
  }
  _impl_.consensus_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.consensus)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_ConsensusItem::release_consensus() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.consensus_;
  _impl_.consensus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_ConsensusItem::unsafe_arena_release_consensus() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.consensus)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.consensus_;
  _impl_.consensus_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_ConsensusItem::_internal_mutable_consensus() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.consensus_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.consensus_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.consensus_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_ConsensusItem::mutable_consensus() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_consensus();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.consensus)
  return _msg;
}
inline void GetForecastResponse_ConsensusItem::set_allocated_consensus(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.consensus_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.consensus_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.consensus)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation min_target = 7;
inline bool GetForecastResponse_ConsensusItem::has_min_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.min_target_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_ConsensusItem::_internal_min_target() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.min_target_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_ConsensusItem::min_target() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.min_target)
  return _internal_min_target();
}
inline void GetForecastResponse_ConsensusItem::unsafe_arena_set_allocated_min_target(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_target_);
  }
  _impl_.min_target_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.min_target)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_ConsensusItem::release_min_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.min_target_;
  _impl_.min_target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_ConsensusItem::unsafe_arena_release_min_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.min_target)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.min_target_;
  _impl_.min_target_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_ConsensusItem::_internal_mutable_min_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.min_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.min_target_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.min_target_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_ConsensusItem::mutable_min_target() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_min_target();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.min_target)
  return _msg;
}
inline void GetForecastResponse_ConsensusItem::set_allocated_min_target(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_target_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.min_target_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.min_target)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation max_target = 8;
inline bool GetForecastResponse_ConsensusItem::has_max_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.max_target_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_ConsensusItem::_internal_max_target() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.max_target_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_ConsensusItem::max_target() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.max_target)
  return _internal_max_target();
}
inline void GetForecastResponse_ConsensusItem::unsafe_arena_set_allocated_max_target(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.max_target_);
  }
  _impl_.max_target_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.max_target)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_ConsensusItem::release_max_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.max_target_;
  _impl_.max_target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_ConsensusItem::unsafe_arena_release_max_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.max_target)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.max_target_;
  _impl_.max_target_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_ConsensusItem::_internal_mutable_max_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.max_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.max_target_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.max_target_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_ConsensusItem::mutable_max_target() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_max_target();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.max_target)
  return _msg;
}
inline void GetForecastResponse_ConsensusItem::set_allocated_max_target(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.max_target_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.max_target_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.max_target)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation price_change = 9;
inline bool GetForecastResponse_ConsensusItem::has_price_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.price_change_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_ConsensusItem::_internal_price_change() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.price_change_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_ConsensusItem::price_change() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.price_change)
  return _internal_price_change();
}
inline void GetForecastResponse_ConsensusItem::unsafe_arena_set_allocated_price_change(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_change_);
  }
  _impl_.price_change_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.price_change)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_ConsensusItem::release_price_change() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.price_change_;
  _impl_.price_change_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_ConsensusItem::unsafe_arena_release_price_change() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.price_change)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.price_change_;
  _impl_.price_change_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_ConsensusItem::_internal_mutable_price_change() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.price_change_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.price_change_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.price_change_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_ConsensusItem::mutable_price_change() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_price_change();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.price_change)
  return _msg;
}
inline void GetForecastResponse_ConsensusItem::set_allocated_price_change(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_change_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.price_change_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.price_change)
}

// .tinkoff.public_.invest.api.contract.v1.Quotation price_change_rel = 10;
inline bool GetForecastResponse_ConsensusItem::has_price_change_rel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.price_change_rel_ != nullptr);
  return value;
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_ConsensusItem::_internal_price_change_rel() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::Quotation* p = _impl_.price_change_rel_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::Quotation&>(::tinkoff::public_::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::Quotation& GetForecastResponse_ConsensusItem::price_change_rel() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.price_change_rel)
  return _internal_price_change_rel();
}
inline void GetForecastResponse_ConsensusItem::unsafe_arena_set_allocated_price_change_rel(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_change_rel_);
  }
  _impl_.price_change_rel_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.price_change_rel)
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_ConsensusItem::release_price_change_rel() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* released = _impl_.price_change_rel_;
  _impl_.price_change_rel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_ConsensusItem::unsafe_arena_release_price_change_rel() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.price_change_rel)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::public_::invest::api::contract::v1::Quotation* temp = _impl_.price_change_rel_;
  _impl_.price_change_rel_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_ConsensusItem::_internal_mutable_price_change_rel() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.price_change_rel_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.price_change_rel_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.price_change_rel_;
}
inline ::tinkoff::public_::invest::api::contract::v1::Quotation* GetForecastResponse_ConsensusItem::mutable_price_change_rel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::Quotation* _msg = _internal_mutable_price_change_rel();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.price_change_rel)
  return _msg;
}
inline void GetForecastResponse_ConsensusItem::set_allocated_price_change_rel(::tinkoff::public_::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_change_rel_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.price_change_rel_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem.price_change_rel)
}

// -------------------------------------------------------------------

// GetForecastResponse

// repeated .tinkoff.public_.invest.api.contract.v1.GetForecastResponse.TargetItem targets = 1;
inline int GetForecastResponse::_internal_targets_size() const {
  return _internal_targets().size();
}
inline int GetForecastResponse::targets_size() const {
  return _internal_targets_size();
}
inline void GetForecastResponse::clear_targets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.targets_.Clear();
}
inline ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem* GetForecastResponse::mutable_targets(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.targets)
  return _internal_mutable_targets()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem>* GetForecastResponse::mutable_targets()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.targets)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_targets();
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem& GetForecastResponse::targets(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.targets)
  return _internal_targets().Get(index);
}
inline ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem* GetForecastResponse::add_targets() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem* _add = _internal_mutable_targets()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.targets)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem>& GetForecastResponse::targets() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.targets)
  return _internal_targets();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem>&
GetForecastResponse::_internal_targets() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.targets_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem>*
GetForecastResponse::_internal_mutable_targets() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.targets_;
}

// .tinkoff.public_.invest.api.contract.v1.GetForecastResponse.ConsensusItem consensus = 2;
inline bool GetForecastResponse::has_consensus() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.consensus_ != nullptr);
  return value;
}
inline void GetForecastResponse::clear_consensus() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.consensus_ != nullptr) _impl_.consensus_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem& GetForecastResponse::_internal_consensus() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem* p = _impl_.consensus_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem&>(::tinkoff::public_::invest::api::contract::v1::_GetForecastResponse_ConsensusItem_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem& GetForecastResponse::consensus() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.consensus)
  return _internal_consensus();
}
inline void GetForecastResponse::unsafe_arena_set_allocated_consensus(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.consensus_);
  }
  _impl_.consensus_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.consensus)
}
inline ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem* GetForecastResponse::release_consensus() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem* released = _impl_.consensus_;
  _impl_.consensus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem* GetForecastResponse::unsafe_arena_release_consensus() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.consensus)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem* temp = _impl_.consensus_;
  _impl_.consensus_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem* GetForecastResponse::_internal_mutable_consensus() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.consensus_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem>(GetArena());
    _impl_.consensus_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem*>(p);
  }
  return _impl_.consensus_;
}
inline ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem* GetForecastResponse::mutable_consensus() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem* _msg = _internal_mutable_consensus();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.consensus)
  return _msg;
}
inline void GetForecastResponse::set_allocated_consensus(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem*>(_impl_.consensus_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.consensus_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.GetForecastResponse.consensus)
}

// -------------------------------------------------------------------

// TradingInterval_TimeInterval

// .google.protobuf.Timestamp start_ts = 1;
inline bool TradingInterval_TimeInterval::has_start_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_ts_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TradingInterval_TimeInterval::_internal_start_ts() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.start_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TradingInterval_TimeInterval::start_ts() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval.start_ts)
  return _internal_start_ts();
}
inline void TradingInterval_TimeInterval::unsafe_arena_set_allocated_start_ts(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_ts_);
  }
  _impl_.start_ts_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval.start_ts)
}
inline ::google::protobuf::Timestamp* TradingInterval_TimeInterval::release_start_ts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.start_ts_;
  _impl_.start_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* TradingInterval_TimeInterval::unsafe_arena_release_start_ts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval.start_ts)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.start_ts_;
  _impl_.start_ts_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TradingInterval_TimeInterval::_internal_mutable_start_ts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.start_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.start_ts_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.start_ts_;
}
inline ::google::protobuf::Timestamp* TradingInterval_TimeInterval::mutable_start_ts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_start_ts();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval.start_ts)
  return _msg;
}
inline void TradingInterval_TimeInterval::set_allocated_start_ts(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_ts_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.start_ts_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval.start_ts)
}

// .google.protobuf.Timestamp end_ts = 2;
inline bool TradingInterval_TimeInterval::has_end_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_ts_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TradingInterval_TimeInterval::_internal_end_ts() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.end_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TradingInterval_TimeInterval::end_ts() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval.end_ts)
  return _internal_end_ts();
}
inline void TradingInterval_TimeInterval::unsafe_arena_set_allocated_end_ts(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_ts_);
  }
  _impl_.end_ts_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval.end_ts)
}
inline ::google::protobuf::Timestamp* TradingInterval_TimeInterval::release_end_ts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.end_ts_;
  _impl_.end_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* TradingInterval_TimeInterval::unsafe_arena_release_end_ts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval.end_ts)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.end_ts_;
  _impl_.end_ts_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TradingInterval_TimeInterval::_internal_mutable_end_ts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.end_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.end_ts_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.end_ts_;
}
inline ::google::protobuf::Timestamp* TradingInterval_TimeInterval::mutable_end_ts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_end_ts();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval.end_ts)
  return _msg;
}
inline void TradingInterval_TimeInterval::set_allocated_end_ts(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_ts_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.end_ts_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval.end_ts)
}

// -------------------------------------------------------------------

// TradingInterval

// string type = 1;
inline void TradingInterval::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& TradingInterval::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingInterval.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TradingInterval::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.public_.invest.api.contract.v1.TradingInterval.type)
}
inline std::string* TradingInterval::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradingInterval.type)
  return _s;
}
inline const std::string& TradingInterval::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void TradingInterval::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(value, GetArena());
}
inline std::string* TradingInterval::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* TradingInterval::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.TradingInterval.type)
  return _impl_.type_.Release();
}
inline void TradingInterval::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingInterval.type)
}

// .tinkoff.public_.invest.api.contract.v1.TradingInterval.TimeInterval interval = 2;
inline bool TradingInterval::has_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.interval_ != nullptr);
  return value;
}
inline void TradingInterval::clear_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.interval_ != nullptr) _impl_.interval_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval& TradingInterval::_internal_interval() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval* p = _impl_.interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval&>(::tinkoff::public_::invest::api::contract::v1::_TradingInterval_TimeInterval_default_instance_);
}
inline const ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval& TradingInterval::interval() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.public_.invest.api.contract.v1.TradingInterval.interval)
  return _internal_interval();
}
inline void TradingInterval::unsafe_arena_set_allocated_interval(::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.interval_);
  }
  _impl_.interval_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingInterval.interval)
}
inline ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval* TradingInterval::release_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval* released = _impl_.interval_;
  _impl_.interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval* TradingInterval::unsafe_arena_release_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tinkoff.public_.invest.api.contract.v1.TradingInterval.interval)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
  return temp;
}
inline ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval* TradingInterval::_internal_mutable_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval>(GetArena());
    _impl_.interval_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval*>(p);
  }
  return _impl_.interval_;
}
inline ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval* TradingInterval::mutable_interval() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval* _msg = _internal_mutable_interval();
  // @@protoc_insertion_point(field_mutable:tinkoff.public_.invest.api.contract.v1.TradingInterval.interval)
  return _msg;
}
inline void TradingInterval::set_allocated_interval(::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval*>(_impl_.interval_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.interval_ = reinterpret_cast<::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public_.invest.api.contract.v1.TradingInterval.interval)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType>() {
  return ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_AssetReportPeriodType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_AssetReportPeriodType>() {
  return ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_AssetReportPeriodType_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::public_::invest::api::contract::v1::CouponType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public_::invest::api::contract::v1::CouponType>() {
  return ::tinkoff::public_::invest::api::contract::v1::CouponType_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::public_::invest::api::contract::v1::OptionDirection> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public_::invest::api::contract::v1::OptionDirection>() {
  return ::tinkoff::public_::invest::api::contract::v1::OptionDirection_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::public_::invest::api::contract::v1::OptionPaymentType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public_::invest::api::contract::v1::OptionPaymentType>() {
  return ::tinkoff::public_::invest::api::contract::v1::OptionPaymentType_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::public_::invest::api::contract::v1::OptionStyle> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public_::invest::api::contract::v1::OptionStyle>() {
  return ::tinkoff::public_::invest::api::contract::v1::OptionStyle_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::public_::invest::api::contract::v1::OptionSettlementType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public_::invest::api::contract::v1::OptionSettlementType>() {
  return ::tinkoff::public_::invest::api::contract::v1::OptionSettlementType_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::public_::invest::api::contract::v1::InstrumentIdType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public_::invest::api::contract::v1::InstrumentIdType>() {
  return ::tinkoff::public_::invest::api::contract::v1::InstrumentIdType_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::public_::invest::api::contract::v1::InstrumentStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public_::invest::api::contract::v1::InstrumentStatus>() {
  return ::tinkoff::public_::invest::api::contract::v1::InstrumentStatus_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::public_::invest::api::contract::v1::ShareType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public_::invest::api::contract::v1::ShareType>() {
  return ::tinkoff::public_::invest::api::contract::v1::ShareType_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::public_::invest::api::contract::v1::AssetType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public_::invest::api::contract::v1::AssetType>() {
  return ::tinkoff::public_::invest::api::contract::v1::AssetType_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::public_::invest::api::contract::v1::StructuredProductType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public_::invest::api::contract::v1::StructuredProductType>() {
  return ::tinkoff::public_::invest::api::contract::v1::StructuredProductType_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::public_::invest::api::contract::v1::EditFavoritesActionType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public_::invest::api::contract::v1::EditFavoritesActionType>() {
  return ::tinkoff::public_::invest::api::contract::v1::EditFavoritesActionType_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::public_::invest::api::contract::v1::RealExchange> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public_::invest::api::contract::v1::RealExchange>() {
  return ::tinkoff::public_::invest::api::contract::v1::RealExchange_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::public_::invest::api::contract::v1::Recommendation> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public_::invest::api::contract::v1::Recommendation>() {
  return ::tinkoff::public_::invest::api::contract::v1::Recommendation_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::public_::invest::api::contract::v1::RiskLevel> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::public_::invest::api::contract::v1::RiskLevel>() {
  return ::tinkoff::public_::invest::api::contract::v1::RiskLevel_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_instruments_2eproto_2epb_2eh
